
PlaterDB = {
["captured_spells"] = {
[378850] = {
["source"] = "Destabilized Elemental",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 181536,
},
[19635] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Firewalker",
["npcID"] = 11666,
},
[44521] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Jhuudhum",
["npcID"] = 417,
},
[408495] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Elder Magma Serpent",
["npcID"] = 203846,
},
[325174] = {
["isChanneled"] = false,
["source"] = "Spirit Link Totem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 53006,
},
[199373] = {
["isChanneled"] = false,
["source"] = "Army of the Dead",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 24207,
},
[191732] = {
["isChanneled"] = false,
["source"] = "Greater Lightning Elemental",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 97022,
},
[117952] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Fire Spirit",
["npcID"] = 69791,
},
[19647] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Bruunam",
["npcID"] = 417,
},
[134477] = {
["isChanneled"] = false,
["source"] = "埃金索克",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 17252,
},
[3600] = {
["isChanneled"] = false,
["source"] = "Earthbind Totem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 2630,
},
[53271] = {
["isChanneled"] = false,
["source"] = "Henri Snufftail",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[361195] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Past Self",
["npcID"] = 185800,
},
[423734] = {
["isChanneled"] = false,
["source"] = "Doomfiend",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210910,
},
[459753] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fenryr",
["npcID"] = 228224,
},
[372862] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Primal Waterspout",
["npcID"] = 194219,
},
[355586] = {
["source"] = "Static Field Totem",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 179867,
},
[388035] = {
["isChanneled"] = false,
["source"] = "Kamuel",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[5672] = {
["isChanneled"] = false,
["source"] = "Healing Stream Totem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 3527,
},
[124009] = {
["isChanneled"] = false,
["source"] = "Xuen",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 63508,
},
[399702] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cavern Flayer",
["npcID"] = 202307,
},
[270481] = {
["isChanneled"] = false,
["source"] = "Demonic Tyrant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 135002,
},
[377900] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Blood Horde Grunt",
["npcID"] = 207582,
},
[114893] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Stone Bulwark Totem",
["npcID"] = 59712,
},
[406778] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Wild Blaze Hound",
["npcID"] = 202279,
},
[198837] = {
["isChanneled"] = false,
["source"] = "Risen Skulker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 99541,
},
[116947] = {
["source"] = "Earthgrab Totem",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 60561,
},
[381414] = {
["isChanneled"] = false,
["source"] = "Dream Projection",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 192459,
},
[407354] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Slaghide Shalewing",
["npcID"] = 202303,
},
[406908] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Embertail Rock Cobra",
["npcID"] = 202302,
},
[91800] = {
["source"] = "Pebblekeeper",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 26125,
},
[113746] = {
["source"] = "Storm Spirit",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 205353,
},
[407359] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Slaghide Shalewing",
["npcID"] = 202303,
},
[263854] = {
["isChanneled"] = false,
["source"] = "Bones",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[399777] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Slimy Whelk",
["npcID"] = 201081,
},
[192082] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Wind Rush Totem",
["npcID"] = 97285,
},
[388231] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Tuskarr Training Dummy",
["npcID"] = 196394,
},
[392375] = {
["source"] = "Spirit Wolf",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 29264,
},
[267999] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Charhound",
["npcID"] = 226269,
},
[124007] = {
["isChanneled"] = false,
["source"] = "Xuen",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 63508,
},
[17253] = {
["isChanneled"] = false,
["source"] = "Kamuel",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[263856] = {
["isChanneled"] = false,
["source"] = "Henri Snufftail",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[398553] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Deep Krolusk",
["npcID"] = 205810,
},
[375296] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sundered Flame Brawler",
["npcID"] = 205228,
},
[417303] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "The Lich King",
["npcID"] = 205305,
},
[398497] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Blistering Shalewing",
["npcID"] = 205812,
},
[395756] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Zaqali Magma Sculpter",
["npcID"] = 202276,
},
[390210] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Timestream Anomaly",
["npcID"] = 205149,
},
[117588] = {
["isChanneled"] = false,
["source"] = "Primal Fire Elemental",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 61029,
},
[132951] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Jade Serpent Statue",
["npcID"] = 60849,
},
[343737] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Yu'lon",
["npcID"] = 165374,
},
[317791] = {
["isChanneled"] = false,
["source"] = "Magus of the Dead",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 163366,
},
[386195] = {
["source"] = "Dreadstalker",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 98035,
},
[377589] = {
["source"] = "Pebblethief",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 26125,
},
[112042] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Barthang",
["npcID"] = 1860,
},
[317792] = {
["isChanneled"] = false,
["source"] = "Magus of the Dead",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 163366,
},
[400020] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Curious Niffen",
["npcID"] = 201037,
},
[398500] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Conflagrated Rock Cobra",
["npcID"] = 203328,
},
[400859] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Reconstituted Magmental",
["npcID"] = 205565,
},
[394975] = {
["isChanneled"] = false,
["source"] = "Void Lasher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 198757,
},
[417310] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Val'kyr Shadowguard",
["npcID"] = 208380,
},
[16827] = {
["isChanneled"] = false,
["source"] = "Scavenging Hullripper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[417945] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Rotting Colossus",
["npcID"] = 207812,
},
[193473] = {
["isChanneled"] = false,
["source"] = "Void Tendril",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 192337,
},
[115804] = {
["source"] = "Kamuel",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 165189,
},
[396972] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Invisible Bunny, Controller - gameobject assist [DNT]",
["npcID"] = 199568,
},
[33395] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Unknown",
["npcID"] = 208441,
},
[422090] = {
["isChanneled"] = false,
["source"] = "Treant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 54983,
},
[198839] = {
["isChanneled"] = false,
["source"] = "Earthen Wall Totem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 100943,
},
[327942] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Windfury Totem",
["npcID"] = 6112,
},
[408767] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ritualmaster Skarna",
["npcID"] = 202274,
},
[398631] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Great Glorious Alliance Musketeer",
["npcID"] = 207580,
},
[402775] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Deepstrider Alpha",
["npcID"] = 202312,
},
[398504] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sulfurous Viper",
["npcID"] = 205814,
},
[263840] = {
["isChanneled"] = false,
["source"] = "Wolf",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[406792] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Agitated Magmaclaw",
["npcID"] = 202288,
},
[152175] = {
["isChanneled"] = false,
["source"] = "Storm Spirit",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205353,
},
[30151] = {
["isChanneled"] = false,
["source"] = "埃金索克",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 17252,
},
[17735] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Barthang",
["npcID"] = 1860,
},
[50245] = {
["isChanneled"] = false,
["source"] = "Scavenging Hullripper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[290577] = {
["isChanneled"] = false,
["source"] = "Abomination",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 149555,
},
[377442] = {
["source"] = "Lively Marmoni",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 192175,
},
[195321] = {
["source"] = "Storm Spirit",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 205353,
},
[422094] = {
["isChanneled"] = false,
["source"] = "Treant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 54983,
},
[96243] = {
["source"] = "水元素",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 208441,
},
[193635] = {
["isChanneled"] = false,
["source"] = "Void Tendril",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 192337,
},
[389270] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Dragonscale Expedition Defender",
["npcID"] = 203273,
},
[54644] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Chimaera",
["npcID"] = 165189,
},
[407369] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Slaghide Shalewing",
["npcID"] = 202303,
},
[167381] = {
["isChanneled"] = false,
["source"] = "Boulderfist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 189617,
},
[160018] = {
["isChanneled"] = false,
["source"] = "Xbloody",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[404756] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sundered Flame Flamespinner",
["npcID"] = 205225,
},
[259277] = {
["source"] = "Scavenging Hullripper",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 165189,
},
[19505] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Bruunam",
["npcID"] = 417,
},
[208963] = {
["source"] = "Skyfury Totem",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 105427,
},
[404757] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sundered Flame Manaweaver",
["npcID"] = 205230,
},
[417304] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Sky-Commander Gadrius Orcbane",
["npcID"] = 207593,
},
[59710] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Vereesa Windrunner",
["npcID"] = 207816,
},
[135029] = {
["isChanneled"] = true,
["source"] = "水元素",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208441,
},
[416743] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hungering Ghoul",
["npcID"] = 206016,
},
[279362] = {
["isChanneled"] = false,
["source"] = "Kamuel",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[320763] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Mana Tide Totem",
["npcID"] = 10467,
},
[405681] = {
["isChanneled"] = false,
["source"] = "埃金索克",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 17252,
},
[1126] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Crenna Earth-Daughter",
["npcID"] = 209072,
},
[114404] = {
["source"] = "Void Tendril",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 65282,
},
[196742] = {
["source"] = "Storm Spirit",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 205353,
},
[354808] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Flawless Amethyst Baubleworm",
["npcID"] = 178216,
},
[416745] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Anub'ar Champion",
["npcID"] = 206006,
},
[228649] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[264057] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Zerikshekor",
["npcID"] = 17252,
},
[401382] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Past Self",
["npcID"] = 185800,
},
[423886] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Flame Rift",
["npcID"] = 211039,
},
[91837] = {
["source"] = "Pebblekeeper",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 26125,
},
[416874] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Fractured Causality",
["npcID"] = 205305,
},
[224125] = {
["source"] = "Spirit Wolf",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 100820,
},
[19483] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Infernal",
["npcID"] = 89,
},
[400179] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Zaqali Magma Sculpter",
["npcID"] = 202276,
},
[64695] = {
["isChanneled"] = false,
["source"] = "Earthgrab Totem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 60561,
},
[24450] = {
["isChanneled"] = false,
["source"] = "Unknown",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[396179] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cavern Magma Serpent",
["npcID"] = 204352,
},
[402787] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Zaqali Earthshaker",
["npcID"] = 203958,
},
[113656] = {
["isChanneled"] = false,
["source"] = "Storm Spirit",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205353,
},
[57984] = {
["isChanneled"] = false,
["source"] = "Primal Fire Elemental",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 61029,
},
[396859] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Awakened Shards",
["npcID"] = 205551,
},
[377543] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Dream Projection",
["npcID"] = 192459,
},
[31707] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Water Elemental",
["npcID"] = 208441,
},
[89766] = {
["isChanneled"] = false,
["source"] = "埃金索克",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 17252,
},
[166302] = {
["source"] = "Blingtron 7000",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 153897,
},
[396159] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cavern Magma Serpent",
["npcID"] = 202304,
},
[12024] = {
["source"] = "Scalesworn Guardian",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 184168,
},
[49966] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Chunder",
["npcID"] = 165189,
},
[398391] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Redolent Whelk",
["npcID"] = 200898,
},
[100784] = {
["isChanneled"] = false,
["source"] = "Storm Spirit",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205353,
},
[417899] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Risen Adventurer",
["npcID"] = 205992,
},
[282449] = {
["isChanneled"] = false,
["source"] = "Akaari's Soul",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 144961,
},
[398392] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sulfira Wanderling",
["npcID"] = 205808,
},
[167385] = {
["isChanneled"] = false,
["source"] = "Boulderfist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 189617,
},
[373279] = {
["isChanneled"] = false,
["source"] = "Thing From Beyond",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 189988,
},
[462844] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Stone Bulwark Totem",
["npcID"] = 59712,
},
[192226] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Liquid Magma Totem",
["npcID"] = 97369,
},
[196816] = {
["source"] = "Divine Image",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 198236,
},
[89751] = {
["isChanneled"] = false,
["source"] = "埃金索克",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 17252,
},
[91807] = {
["source"] = "Pebblekeeper",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 26125,
},
[398394] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Deep Krolusk",
["npcID"] = 205810,
},
[24394] = {
["source"] = "Kamuel",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 165189,
},
[100780] = {
["isChanneled"] = false,
["source"] = "Storm Spirit",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205353,
},
[108446] = {
["isChanneled"] = false,
["source"] = "Khiidom",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 417,
},
[355619] = {
["isChanneled"] = false,
["source"] = "Static Field Totem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 179867,
},
[406874] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Acidhide Krolusk",
["npcID"] = 202269,
},
[224126] = {
["source"] = "Spirit Wolf",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 100820,
},
[26262] = {
["isChanneled"] = false,
["source"] = "Void Tendril",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 65282,
},
[406556] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cavern Flayer Matriarch",
["npcID"] = 202309,
},
[396675] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sundered Flame Cleaver",
["npcID"] = 205226,
},
[267964] = {
["isChanneled"] = false,
["source"] = "埃金索克",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 17252,
},
[402798] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Glittering Shard Construct",
["npcID"] = 202326,
},
[398397] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Clacking Magmaclaw",
["npcID"] = 205809,
},
[372557] = {
["source"] = "Darktooth Howler",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 195273,
},
[224127] = {
["source"] = "Spirit Wolf",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 212489,
},
[2649] = {
["isChanneled"] = false,
["source"] = "Kamuel",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[388963] = {
["source"] = "Matriarch Remalla",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 193246,
},
[1459] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Meredy Huntswell",
["npcID"] = 209059,
},
[54216] = {
["isChanneled"] = false,
["source"] = "Henri Snufftail",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[404266] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Lieutenant Narlena",
["npcID"] = 202244,
},
[134847] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Blingtron 4000",
["npcID"] = 43929,
},
[334713] = {
["isChanneled"] = false,
["source"] = "Dreadstalker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 98035,
},
[205708] = {
["source"] = "Pebblekeeper",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 26125,
},
[418226] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Vorus'arak",
["npcID"] = 205862,
},
[118345] = {
["isChanneled"] = false,
["source"] = "Primal Earth Elemental",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 61056,
},
[116847] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fire Spirit",
["npcID"] = 69791,
},
[188046] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Denizen of the Dream",
["npcID"] = 198489,
},
[198533] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Jade Serpent Statue",
["npcID"] = 60849,
},
[138130] = {
["isChanneled"] = false,
["source"] = "Storm Spirit",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205353,
},
[118297] = {
["isChanneled"] = false,
["source"] = "Primal Fire Elemental",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 61029,
},
[89753] = {
["isChanneled"] = false,
["source"] = "埃金索克",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 17252,
},
[392983] = {
["isChanneled"] = false,
["source"] = "Storm Spirit",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205353,
},
[417272] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "The Lich King",
["npcID"] = 205305,
},
[389541] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "White Tiger Statue",
["npcID"] = 196581,
},
[171982] = {
["source"] = "Unknown",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 417,
},
[107428] = {
["isChanneled"] = false,
["source"] = "Storm Spirit",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205353,
},
[417338] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "The Lich King",
["npcID"] = 205305,
},
[417337] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sky-Commander Gadrius Orcbane",
["npcID"] = 207593,
},
[412046] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Monstrous Magmaclaw Snapper",
["npcID"] = 204214,
},
[416766] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Matthias Lehner",
["npcID"] = 208157,
},
[201754] = {
["isChanneled"] = false,
["source"] = "Raptor",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[62305] = {
["isChanneled"] = false,
["source"] = "Henri Snufftail",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[263892] = {
["isChanneled"] = false,
["source"] = "Cat",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[7870] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Angwen",
["npcID"] = 1863,
},
[428453] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Charhound",
["npcID"] = 226269,
},
[267997] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Charhound",
["npcID"] = 226269,
},
[176458] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Blacksmithing Follower - Alliance",
["npcID"] = 88403,
},
[3110] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Guzrik",
["npcID"] = 416,
},
[407331] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Agitated Dustmoth",
["npcID"] = 202316,
},
[360969] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ottuk",
["npcID"] = 165189,
},
[90328] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ban'thalos",
["npcID"] = 165189,
},
[408798] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Volcanic Totem",
["npcID"] = 204548,
},
[407332] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Agitated Dustmoth",
["npcID"] = 202316,
},
[54049] = {
["isChanneled"] = false,
["source"] = "Khiidom",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 417,
},
[383866] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Incarnated Wick",
["npcID"] = 205407,
},
[378454] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Primal Stonekin",
["npcID"] = 194291,
},
[434589] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Overfiend",
["npcID"] = 217429,
},
[63619] = {
["isChanneled"] = false,
["source"] = "Shadowfiend",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 19668,
},
[416744] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Anub'ar Champion",
["npcID"] = 206006,
},
[61684] = {
["isChanneled"] = false,
["source"] = "Kamuel",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[104318] = {
["isChanneled"] = false,
["source"] = "Wild Imp",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 55659,
},
[205231] = {
["isChanneled"] = false,
["source"] = "Darkglare",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 103673,
},
[55078] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Rune Weapon",
["npcID"] = 27893,
},
[36213] = {
["isChanneled"] = false,
["source"] = "Primal Earth Elemental",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 61056,
},
[391780] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Armoire of Endless Cloaks",
["npcID"] = 197811,
},
[415304] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Great Glorious Alliance Paladin",
["npcID"] = 207579,
},
[385023] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Amphibious Siltcrawler",
["npcID"] = 189050,
},
[118905] = {
["isChanneled"] = false,
["source"] = "Capacitor Totem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 61245,
},
[32727] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Unknown",
["npcID"] = 165189,
},
[396180] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cavern Magma Serpent",
["npcID"] = 204352,
},
[400177] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Zaqali Magma Sculpter",
["npcID"] = 202276,
},
[199845] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Psyfiend",
["npcID"] = 101398,
},
[422382] = {
["isChanneled"] = false,
["source"] = "Treant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 54983,
},
[89798] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Lord Victor Nefarius",
["npcID"] = 49799,
},
[383061] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Liquid Magma Totem",
["npcID"] = 97369,
},
[260249] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Unknown",
["npcID"] = 165189,
},
[402748] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Molten Crusher",
["npcID"] = 205566,
},
[30213] = {
["isChanneled"] = false,
["source"] = "埃金索克",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 17252,
},
[417411] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "The Lich King",
["npcID"] = 205305,
},
[415373] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Great Glorious Alliance Footman",
["npcID"] = 207578,
},
[375719] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Great Glorious Alliance Footman",
["npcID"] = 207578,
},
[317898] = {
["source"] = "Kamuel",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 165189,
},
[264667] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Chunder",
["npcID"] = 165189,
},
[404216] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Lieutenant Narlena",
["npcID"] = 202244,
},
[160067] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Spider",
["npcID"] = 165189,
},
[415309] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Great Glorious Alliance Paladin",
["npcID"] = 207579,
},
[378143] = {
["isChanneled"] = false,
["source"] = "Primalist Infiltrator",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 191844,
},
[1604] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Prisoner of War",
["npcID"] = 207587,
},
[386176] = {
["source"] = "Unknown",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 17252,
},
[81262] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Efflorescence",
["npcID"] = 47649,
},
[406977] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "High Interrogator Kilandrelle",
["npcID"] = 207594,
},
[418016] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Hand of the Lich King",
["npcID"] = 207386,
},
[201633] = {
["source"] = "Earthen Wall Totem",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 100943,
},
[127801] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Turnip Punching Bag",
["npcID"] = 65310,
},
[91797] = {
["source"] = "Pebblekeeper",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 26125,
},
[3716] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Barthang",
["npcID"] = 1860,
},
[58867] = {
["isChanneled"] = false,
["source"] = "Spirit Wolf",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212489,
},
[378420] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Primal Stonekin",
["npcID"] = 194291,
},
[394976] = {
["isChanneled"] = false,
["source"] = "Void Lasher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 198757,
},
[404220] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Lieutenant Narlena",
["npcID"] = 202244,
},
[402766] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sundered Flame Sentinel",
["npcID"] = 203616,
},
[399701] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cavern Flayer",
["npcID"] = 202307,
},
[400842] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ritualmaster Skarna",
["npcID"] = 202274,
},
[424949] = {
["isChanneled"] = false,
["source"] = "Magus of the Dead",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 163366,
},
[58729] = {
["source"] = "Taunka Spirit Guide",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 31841,
},
[407357] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Slaghide Shalewing",
["npcID"] = 202303,
},
[321538] = {
["source"] = "Psyfiend",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 165189,
},
[417227] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Blood Horde Reaver",
["npcID"] = 207585,
},
[402769] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sundered Flame Sentinel",
["npcID"] = 202260,
},
[59638] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Mirror Image",
["npcID"] = 31216,
},
},
["profileKeys"] = {
["Holÿ - Lightning's Blade"] = "Default",
["Cocoonjkdead - Aerie Peak"] = "Default",
["Mysticbankk - Sargeras"] = "Default",
["Justinjames - Sentinels"] = "Default",
["Moosticall - Sentinels"] = "df-profile-main2",
["Mysticbankk - Tichondrius"] = "Default",
["Mwreroll - Sargeras"] = "df-profile-main2",
["Mstcll - Aerie Peak"] = "Default",
["Onlyplaymage - Sargeras"] = "Default",
["Mysticbankk - Echo Isles"] = "Default",
["Mstcll - Blackhand"] = "Default",
["Mstcll - Sentinels"] = "Default",
["Réðçräñé - Sargeras"] = "df-profile-main2",
["Representing - Area 52"] = "Default",
["Badplat - Sargeras"] = "df-profile-main2",
["Soullstëaler - Sentinels"] = "Default",
["Mysticbankk - Garrosh"] = "Default",
["Mysticbankk - Sentinels"] = "Default",
["Vivifying - Sentinels"] = "Default",
["Iamdeadinsid - Sentinels"] = "Default",
["Harambad - Sargeras"] = "df-profile-main2",
["Healjkoom - Sargeras"] = "mysticall-main-profile",
["Flowerlotus - Sentinels"] = "Default",
["Sevenseconds - Area 52"] = "Default",
["Mw - Tichondrius"] = "df-profile-main2",
["Mediumvibes - Sentinels"] = "Default",
["Lifedestroys - Tichondrius"] = "Default",
["Onlyplaydru - Blackwater Raiders"] = "Default",
["Thunderbadx - Sargeras"] = "df-profile-main2",
["Stylle - Sentinels"] = "Default",
["Hydraxises - Lightning's Blade"] = "Default",
["Mysticallx - Sargeras"] = "df-profile-main2",
["Vezimmarr - Aerie Peak"] = "Default",
["Hydraxicle - Lightning's Blade"] = "Default",
["Hydraxis - Lightning's Blade"] = "Default",
["Onlyplaydh - Sargeras"] = "Default",
["Gréëñðrägoñ - Sargeras"] = "mysticall-main-profile",
["Representing - Sargeras"] = "df-profile-main2",
["Mysticbollt - Garrosh"] = "Default",
["Yungmyst - Sentinels"] = "Default",
["Mstcll - Area 52"] = "Default",
["Mysticbankk - Area 52"] = "Default",
["Sevenseconds - Sargeras"] = "mysticall-main-profile",
["Anonymage - Blackhand"] = "Default",
["Soullkeeper - Tichondrius"] = "mysticall-main-profile",
["Nerfmw - Sargeras"] = "df-profile-main2",
["Kickthesun - Sargeras"] = "Default",
["Thunderbad - Sentinels"] = "df-profile-main2",
["Darkapostle - Tichondrius"] = "Default",
["Coocoocachu - Sargeras"] = "Default",
["Jayjay - Detheroc"] = "df-profile-main2",
["Mwreroll - Sentinels"] = "Default",
["Mysticall - Moon Guard"] = "Default",
["Gréëñðrägøñ - Sargeras"] = "Default",
["Cincinatizoo - Sargeras"] = "df-profile-main2",
["Ggs - Detheroc"] = "df-profile-main2",
["Mysticall - Borean Tundra"] = "Default",
["Mysticallx - Tichondrius"] = "Default",
["Lotusflowers - Sargeras"] = "Default",
["Zft - Sentinels"] = "Default",
["Enveloping - Sentinels"] = "mysticall-main-profile",
},
["profiles"] = {
["mysticall-main-profile"] = {
["target_shady_combat_only"] = false,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 632,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura - Buff Alert [Plater]",
["SpellIds"] = {
398151,
377738,
378149,
},
["Desc"] = "Add the buff name in the trigger box.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.40392156862745,
0.003921568627451,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
0.32156862745098,
0,
1,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Time"] = 1611844883,
["url"] = "",
["Icon"] = 135945,
["Enabled"] = false,
["Revision"] = 186,
["semver"] = "",
["Author"] = "Symantec-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["NpcNames"] = {
"174773",
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "M+ Spiteful",
["SpellIds"] = {
},
["Desc"] = "Time to die Spiteful affix",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Time to Die",
["Value"] = "Time to Die",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 50,
["Desc"] = "",
["Min"] = 10,
["Fraction"] = false,
["Value"] = 27,
["Name"] = "Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "bgWidth",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0.50588235294118,
0.070588235294118,
1,
1,
},
["Key"] = "bgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "",
["Min"] = 7,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textSize",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Targeting",
["Value"] = "Targeting",
["Key"] = "option11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Target instead of Name",
["Value"] = true,
["Key"] = "switchTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Color if targeting You",
["Value"] = true,
["Key"] = "useTargetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Color if targeting You",
["Value"] = {
0.070588235294118,
0.61960784313725,
0,
1,
},
["Key"] = "targetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 11",
["Value"] = 0,
["Key"] = "option11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1673994690,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = false,
["Revision"] = 828,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Very Important [Plater]",
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
183263,
3636,
376171,
350687,
372735,
373017,
392488,
257732,
256060,
257899,
384633,
374339,
395694,
391634,
372701,
369328,
265487,
413044,
183526,
88194,
87762,
413385,
411001,
378282,
384161,
259572,
255371,
427460,
429172,
426500,
413607,
412922,
417481,
201399,
411994,
415770,
260907,
260703,
260741,
265876,
263959,
266225,
253517,
377488,
},
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.56470588235294,
0.56470588235294,
0.56470588235294,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.41176470588235,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1670201853,
["url"] = "",
["Icon"] = 2175503,
["Enabled"] = false,
["Revision"] = 533,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Explosion Affix M+ [Plater]",
["SpellIds"] = {
240446,
385339,
198077,
210261,
360857,
389446,
},
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.6156862745098,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Name"] = "Option 18",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Nameplate Color",
["Value"] = "Nameplate Color",
["Key"] = "option17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.1843137294054,
0,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 368,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura - Debuff Alert [Plater]",
["Desc"] = "Add the debuff name in the trigger box.",
["SpellIds"] = {
},
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.40392156862745,
0.003921568627451,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
0.32156862745098,
0,
1,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670790652,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = false,
["Revision"] = 694,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Ultra Important [P]",
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
209410,
211464,
361180,
156718,
395859,
358320,
374045,
386757,
367500,
370225,
376200,
372107,
388923,
376934,
384899,
373960,
374724,
385551,
259732,
373424,
373084,
87618,
255041,
428926,
76634,
200050,
197546,
198079,
199193,
266181,
253544,
},
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a special animation showing the explosion time.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Health Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = true,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.6156862745098,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 7,
["Name"] = "Color List by SpellId",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Key"] = "castColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203603,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1194,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Big Alert [Plater]",
["SpellIds"] = {
396640,
372743,
377389,
396812,
388392,
387955,
386546,
377503,
384808,
386024,
387615,
387606,
225100,
211401,
211470,
215433,
192563,
198959,
152818,
156776,
398206,
153524,
396073,
396018,
345202,
377950,
372223,
384194,
392451,
392924,
397889,
209413,
207980,
257397,
257736,
382787,
374699,
377402,
369602,
369465,
369400,
381593,
265091,
265433,
382791,
376780,
225573,
278444,
164887,
168082,
76813,
227913,
265368,
},
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.43137254901961,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1669325410,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["Enabled"] = true,
["Revision"] = 662,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Small Alert [Plater]",
["SpellIds"] = {
376851,
396044,
381517,
373932,
397801,
208165,
392576,
198750,
387843,
387411,
211299,
198595,
198934,
198962,
156722,
281420,
274383,
259092,
367521,
374544,
385039,
382474,
369823,
377500,
260879,
186269,
378818,
371875,
372225,
200658,
266036,
265407,
164965,
429176,
428526,
418200,
407124,
415437,
264050,
267824,
},
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a small animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.6,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Time"] = 1604696441,
["url"] = "",
["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
["Enabled"] = false,
["Revision"] = 63,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Auto Set Skull",
["SpellIds"] = {
},
["Desc"] = "Auto set skull marker",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Only in Combat",
["Value"] = false,
["Key"] = "onlyInCombat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1634089535,
["NpcNames"] = {
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Key"] = "option17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Blink Enabled",
["Value"] = true,
["Key"] = "blinkEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = true,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Name"] = "Change NamePlate Color",
["Value"] = false,
["Key"] = "changeNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 3,
["Name"] = "Timeleft to Blink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeleftToBlink",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Blink Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "blinkSpeed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.6,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "blinkMaxAlpha",
},
{
["Type"] = 1,
["Name"] = "Blink Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "blinkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.28627450980392,
0.003921568627451,
0,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Timer Color Enabled",
["Value"] = true,
["Key"] = "timerColorEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 8,
["Name"] = "Time Left Warning",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeLeftWarning",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 3,
["Name"] = "Time Left Critical",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeLeftCritical",
},
{
["Type"] = 1,
["Name"] = "Warning Color",
["Value"] = {
1,
0.87058823529412,
0,
1,
},
["Key"] = "warningColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Name"] = "Critical Color",
["Value"] = {
1,
0.074509803921569,
0,
1,
},
["Key"] = "criticalColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["Revision"] = 376,
["semver"] = "",
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["version"] = -1,
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["Name"] = "Aura - Blink by Time Left [Plater]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Prio"] = 99,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = true,
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604354364,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["Enabled"] = false,
["Revision"] = 206,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Countdown",
["SpellIds"] = {
},
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1670202265,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 620,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Frontal Cone [Plater]",
["SpellIds"] = {
375943,
385958,
388623,
377034,
374361,
381525,
386660,
385578,
384699,
153501,
153686,
154442,
192018,
219488,
372087,
391726,
391723,
377383,
388976,
370764,
387067,
391118,
391136,
382233,
209027,
212031,
207261,
207979,
198888,
199805,
199050,
191508,
152792,
153395,
209495,
257426,
255952,
257870,
413147,
383107,
377559,
388060,
376170,
384524,
375351,
390111,
369791,
369573,
369563,
369335,
369061,
375727,
265016,
265019,
260793,
260292,
272457,
272609,
269843,
183465,
226296,
188169,
183088,
410873,
411012,
88308,
382708,
375251,
375439,
372311,
373742,
372201,
374533,
377204,
201226,
204667,
198379,
200768,
253239,
250258,
255567,
194956,
427510,
426645,
412505,
412129,
419351,
401482,
404916,
200345,
200261,
198641,
265372,
271174,
264694,
264923,
},
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animSpeed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Time"] = 1622197554,
["NpcNames"] = {
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["Icon"] = 1029718,
["Options"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["Revision"] = 270,
["semver"] = "",
["Desc"] = "Show above the nameplate who is the player fixated",
["version"] = -1,
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Name"] = "Fixate [Plater]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Prio"] = 99,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Enabled"] = false,
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1604357453,
["url"] = "",
["Icon"] = 136048,
["Enabled"] = false,
["Revision"] = 233,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Unit - Show Energy [Plater]",
["SpellIds"] = {
},
["Desc"] = "Show the energy amount above the nameplate.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "script desc",
["Value"] = "Show the power of the unit above the nameplate.",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "add trigger",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show at 80% of Energy",
["Value"] = true,
["Key"] = "showLater",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Fraction"] = false,
["Value"] = 16,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fontSize",
},
{
["Type"] = 1,
["Name"] = "Font Color",
["Value"] = {
0.80392156862745,
0.80392156862745,
0.80392156862745,
1,
},
["Key"] = "fontColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Name"] = "Enable Text Outline",
["Value"] = true,
["Key"] = "outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1622197554,
["url"] = "",
["Icon"] = 841383,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["Revision"] = 267,
["semver"] = "",
["NpcNames"] = {
},
["Options"] = {
},
["Author"] = "Tecno-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Fixate On You [Plater]",
["Prio"] = 99,
["Temp_ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["Enabled"] = false,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203758,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1213,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Alert + Timer [P]",
["SpellIds"] = {
},
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Cast start animation settings",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.43137254901961,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 7,
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Value"] = {
},
["Key"] = "timerList",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["Time"] = 1669339628,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["Enabled"] = true,
["Revision"] = 878,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Important Target [P]",
["SpellIds"] = {
},
["Desc"] = "Highlight the target name",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Shows the target name in a separate box",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.56470588235294,
0.56470588235294,
0.56470588235294,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.41176470588235,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Name"] = "Option 27",
["Value"] = 0,
["Key"] = "option27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 28",
["Value"] = "Target Options",
["Key"] = "option28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Fraction"] = false,
["Value"] = 14,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetNameSize",
},
{
["Type"] = 4,
["Name"] = "Use Class Color",
["Value"] = true,
["Key"] = "colorByClass",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0,
0,
0,
0.98467203229666,
},
["Key"] = "targetBgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "targetBgBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Fraction"] = false,
["Value"] = 90,
["Name"] = "Frame Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetFrameWidth",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Fraction"] = false,
["Value"] = 20,
["Name"] = "Frame Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetFrameHeight",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1669327146,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 65,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura is Shield [P]",
["SpellIds"] = {
},
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1668886509,
["url"] = "",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
["Enabled"] = true,
["Revision"] = 33,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Fixate by Unit Buff [P]",
["SpellIds"] = {
426662,
426663,
},
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["Options"] = {
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0,
0.55686274509804,
0.035294117647059,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514190,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 547,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Glowing [P]",
["SpellIds"] = {
376644,
373017,
386781,
384823,
372735,
385536,
392398,
375596,
387135,
360850,
212784,
199033,
199034,
200969,
394512,
397881,
396020,
374430,
384353,
265376,
193941,
411002,
169445,
},
["Desc"] = "Show a different animation for the cast bar.",
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 7,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.95686274509804,
1,
0.98823529411765,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.85882352941176,
0.43137254901961,
1,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Name"] = "Cast Color by SpellID",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Key"] = "castColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1671066705,
["url"] = "",
["Icon"] = 134229,
["Enabled"] = true,
["Revision"] = 37,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Effect After Cast [P]",
["SpellIds"] = {
191284,
},
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1670428019,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Circle AoE [P]",
["SpellIds"] = {
385916,
386063,
388822,
373087,
397785,
106864,
193660,
198263,
387910,
370766,
375591,
384336,
209404,
209378,
210875,
396001,
397899,
386559,
382555,
258672,
258777,
257756,
257784,
256405,
256589,
393793,
388046,
375079,
390290,
369811,
369703,
226287,
410999,
372561,
256882,
172578,
412063,
},
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.15,
["Name"] = "Rotation Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "rotationDuration",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.3,
["Name"] = "Animation Start Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animStartDuration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Texture Start Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureStartAlpha",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Texture Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureScale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureAlpha",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        [186227] = {20}, --Monstrous Decay\n        [184020] = {40}, -- Hulking Berserker\n        [91005] = {20}, --Naraxas\n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1683596223,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 146,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["NpcNames"] = {
"197697",
"59544",
"186227",
"184020",
"91005",
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Add - Health Markers [P]",
["SpellIds"] = {
},
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.79,
["Name"] = "Vertical Line Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "indicatorAlpha",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Fill Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670423785,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 572,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
["NpcNames"] = {
"196548",
"195580",
"195820",
"195821",
"189886",
"75966",
"102019",
"187159",
"194897",
"104251",
"101326",
"189669",
"192464",
190381,
92538,
192464,
131009,
127315,
133361,
136330,
214117,
212483,
101008,
194745,
190426,
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Add - Important [P]",
["SpellIds"] = {
},
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = true,
["Key"] = "changeNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0,
0.52549019607843,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Nameplate Size Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "nameplateSizeOffset",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.71372550725937,
0,
0.56313106417656,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Extra Texture",
["Value"] = "Extra Texture",
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Name"] = "Show Extra Texture",
["Value"] = false,
["Key"] = "showExtraTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
0.46274509803922,
0,
1,
},
["Key"] = "skullColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "skullAlpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Fraction"] = true,
["Value"] = 0.6,
["Name"] = "Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "skullScale",
},
{
["Type"] = 7,
["Name"] = "Npc Color By NpcID",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = false,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
["NpcNames"] = {
"195138",
"192955",
"190294",
"76518",
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Add - Tag Number [P]",
["SpellIds"] = {
},
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669324381,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = true,
["Revision"] = 887,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Quick Flash [P]",
["SpellIds"] = {
392640,
397888,
209033,
385029,
374563,
377341,
369675,
369365,
369411,
278961,
202108,
88186,
200630,
255824,
252781,
250096,
200248,
197797,
264520,
418202,
201839,
412012,
411958,
},
["Desc"] = "Play a very fast flash when the cast start",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.43137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Fraction"] = false,
["Value"] = 25,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 30,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["Time"] = 1670427654,
["url"] = "",
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
"190187",
"189893",
"99922",
"104822",
129758,
186696,
101075,
100818,
98081,
52019,
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Add - Warning [P]",
["SpellIds"] = {
},
["Desc"] = "Change the color of  add",
["Options"] = {
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = true,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.43921571969986,
0.4588235616684,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Flash Nameplate",
["Value"] = true,
["Key"] = "useFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Name"] = "NpcID to Color",
["Value"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Time"] = 1670427838,
["url"] = "",
["Icon"] = "interface/addons/plater/media/duck_64",
["Enabled"] = true,
["Revision"] = 111,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["NpcNames"] = {
"194622",
"190205",
"197398",
"77006",
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Add - Non Elite Trash [P]",
["SpellIds"] = {
},
["Desc"] = "",
["Options"] = {
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.094117656350136,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Scale",
["Value"] = true,
["Key"] = "useNameplateScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Nameplate Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "scale",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669325411,
["url"] = "",
["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
["Enabled"] = true,
["Revision"] = 101,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Shield Interrupt [P]",
["SpellIds"] = {
373688,
391050,
},
["Desc"] = "When the caster has a shield and only when the shield is removed the cast can be interrupted",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514185,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 506,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Stop Casting [P]",
["SpellIds"] = {
377004,
381516,
196543,
199726,
200291,
268202,
},
["Desc"] = "Just stop casting",
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.95686274509804,
1,
0.98823529411765,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.85882352941176,
0.43137254901961,
1,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669340350,
["url"] = "",
["Icon"] = "interface/addons/plater/media/radio_64",
["Enabled"] = true,
["Revision"] = 106,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["NpcNames"] = {
"194895",
"105703",
"59598",
"58319",
200388,
189299,
131402,
135052,
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Add - Explode on Die [P]",
["SpellIds"] = {
},
["Desc"] = "",
["Options"] = {
{
["Type"] = 4,
["Name"] = "Reverse Health Bar",
["Value"] = false,
["Key"] = "useReverse",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 6",
["Value"] = 0,
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Enable Shake",
["Value"] = false,
["Key"] = "useShake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 70,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Red Background",
["Value"] = true,
["Key"] = "useBackground",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1673726734,
["url"] = "",
["Icon"] = 236209,
["Enabled"] = true,
["Revision"] = 18,
["semver"] = "",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura While Casting [P]",
["SpellIds"] = {
372743,
372749,
384933,
},
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1676905232,
["url"] = "",
["Icon"] = 4038101,
["Enabled"] = true,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - On Going Cast [P]",
["SpellIds"] = {
388886,
209676,
377912,
},
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.41662168502808,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Dots X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Dots Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Fraction"] = true,
["Value"] = 0.4,
["Name"] = "Blink Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Blink Min Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "minAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "maxAlpha",
},
{
["Type"] = 1,
["Name"] = "Blink Color",
["Value"] = {
1,
0.019607843831182,
0,
1,
},
["Key"] = "blinkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
},
},
["aura_timer_text_color"] = {
nil,
0.93333333333333,
0,
},
["saved_cvars_last_change"] = {
["nameplateShowOnlyNames"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:5924: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:5922>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:811: in function <Interface/AddOns/Details/Libs/DF/slider.lua:762>\n",
["nameplateOverlapV"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["nameplateLargeTopInset"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["nameplateShowEnemyMinus"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["NamePlateClassificationScale"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Blizzard_SettingsDefinitions_Frame/Mainline/InterfaceOverrides.lua\"]:16: in function <...ngsDefinitions_Frame/Mainline/InterfaceOverrides.lua:12>\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua\"]:262: in function `SetValueInternal'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua\"]:67: in function `SetValue'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_SettingControls.lua\"]:383: in function <...lizzard_Settings_Shared/Blizzard_SettingControls.lua:379>\n[string \"=[C]\"]: ?\n[string \"@Interface/AddOns/Blizzard_SharedXML/CallbackRegistry.lua\"]:178: in function <...rface/AddOns/Blizzard_SharedXML/CallbackRegistry.lua:177>\n[string \"=[C]\"]: ?\n[string \"@Interface/AddOns/Blizzard_SharedXML/CallbackRegistry.lua\"]:181: in function `TriggerEvent'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_SettingControls.lua\"]:332: in function <...lizzard_Settings_Shared/Blizzard_SettingControls.lua:331>\n",
["nameplateShowFriendlyTotems"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["nameplatePersonalHideDelaySeconds"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["nameplateShowFriendlyPets"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"return function() \"]:5: in function <[string \"return function() \"]:1>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/WeakAuras/GenericTrigger.lua\"]:729: in function <Interface/AddOns/WeakAuras/GenericTrigger.lua:638>\n[string \"@Interface/AddOns/WeakAuras/GenericTrigger.lua\"]:1014: in function `CreateFakeStates'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:4388: in function `UpdateFakeStatesFor'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:4364: in function `FakeStatesFor'\n[string \"@Interface/AddOns/WeakAurasOptions/AceGUI-Widgets/AceGUIWidget-WeakAurasDisplayButton.lua\"]:1534: in function `SyncVisibility'\n[string \"@Interface/AddOns/WeakAurasOptions/WeakAurasOptions.lua\"]:862: in function `ShowOptions'\n[string \"@Interface/AddOns/WeakAurasOptions/WeakAurasOptions.lua\"]:607: in function `ToggleOptions'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:155: in function `OpenOptions'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:237: in function `?'\n[string \"@Interface/FrameXML/ChatFrame.lua\"]:5291: in function `ChatEdit_ParseText'\n[string \"@Interface/FrameXML/ChatFrame.lua\"]:4948: in function `ChatEdit_SendText'\n[string \"@Interface/FrameXML/ChatFrame.lua\"]:4984: in function `ChatEdit_OnEnterPressed'\n[string \"*ChatFrame.xml:141_OnEnterPressed\"]:1: in function <[string \"*ChatFrame.xml:141_OnEnterPressed\"]:1>\n",
["nameplateOverlapH"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["nameplateTargetRadialPosition"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["nameplateMinAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4140: in function `ForceCVars'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4138: in function <Interface/AddOns/Plater/Plater.lua:4138>\n",
["nameplateResourceOnTarget"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:5964: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:5958>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:811: in function <Interface/AddOns/Details/Libs/DF/slider.lua:762>\n",
["nameplateShowAll"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:5978: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:5976>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:811: in function <Interface/AddOns/Details/Libs/DF/slider.lua:762>\n",
["nameplateMaxDistance"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"return function() \"]:2: in function <[string \"return function() \"]:1>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/WeakAuras/GenericTrigger.lua\"]:729: in function <Interface/AddOns/WeakAuras/GenericTrigger.lua:638>\n[string \"@Interface/AddOns/WeakAuras/GenericTrigger.lua\"]:1014: in function `CreateFakeStates'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:4388: in function `UpdateFakeStatesFor'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:4364: in function `FakeStatesFor'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:3148: in function <Interface/AddOns/WeakAuras/WeakAuras.lua:3003>\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:3167: in function `Add'\n[string \"@Interface/AddOns/WeakAurasOptions/OptionsFrames/Update.lua\"]:2046: in function `ImportPhase2'\n[string \"@Interface/AddOns/WeakAurasOptions/OptionsFrames/Update.lua\"]:1639: in function `ImportImpl'\n[string \"@Interface/AddOns/WeakAurasOptions/OptionsFrames/Update.lua\"]:1607: in function <...ace/AddOns/WeakAurasOptions/OptionsFrames/Update.lua:1606>\n",
["nameplateShowFriendlyMinions"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"return function() \"]:3: in function <[string \"return function() \"]:1>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/WeakAuras/GenericTrigger.lua\"]:729: in function <Interface/AddOns/WeakAuras/GenericTrigger.lua:638>\n[string \"@Interface/AddOns/WeakAuras/GenericTrigger.lua\"]:1014: in function `CreateFakeStates'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:4388: in function `UpdateFakeStatesFor'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:4364: in function `FakeStatesFor'\n[string \"@Interface/AddOns/WeakAurasOptions/AceGUI-Widgets/AceGUIWidget-WeakAurasDisplayButton.lua\"]:1534: in function `SyncVisibility'\n[string \"@Interface/AddOns/WeakAurasOptions/WeakAurasOptions.lua\"]:862: in function `ShowOptions'\n[string \"@Interface/AddOns/WeakAurasOptions/WeakAurasOptions.lua\"]:607: in function `ToggleOptions'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:155: in function `OpenOptions'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:237: in function `?'\n[string \"@Interface/FrameXML/ChatFrame.lua\"]:5291: in function `ChatEdit_ParseText'\n[string \"@Interface/FrameXML/ChatFrame.lua\"]:4948: in function `ChatEdit_SendText'\n[string \"@Interface/FrameXML/ChatFrame.lua\"]:4984: in function `ChatEdit_OnEnterPressed'\n[string \"*ChatFrame.xml:141_OnEnterPressed\"]:1: in function <[string \"*ChatFrame.xml:141_OnEnterPressed\"]:1>\n",
["nameplateSelfScale"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["nameplateTargetBehindMaxDistance"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["nameplateShowEnemies"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:6985: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:6983>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:775: in function <Interface/AddOns/Details/Libs/DF/slider.lua:726>\n",
["NamePlateVerticalScale"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Blizzard_SettingsDefinitions_Frame/Mainline/InterfaceOverrides.lua\"]:15: in function <...ngsDefinitions_Frame/Mainline/InterfaceOverrides.lua:12>\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua\"]:262: in function `SetValueInternal'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua\"]:67: in function `SetValue'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_SettingControls.lua\"]:383: in function <...lizzard_Settings_Shared/Blizzard_SettingControls.lua:379>\n[string \"=[C]\"]: ?\n[string \"@Interface/AddOns/Blizzard_SharedXML/CallbackRegistry.lua\"]:178: in function <...rface/AddOns/Blizzard_SharedXML/CallbackRegistry.lua:177>\n[string \"=[C]\"]: ?\n[string \"@Interface/AddOns/Blizzard_SharedXML/CallbackRegistry.lua\"]:181: in function `TriggerEvent'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_SettingControls.lua\"]:332: in function <...lizzard_Settings_Shared/Blizzard_SettingControls.lua:331>\n",
["nameplateSelectedAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4142: in function `ForceCVars'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4138: in function <Interface/AddOns/Plater/Plater.lua:4138>\n",
["nameplateShowSelf"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["nameplatePersonalShowAlways"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["nameplateMotionSpeed"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["nameplateShowEnemyMinions"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"return function() \"]:2: in function <[string \"return function() \"]:1>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/WeakAuras/GenericTrigger.lua\"]:729: in function <Interface/AddOns/WeakAuras/GenericTrigger.lua:638>\n[string \"@Interface/AddOns/WeakAuras/GenericTrigger.lua\"]:1014: in function `CreateFakeStates'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:4388: in function `UpdateFakeStatesFor'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:4364: in function `FakeStatesFor'\n[string \"@Interface/AddOns/WeakAurasOptions/AceGUI-Widgets/AceGUIWidget-WeakAurasDisplayButton.lua\"]:1534: in function `SyncVisibility'\n[string \"@Interface/AddOns/WeakAurasOptions/WeakAurasOptions.lua\"]:862: in function `ShowOptions'\n[string \"@Interface/AddOns/WeakAurasOptions/WeakAurasOptions.lua\"]:607: in function `ToggleOptions'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:155: in function `OpenOptions'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:237: in function `?'\n[string \"@Interface/FrameXML/ChatFrame.lua\"]:5291: in function `ChatEdit_ParseText'\n[string \"@Interface/FrameXML/ChatFrame.lua\"]:4948: in function `ChatEdit_SendText'\n[string \"@Interface/FrameXML/ChatFrame.lua\"]:4984: in function `ChatEdit_OnEnterPressed'\n[string \"*ChatFrame.xml:141_OnEnterPressed\"]:1: in function <[string \"*ChatFrame.xml:141_OnEnterPressed\"]:1>\n",
["nameplateShowEnemyPets"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:12925: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:12923>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:811: in function <Interface/AddOns/Details/Libs/DF/slider.lua:762>\n",
["nameplateShowFriendlyNPCs"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:10087: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:10082>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:775: in function <Interface/AddOns/Details/Libs/DF/slider.lua:726>\n",
["nameplateSelectedScale"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["nameplateMinAlphaDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4141: in function `ForceCVars'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4138: in function <Interface/AddOns/Plater/Plater.lua:4138>\n",
["nameplateMotion"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/SharedXML/CvarUtil.lua\"]:72: in function `SetValue'\n[string \"@Interface/SharedXML/Settings/Blizzard_Setting.lua\"]:187: in function `SetValueInternal'\n[string \"@Interface/SharedXML/Settings/Blizzard_Setting.lua\"]:67: in function `SetValue'\n[string \"@Interface/SharedXML/Settings/Blizzard_SettingControls.lua\"]:495: in function <...face/SharedXML/Settings/Blizzard_SettingControls.lua:494>\n[string \"=[C]\"]: ?\n[string \"@Interface/SharedXML/CallbackRegistry.lua\"]:178: in function <Interface/SharedXML/CallbackRegistry.lua:177>\n[string \"=[C]\"]: ?\n[string \"@Interface/SharedXML/CallbackRegistry.lua\"]:181: in function `TriggerEvent'\n[string \"@Interface/SharedXML/SharedUIPanelTemplates.lua\"]:1991: in function `SetSelectedIndex'\n[string \"@Interface/SharedXML/SharedUIPanelTemplates.lua\"]:1919: in function `OnEntryClicked'\n[string \"@Interface/SharedXML/SharedUIPanelTemplates.lua\"]:2140: in function `OnClick'\n[string \"@Interface/SharedXML/Settings/Blizzard_SettingControls.lua\"]:939: in function <...face/SharedXML/Settings/Blizzard_SettingControls.lua:937>\n",
["nameplateMinScale"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["nameplateShowDebuffsOnFriendly"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:13955: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:13953>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:775: in function <Interface/AddOns/Details/Libs/DF/slider.lua:726>\n",
["nameplateOtherTopInset"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["nameplateShowFriends"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Blizzard_SharedXML/CvarUtil.lua\"]:72: in function `SetValue'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua\"]:187: in function `SetValueInternal'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua\"]:67: in function `SetValue'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Settings.lua\"]:229: in function `SetValue'\n[string \"FRIENDNAMEPLATES\"]:6: in function <[string \"FRIENDNAMEPLATES\"]:1>\n",
["nameplateShowEnemyGuardians"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:13974: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:13972>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:775: in function <Interface/AddOns/Details/Libs/DF/slider.lua:726>\n",
["nameplateShowEnemyTotems"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:14038: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:14036>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:775: in function <Interface/AddOns/Details/Libs/DF/slider.lua:726>\n",
["nameplateShowFriendlyGuardians"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["NamePlateHorizontalScale"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Blizzard_SettingsDefinitions_Frame/Mainline/InterfaceOverrides.lua\"]:14: in function <...ngsDefinitions_Frame/Mainline/InterfaceOverrides.lua:12>\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua\"]:262: in function `SetValueInternal'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua\"]:67: in function `SetValue'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_SettingControls.lua\"]:383: in function <...lizzard_Settings_Shared/Blizzard_SettingControls.lua:379>\n[string \"=[C]\"]: ?\n[string \"@Interface/AddOns/Blizzard_SharedXML/CallbackRegistry.lua\"]:178: in function <...rface/AddOns/Blizzard_SharedXML/CallbackRegistry.lua:177>\n[string \"=[C]\"]: ?\n[string \"@Interface/AddOns/Blizzard_SharedXML/CallbackRegistry.lua\"]:181: in function `TriggerEvent'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_SettingControls.lua\"]:332: in function <...lizzard_Settings_Shared/Blizzard_SettingControls.lua:331>\n",
["ShowClassColorInNameplate"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["nameplateOccludedAlphaMult"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:6006: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:6004>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/mixins.lua\"]:372: in function `RunHooksForWidget'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:749: in function <Interface/AddOns/Details/Libs/DF/slider.lua:713>\n",
["ShowNamePlateLoseAggroFlash"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
["nameplatePersonalShowInCombat"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2325: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:923: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:774: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1175: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1175>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4664: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:719: in function <Interface/AddOns/Details/Libs/DF/button.lua:655>\n",
},
["aura_cache_by_name"] = {
["fear"] = {
5782,
12096,
12542,
22678,
26070,
26580,
26661,
27641,
27990,
29168,
29321,
30002,
30530,
30584,
30615,
31358,
31970,
32241,
33547,
33924,
34259,
38154,
38595,
38660,
39119,
39176,
39210,
39415,
41150,
46561,
51240,
59669,
65809,
68950,
70171,
81442,
83613,
113712,
115186,
117573,
118699,
125204,
128098,
130616,
130940,
134938,
142884,
144062,
173093,
182806,
204730,
205398,
214304,
220540,
221424,
223170,
240136,
242084,
242739,
245902,
246277,
246307,
248028,
251419,
259874,
259995,
266918,
287685,
287687,
288545,
331741,
342914,
344887,
375205,
400529,
419865,
},
["sphere of despair"] = {
411038,
},
["solar beam"] = {
78675,
81261,
97547,
129888,
129889,
129891,
165282,
165283,
165286,
177454,
295521,
295532,
295533,
300660,
300678,
300682,
311930,
313030,
},
["detect invisibility"] = {
11649,
62856,
},
["paralysis"] = {
35202,
66830,
84030,
115078,
173342,
177578,
213369,
357768,
},
["leg sweep"] = {
119381,
128787,
164392,
174417,
285270,
292306,
397899,
},
["song of chi-ji"] = {
198898,
198909,
},
["unending breath"] = {
5697,
},
},
["url"] = "https://wago.io/vzrQ_-iCn/7",
["hover_highlight"] = false,
["aura_stack_anchor"] = {
["y"] = -17.5,
["x"] = 7.5,
},
["health_cutoff_upper"] = false,
["cast_statusbar_spark_alpha"] = 0.8299999833106995,
["aura2_y_offset"] = 11,
["indicator_spec_always"] = true,
["plate_config"] = {
["player"] = {
["spellpercent_text_enabled"] = false,
["percent_text_show_decimals"] = false,
["castbar_enabled"] = false,
["power_percent_text_enabled"] = false,
["healthbar_enabled"] = false,
["percent_show_percent"] = false,
["percent_text_enabled"] = false,
["power_enabled"] = false,
["percent_text_ooc"] = false,
["percent_show_health"] = false,
["module_enabled"] = false,
},
["friendlyplayer"] = {
["castbar_offset"] = -0.5,
["actorname_friend_color"] = {
0.7098039388656616,
nil,
nil,
0,
},
["level_text_size"] = 8,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
140,
1,
},
["big_actortitle_text_size"] = 14,
["fixed_class_color"] = {
0.1450980454683304,
[3] = 0.1960784494876862,
},
["actorname_text_color"] = {
0.1215686351060867,
nil,
0.1882353127002716,
0,
},
["percent_text_show_decimals"] = false,
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["cast_incombat"] = {
140,
1,
},
["big_actorname_text_shadow_color"] = {
0,
0,
0,
1,
},
["spellpercent_text_outline"] = "NONE",
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
1,
},
["percent_text_color"] = {
0.9019608497619629,
0.9019608497619629,
0.9019608497619629,
0,
},
["actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["mana_incombat"] = {
nil,
4,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["actorname_use_guild_color"] = false,
["all_names"] = true,
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["mana"] = {
nil,
4,
},
["actorname_text_outline"] = "NONE",
["actorname_text_anchor"] = {
["y"] = -100,
["x"] = -100,
},
["spellpercent_text_color"] = {
nil,
nil,
nil,
0,
},
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 5,
["only_damaged"] = false,
["buff_frame_y_offset"] = 0,
["actorname_guild_color"] = {
0.4980392456054688,
nil,
0.2000000178813934,
0,
},
["quest_enabled"] = true,
["big_actorname_text_size"] = 14,
["percent_text_size"] = 10,
["quest_color_enabled"] = true,
["health_incombat"] = {
140,
10,
},
["health"] = {
140,
10,
},
["percent_show_percent"] = false,
["percent_text_font"] = "Friz Quadrata TT",
["level_text_alpha"] = 0.699999988079071,
["actorname_text_size"] = 6,
["spellname_text_font"] = "Friz Quadrata TT",
},
["friendlynpc"] = {
["big_actorname_text_size"] = 10,
["show_guild_name"] = false,
["level_text_size"] = 8,
["actorname_use_class_color"] = false,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
140,
15,
},
["big_actortitle_text_size"] = 10,
["fixed_class_color"] = {
0,
1,
0,
1,
},
["big_actorname_text_color"] = {
0.50196078431373,
nil,
0.50196078431373,
1,
},
["enabled"] = false,
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
140,
15,
},
["click_through"] = false,
["spellpercent_text_outline"] = "NONE",
["module_enabled"] = false,
["actorname_text_font"] = "Friz Quadrata TT",
["only_names"] = false,
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["actorname_text_size"] = 12,
["big_actorname_text_font"] = "Friz Quadrata TT",
["actorname_use_guild_color"] = false,
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["only_thename"] = false,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["actorname_friend_color"] = {
0.71,
1,
1,
1,
},
["level_text_alpha"] = 0.699999988079071,
["spellpercent_text_color"] = {
nil,
nil,
nil,
0,
},
["big_actortitle_text_outline"] = "NONE",
["actorname_text_spacing"] = 11,
["only_damaged"] = false,
["spellname_text_font"] = "Friz Quadrata TT",
["actorname_guild_color"] = {
0.498039,
1,
0.2,
1,
},
["percent_show_percent"] = false,
["percent_text_font"] = "Friz Quadrata TT",
["relevance_state"] = 2,
["actorname_text_color"] = {
0.50588235294118,
0.54117647058824,
},
["health_incombat"] = {
140,
11,
},
["health"] = {
140,
11,
},
["percent_text_size"] = 10,
["actorname_text_anchor"] = {
["y"] = 3,
},
["actorname_use_friends_color"] = true,
["big_actorname_text_outline"] = "NONE",
["castbar_offset"] = -0.5,
},
["global_health_height"] = 11,
["global_health_width"] = 140,
["enemyplayer"] = {
["big_actorname_text_size"] = 14,
["level_text_size"] = 8,
["actorname_use_class_color"] = true,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
125,
15,
},
["big_actortitle_text_size"] = 14,
["fixed_class_color"] = {
nil,
0.4000000357627869,
0.1019607931375504,
},
["actorname_text_color"] = {
0.90196078431373,
[3] = 0.92156862745098,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
125,
15,
},
["spellpercent_text_outline"] = "NONE",
["actorname_text_font"] = "Friz Quadrata TT",
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["all_names"] = true,
["actorname_text_outline"] = "OUTLINE",
["percent_show_health"] = false,
["spellpercent_text_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_size"] = 10,
["actorname_text_spacing"] = 11,
["percent_text_font"] = "Friz Quadrata TT",
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["quest_enabled"] = true,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset"] = -0.5,
["quest_color_enabled"] = true,
["health_incombat"] = {
125,
10,
},
["health"] = {
125,
10,
},
["actorname_text_anchor"] = {
["y"] = 3,
["side"] = 8,
},
["spellpercent_text_enabled"] = false,
["level_text_alpha"] = 0.699999988079071,
["spellname_text_font"] = "Friz Quadrata TT",
["level_text_enabled"] = false,
},
["enemynpc"] = {
["actorname_text_font"] = "Friz Quadrata TT",
["castbar_offset"] = -0.5,
["spellname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_outline"] = "NONE",
["actorname_text_size"] = 12,
["big_actorname_text_font"] = "Friz Quadrata TT",
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
125,
15,
},
["spellpercent_text_size"] = 10,
["big_actorname_text_size"] = 12,
["big_actortitle_text_size"] = 12,
["actorname_text_anchor"] = {
["y"] = 3,
["side"] = 8,
},
["actorname_text_color"] = {
nil,
0.007843137254902,
0,
},
["percent_show_health"] = false,
["spellpercent_text_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_enabled"] = false,
["actorname_text_spacing"] = 11,
["percent_text_font"] = "2002 Bold",
["spellname_text_size"] = 10,
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
125,
15,
},
["spellname_text_outline"] = "NONE",
["quest_enabled"] = false,
["level_text_alpha"] = 0.699999988079071,
["health_incombat"] = {
125,
10,
},
["health"] = {
125,
10,
},
["spellpercent_text_outline"] = "NONE",
["percent_text_size"] = 10,
["percent_text_shadow_color"] = {
1,
1,
1,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_enabled"] = false,
},
},
["indicator_quest"] = false,
["aura_y_offset"] = 20,
["use_ui_parent"] = true,
["aura_show_defensive_cd"] = true,
["expansion_triggerwipe"] = {
[9] = true,
[8] = true,
},
["show_aggro_glow"] = false,
["cast_statusbar_color_nointerrupt"] = {
0.96470588235294,
1,
0.9843137254902,
1,
},
["show_interrupt_author"] = false,
["color_override_colors"] = {
[3] = {
0.91764705882353,
0,
0.035294117647059,
},
},
["resources_settings"] = {
["chr"] = {
["Player-3676-0D98B2A2"] = "Chi",
["Player-11-0E5C3449"] = "Chi",
["Player-76-0BA72A37"] = "Chi",
["Player-1071-0CDBCC87"] = "Chi",
["Player-76-0BC23AB2"] = "Chi",
["Player-76-0BB4A4DE"] = "SoulShards",
["Player-76-0BB7F9EF"] = "ComboPoints",
["Player-1071-0D8B9495"] = "Chi",
["Player-76-0BCB370B"] = "Chi",
["Player-76-0BD55532"] = "Chi",
["Player-1071-0D6B24AA"] = "Chi",
["Player-1071-0D5A1C3A"] = "Chi",
["Player-76-0BC8716D"] = "ComboPoints",
["Player-76-0B991BFD"] = "Chi",
["Player-76-0BB706E0"] = "Chi",
["Player-11-0E140B20"] = "Chi",
["Player-1071-0D50A441"] = "Chi",
["Player-1071-0D5104CF"] = "Chi",
["Player-1071-0D5B5266"] = "Chi",
["Player-76-0B986AD7"] = "Chi",
["Player-76-0B990C65"] = "Essence",
["Player-3675-0A516FAE"] = "Chi",
["Player-3676-0DD9A3D1"] = "Chi",
},
},
["health_animation_time_dilatation"] = 2.619999885559082,
["npc_cache"] = {
[206644] = {
"Hymdall",
"10.2.0 - Halls of Valor - Misfit Dragons",
"enUS",
},
[99358] = {
"Rotheart Dryad",
"Darkheart Thicket",
"enUS",
},
[109908] = {
"Nightmare Abomination",
"Darkheart Thicket",
"enUS",
},
[205622] = {
"Krono Sandtongue",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[207796] = {
"Burning Colossus",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[64353] = {
"Set'thik Gale-Slicer",
"Heart of Fear",
"enUS",
},
[24552] = {
"Sliver",
"Magisters' Terrace",
"enUS",
},
[61444] = {
"Ming the Cunning",
"Mogu'shan Palace",
"enUS",
},
[99359] = {
"Rotheart Keeper",
"Darkheart Thicket",
"enUS",
},
[24664] = {
"Kael'thas Sunstrider",
"Magisters' Terrace",
"enUS",
},
[24696] = {
"Coilskar Witch",
"Magisters' Terrace",
"enUS",
},
[75191] = {
"Bloodmaul Slaver",
"Bloodmaul Slag Mines",
"enUS",
},
[95779] = {
"Festerhide Grizzly",
"Darkheart Thicket",
"enUS",
},
[201788] = {
"Dazhak",
"Dawn of the Infinite",
"enUS",
},
[209333] = {
"Gnarlroot",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
"enUS",
},
[17695] = {
"Shattered Hand Assassin",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[45620] = {
"Naz'jar Soldier",
"Throne of the Tides",
"enUS",
},
[16704] = {
"Shattered Hand Sharpshooter",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[69821] = {
"Thunder Lord",
"Throne of Thunder",
"enUS",
},
[40633] = {
"Naz'jar Honor Guard",
"Throne of the Tides",
"enUS",
},
[59175] = {
"Master Archer",
"Scarlet Halls",
"enUS",
},
[81522] = {
"Witherbark",
"The Everbloom",
"enUS",
},
[40825] = {
"Erunak Stonespeaker",
"Throne of the Tides",
"enUS",
},
[69374] = {
"War-God Jalak",
"Throne of Thunder",
"enUS",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
"enUS",
},
[208440] = {
"Infinite Slayer",
"Dawn of the Infinite",
"enUS",
},
[61445] = {
"Haiyan the Unstoppable",
"Mogu'shan Palace",
"enUS",
},
[102430] = {
"Tarspitter Slug",
"Neltharion's Lair",
"enUS",
},
[202814] = {
"Twisted Aberration",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[210231] = {
"Tainted Lasher",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[75193] = {
"Bloodmaul Overseer",
"Bloodmaul Slag Mines",
"enUS",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
"enUS",
},
[201792] = {
"Ahnzon",
"Dawn of the Infinite",
"enUS",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
"enUS",
},
[44566] = {
"Ozumat",
"Throne of the Tides",
"enUS",
},
[56906] = {
"Saboteur Kip'tilak",
"Gate of the Setting Sun",
"enUS",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[75194] = {
"Gnasher",
"Bloodmaul Slag Mines",
"enUS",
},
[213942] = {
"Sludge",
"Throne of the Tides",
"enUS",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
"enUS",
},
[64355] = {
"Kor'thik Silentwing",
"Heart of Fear",
"enUS",
},
[70463] = {
"Frostmane Snowstalker",
"Blood in the Snow",
"enUS",
},
[18431] = {
"Ethereal Beacon",
"Auchindoun: Mana-Tombs",
"enUS",
},
[131847] = {
"Waycrest Reveler",
"Waycrest Manor",
"enUS",
},
[77816] = {
"Borka the Brute",
"Grimrail Depot",
"enUS",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
"enUS",
},
[60583] = {
"Protector Kaolan",
"Terrace of Endless Spring",
"enUS",
},
[208445] = {
"Larodar, Keeper of the Flame",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[19598] = {
"Mutate Fleshlasher",
"Tempest Keep: The Botanica",
"enUS",
},
[128455] = {
"T'lonja",
"Atal'Dazar",
"enUS",
},
[201668] = {
"Neltharion",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[24777] = {
"Sunblade Sentinel",
"Magisters' Terrace",
"enUS",
},
[70464] = {
"Frostmane Witch Doctor",
"Blood in the Snow",
"enUS",
},
[131849] = {
"Crazed Marksman",
"Waycrest Manor",
"enUS",
},
[84978] = {
"Bloodmaul Enforcer",
"Bloodmaul Slag Mines",
"enUS",
},
[56875] = {
"Krik'thik Demolisher",
"Gate of the Setting Sun",
"enUS",
},
[60999] = {
"Sha of Fear",
"Terrace of Endless Spring",
"enUS",
},
[131850] = {
"Maddened Survivalist",
"Waycrest Manor",
"enUS",
},
[189266] = {
"Qalashi Trainee",
"Neltharus",
"enUS",
},
[66181] = {
"Zar'thik Supplicant",
"Heart of Fear",
"enUS",
},
[59241] = {
"Scarlet Treasurer",
"Scarlet Halls",
"enUS",
},
[70465] = {
"Frostmane Bonechiller",
"Blood in the Snow",
"enUS",
},
[40923] = {
"Unstable Corruption",
"Throne of the Tides",
"enUS",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
"enUS",
},
[135048] = {
"Gorestained Piglet",
"Waycrest Manor",
"enUS",
},
[99365] = {
"Taintheart Stalker",
"Darkheart Thicket",
"enUS",
},
[214075] = {
"Cycle Warden",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[208193] = {
"Paladin of the Silver Hand",
"Dawn of the Infinite",
"enUS",
},
[135049] = {
"Dreadwing Raven",
"Waycrest Manor",
"enUS",
},
[139269] = {
"Gloom Horror",
"Waycrest Manor",
"enUS",
},
[74366] = {
"Forgemaster Gog'duh",
"Bloodmaul Slag Mines",
"enUS",
},
[79545] = {
"Nitrogg Thundertower",
"Grimrail Depot",
"enUS",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
"enUS",
},
[56876] = {
"Krik'thik Sapper",
"Gate of the Setting Sun",
"enUS",
},
[82039] = {
"Rockspine Stinger",
"The Everbloom",
"enUS",
},
[209090] = {
"Tindral Sageswift",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[75198] = {
"Bloodmaul Geomancer",
"Bloodmaul Slag Mines",
"enUS",
},
[187224] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[136330] = {
"Soul Thorns",
"Waycrest Manor",
"enUS",
},
[64357] = {
"Kor'thik Swarmer",
"Heart of Fear",
"enUS",
},
[17377] = {
"Keli'dan the Breaker",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[83894] = {
"Dulhu",
"The Everbloom",
"enUS",
},
[135052] = {
"Blight Toad",
"Waycrest Manor",
"enUS",
},
[185691] = {
"Vicious Hyena",
"Brackenhide Hollow",
"enUS",
},
[60585] = {
"Elder Regail",
"Terrace of Endless Spring",
"enUS",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
"enUS",
},
[213696] = {
"Molten Scorpid",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[56589] = {
"Striker Ga'dok",
"Gate of the Setting Sun",
"enUS",
},
[16594] = {
"Shadowmoon Acolyte",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[208198] = {
"Mysticallx",
"Scarlet Monastery",
"enUS",
},
[70468] = {
"Bonechiller Barafu",
"Blood in the Snow",
"enUS",
},
[79739] = {
"Grom'kar Grenadier",
"Grimrail Depot",
"enUS",
},
[62983] = {
"Lei Shi",
"Terrace of Endless Spring",
"enUS",
},
[56877] = {
"Raigonn",
"Gate of the Setting Sun",
"enUS",
},
[106785] = {
"Bitterbrine Slave",
"Eye of Azshara",
"enUS",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
"enUS",
},
[194389] = {
"Lava Spawn",
"Neltharus",
"enUS",
},
[40765] = {
"Commander Ulthok",
"Throne of the Tides",
"enUS",
},
[79548] = {
"Assault Cannon",
"Grimrail Depot",
"enUS",
},
[207177] = {
"Infinite Watchkeeper",
"Dawn of the Infinite",
"enUS",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
"enUS",
},
[40925] = {
"Tainted Sentry",
"Throne of the Tides",
"enUS",
},
[97259] = {
"Blazing Hydra Spawn",
"Eye of Azshara",
"enUS",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
"enUS",
},
[200912] = {
"Neldris",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[105699] = {
"Mana Saber",
"Court of Stars",
"enUS",
},
[106786] = {
"Bitterbrine Slave",
"Eye of Azshara",
"enUS",
},
[205644] = {
"Oozing Sludge",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[200913] = {
"Thadrion",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[82682] = {
"Archmage Sol",
"The Everbloom",
"enUS",
},
[97260] = {
"Arcane Hydra Spawn",
"Eye of Azshara",
"enUS",
},
[122963] = {
"Rezan",
"Atal'Dazar",
"enUS",
},
[105636] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[198996] = {
"Manifested Timeways",
"Dawn of the Infinite",
"enUS",
},
[106787] = {
"Bitterbrine Slave",
"Eye of Azshara",
"enUS",
},
[208459] = {
"Fiery Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[198869] = {
"Sundered Devastator",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[198997] = {
"Blight of Galakrond",
"Dawn of the Infinite",
"enUS",
},
[24555] = {
"Garaxxas",
"Magisters' Terrace",
"enUS",
},
[131863] = {
"Raal the Gluttonous",
"Waycrest Manor",
"enUS",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
"enUS",
},
[198870] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[198998] = {
"Tyr, the Infinite Keeper",
"Dawn of the Infinite",
"enUS",
},
[24683] = {
"Sunblade Mage Guard",
"Magisters' Terrace",
"enUS",
},
[213576] = {
"Verdant Boughwalker",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[212681] = {
"Vicious Snap Dragon",
"Throne of the Tides",
"enUS",
},
[198871] = {
"Sundered Scaleguard",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[198999] = {
"Morchie",
"Dawn of the Infinite",
"enUS",
},
[205265] = {
"Time-Displaced Trooper",
"Dawn of the Infinite",
"enUS",
},
[104295] = {
"Blazing Imp",
"Court of Stars",
"enUS",
},
[122965] = {
"Vol'kaal",
"Atal'Dazar",
"enUS",
},
[198872] = {
"Sundered Manaweaver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[199000] = {
"Chrono-Lord Deios",
"Dawn of the Infinite",
"enUS",
},
[39616] = {
"Naz'jar Invader",
"Throne of the Tides",
"enUS",
},
[198873] = {
"Sundered Edgelord",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[208208] = {
"Alliance Destroyer",
"Dawn of the Infinite",
"enUS",
},
[70473] = {
"Frostmane Headhunter",
"Blood in the Snow",
"enUS",
},
[90997] = {
"Mightstone Breaker",
"Neltharion's Lair",
"enUS",
},
[62442] = {
"Tsulong",
"Terrace of Endless Spring",
"enUS",
},
[205651] = {
"Bubbling Slime",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[203861] = {
"Horde Destroyer",
"Dawn of the Infinite",
"enUS",
},
[198874] = {
"Sundered Siegemaster",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[105703] = {
"Mana Wyrm",
"Court of Stars",
"enUS",
},
[81407] = {
"Grimrail Bombardier",
"Grimrail Depot",
"enUS",
},
[129552] = {
"Monzumi",
"Atal'Dazar",
"enUS",
},
[70474] = {
"Farastu",
"Blood in the Snow",
"enUS",
},
[210512] = {
"Ashen Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[97264] = {
"Hatecoil Shellbreaker",
"Eye of Azshara",
"enUS",
},
[122967] = {
"Priestess Alun'za",
"Atal'Dazar",
"enUS",
},
[189669] = {
"Binding Spear",
"Neltharus",
"enUS",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
"enUS",
},
[127315] = {
"Reanimation Totem",
"Atal'Dazar",
"enUS",
},
[59150] = {
"Flameweaver Koegler",
"Scarlet Halls",
"enUS",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
"enUS",
},
[64393] = {
"Night Terror",
"Terrace of Endless Spring",
"enUS",
},
[17395] = {
"Shadowmoon Summoner",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[17427] = {
"Shattered Hand Archer",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
"enUS",
},
[19505] = {
"Sunseeker Channeler",
"Tempest Keep: The Botanica",
"enUS",
},
[122968] = {
"Yazma",
"Atal'Dazar",
"enUS",
},
[100526] = {
"Tormented Bloodseeker",
"Darkheart Thicket",
"enUS",
},
[105705] = {
"Bound Energy",
"Court of Stars",
"enUS",
},
[24684] = {
"Sunblade Blood Knight",
"Magisters' Terrace",
"enUS",
},
[60621] = {
"Corrupted Waters",
"Terrace of Endless Spring",
"enUS",
},
[205656] = {
"Sundered Chemist",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[19633] = {
"Bloodwarder Mender",
"Tempest Keep: The Botanica",
"enUS",
},
[202971] = {
"Null Glimmer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[214608] = {
"Screaming Soul",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
"enUS",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
"enUS",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
"enUS",
},
[200926] = {
"Igira the Cruel",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[67919] = {
"Bilgewater Field Medic",
"Lion's Landing",
"enUS",
},
[75272] = {
"Bloodmaul Ogre Mage",
"Bloodmaul Slag Mines",
"enUS",
},
[63275] = {
"Corrupted Protector",
"Terrace of Endless Spring",
"enUS",
},
[200927] = {
"Smolderon",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[69390] = {
"Zandalari Storm-Caller",
"Throne of Thunder",
"enUS",
},
[210518] = {
"Cycle Warden",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[61453] = {
"Mu'Shiba",
"Mogu'shan Palace",
"enUS",
},
[122970] = {
"Shadowblade Stalker",
"Atal'Dazar",
"enUS",
},
[103597] = {
"Understone Lasher",
"Neltharion's Lair",
"enUS",
},
[101679] = {
"Dreadsoul Poisoner",
"Darkheart Thicket",
"enUS",
},
[75209] = {
"Molten Earth Elemental",
"Bloodmaul Slag Mines",
"enUS",
},
[208729] = {
"Astromancer's Guard",
"10.2. Nighthold",
"enUS",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
"enUS",
},
[206172] = {
"Nymue",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[74570] = {
"Ruination",
"Bloodmaul Slag Mines",
"enUS",
},
[80005] = {
"Skylord Tovra",
"Grimrail Depot",
"enUS",
},
[100529] = {
"Hatespawn Slime",
"Darkheart Thicket",
"enUS",
},
[17252] = {
"Rivinroon",
"Dawn of the Infinite",
"enUS",
},
[75210] = {
"Bloodmaul Warder",
"Bloodmaul Slag Mines",
"enUS",
},
[17380] = {
"Broggok",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[18419] = {
"Bloodwarder Greenkeeper",
"Tempest Keep: The Botanica",
"enUS",
},
[91003] = {
"Rokmora",
"Neltharion's Lair",
"enUS",
},
[107435] = {
"Suspicious Noble",
"Court of Stars",
"enUS",
},
[97269] = {
"Hatecoil Crestrider",
"Eye of Azshara",
"enUS",
},
[125977] = {
"Reanimation Totem",
"Atal'Dazar",
"enUS",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
"enUS",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
"enUS",
},
[24685] = {
"Sunblade Magister",
"Magisters' Terrace",
"enUS",
},
[205408] = {
"Infinite Timeslicer",
"Dawn of the Infinite",
"enUS",
},
[75211] = {
"Magma Lord",
"Bloodmaul Slag Mines",
"enUS",
},
[186227] = {
"Monstrous Decay",
"Brackenhide Hollow",
"enUS",
},
[208478] = {
"Volcoross",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[103344] = {
"Oakheart",
"Darkheart Thicket",
"enUS",
},
[96247] = {
"Vileshard Crawler",
"Neltharion's Lair",
"enUS",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
"enUS",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[98677] = {
"Rook Spiderling",
"Black Rook Hold",
"enUS",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
"enUS",
},
[60208] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[91005] = {
"Naraxas",
"Neltharion's Lair",
"enUS",
},
[189299] = {
"Decaying Slime",
"Brackenhide Hollow",
"enUS",
},
[207969] = {
"Horde Raider",
"Dawn of the Infinite",
"enUS",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
"enUS",
},
[102962] = {
"Nightmare Abomination",
"Darkheart Thicket",
"enUS",
},
[63853] = {
"Zar'thik Supplicant",
"Heart of Fear",
"enUS",
},
[204262] = {
"Necrofrost",
"Dawn of the Infinite",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
"enUS",
},
[58898] = {
"Vigilant Watchman",
"Scarlet Halls",
"enUS",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
"enUS",
},
[17301] = {
"Shattered Hand Executioner",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[75406] = {
"Slagna",
"Bloodmaul Slag Mines",
"enUS",
},
[199916] = {
"Decaying Slime",
"Brackenhide Hollow",
"enUS",
},
[17381] = {
"The Maker",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[17397] = {
"Shadowmoon Adept",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[91007] = {
"Dargrul",
"Neltharion's Lair",
"enUS",
},
[17429] = {
"Fel Orc Neophyte",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[201579] = {
"Magmorax",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[19507] = {
"Sunseeker Gene-Splicer",
"Tempest Keep: The Botanica",
"enUS",
},
[17477] = {
"Hellfire Imp",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[92350] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[24686] = {
"Sunblade Warlock",
"Magisters' Terrace",
"enUS",
},
[71123] = {
"Echo of Y'Shaarj",
"Heart of the Old God Scenario",
"enUS",
},
[205672] = {
"Flame Additive",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[17621] = {
"Heathen Guard",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[59794] = {
"Krik'thik Disruptor",
"Gate of the Setting Sun",
"enUS",
},
[81737] = {
"Unchecked Growth",
"The Everbloom",
"enUS",
},
[17669] = {
"Rabid Warhound",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[205673] = {
"Sundered Devourer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[61387] = {
"Quilen Guardian",
"Mogu'shan Palace",
"enUS",
},
[61389] = {
"Kargesh Highguard",
"Mogu'shan Palace",
"enUS",
},
[68476] = {
"Horridon",
"Throne of Thunder",
"enUS",
},
[19843] = {
"Nethervine Trickster",
"Tempest Keep: The Botanica",
"enUS",
},
[210147] = {
"Harbinger of Incineration",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[207027] = {
"Valarjar Shieldmaiden",
"10.2.0 - Halls of Valor - Misfit Dragons",
"enUS",
},
[59373] = {
"Scarlet Pupil",
"Scarlet Halls",
"enUS",
},
[210150] = {
"Flametouched Enforcer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[59372] = {
"Scarlet Scholar",
"Scarlet Halls",
"enUS",
},
[205620] = {
"Malgosa Spellbinder",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[100216] = {
"Hatecoil Wrangler",
"Eye of Azshara",
"enUS",
},
[59240] = {
"Scarlet Hall Guardian",
"Scarlet Halls",
"enUS",
},
[58632] = {
"Armsmaster Harlan",
"Scarlet Halls",
"enUS",
},
[98362] = {
"Troubled Soul",
"Black Rook Hold",
"enUS",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
"enUS",
},
[59309] = {
"Obedient Hound",
"Scarlet Halls",
"enUS",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
"enUS",
},
[63053] = {
"Garalon's Leg",
"Heart of Fear",
"enUS",
},
[59303] = {
"Houndmaster Braun",
"Scarlet Halls",
"enUS",
},
[205804] = {
"Risen Dragon",
"Dawn of the Infinite",
"enUS",
},
[98810] = {
"Wrathguard Bladelord",
"Black Rook Hold",
"enUS",
},
[70230] = {
"Zandalari Blade Initiate",
"Throne of Thunder",
"enUS",
},
[61034] = {
"Terror Spawn",
"Terrace of Endless Spring",
"enUS",
},
[58674] = {
"Angry Hound",
"Scarlet Halls",
"enUS",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
"enUS",
},
[70341] = {
"Tormented Spirit",
"Throne of Thunder",
"enUS",
},
[61392] = {
"Harthak Flameseeker",
"Mogu'shan Palace",
"enUS",
},
[63592] = {
"Set'thik Gustwing",
"Heart of Fear",
"enUS",
},
[74357] = {
"Captured Miner",
"Bloodmaul Slag Mines",
"enUS",
},
[75857] = {
"Unstable Magma Elemental",
"Bloodmaul Slag Mines",
"enUS",
},
[214117] = {
"Stormflurry Totem",
"Throne of the Tides",
"enUS",
},
[135474] = {
"Thistle Acolyte",
"Waycrest Manor",
"enUS",
},
[212327] = {
"Zaqali Flamemancer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[208363] = {
"Urctos",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[18309] = {
"Ethereal Scavenger",
"Auchindoun: Mana-Tombs",
"enUS",
},
[206573] = {
"Valarjar Champion",
"10.2.0 - Halls of Valor - Misfit Dragons",
"enUS",
},
[18341] = {
"Pandemonius",
"Auchindoun: Mana-Tombs",
"enUS",
},
[113197] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[198995] = {
"Chronikar",
"Dawn of the Infinite",
"enUS",
},
[200918] = {
"Rionthus",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[18405] = {
"Tempest-Forge Peacekeeper",
"Tempest Keep: The Botanica",
"enUS",
},
[17398] = {
"Nascent Fel Orc",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[213607] = {
"Deep Sea Murloc",
"Throne of the Tides",
"enUS",
},
[18894] = {
"Felguard Brute",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[186242] = {
"Skulking Gutstabber",
"Brackenhide Hollow",
"enUS",
},
[19508] = {
"Sunseeker Herbalist",
"Tempest Keep: The Botanica",
"enUS",
},
[24715] = {
"High Explosive Sheep",
"Magisters' Terrace",
"enUS",
},
[206063] = {
"Temporal Deviation",
"Dawn of the Infinite",
"enUS",
},
[211306] = {
"Fiery Vines",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[208365] = {
"Aerwynn",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[24559] = {
"Warlord Salaris",
"Magisters' Terrace",
"enUS",
},
[92610] = {
"Understone Drummer",
"Neltharion's Lair",
"enUS",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
"enUS",
},
[56631] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[91001] = {
"Tarspitter Lurker",
"Neltharion's Lair",
"enUS",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
"enUS",
},
[131585] = {
"Enthralled Guard",
"Waycrest Manor",
"enUS",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
"enUS",
},
[17670] = {
"Shattered Hand Houndmaster",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[186116] = {
"Gutshot",
"Brackenhide Hollow",
"enUS",
},
[70471] = {
"Frostmane Berserker",
"Blood in the Snow",
"enUS",
},
[203763] = {
"Alliance Footman",
"Dawn of the Infinite",
"enUS",
},
[17694] = {
"Shadowmoon Darkcaster",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[91332] = {
"Stoneclaw Hunter",
"Neltharion's Lair",
"enUS",
},
[207341] = {
"Blistering Spear",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[208367] = {
"Pip",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
"enUS",
},
[16807] = {
"Grand Warlock Nethekurse",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[2630] = {
"Earthbind Totem",
"Lion's Landing",
"enUS",
},
[70544] = {
"Hekima the Wise",
"Blood in the Snow",
"enUS",
},
[64368] = {
"Apparition of Fear",
"Terrace of Endless Spring",
"enUS",
},
[63808] = {
"Faintly Glowing Gem",
"Mogu'shan Palace",
"enUS",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
"enUS",
},
[88967] = {
"Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[79888] = {
"Iron Infantry",
"Grimrail Depot",
"enUS",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
"enUS",
},
[98366] = {
"Ghostly Retainer",
"Black Rook Hold",
"enUS",
},
[68668] = {
"S.H.A.R.K. Medic",
"Lion's Landing",
"enUS",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
"enUS",
},
[96512] = {
"Archdruid Glaidalis",
"Darkheart Thicket",
"enUS",
},
[67460] = {
"Bilgewater Grenadier",
"Lion's Landing",
"enUS",
},
[59605] = {
"Sodden Hozen Brawler",
"Pandaria",
"enUS",
},
[63048] = {
"Kor'thik Slicer",
"Heart of Fear",
"enUS",
},
[208461] = {
"Scorching Roots",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[59460] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[91781] = {
"Hatecoil Warrior",
"Eye of Azshara",
"enUS",
},
[206068] = {
"Temporal Fusion",
"Dawn of the Infinite",
"enUS",
},
[210288] = {
"Ancient Core Hound",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[131864] = {
"Gorak Tul",
"Waycrest Manor",
"enUS",
},
[68508] = {
"Bloodhilt Earth-Singer",
"Lion's Landing",
"enUS",
},
[186120] = {
"Treemouth",
"Brackenhide Hollow",
"enUS",
},
[61442] = {
"Kuai the Brute",
"Mogu'shan Palace",
"enUS",
},
[70746] = {
"Frostmane Flesh-Eater",
"Blood in the Snow",
"enUS",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[194816] = {
"Forgewrought Monstrosity",
"Neltharus",
"enUS",
},
[105720] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[64358] = {
"Set'thik Tempest",
"Heart of Fear",
"enUS",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
"enUS",
},
[186121] = {
"Decatriarch Wratheye",
"Brackenhide Hollow",
"enUS",
},
[189318] = {
"Infected Bear",
"Brackenhide Hollow",
"enUS",
},
[18422] = {
"Sunseeker Botanist",
"Tempest Keep: The Botanica",
"enUS",
},
[91782] = {
"Hatecoil Crusher",
"Eye of Azshara",
"enUS",
},
[206070] = {
"Chronaxie",
"Dawn of the Infinite",
"enUS",
},
[210290] = {
"Firelands Flameguard",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[17399] = {
"Seductress",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[40936] = {
"Faceless Watcher",
"Throne of the Tides",
"enUS",
},
[186122] = {
"Rira Hackclaw",
"Brackenhide Hollow",
"enUS",
},
[98368] = {
"Ghostly Protector",
"Black Rook Hold",
"enUS",
},
[19509] = {
"Sunseeker Harvester",
"Tempest Keep: The Botanica",
"enUS",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
"enUS",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[19557] = {
"Greater Frayer",
"Tempest Keep: The Botanica",
"enUS",
},
[97720] = {
"Blightshard Skitter",
"Neltharion's Lair",
"enUS",
},
[101549] = {
"Arcane Minion",
"Black Rook Hold",
"enUS",
},
[60586] = {
"Elder Asani",
"Terrace of Endless Spring",
"enUS",
},
[81864] = {
"Dreadpetal",
"The Everbloom",
"enUS",
},
[75786] = {
"Roltall",
"Bloodmaul Slag Mines",
"enUS",
},
[91783] = {
"Hatecoil Stormweaver",
"Eye of Azshara",
"enUS",
},
[95939] = {
"Skrog Tidestomper",
"Eye of Azshara",
"enUS",
},
[70684] = {
"Frostmane Mauler",
"Blood in the Snow",
"enUS",
},
[104251] = {
"Duskwatch Sentry",
"Court of Stars",
"enUS",
},
[60885] = {
"Minion of Fear",
"Terrace of Endless Spring",
"enUS",
},
[186124] = {
"Gashtooth",
"Brackenhide Hollow",
"enUS",
},
[62995] = {
"Animated Protector",
"Terrace of Endless Spring",
"enUS",
},
[101438] = {
"Vileshard Chunk",
"Neltharion's Lair",
"enUS",
},
[100713] = {
"Rockbait Fisher",
"Neltharion's Lair",
"enUS",
},
[84400] = {
"Flourishing Ancient",
"The Everbloom",
"enUS",
},
[210293] = {
"Firelands Destroyer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[91784] = {
"Warlord Parjesh",
"Eye of Azshara",
"enUS",
},
[102781] = {
"Fel Bat Pup",
"Black Rook Hold",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
"enUS",
},
[16808] = {
"Warchief Kargath Bladefist",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[59191] = {
"Commander Lindon",
"Scarlet Halls",
"enUS",
},
[64338] = {
"Instructor Kli'thak",
"Heart of Fear",
"enUS",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
"enUS",
},
[210294] = {
"Flamespreader",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[205638] = {
"Sundered Flame Banner",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[205435] = {
"Epoch Ripper",
"Dawn of the Infinite",
"enUS",
},
[81235] = {
"Grimrail Laborer",
"Grimrail Depot",
"enUS",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[17975] = {
"High Botanist Freywinn",
"Tempest Keep: The Botanica",
"enUS",
},
[59479] = {
"Yan-Zhu the Uncasked",
"Stormstout Brewery",
"enUS",
},
[70877] = {
"Volatile Earth",
"Heart of the Old God Scenario",
"enUS",
},
[210295] = {
"Flamewaker Infernoguard",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[210423] = {
"Keeper of the Dream",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[102295] = {
"Emberhusk Dominator",
"Neltharion's Lair",
"enUS",
},
[205820] = {
"Crawling Goo",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[212981] = {
"Hapless Assistant",
"The Everbloom",
"enUS",
},
[91785] = {
"Wandering Shellback",
"Broken Isles",
"enUS",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
"enUS",
},
[18421] = {
"Sunseeker Researcher",
"Tempest Keep: The Botanica",
"enUS",
},
[104246] = {
"Duskwatch Guard",
"Court of Stars",
"enUS",
},
[189901] = {
"Warlord Sargha",
"Neltharus",
"enUS",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
"enUS",
},
[68640] = {
"Bloodhilt Lightsworn",
"Lion's Landing",
"enUS",
},
[56890] = {
"Krik'thik Infiltrator",
"Gate of the Setting Sun",
"enUS",
},
[69175] = {
"Farraki Wastewalker",
"Throne of Thunder",
"enUS",
},
[40586] = {
"Lady Naz'jar",
"Throne of the Tides",
"enUS",
},
[186208] = {
"Rotbow Stalker",
"Brackenhide Hollow",
"enUS",
},
[18404] = {
"Bloodwarder Steward",
"Tempest Keep: The Botanica",
"enUS",
},
[18311] = {
"Ethereal Crypt Raider",
"Auchindoun: Mana-Tombs",
"enUS",
},
[100991] = {
"Strangling Roots",
"Darkheart Thicket",
"enUS",
},
[18343] = {
"Tavarok",
"Auchindoun: Mana-Tombs",
"enUS",
},
[82579] = {
"Grom'kar Far Seer",
"Grimrail Depot",
"enUS",
},
[64339] = {
"Instructor Tak'thok",
"Heart of Fear",
"enUS",
},
[210170] = {
"Zaqali Flamemancer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[131527] = {
"Lord Waycrest",
"Waycrest Manor",
"enUS",
},
[17400] = {
"Felguard Annihilator",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[61398] = {
"Xin the Weaponmaster",
"Mogu'shan Palace",
"enUS",
},
[65522] = {
"Bubble Shield",
"Stormstout Brewery",
"enUS",
},
[24698] = {
"Ethereum Smuggler",
"Magisters' Terrace",
"enUS",
},
[17464] = {
"Shattered Hand Gladiator",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[207438] = {
"Headless Horseman",
"Scarlet Monastery",
"enUS",
},
[40935] = {
"Gilgoblin Hunter",
"Throne of the Tides",
"enUS",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[17653] = {
"Shadowmoon Channeler",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[213806] = {
"Splotch",
"Throne of the Tides",
"enUS",
},
[210172] = {
"Zaqali Juggernaut",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[59299] = {
"Scarlet Guardian",
"Scarlet Halls",
"enUS",
},
[56731] = {
"Habanero Brew",
"Stormstout Brewery",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
"enUS",
},
[192781] = {
"Ore Elemental",
"Neltharus",
"enUS",
},
[113398] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[91808] = {
"Serpentrix",
"Eye of Azshara",
"enUS",
},
[98691] = {
"Risen Scout",
"Black Rook Hold",
"enUS",
},
[193293] = {
"Qalashi Warden",
"Neltharus",
"enUS",
},
[127879] = {
"Shieldbearer of Zul",
"Atal'Dazar",
"enUS",
},
[135989] = {
"Shieldbearer of Zul",
"Atal'Dazar",
"enUS",
},
[188244] = {
"Primal Juggernaut",
"Ruby Life Pools",
"enUS",
},
[210173] = {
"Zaqali Steelshaper",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[98173] = {
"Mystic Ssa'veh",
"Eye of Azshara",
"enUS",
},
[201222] = {
"Valow, Timesworn Keeper",
"Dawn of the Infinite",
"enUS",
},
[98949] = {
"Smashspite the Hateful",
"Black Rook Hold",
"enUS",
},
[204931] = {
"Fyrakk",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[16809] = {
"Warbringer O'mrogg",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[61239] = {
"Glintrok Oracle",
"Mogu'shan Palace",
"enUS",
},
[64340] = {
"Instructor Maltik",
"Heart of Fear",
"enUS",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
"enUS",
},
[201773] = {
"Eternal Blaze",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[81750] = {
"Bloodmaul Ogron",
"Bloodmaul Slag Mines",
"enUS",
},
[80938] = {
"Grom'kar Hulk",
"Grimrail Depot",
"enUS",
},
[192464] = {
"Raging Ember",
"Neltharus",
"enUS",
},
[17976] = {
"Commander Sarannis",
"Tempest Keep: The Botanica",
"enUS",
},
[135240] = {
"Soul Essence",
"Waycrest Manor",
"enUS",
},
[201261] = {
"Kazzara, the Hellforged",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[91787] = {
"Cove Seagull",
"Eye of Azshara",
"enUS",
},
[95920] = {
"Animated Storm",
"Eye of Azshara",
"enUS",
},
[74571] = {
"Calamity",
"Bloodmaul Slag Mines",
"enUS",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
"enUS",
},
[205736] = {
"Sundered Siegemaster",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[56636] = {
"Commander Ri'mok",
"Gate of the Setting Sun",
"enUS",
},
[201736] = {
"Sundered Arcanist",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[91789] = {
"Lady Hatecoil",
"Eye of Azshara",
"enUS",
},
[36272] = {
"Apothecary Frye",
"Shadowfang Keep",
"enUS",
},
[59801] = {
"Krik'thik Wind Shaper",
"Gate of the Setting Sun",
"enUS",
},
[102253] = {
"Understone Demolisher",
"Neltharion's Lair",
"enUS",
},
[201790] = {
"Loszkeleth",
"Dawn of the Infinite",
"enUS",
},
[59522] = {
"Sudsy Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[70690] = {
"Blood of Y'Shaarj",
"Heart of the Old God Scenario",
"enUS",
},
[63030] = {
"Enslaved Bonesmasher",
"Heart of Fear",
"enUS",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
"enUS",
},
[192786] = {
"Qalashi Plunderer",
"Neltharus",
"enUS",
},
[64341] = {
"Instructor Zarik",
"Heart of Fear",
"enUS",
},
[70691] = {
"Mouth of Terror",
"Heart of the Old God Scenario",
"enUS",
},
[18312] = {
"Ethereal Spellbinder",
"Auchindoun: Mana-Tombs",
"enUS",
},
[59426] = {
"Bopper",
"Stormstout Brewery",
"enUS",
},
[18344] = {
"Nexus-Prince Shaffar",
"Auchindoun: Mana-Tombs",
"enUS",
},
[61240] = {
"Glintrok Skulker",
"Mogu'shan Palace",
"enUS",
},
[91790] = {
"Mak'rana Siltwalker",
"Eye of Azshara",
"enUS",
},
[192787] = {
"Qalashi Spinecrusher",
"Neltharus",
"enUS",
},
[206214] = {
"Infinite Infiltrator",
"Dawn of the Infinite",
"enUS",
},
[17465] = {
"Shattered Hand Centurion",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
"enUS",
},
[67814] = {
"Bloodhilt Grunt",
"Lion's Landing",
"enUS",
},
[102404] = {
"Stoneclaw Grubmaster",
"Neltharion's Lair",
"enUS",
},
[19511] = {
"Nethervine Inciter",
"Tempest Keep: The Botanica",
"enUS",
},
[100486] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[24561] = {
"Yazzai",
"Magisters' Terrace",
"enUS",
},
[98696] = {
"Illysanna Ravencrest",
"Black Rook Hold",
"enUS",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[56637] = {
"Ook-Ook",
"Stormstout Brewery",
"enUS",
},
[83622] = {
"Bloodmaul Ogre Mage",
"Bloodmaul Slag Mines",
"enUS",
},
[58683] = {
"Scarlet Myrmidon",
"Scarlet Halls",
"enUS",
},
[69221] = {
"Zandalari Dinomancer",
"Throne of Thunder",
"enUS",
},
[95947] = {
"Mak'rana Hardshell",
"Eye of Azshara",
"enUS",
},
[61216] = {
"Glintrok Hexxer",
"Mogu'shan Palace",
"enUS",
},
[210436] = {
"Flowering Lasher",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[102277] = {
"Deadeye Decoy",
"Darkheart Thicket",
"enUS",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
"enUS",
},
[17624] = {
"Laughing Skull Warden",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[63031] = {
"Set'thik Fanatic",
"Heart of Fear",
"enUS",
},
[45672] = {
"Naz'jar Soldier",
"Throne of the Tides",
"enUS",
},
[99192] = {
"Shade of Xavius",
"Darkheart Thicket",
"enUS",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
"enUS",
},
[212483] = {
"Gnarled Roots",
"The Everbloom",
"enUS",
},
[63191] = {
"Garalon",
"Heart of Fear",
"enUS",
},
[58108] = {
"Krik'thik Infiltrator",
"Gate of the Setting Sun",
"enUS",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
"enUS",
},
[189466] = {
"Irontorch Commander",
"Neltharus",
"enUS",
},
[91792] = {
"Stormwake Hydra",
"Eye of Azshara",
"enUS",
},
[95861] = {
"Hatecoil Oracle",
"Eye of Azshara",
"enUS",
},
[61337] = {
"Glintrok Ironhide",
"Mogu'shan Palace",
"enUS",
},
[131667] = {
"Soulbound Goliath",
"Waycrest Manor",
"enUS",
},
[19486] = {
"Sunseeker Chemist",
"Tempest Keep: The Botanica",
"enUS",
},
[131009] = {
"Spirit of Gold",
"Atal'Dazar",
"enUS",
},
[189467] = {
"Qalashi Bonesplitter",
"Neltharus",
"enUS",
},
[17977] = {
"Warp Splinter",
"Tempest Keep: The Botanica",
"enUS",
},
[19016] = {
"Hellfire Familiar",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[209800] = {
"Cycle Warden",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[81767] = {
"Bloodmaul Flamespeaker",
"Bloodmaul Slag Mines",
"enUS",
},
[70246] = {
"Spirit Flayer",
"Throne of Thunder",
"enUS",
},
[208521] = {
"Pumpkin Soldier",
"Scarlet Monastery",
"enUS",
},
[58876] = {
"Starving Hound",
"Scarlet Halls",
"enUS",
},
[189340] = {
"Chargath, Bane of Scales",
"Neltharus",
"enUS",
},
[58684] = {
"Scarlet Scourge Hewer",
"Scarlet Halls",
"enUS",
},
[91793] = {
"Seaspray Crab",
"Eye of Azshara",
"enUS",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
"enUS",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[131669] = {
"Jagged Hound",
"Waycrest Manor",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
"enUS",
},
[61945] = {
"Gurthan Iron Maw",
"Mogu'shan Palace",
"enUS",
},
[56862] = {
"Drunken Hozen Brawler",
"Stormstout Brewery",
"enUS",
},
[63032] = {
"Sra'thik Shield Master",
"Heart of Fear",
"enUS",
},
[70822] = {
"Earthborn Hatred",
"Heart of the Old God Scenario",
"enUS",
},
[65174] = {
"Echo of Force and Verve",
"Heart of Fear",
"enUS",
},
[87318] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[201746] = {
"Sundered Naturalist",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[18313] = {
"Ethereal Sorcerer",
"Auchindoun: Mana-Tombs",
"enUS",
},
[17370] = {
"Laughing Skull Enforcer",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[129517] = {
"Reanimated Raptor",
"Atal'Dazar",
"enUS",
},
[61242] = {
"Glintrok Ironhide",
"Mogu'shan Palace",
"enUS",
},
[75426] = {
"Bloodmaul Overseer",
"Bloodmaul Slag Mines",
"enUS",
},
[198933] = {
"Iridikron",
"Dawn of the Infinite",
"enUS",
},
[61338] = {
"Glintrok Skulker",
"Mogu'shan Palace",
"enUS",
},
[208727] = {
"Guardian Ordan",
"10.2. Nighthold",
"enUS",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
"enUS",
},
[204560] = {
"Incorporeal Being",
"Waycrest Manor",
"enUS",
},
[74787] = {
"Slave Watcher Crushto",
"Bloodmaul Slag Mines",
"enUS",
},
[19512] = {
"Nethervine Reaper",
"Tempest Keep: The Botanica",
"enUS",
},
[24687] = {
"Sunblade Physician",
"Magisters' Terrace",
"enUS",
},
[58685] = {
"Scarlet Evangelist",
"Scarlet Halls",
"enUS",
},
[185508] = {
"Claw Fighter",
"Brackenhide Hollow",
"enUS",
},
[16507] = {
"Shattered Hand Sentry",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[16523] = {
"Shattered Hand Savage",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[19608] = {
"Frayer Wildling",
"Tempest Keep: The Botanica",
"enUS",
},
[56927] = {
"Hozen Party Animal",
"Stormstout Brewery",
"enUS",
},
[189472] = {
"Qalashi Lavabearer",
"Neltharus",
"enUS",
},
[205968] = {
"Fragment of Shadow",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[17626] = {
"Laughing Skull Legionnaire",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[211339] = {
"Dream Seedling",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[206352] = {
"Alliance Archer",
"Dawn of the Infinite",
"enUS",
},
[56799] = {
"Krik'thik Bombardier",
"Gate of the Setting Sun",
"enUS",
},
[61946] = {
"Harthak Stormcaller",
"Mogu'shan Palace",
"enUS",
},
[56863] = {
"Sleepy Hozen Brawler",
"Stormstout Brewery",
"enUS",
},
[16699] = {
"Shattered Hand Reaver",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[70824] = {
"Fiery Anger",
"Heart of the Old God Scenario",
"enUS",
},
[203688] = {
"Horde Grunt",
"Dawn of the Infinite",
"enUS",
},
[75820] = {
"Vengeful Magma Elemental",
"Bloodmaul Slag Mines",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[98965] = {
"Kur'talos Ravencrest",
"Black Rook Hold",
"enUS",
},
[213770] = {
"Ink of Ozumat",
"Throne of the Tides",
"enUS",
},
[79720] = {
"Grom'kar Boomer",
"Grimrail Depot",
"enUS",
},
[61243] = {
"Gekkan",
"Mogu'shan Palace",
"enUS",
},
[91796] = {
"Skrog Wavecrasher",
"Eye of Azshara",
"enUS",
},
[202789] = {
"Morchie",
"Dawn of the Infinite",
"enUS",
},
[61339] = {
"Glintrok Oracle",
"Mogu'shan Palace",
"enUS",
},
[101075] = {
"Wormspeaker Devout",
"Neltharion's Lair",
"enUS",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
"enUS",
},
[82597] = {
"Grom'kar Captain",
"Grimrail Depot",
"enUS",
},
[203812] = {
"Voice From Beyond",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[67692] = {
"Thaumaturge Saresse",
"Lion's Landing",
"enUS",
},
[17994] = {
"Bloodwarder Falconer",
"Tempest Keep: The Botanica",
"enUS",
},
[24560] = {
"Priestess Delrissa",
"Magisters' Terrace",
"enUS",
},
[18420] = {
"Sunseeker Geomancer",
"Tempest Keep: The Botanica",
"enUS",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
"enUS",
},
[84499] = {
"Entanglement",
"The Everbloom",
"enUS",
},
[207287] = {
"Odyn",
"10.2.0 - Halls of Valor - Misfit Dragons",
"enUS",
},
[82590] = {
"Grimrail Scout",
"Grimrail Depot",
"enUS",
},
[17083] = {
"Fel Orc Convert",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[91797] = {
"King Deepbeard",
"Eye of Azshara",
"enUS",
},
[67309] = {
"Dreadguard Cavalry",
"Lion's Landing",
"enUS",
},
[19919] = {
"Thorn Lasher",
"Tempest Keep: The Botanica",
"enUS",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
"enUS",
},
[113536] = {
"Emberhusk Dominator",
"Neltharion's Lair",
"enUS",
},
[61947] = {
"Kargesh Ribcrusher",
"Mogu'shan Palace",
"enUS",
},
[74790] = {
"Gug'rokk",
"Bloodmaul Slag Mines",
"enUS",
},
[203799] = {
"Horde Axe Thrower",
"Dawn of the Infinite",
"enUS",
},
[203927] = {
"Failed Prototype",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[17462] = {
"Shattered Hand Zealot",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[56867] = {
"Fiery Trickster",
"Stormstout Brewery",
"enUS",
},
[201754] = {
"Sarkareth",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[18314] = {
"Nexus Stalker",
"Auchindoun: Mana-Tombs",
"enUS",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
"enUS",
},
[61340] = {
"Glintrok Hexxer",
"Mogu'shan Palace",
"enUS",
},
[189478] = {
"Forgemaster Gorek",
"Neltharus",
"enUS",
},
[174773] = {
"Spiteful Shade",
"Neltharus",
"enUS",
},
[17371] = {
"Shadowmoon Warlock",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[68397] = {
"Lei Shen",
"Throne of Thunder",
"enUS",
},
[206614] = {
"Valarjar Thundercaller",
"10.2.0 - Halls of Valor - Misfit Dragons",
"enUS",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
"enUS",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
"enUS",
},
[75814] = {
"Bloodmaul Earthbreaker",
"Bloodmaul Slag Mines",
"enUS",
},
[19513] = {
"Mutate Fear-Shrieker",
"Tempest Keep: The Botanica",
"enUS",
},
[74579] = {
"Molten Elemental",
"Bloodmaul Slag Mines",
"enUS",
},
[59518] = {
"Bloated Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[59293] = {
"Scarlet Cannoneer",
"Scarlet Halls",
"enUS",
},
[17978] = {
"Thorngrin the Tender",
"Tempest Keep: The Botanica",
"enUS",
},
[207638] = {
"Blight of Galakrond",
"Dawn of the Infinite",
"enUS",
},
[128435] = {
"Toxic Saurid",
"Atal'Dazar",
"enUS",
},
[194467] = {
"Brackenhide Slasher",
"Brackenhide Hollow",
"enUS",
},
[201756] = {
"Peepeepooguy",
"Dawn of the Infinite",
"enUS",
},
[86684] = {
"Feral Lasher",
"The Everbloom",
"enUS",
},
[16593] = {
"Shattered Hand Brawler",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[186284] = {
"Gutchewer Bear",
"Brackenhide Hollow",
"enUS",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
"enUS",
},
[97170] = {
"Hatecoil Wavebinder",
"Eye of Azshara",
"enUS",
},
[207639] = {
"Blight of Galakrond",
"Dawn of the Infinite",
"enUS",
},
[56865] = {
"Aqua Dancer",
"Pandaria",
"enUS",
},
[63035] = {
"Zar'thik Zealot",
"Heart of Fear",
"enUS",
},
[56929] = {
"Krik'thik Protectorate",
"Gate of the Setting Sun",
"enUS",
},
[136541] = {
"Bile Oozeling",
"Waycrest Manor",
"enUS",
},
[99664] = {
"Restless Soul",
"Black Rook Hold",
"enUS",
},
[36565] = {
"Apothecary Baxter",
"Shadowfang Keep",
"enUS",
},
[70445] = {
"Stormbringer Draz'kil",
"Throne of Thunder",
"enUS",
},
[19865] = {
"Mutate Horror",
"Tempest Keep: The Botanica",
"enUS",
},
[194469] = {
"Fledgling Slasher",
"Brackenhide Hollow",
"enUS",
},
[97171] = {
"Hatecoil Arcanist",
"Eye of Azshara",
"enUS",
},
[205212] = {
"Infinite Keeper",
"Dawn of the Infinite",
"enUS",
},
[102094] = {
"Risen Swordsman",
"Black Rook Hold",
"enUS",
},
[84767] = {
"Twisted Abomination",
"The Everbloom",
"enUS",
},
[56706] = {
"Krik'thik Bombardier",
"Gate of the Setting Sun",
"enUS",
},
[67504] = {
"Baxel Brassbombs",
"Lion's Landing",
"enUS",
},
[189227] = {
"Qalashi Hunter",
"Neltharus",
"enUS",
},
[205723] = {
"Time-Lost Aerobot",
"Dawn of the Infinite",
"enUS",
},
[97172] = {
"Saltsea Droplet",
"Eye of Azshara",
"enUS",
},
[59487] = {
"Bubble Shield",
"Stormstout Brewery",
"enUS",
},
[62397] = {
"Wind Lord Mel'jarak",
"Heart of Fear",
"enUS",
},
[59551] = {
"Bopper",
"Stormstout Brewery",
"enUS",
},
[97173] = {
"Restless Tides",
"Eye of Azshara",
"enUS",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
"enUS",
},
[101839] = {
"Risen Companion",
"Black Rook Hold",
"enUS",
},
[203678] = {
"Grommash Hellscream",
"Dawn of the Infinite",
"enUS",
},
[203806] = {
"Whisper in the Dark",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[101008] = {
"Stinging Swarm",
"Black Rook Hold",
"enUS",
},
[102095] = {
"Risen Lancer",
"Black Rook Hold",
"enUS",
},
[18155] = {
"Bloodfalcon",
"Tempest Keep: The Botanica",
"enUS",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
"enUS",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
"enUS",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
"enUS",
},
[203679] = {
"Anduin Lothar",
"Dawn of the Infinite",
"enUS",
},
[63036] = {
"Kor'thik Extremist",
"Heart of Fear",
"enUS",
},
[74349] = {
"Bloodmaul Magma Binder",
"Bloodmaul Slag Mines",
"enUS",
},
[65402] = {
"Gurthan Swiftblade",
"Mogu'shan Palace",
"enUS",
},
[19306] = {
"Mana Leech",
"Auchindoun: Mana-Tombs",
"enUS",
},
[135234] = {
"Diseased Mastiff",
"Waycrest Manor",
"enUS",
},
[18315] = {
"Ethereal Theurgist",
"Auchindoun: Mana-Tombs",
"enUS",
},
[18331] = {
"Ethereal Darkcaster",
"Auchindoun: Mana-Tombs",
"enUS",
},
[95766] = {
"Crazed Razorbeak",
"Darkheart Thicket",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
"enUS",
},
[17356] = {
"Creeping Ooze",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[74475] = {
"Magmolatus",
"Bloodmaul Slag Mines",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
"enUS",
},
[127799] = {
"Dazar'ai Honor Guard",
"Atal'Dazar",
"enUS",
},
[17420] = {
"Shattered Hand Heathen",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[208668] = {
"Elisande",
"10.2. Nighthold",
"enUS",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
"enUS",
},
[203809] = {
"Entropic Hatred",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[82594] = {
"Grimrail Loader",
"Grimrail Depot",
"enUS",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
"enUS",
},
[70959] = {
"Urtharges the Destroyer",
"Heart of the Old God Scenario",
"enUS",
},
[98293] = {
"Saltsea Globule",
"Eye of Azshara",
"enUS",
},
[16700] = {
"Shattered Hand Legionnaire",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[18587] = {
"Frayer",
"Tempest Keep: The Botanica",
"enUS",
},
[66100] = {
"Apparition of Terror",
"Terrace of Endless Spring",
"enUS",
},
[98900] = {
"Wyrmtongue Trickster",
"Black Rook Hold",
"enUS",
},
[189470] = {
"Lava Flare",
"Neltharus",
"enUS",
},
[101074] = {
"Hatespawn Whelpling",
"Darkheart Thicket",
"enUS",
},
[185534] = {
"Bonebolt Hunter",
"Brackenhide Hollow",
"enUS",
},
[206230] = {
"Infinite Diversionist",
"Dawn of the Infinite",
"enUS",
},
[18394] = {
"Ethereal Wraith",
"Auchindoun: Mana-Tombs",
"enUS",
},
[88314] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[187315] = {
"Disease Slasher",
"Brackenhide Hollow",
"enUS",
},
[203811] = {
"Incarnation of Entropy",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[203939] = {
"Animation Fluid",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[17993] = {
"Bloodwarder Protector",
"Tempest Keep: The Botanica",
"enUS",
},
[206351] = {
"Alliance Conjuror",
"Dawn of the Infinite",
"enUS",
},
[24697] = {
"Sister of Torment",
"Magisters' Terrace",
"enUS",
},
[91004] = {
"Ularogg Cragshaper",
"Neltharion's Lair",
"enUS",
},
[133361] = {
"Wasting Servant",
"Waycrest Manor",
"enUS",
},
[189471] = {
"Qalashi Blacksmith",
"Neltharus",
"enUS",
},
[61247] = {
"Glintrok Greenhorn",
"Mogu'shan Palace",
"enUS",
},
[83620] = {
"Bloodmaul Earthbreaker",
"Bloodmaul Slag Mines",
"enUS",
},
[81638] = {
"Aqueous Globule",
"The Everbloom",
"enUS",
},
[205971] = {
"Fragment of Fire",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[19962] = {
"Blue Seedling",
"Tempest Keep: The Botanica",
"enUS",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
"enUS",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
"enUS",
},
[80935] = {
"Grom'kar Boomer",
"Grimrail Depot",
"enUS",
},
[17980] = {
"Laj",
"Tempest Keep: The Botanica",
"enUS",
},
[131545] = {
"Lady Waycrest",
"Waycrest Manor",
"enUS",
},
[59521] = {
"Bubbling Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[17414] = {
"Shadowmoon Technician",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
"enUS",
},
[101414] = {
"Saltscale Skulker",
"Eye of Azshara",
"enUS",
},
[91794] = {
"Saltscale Lurker",
"Eye of Azshara",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[69172] = {
"Sul'lithuz Stonegazer",
"Throne of Thunder",
"enUS",
},
[77483] = {
"Grom'kar Gunner",
"Grimrail Depot",
"enUS",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
"enUS",
},
[67177] = {
"Zar'thik Supplicant",
"Heart of Fear",
"enUS",
},
[104273] = {
"Jazshariu",
"Court of Stars",
"enUS",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
"enUS",
},
[77803] = {
"Railmaster Rocketspark",
"Grimrail Depot",
"enUS",
},
[80936] = {
"Grom'kar Grenadier",
"Grimrail Depot",
"enUS",
},
[91786] = {
"Gritslime Snail",
"Eye of Azshara",
"enUS",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
"enUS",
},
[75360] = {
"Searing Ember",
"Bloodmaul Slag Mines",
"enUS",
},
[19307] = {
"Nexus Terror",
"Auchindoun: Mana-Tombs",
"enUS",
},
[210437] = {
"Verdant Boughwalker",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[205671] = {
"Shadow Additive",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[187192] = {
"Rageclaw",
"Brackenhide Hollow",
"enUS",
},
[205734] = {
"Sundered Edgelord",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[40788] = {
"Mindbender Ghur'sha",
"Throne of the Tides",
"enUS",
},
[17357] = {
"Creeping Oozeling",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[40577] = {
"Naz'jar Sentinel",
"Throne of the Tides",
"enUS",
},
[104274] = {
"Baalgar the Watchful",
"Court of Stars",
"enUS",
},
[131823] = {
"Sister Malady",
"Waycrest Manor",
"enUS",
},
[111563] = {
"Duskwatch Guard",
"Court of Stars",
"enUS",
},
[205735] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[59458] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[80937] = {
"Grom'kar Gunner",
"Grimrail Depot",
"enUS",
},
[208165] = {
"Alliance Knight",
"Dawn of the Infinite",
"enUS",
},
[56924] = {
"Inflamed Hozen Brawler",
"Stormstout Brewery",
"enUS",
},
[86372] = {
"Melded Berserker",
"The Everbloom",
"enUS",
},
[131824] = {
"Sister Solena",
"Waycrest Manor",
"enUS",
},
[96323] = {
"Arachnis",
"SMV Alliance Garrison Level 3",
"enUS",
},
[69173] = {
"Farraki Skirmisher",
"Throne of Thunder",
"enUS",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[83623] = {
"Bloodmaul Warder",
"Bloodmaul Slag Mines",
"enUS",
},
[59778] = {
"Krik'thik Striker",
"Gate of the Setting Sun",
"enUS",
},
[24815] = {
"Sunblade Imp",
"Magisters' Terrace",
"enUS",
},
[104275] = {
"Imacu'tya",
"Court of Stars",
"enUS",
},
[131825] = {
"Sister Briar",
"Waycrest Manor",
"enUS",
},
[205151] = {
"Tyr's Vanguard",
"Dawn of the Infinite",
"enUS",
},
[205737] = {
"Sundered Manaweaver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[88163] = {
"Grom'kar Cinderseer",
"Grimrail Depot",
"enUS",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
"enUS",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
"enUS",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
"enUS",
},
[201934] = {
"Shadowflame Amalgamation",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[91008] = {
"Rockbound Pelter",
"Neltharion's Lair",
"enUS",
},
[99360] = {
"Vilethorn Blossom",
"Darkheart Thicket",
"enUS",
},
[95772] = {
"Frenzied Nightclaw",
"Darkheart Thicket",
"enUS",
},
[201774] = {
"Essence of Shadow",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[83624] = {
"Bloodmaul Enforcer",
"Bloodmaul Slag Mines",
"enUS",
},
[59800] = {
"Krik'thik Rager",
"Gate of the Setting Sun",
"enUS",
},
[96028] = {
"Wrath of Azshara",
"Eye of Azshara",
"enUS",
},
[83846] = {
"Yalnu",
"The Everbloom",
"enUS",
},
[100248] = {
"Ritualist Lesha",
"Eye of Azshara",
"enUS",
},
[36296] = {
"Apothecary Hummel",
"Shadowfang Keep",
"enUS",
},
[213219] = {
"Congealed Ooze",
"Throne of the Tides",
"enUS",
},
[59459] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
"enUS",
},
[208734] = {
"Senior Researcher Alydrus",
"10.2. Nighthold",
"enUS",
},
[193291] = {
"Apex Blazewing",
"Neltharus",
"enUS",
},
[187021] = {
"Rotbow Sentry",
"Brackenhide Hollow",
"enUS",
},
[186206] = {
"Cruel Bonecrusher",
"Brackenhide Hollow",
"enUS",
},
[104218] = {
"Advisor Melandrus",
"Court of Stars",
"enUS",
},
[194487] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[98542] = {
"Amalgam of Souls",
"Black Rook Hold",
"enUS",
},
[98970] = {
"Latosius",
"Black Rook Hold",
"enUS",
},
[58756] = {
"Scarlet Evoker",
"Scarlet Halls",
"enUS",
},
[204206] = {
"Horde Farseer",
"Dawn of the Infinite",
"enUS",
},
[104277] = {
"Legion Hound",
"Court of Stars",
"enUS",
},
[100249] = {
"Channeler Varisz",
"Eye of Azshara",
"enUS",
},
[204536] = {
"Blight Chunk",
"Dawn of the Infinite",
"enUS",
},
[80940] = {
"Iron Infantry",
"Grimrail Depot",
"enUS",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
"enUS",
},
[68639] = {
"Bloodhilt Battlemage",
"Lion's Landing",
"enUS",
},
[99200] = {
"Dresaron",
"Darkheart Thicket",
"enUS",
},
[98538] = {
"Lady Velandras Ravencrest",
"Black Rook Hold",
"enUS",
},
[17671] = {
"Shattered Hand Champion",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[18317] = {
"Ethereal Priest",
"Auchindoun: Mana-Tombs",
"enUS",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
"enUS",
},
[81984] = {
"Gnarlroot",
"The Everbloom",
"enUS",
},
[74355] = {
"Captured Miner",
"Bloodmaul Slag Mines",
"enUS",
},
[194745] = {
"Rotfang Hyena",
"Brackenhide Hollow",
"enUS",
},
[211241] = {
"Ancient Core Hound",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[17491] = {
"Laughing Skull Rogue",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
"enUS",
},
[100250] = {
"Binder Ashioi",
"Eye of Azshara",
"enUS",
},
[189247] = {
"Tamed Phoenix",
"Neltharus",
"enUS",
},
[58998] = {
"Scarlet Defender",
"Scarlet Halls",
"enUS",
},
[203825] = {
"Voracious Magma Worm",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[98792] = {
"Wyrmtongue Scavenger",
"Black Rook Hold",
"enUS",
},
[187231] = {
"Wither Biter",
"Brackenhide Hollow",
"enUS",
},
[69834] = {
"Lightning Guardian",
"Throne of Thunder",
"enUS",
},
[100539] = {
"Taintheart Deadeye",
"Darkheart Thicket",
"enUS",
},
[63049] = {
"Set'thik Swiftblade",
"Heart of Fear",
"enUS",
},
[104918] = {
"Vigilant Duskwatch",
"Court of Stars",
"enUS",
},
[59684] = {
"Hozen Party Animal",
"Stormstout Brewery",
"enUS",
},
[74356] = {
"Captured Miner",
"Bloodmaul Slag Mines",
"enUS",
},
[207023] = {
"Valarjar Runecarver",
"10.2.0 - Halls of Valor - Misfit Dragons",
"enUS",
},
[98681] = {
"Rook Spinner",
"Black Rook Hold",
"enUS",
},
[104215] = {
"Patrol Captain Gerdo",
"Court of Stars",
"enUS",
},
[210507] = {
"Stalwart Bristlebruin",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[68669] = {
"S.H.A.R.K. Rocketeer",
"Lion's Landing",
"enUS",
},
[212778] = {
"Minion of Ghur'sha",
"Throne of the Tides",
"enUS",
},
[61003] = {
"Dread Spawn",
"Terrace of Endless Spring",
"enUS",
},
[62543] = {
"Blade Lord Ta'yak",
"Heart of Fear",
"enUS",
},
[207024] = {
"Stormforged Sentinel",
"10.2.0 - Halls of Valor - Misfit Dragons",
"enUS",
},
[92387] = {
"Drums of War",
"Neltharion's Lair",
"enUS",
},
[63593] = {
"Set'thik Zephyrian",
"Heart of Fear",
"enUS",
},
[113998] = {
"Mightstone Breaker",
"Neltharion's Lair",
"enUS",
},
[24556] = {
"Zelfan",
"Magisters' Terrace",
"enUS",
},
[212779] = {
"Umbraclaw",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[68294] = {
"S.H.A.R.K. Sapper",
"Lion's Landing",
"enUS",
},
[20923] = {
"Blood Guard Porung",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[67463] = {
"Baxel Brassbombs",
"Lion's Landing",
"enUS",
},
[181861] = {
"Magmatusk",
"Neltharus",
"enUS",
},
[134041] = {
"Infected Peasant",
"Waycrest Manor",
"enUS",
},
[62402] = {
"Kor'thik Elite Blademaster",
"Heart of Fear",
"enUS",
},
[62980] = {
"Imperial Vizier Zor'lok",
"Heart of Fear",
"enUS",
},
[39960] = {
"Deep Murloc Drudge",
"Throne of the Tides",
"enUS",
},
[58676] = {
"Scarlet Defender",
"Scarlet Halls",
"enUS",
},
[59461] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[207026] = {
"Valarjar Mystic",
"10.2.0 - Halls of Valor - Misfit Dragons",
"enUS",
},
[59302] = {
"Sergeant Verdone",
"Scarlet Halls",
"enUS",
},
[62405] = {
"Sra'thik Amber-Trapper",
"Heart of Fear",
"enUS",
},
[59464] = {
"Hopper",
"Stormstout Brewery",
"enUS",
},
[69455] = {
"Zandalari Water-Binder",
"Throne of Thunder",
"enUS",
},
[212781] = {
"Dreamtalon",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[62408] = {
"Zar'thik Battle-Mender",
"Heart of Fear",
"enUS",
},
[70789] = {
"Zandalari Rage Banner",
"Blood in the Snow",
"enUS",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
"enUS",
},
[70595] = {
"Frostmane Prowler",
"Blood in the Snow",
"enUS",
},
[104217] = {
"Talixae Flamewreath",
"Court of Stars",
"enUS",
},
[205365] = {
"Time-Lost Tidehunter",
"Dawn of the Infinite",
"enUS",
},
[125828] = {
"Harambê",
"Atal'Dazar",
"enUS",
},
[56718] = {
"Hopper",
"Stormstout Brewery",
"enUS",
},
},
["indicator_scale"] = 2.490000009536743,
["extra_icon_timer_decimals"] = true,
["border_color"] = {
0.96862745098039,
0.95294117647059,
0.9843137254902,
1,
},
["focus_color"] = {
nil,
nil,
nil,
0,
},
["indicator_anchor"] = {
["x"] = 0.09999847412109375,
},
["ignore_softinteract_objects"] = true,
["aggro_modifies"] = {
["health_bar_color"] = false,
},
["minor_height_scale"] = 0.949999988079071,
["aura_padding"] = 2.059999942779541,
["indicator_worldboss"] = false,
["hook_data"] = {
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["Time"] = 1597097268,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\castbar_icon",
["Enabled"] = false,
["Revision"] = 348,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast Bar Icon Settings [P]",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Icon Settings",
["Value"] = "Icon Settings:",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Icon",
["Value"] = true,
["Key"] = "showIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the castbar icon when enabled",
},
{
["Type"] = 4,
["Name"] = "Icon on Left Side",
["Value"] = true,
["Key"] = "iconOnLeftSide",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled it anchor the icon on the left side, right otherwise",
},
{
["Type"] = 4,
["Name"] = "Use Big Icon",
["Value"] = false,
["Key"] = "useFullSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled the icon has the size of the cast bar plus the healthbar",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Fine tune the icon size",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Icon Size Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "iconSizeOffset",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Space between the icon and the cast bar",
["Min"] = -5,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Icon Padding",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "iconPadding",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Interrupt Texture",
["Value"] = "Can't Interrupt Texture:",
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Texture",
["Value"] = true,
["Key"] = "showTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled show a texture to tell the cast can't be interrupted",
},
{
["Type"] = 3,
["Name"] = "Texture Path",
["Value"] = "Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON",
["Key"] = "iconTexturePath",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Insert the path for the texture",
},
{
["Type"] = 4,
["Name"] = "Texture Desaturated",
["Value"] = true,
["Key"] = "desaturatedTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enbaled, texture is shown in black & white",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
0.30567157268524,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Select the color of the texture",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture width",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 10,
["Name"] = "Texture Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureWidth",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "The texture is set to be the same size as the cast bar, fine tune the height as wanted",
["Min"] = -16,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Texture Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureHeightMod",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture position",
["Min"] = -32,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Texture Position",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "texturePosition",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust the texture transparency",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureAlpha",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1547392935,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["Enabled"] = false,
["Revision"] = 50,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Color Automation [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = false\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"green\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * envTable.ExecutePercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        if (healthBar.CurrentHealth / healthBar.CurrentHealthMax <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end        \n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1547406548,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 135358,
["Enabled"] = false,
["Revision"] = 84,
["semver"] = "",
["Author"] = "Ahwa-Azralon",
["Desc"] = "Add extra effects to execute range. See the constructor script for options.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Execute Range [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["Time"] = 1620377377,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_attacking_unit",
["Enabled"] = false,
["Revision"] = 363,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Attacking Specific Unit [Plater]",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 1,
["Name"] = "Color",
["Value"] = {
0.50196078431373,
0.50196078431373,
0,
1,
},
["Key"] = "color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Bar Color",
["Value"] = true,
["Key"] = "changeBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Border Color",
["Value"] = false,
["Key"] = "changeBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Reset Colors",
["Value"] = true,
["Key"] = "resetColors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        --check the unit reaction\n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n            \n        else\n            envTable.HideNameplate (unitFrame)\n            \n        end    \n    end\n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when plater finishes an update on the nameplate\n    --check within the envTable if the healthBar of this nameplate should be hidden\n    if (envTable.IsHidden) then\n        if (unitFrame.healthBar:IsShown()) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.ShowNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.OnlyInOpenWorld = true;\n    envTable.ShowInCombat = true;\n    \n    --consts\n    envTable.REACTION_NEUTRAL = 4;\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        envTable.IsHidden = true\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        envTable.IsHidden = false\n    end\n    \nend\n\n\n\n\n",
},
["Time"] = 1541606242,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 1990989,
["Enabled"] = false,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Hide neutral units, show when selected, see the constructor script for options.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Hide Neutral Units [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["Time"] = 1621935143,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
},
["url"] = "",
["Icon"] = 135426,
["Enabled"] = false,
["Revision"] = 284,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Combo Points [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.IsEnabled) then\n        if (unitFrame.IsSelf) then\n            if (envTable.ShowOnPersonalBar) then\n                envTable.BorderFrame:Show()\n            else\n                envTable.BorderFrame:Hide() \n            end\n        else\n            envTable.BorderFrame:Show()\n        end   \n    end\n    \nend   \n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border color\n    local borderColor = \"yellow\"\n    \n    --size of the border\n    local borderSize = 1\n    \n    --transparency\n    local borderAlpha = 1\n    \n    --enabled (set to false it you only want to use the extra border in other scripts)\n    local isEnabled = true\n    \n    --export border (allow the border to be used by other scripts)\n    --other scripts can use:\n    --unitFrame.healthBar.extraBorder:Show()\n    --unitFrame.healthBar.extraBorder:SetVertexColor (r, g, b)\n    --unitFrame.healthBar.extraBorder:SetBorderSizes (borderSize)\n    local canExportBorder = true\n    \n    --do not add the border to personal bar\n    local noPersonalBar = true\n    \n    --private\n    do\n        \n        local newBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        envTable.BorderFrame = newBorder\n        \n        newBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n        newBorder:UpdateSizes()\n        \n        local r, g, b = DetailsFramework:ParseColors (borderColor)\n        newBorder:SetVertexColor (r, g, b, borderAlpha)\n        \n        envTable.ShowOnPersonalBar = not noPersonalBar\n        \n        if (canExportBorder) then\n            unitFrame.healthBar.extraBorder = newBorder\n        end\n        \n        if (not isEnabled) then\n            envTable.IsEnabled = false\n        else\n            envTable.IsEnabled = true\n        end\n    end\n    \nend\n\n\n",
},
["Time"] = 1622195123,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 133689,
["Enabled"] = false,
["Revision"] = 179,
["semver"] = "",
["Author"] = "Tecno-Azralon",
["Desc"] = "Add another border with more customizations. This border can also be manipulated by other scripts.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Extra Border [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "\n\n-- exported function Plater.UpdatePlateSize() from Plater.lua\n--this is for advanced users which wants to reorder the nameplate frame at their desire\n\n\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --check if there's a type of unit on this nameplate\n    local plateFrame = unitFrame:GetParent()\n    if (not plateFrame.actorType) then\n        return\n    end\n    \n    --get all the frames and cache some variables\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local profile = Plater.db.profile\n    local DB_PLATE_CONFIG = profile.plate_config\n    local isInCombat = Plater.IsInCombat()\n    local actorType = plateFrame.actorType\n    \n    local unitFrame = plateFrame.unitFrame\n    local healthBar = unitFrame.healthBar\n    local castBar = unitFrame.castBar\n    local powerBar = unitFrame.powerBar\n    local buffFrame1 = unitFrame.BuffFrame\n    local buffFrame2 = unitFrame.BuffFrame2\n    \n    --use in combat bars when in pvp\n    if (plateFrame.actorType == ACTORTYPE_ENEMY_PLAYER) then\n        if ((Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") and DB_PLATE_CONFIG.player.pvp_always_incombat) then\n            isInCombat = true\n        end\n    end\n    \n    --get the config for this actor type\n    local plateConfigs = DB_PLATE_CONFIG [actorType]\n    --get the config key based if the player is in combat\n    local castBarConfigKey, healthBarConfigKey, manaConfigKey = Plater.GetHashKey (isInCombat)\n    \n    --get the width and height from what the user set in the options panel\n    local healthBarWidth, healthBarHeight = unitFrame.customHealthBarWidth or plateConfigs [healthBarConfigKey][1], unitFrame.customHealthBarHeight or plateConfigs [healthBarConfigKey][2]\n    local castBarWidth, castBarHeight = unitFrame.customCastBarWidth or plateConfigs [castBarConfigKey][1], unitFrame.customCastBarHeight or plateConfigs [castBarConfigKey][2]\n    local powerBarWidth, powerBarHeight = unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][1], unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][2]\n    \n    --calculate the offset for the cast bar, this is done due to the cast bar be anchored to topleft and topright\n    local castBarOffSetX = (healthBarWidth - castBarWidth) / 2\n    local castBarOffSetY = plateConfigs.castbar_offset\n    \n    --calculate offsets for the power bar\n    local powerBarOffSetX = (healthBarWidth - powerBarWidth) / 2\n    local powerBarOffSetY = 0\n    \n    --calculate the size deviation for pets\n    local unitType = Plater.GetUnitType (plateFrame)\n    if (unitType == \"pet\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.pet_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.pet_width_scale\n        \n    elseif (unitType == \"minus\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.minor_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.minor_width_scale\n    end\n    \n    --unit frame - is set to be the same size as the plateFrame\n    unitFrame:ClearAllPoints()\n    unitFrame:SetAllPoints()\n    \n    --calculates the health bar anchor points\n    --it will always be placed in the center of the nameplate area (where it accepts mouse clicks) \n    local xOffSet = (plateFrame:GetWidth() - healthBarWidth) / 2\n    local yOffSet = (plateFrame:GetHeight() - healthBarHeight) / 2\n    \n    --set the health bar point\n    healthBar:ClearAllPoints()\n    PixelUtil.SetPoint (healthBar, \"topleft\", unitFrame, \"topleft\", xOffSet + profile.global_offset_x, -yOffSet + profile.global_offset_y)\n    PixelUtil.SetPoint (healthBar, \"bottomright\", unitFrame, \"bottomright\", -xOffSet + profile.global_offset_x, yOffSet + profile.global_offset_y)\n    \n    --set the cast bar point and size\n    castBar:ClearAllPoints()\n    PixelUtil.SetPoint (castBar, \"topleft\", healthBar, \"bottomleft\", castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetPoint (castBar, \"topright\", healthBar, \"bottomright\", -castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetHeight (castBar, castBarHeight)\n    PixelUtil.SetSize (castBar.Icon, castBarHeight, castBarHeight)\n    PixelUtil.SetSize (castBar.BorderShield, castBarHeight * 1.4, castBarHeight * 1.4)\n    \n    --set the power bar point and size\n    powerBar:ClearAllPoints()\n    PixelUtil.SetPoint (powerBar, \"topleft\", healthBar, \"bottomleft\", powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetPoint (powerBar, \"topright\", healthBar, \"bottomright\", -powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetHeight (powerBar, powerBarHeight)\n    \n    --power bar are hidden by default, show it if there's a custom size for it\n    if (unitFrame.customPowerBarWidth and unitFrame.customPowerBarHeight) then\n        powerBar:SetUnit (unitFrame.unit)\n    end\n    \n    --aura frames\n    local bf1Anchor = Plater.db.profile.aura_frame1_anchor\n    Plater.SetAnchor (buffFrame1, {side = bf1Anchor.side, x = bf1Anchor.x, y = bf1Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura_grow_direction or 2) == 2)\n    \n    local bf2Anchor = Plater.db.profile.aura_frame2_anchor\n    Plater.SetAnchor (buffFrame2, {side = bf2Anchor.side, x = bf2Anchor.x, y = bf2Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura2_grow_direction or 2) == 2)\n    \nend\n\n\n",
},
["Time"] = 1596791840,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 574574,
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Function Plater.UpdatePlateSize from Plater.lua exported to scritps.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Reorder Nameplate [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --set this to true if you are not using threat colors in the health bar\n    envTable.ForceRefreshNameplateColor = true\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --do nothing if the unit is the player it self\n    if (unitFrame.IsSelf) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    else\n        if (envTable.ForceRefreshNameplateColor) then\n            Plater.RefreshNameplateColor (unitFrame) \n        end\n    end    \n    \nend",
},
["Time"] = 1554138845,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 136207,
["Enabled"] = false,
["Revision"] = 59,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Change the nameplate color when a nameplate does not have the auras set in the constructor script.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Don't Have Aura [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShow = false;\n    envTable.TargetAmount:SetText (\"\")\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when a nameplate is added to the screen check if the player is in combat\n    if (InCombatLockdown()) then\n        --player is in combat, check if can check amount of targets\n        envTable.CanShow = envTable.CanShowTargetAmount();\n        \n    else\n        envTable.CanShow = false; \n    end\n    \n    envTable.TargetAmount:SetText (\"\");\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TargetAmount:SetText (\"\");\n    envTable.CanShow = false;\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --if the script is allowed to show the amount of targets\n    --also check if the unit is in combat\n    if (envTable.CanShow and UnitAffectingCombat (unitId)) then\n        \n        --check if can update the amount of targets following the cooldown set in the constructor script\n        --by default Plater updates the nameplate every 250ms, by default the cooldown is 2, so it'll update the amuont of target every 1/2 of a second\n        envTable.UpdateCooldown = envTable.UpdateCooldown + 1\n        if (envTable.UpdateCooldown < envTable.UpdateInterval) then\n            return\n        else\n            \n            --reset the cooldown interval to check the amount of target again\n            envTable.UpdateCooldown = 0\n            \n            --get the amount of targets\n            local amount;\n            if (envTable.InRaid) then\n                amount = envTable.NumTargetsInRaid (unitFrame)      \n                \n            elseif (envTable.InParty) then\n                amount = envTable.NumTargetsInParty (unitFrame)   \n                \n            else\n                envTable.TargetAmount:SetText (\"\")\n                return\n            end\n            \n            --update the amount text\n            if (amount == 0) then\n                envTable.TargetAmount:SetText (\"\")\n            else\n                envTable.TargetAmount:SetText (amount)\n            end\n            \n        end\n    end\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can show the amount of targets\n    envTable.CanShow = envTable.CanShowTargetAmount();\n    \n    if (not envTable.CanShow) then\n        envTable.TargetAmount:SetText (\"\") \n    end\nend\n\n\n\n\n",
["Constructor"] = "--all gray text like this are comments and do not run as code\n--build the settings and basic functions for the hook\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --declare setting variables:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    local showInRaid = true;\n    local showInDungeon = true;\n    local showInArena = false;\n    local showInBattleground = false;\n    local showInOpenWorld = true;\n    \n    envTable.UpdateInterval = 2; --each 2 updates in the nameplate it'll update the amount of targets\n    \n    local anchor = {\n        side = 6, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 4, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    \n    --frames:\n    \n    --create the text that will show the amount of people targeting the unit\n    if (not  unitFrame.healthBar.TargetAmount) then\n        envTable.TargetAmount = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.TargetAmount, anchor);\n        unitFrame.healthBar.TargetAmount = envTable.TargetAmount\n    end\n    \n    --in case Plater wipes the envTable\n    envTable.TargetAmount = unitFrame.healthBar.TargetAmount\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --private variables (they will be used in the other scripts within this hook)\n    envTable.CanShow = false;\n    envTable.UpdateCooldown = 0;\n    envTable.InRaid = false;\n    envTable.InParty = false;\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    --update the InRaid or InParty proprieties\n    function envTable.UpdateGroupType()\n        if (IsInRaid()) then\n            envTable.InRaid = true;\n            envTable.InParty = false;     \n            \n        elseif (IsInGroup()) then\n            envTable.InRaid = false;\n            envTable.InParty = true;   \n            \n        else\n            envTable.InRaid = false;            \n            envTable.InParty = false;\n        end\n    end\n    \n    --this function controls if the amount of targets can show following the settings in the top of this script\n    function envTable.CanShowTargetAmount()\n        \n        local _, instanceType, difficultyID, _, _, _, _, instanceMapID, instanceGroupSize = GetInstanceInfo()\n        \n        if (showInRaid and instanceType == \"raid\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInDungeon and instanceType == \"party\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInArena and instanceType == \"arena\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInBattleground and instanceType == \"pvp\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInOpenWorld and instanceType == \"none\") then\n            envTable.UpdateGroupType()\n            if (envTable.InRaid or envTable.InParty) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    --get the amount of player targetting the unit in raid or party\n    function envTable.NumTargetsInRaid (unitFrame)\n        local amount = 0\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        return amount\n    end\n    \n    function envTable.NumTargetsInParty()\n        local amount = 0\n        for i = 1, GetNumGroupMembers() - 1 do\n            local unit = \"party\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        local unit = \"playertarget\"\n        if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n            amount = amount + 1\n        end        \n        \n        return amount\n    end\n    \nend",
},
["Time"] = 1548278227,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 1966587,
["Enabled"] = true,
["Revision"] = 182,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show how many raid members are targeting the unit",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Players Targeting a Target [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1608663128,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = false,
["Revision"] = 356,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura Reorder [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["Time"] = 1552354619,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 878211,
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Changes the target color to the color set in the constructor script.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Current Target Color [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
["enableClassification"] = true,
["targetBorder"] = {
1,
1,
1,
1,
},
["enableBorder"] = true,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateBorder(self, unitFrame)\n    modTable.UpdateClassificationIndicator(self, unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateBorder(self, unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateClassificationIndicator(self, unitFrame)\nend\n\n\n",
["Initialization"] = "function(modTable)\n    local UNITREACTION_HOSTILE = 3\n    local UNITREACTION_NEUTRAL = 4\n    local UNITREACTION_FRIENDLY = 5\n    \n    local ACTORTYPE_FRIENDLY_PLAYER = \"friendlyplayer\"\n    local ACTORTYPE_FRIENDLY_NPC = \"friendlynpc\"\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local ACTORTYPE_ENEMY_NPC = \"enemynpc\"\n    local ACTORTYPE_PLAYER = \"player\"\n    \n    function modTable.UpdateBorder(self, unitFrame)\n        if modTable.config.enableBorder then\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetBorderColor(self, modTable.config.targetBorder)\n            else\n                Plater.SetBorderColor(self, modTable.config.notargetBorder)\n            end\n        end\n    end\n    \n    function modTable.UpdateClassificationIndicator(self, unitFrame)\n        if modTable.config.enableClassification then\n            if self.actorType == ACTORTYPE_ENEMY_NPC then\n                local unitClassification = UnitClassification (self.namePlateUnitToken)\n                if (unitClassification == \"worldboss\") then\n                    modTable.SetClassificationIndicator(unitFrame, \"elite\")\n                elseif (unitClassification == \"rareelite\") then\n                    modTable.SetClassificationIndicator(unitFrame, \"rare\")\n                elseif (unitClassification == \"elite\") then\n                    modTable.SetClassificationIndicator(unitFrame, \"elite\")\n                elseif (unitClassification == \"rare\") then\n                    modTable.SetClassificationIndicator(unitFrame, \"rare\")\n                else\n                    modTable.SetClassificationIndicator(unitFrame, \"none\")\n                end\n            else\n                modTable.SetClassificationIndicator(unitFrame, \"none\")\n            end\n        end\n    end\n    \n    function modTable.SetClassificationIndicator(unitFrame, type)\n        if unitFrame.ClassificationIndicatorType == type then return end\n        unitFrame.ClassificationIndicatorType = type\n        local indicator = unitFrame.ClassificationIndicator\n        if indicator then\n            if type == \"elite\" then\n                indicator:SetTexCoord(0, 0.15, 0.343, 0.609)\n                indicator:Show()\n            elseif type == \"rare\" then\n                indicator:SetTexCoord(0, 0.15, 0.5, 0.78)\n                indicator:Show()\n            elseif type == \"none\" then\n                indicator:Hide()\n            end\n        end\n    end\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    unitFrame.ClassificationIndicator = unitFrame.ClassificationIndicator or \n    Plater:CreateImage(unitFrame.healthBar, \n        [[Interface\\TargetingFrame\\Nameplates]], 14, 13, \"overlay\", {0, 0.15, 0.24, 0.48})\n    Plater.SetAnchor(unitFrame.ClassificationIndicator, {\n            side = 2,\n            x = 0, --x offset\n            y = 0, --y offset\n    })\n    \n    unitFrame.ClassificationIndicator:Hide()\n    unitFrame.ClassificationIndicatorType = \"none\"\nend",
},
["Time"] = 1696420160,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/8nX2H6c7V/1",
["Icon"] = 298586,
["Enabled"] = true,
["Revision"] = 319,
["semver"] = "1.0.0",
["Author"] = "Sanlulpriest-熊猫酒仙",
["Desc"] = "",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Name"] = "Blizz-Style Border&Indicator",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Blizzlike Classification Indicator",
["Value"] = "Blizzlike Classification Indicator",
["Key"] = "CLASSIFICATION",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Enable",
["Value"] = true,
["Key"] = "enableClassification",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank1",
["Value"] = 0,
["Key"] = "BLANK1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Border Color",
["Value"] = "Border Color",
["Key"] = "BORDER_COLOR",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Enable",
["Value"] = true,
["Key"] = "enableBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Target Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "targetBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Notarget Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "notargetBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateShield(unitFrame)\nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateShield(unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    function envTable.updateShield(frame) \n        local castBar = frame.castBar\n        local shield = castBar.BorderShield\n        \n        if not castBar.canInterrupt then\n            shield:Hide()\n        end \n    end\nend\n\n\n",
},
["Time"] = 1622242504,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/JLVY55vqV/1",
["Icon"] = 133504,
["Enabled"] = true,
["Revision"] = 14,
["semver"] = "1.0.0",
["Author"] = "Egraowdh-Illidan",
["Desc"] = "Removes the shield border on uninterruptible casts",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Name"] = "No Castbar Shield",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Player Logon"] = "function ()\n    local DF = _G [\"DetailsFramework\"]\n    Plater.CreateShowAuraIconAnimation =  function (iconFrame)\n        local iconShowInAnimation = DF:CreateAnimationHub (iconFrame)\n        iconFrame.ShowAnimation = iconShowInAnimation\n    end\nend",
},
["Time"] = 1622995996,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/gSQ9tPyO7/1",
["Icon"] = 519384,
["Enabled"] = true,
["Revision"] = 11,
["semver"] = "1.0.0",
["Author"] = "Ariani-Antonidas",
["Desc"] = "",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Name"] = "Disable Aura Show Animation",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --options\n    --custom indicator is a custom icon added by this script\n    envTable.ShowCustomIndicator = true\n    --regular indicator is the indicator row within Plater default indicators\n    envTable.ShowRegularIndicator = false\n    \n    --custom indicator options\n    envTable.Texture = [[Interface\\AddOns\\Plater\\media\\cross_64]]\n    envTable.Width = 16\n    envTable.Height = 16\n    \n    envTable.Anchor = {\n        side = 7, --topright\n        x = envTable.Width / 2, --x offset\n        y = -envTable.Width / 2, --y offset\n    }\n    \n    envTable.UseClassColor = false\n    envTable.Color = \"white\" --only use this color when use class color is false\n    \n    --private\n    envTable.HealerSpecs = {\n        [105] = true, -->  druid resto\n        [270] = true, --> monk mw\n        [65] = true, --> paladin holy\n        [256] = true,  --> priest disc\n        [257] = true,  --> priest holy\n        [264] = true, --> shaman resto\n    }\n    \n    unitFrame.HealerTexture = unitFrame.HealerTexture or Plater:CreateImage (unitFrame.healthBar.FrameOverlay, texture, envTable.Width, envTable.Height, \"overlay\")\n    \n    unitFrame.HealerTexture.width = envTable.Width\n    unitFrame.HealerTexture.height = envTable.Height\n    unitFrame.HealerTexture.texture = envTable.Texture\n    Plater.SetAnchor (unitFrame.HealerTexture, envTable.Anchor)\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    local Details = Details\n    unitFrame.HealerTexture:Hide()\n    \n    if (Details and Details.realversion >= 134) then\n        local spec = Details:GetSpecByGUID (unitFrame.namePlateUnitGUID)\n        if (spec and envTable.HealerSpecs [spec]) then\n            \n            --custom icon indicator\n            if (envTable.ShowCustomIndicator) then\n                unitFrame.HealerTexture:Show()                \n                if (envTable.UseClassColor) then\n                    unitFrame.HealerTexture.vertexcolor = select (2, UnitClass (unitId))\n                else\n                    unitFrame.HealerTexture.vertexcolor = envTable.Color\n                end\n            end\n            \n            --regular indicator from plater\n            if (envTable.ShowRegularIndicator) then\n                Plater.ShowIndicator (unitFrame, envTable.Texture, envTable.Width, envTable.Height) \n            end\n            \n        end\n    end\n    \nend",
},
["Time"] = 1659734036,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/aIlB_UgaU/1",
["Icon"] = "Interface\\AddOns\\Plater\\media\\cross_64",
["Enabled"] = true,
["Revision"] = 106,
["semver"] = "1.0.0",
["Author"] = "Izimode-Azralon",
["Desc"] = "Add a cross icon into the nameplate of healers. Must have Details! Damage Meter installed.",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Name"] = "Healer Indicator",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ActorType == \"enemyplayer\") then\n        Plater:SetFontSize (unitFrame.unitName, Plater.GetConfig (unitFrame).actorname_text_size)\n    end\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    if (IsActiveBattlefieldArena()) then\n        if (unitFrame.ActorType == \"enemyplayer\") then\n            for i = 1, 5 do\n                local unitGUID = UnitGUID (\"arena\" .. i)\n                if (unitGUID == unitFrame.namePlateUnitGUID) then\n                    unitFrame.unitName:SetText (i)\n                    Plater:SetFontSize (unitFrame.unitName, envTable.FontSize)\n                end\n            end\n        end\n    end\nend\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FontSize = 14\n    \nend\n\n\n",
},
["Time"] = 1682251959,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/U9UuVxS2K/1",
["Icon"] = "Interface\\AddOns\\Plater\\media\\x_64",
["Enabled"] = true,
["Revision"] = 35,
["semver"] = "1.0.0",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show the arena enemy number instead of the player name.",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Name"] = "Arena Enemy Number",
["LastHookEdited"] = "Nameplate Removed",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    local classIcon = unitFrame.classIcon\n    if (classIcon) then\n        classIcon:Hide()\n    end\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    local parent = unitFrame\n    local classIcon = parent.classIcon\n    if (not unitFrame.IsSelf and not unitFrame.namePlateNpcId and unitFrame.namePlateUnitReaction >= 5) then\n        local _,class = UnitClass(unitFrame.unit)\n        classIcon.icon:SetTexCoord(unpack(CLASS_ICON_TCOORDS[class]))\n        classIcon:Show()\n        \n        local icon = parent.classIcon.icon\n        if (parent.healthBar:IsVisible()) then\n            icon:ClearAllPoints()\n            icon:SetPoint ('bottom', parent.healthBar, 'top', 0, 0)\n        else\n            icon:ClearAllPoints()\n            icon:SetPoint ('bottom', parent.ActorNameSpecial, 'top', 0, 0)\n        end\n    else\n        classIcon:Hide()\n    end\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    local parent = unitFrame\n    if (not parent.classIcon) then\n        local classIcon = CreateFrame (\"frame\", nil, unitFrame)\n        classIcon:SetFrameLevel (parent:GetFrameLevel() + 5)\n        classIcon:SetPoint ('topleft', parent, 'topleft', 0, 0)\n        parent.classIcon = classIcon\n        \n        local icon = Plater:CreateImage (classIcon, [[Interface\\TargetingFrame\\UI-Classes-Circles]], 25, 25)\n        classIcon.icon = icon\n    end\nend",
},
["Time"] = 1696420182,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/9DJAuod-L/1",
["Icon"] = 2188585,
["Enabled"] = false,
["Revision"] = 362,
["semver"] = "1.0.0",
["Author"] = "Daisukidesu-Moon Guard",
["Desc"] = "Adds class icons to the top of friendly players nameplates.",
["Prio"] = 99,
["Name"] = "Class Icons Friendly Players",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["version"] = 1,
},
{
["OptionsValues"] = {
["y"] = 4,
["hideauras"] = true,
["hidehp"] = true,
["hidename"] = true,
["test"] = false,
["size"] = 32,
},
["HooksTemp"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if modTable.units[unitFrame.namePlateNpcId] or modTable.config.test then\n        if modTable.config.changecolor then\n            Plater.SetNameplateColor (unitFrame, modTable.config.color)\n        end\n        if modTable.config.hidename then\n            unitFrame.healthBar.unitName:Hide()\n        end\n        if modTable.config.hidehp then\n            unitFrame.healthBar.lifePercent:Hide()\n        end\n        if modTable.config.hideauras then\n            unitFrame.BuffFrame:Hide()\n            unitFrame.BuffFrame2:Hide()\n        end\n    end\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    unitFrame.TIF:Hide()\n    \n    local texture\n    \n    if modTable.config.test then\n        texture = modTable.RandomTexture()\n    else\n        texture = modTable.units[unitFrame.namePlateNpcId]\n    end\n    \n    if not texture then return end\n    \n    unitFrame.TIF.t:SetTexture(texture)\n    unitFrame.TIF:Show()\n    \nend\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    \n    modTable.units = {\n        -- war\n        [119052] = GetSpellTexture(236320), -- War Banner\n        -- sham\n        [3527] = GetSpellTexture(5394), -- Healing Stream Totem\n        [5913] = GetSpellTexture(8143), -- Tremor Totem\n        [61245] = GetSpellTexture(192058), -- Capacitor Totem\n        [2630] = GetSpellTexture(2484), -- Earthbind Totem\n        [53006] = GetSpellTexture(98008), -- Spirit Link Totem\n        [59764] = GetSpellTexture(108280), -- Healing Tide Totem\n        [10467] = GetSpellTexture(16191), -- Mana Tide Totem\n        [6112] = GetSpellTexture(8512), -- Windfury Totem\n        [97369] = GetSpellTexture(192222), -- Liquid Magma Totem\n        [100943] = GetSpellTexture(198838), -- Earthen Wall Totem\n        [78001] = GetSpellTexture(157153), -- Cloudburst Totem\n        [104818] = GetSpellTexture(207399), -- Ancestral Protection Totem\n        [60561] = GetSpellTexture(51485), -- Earthgrab Totem\n        [105427] = GetSpellTexture(204330), -- Skyfury Totem\n        [5925] = GetSpellTexture(204336), -- Grounding Totem\n        [105451] = GetSpellTexture(204331), -- Counterstrike Totem\n        [97285] = GetSpellTexture(192077), -- Wind Rush Totem\n        [166523] = GetSpellTexture(324386), -- Vesper Totem\n        -- tazavesh\n        [179733] = GetSpellTexture(355132),  -- Invigorating Fish Stick\n    }\n    \n    modTable.RandomTexture = function()\n        local random = random(19)\n        local i = 0\n        for k, v in pairs(modTable.units) do\n            i = i+1\n            if i == random then\n                return v\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if not unitFrame.TIF then\n        -- create frame\n        local f = CreateFrame(\"Frame\", nil, unitFrame.healthBar.FrameOverlay)\n        f:SetFrameStrata(\"BACKGROUND\")\n        f:SetWidth(modTable.config.size)\n        f:SetHeight(modTable.config.size)\n        local t = f:CreateTexture(nil, \"BACKGROUND\")\n        t:SetAllPoints(f)\n        f.t = t\n        t:SetTexCoord(.08, .92, .08, .92)\n        f:SetPoint(\"BOTTOM\", unitFrame.healthBar.FrameOverlay, \"TOP\", 0, modTable.config.y)\n        f:Show() \n        unitFrame.TIF = f\n        -- create border\n        unitFrame.TIF.Border = CreateFrame(\n            \"Frame\", \n            nil, \n            f, \n            \"NamePlateFullBorderTemplate\"\n        )\n        unitFrame.TIF.Border:SetVertexColor(0, 0, 0)\n        unitFrame.TIF.Border:SetBorderSizes (0.5, 0.5, 0.5, 0.5)\n        unitFrame.TIF.Border:UpdateSizes()\n    end\n    \nend\n\n\n",
},
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    unitFrame.TIF:Hide()\n    \n    local texture\n    \n    if modTable.config.test then\n        texture = modTable.RandomTexture()\n    else\n        texture = modTable.units[unitFrame.namePlateNpcId]\n    end\n    \n    if not texture then return end\n    \n    unitFrame.TIF.t:SetTexture(texture)\n    unitFrame.TIF:Show()\n    \nend\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if modTable.units[unitFrame.namePlateNpcId] or modTable.config.test then\n        if modTable.config.changecolor then\n            Plater.SetNameplateColor (unitFrame, modTable.config.color)\n        end\n        if modTable.config.hidename then\n            unitFrame.healthBar.unitName:Hide()\n        end\n        if modTable.config.hidehp then\n            unitFrame.healthBar.lifePercent:Hide()\n        end\n        if modTable.config.hideauras then\n            unitFrame.BuffFrame:Hide()\n            unitFrame.BuffFrame2:Hide()\n        end\n    end\n    \nend\n\n\n",
["Initialization"] = "function (modTable)\n    \n    modTable.units = {\n        -- war\n        [119052] = GetSpellTexture(236320), -- War Banner\n        -- sham\n        [3527] = GetSpellTexture(5394), -- Healing Stream Totem\n        [5913] = GetSpellTexture(8143), -- Tremor Totem\n        [61245] = GetSpellTexture(192058), -- Capacitor Totem\n        [2630] = GetSpellTexture(2484), -- Earthbind Totem\n        [53006] = GetSpellTexture(98008), -- Spirit Link Totem\n        [59764] = GetSpellTexture(108280), -- Healing Tide Totem\n        [10467] = GetSpellTexture(16191), -- Mana Tide Totem\n        [6112] = GetSpellTexture(8512), -- Windfury Totem\n        [97369] = GetSpellTexture(192222), -- Liquid Magma Totem\n        [100943] = GetSpellTexture(198838), -- Earthen Wall Totem\n        [78001] = GetSpellTexture(157153), -- Cloudburst Totem\n        [104818] = GetSpellTexture(207399), -- Ancestral Protection Totem\n        [60561] = GetSpellTexture(51485), -- Earthgrab Totem\n        [105427] = GetSpellTexture(204330), -- Skyfury Totem\n        [5925] = GetSpellTexture(204336), -- Grounding Totem\n        [105451] = GetSpellTexture(204331), -- Counterstrike Totem\n        [97285] = GetSpellTexture(192077), -- Wind Rush Totem\n        [166523] = GetSpellTexture(324386), -- Vesper Totem\n        -- tazavesh\n        [179733] = GetSpellTexture(355132),  -- Invigorating Fish Stick\n    }\n    \n    modTable.RandomTexture = function()\n        local random = random(19)\n        local i = 0\n        for k, v in pairs(modTable.units) do\n            i = i+1\n            if i == random then\n                return v\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if not unitFrame.TIF then\n        -- create frame\n        local f = CreateFrame(\"Frame\", nil, unitFrame.healthBar.FrameOverlay)\n        f:SetFrameStrata(\"BACKGROUND\")\n        f:SetWidth(modTable.config.size)\n        f:SetHeight(modTable.config.size)\n        local t = f:CreateTexture(nil, \"BACKGROUND\")\n        t:SetAllPoints(f)\n        f.t = t\n        t:SetTexCoord(.08, .92, .08, .92)\n        f:SetPoint(\"BOTTOM\", unitFrame.healthBar.FrameOverlay, \"TOP\", 0, modTable.config.y)\n        f:Show() \n        unitFrame.TIF = f\n        -- create border\n        unitFrame.TIF.Border = CreateFrame(\n            \"Frame\", \n            nil, \n            f, \n            \"NamePlateFullBorderTemplate\"\n        )\n        unitFrame.TIF.Border:SetVertexColor(0, 0, 0)\n        unitFrame.TIF.Border:SetBorderSizes (0.5, 0.5, 0.5, 0.5)\n        unitFrame.TIF.Border:UpdateSizes()\n    end\n    \nend\n\n\n",
},
["Time"] = 1702826836,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/LBLLVTl9f/6",
["Enabled"] = true,
["Revision"] = 821,
["semver"] = "1.0.5",
["Author"] = "Ретцер-Ревущий фьорд",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "PVP Totem Plates",
["PlaterCore"] = 1,
["version"] = 6,
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 4,
["Key"] = "test",
["Value"] = false,
["Name"] = "test mode",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "delim",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "size & positioning",
["Name"] = "size and positioning",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 256,
["Desc"] = "",
["Min"] = 32,
["Key"] = "size",
["Value"] = 50,
["Name"] = "icon size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "anchor = topcenter",
["Min"] = 0,
["Key"] = "y",
["Value"] = 5,
["Name"] = "y offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "delim",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "plate color",
["Name"] = "color options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changecolor",
["Value"] = true,
["Name"] = "change color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "plate color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "delim",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "other",
["Name"] = "other options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "hidename",
["Value"] = true,
["Name"] = "hide name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "hidehp",
["Value"] = true,
["Name"] = "hide health text",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Max"] = 256,
["Desc"] = "",
["Min"] = 32,
["Key"] = "hideauras",
["Value"] = 50,
["Name"] = "hide auras",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Fraction"] = false,
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    envTable.ShowHealthBar(unitFrame, unitId)\n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    envTable.ShowHealthBar(unitFrame, unitId)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --Use this to change if the names should always show or hide all names except for target\n    envTable.showName = true\n    \n    function envTable.ShowHealthBar(unitFrame, unitId)\n        \n        if((unitFrame.PlayerCannotAttack and unitFrame.namePlateIsTarget) or unitFrame.PlayerCannotAttack \n        == false) then\n            \n            local name = UnitName(unitId) \n            unitFrame.healthBar.unitName: SetText(name)               \n            \n            Plater.ShowHealthBar(unitFrame)\n            \n            --These hide the special names and titles\n            unitFrame.ActorNameSpecial: Hide()\n            unitFrame.ActorTitleSpecial: Hide()\n            \n            unitFrame: Show()    \n            \n        elseif(envTable.showName == false) then\n            \n            unitFrame.ActorNameSpecial: Hide()\n            unitFrame: Hide()\n            \n            \n        else\n            \n            unitFrame.ActorNameSpecial: Show()\n            unitFrame.healthBar: Hide()\n            unitFrame:Show()                \n        end\n    end\nend",
},
["Time"] = 1708647241,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/KbXj85CEz/5",
["Icon"] = 878211,
["Enabled"] = false,
["Revision"] = 747,
["semver"] = "1.0.4",
["Author"] = "Fntp-Argent Dawn",
["Desc"] = "Hides plate of a friendly unless you target it",
["Prio"] = 99,
["Name"] = "HidePlayerName",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    envTable.ShowHealthBar(unitFrame, unitId)\n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    envTable.ShowHealthBar(unitFrame, unitId)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --Use this to change if the names should always show or hide all names except for target\n    envTable.showName = true\n    \n    function envTable.ShowHealthBar(unitFrame, unitId)\n        \n        if((unitFrame.PlayerCannotAttack and unitFrame.namePlateIsTarget) or unitFrame.PlayerCannotAttack \n        == false) then\n            \n            local name = UnitName(unitId) \n            unitFrame.healthBar.unitName: SetText(name)               \n            \n            Plater.ShowHealthBar(unitFrame)\n            \n            --These hide the special names and titles\n            unitFrame.ActorNameSpecial: Hide()\n            unitFrame.ActorTitleSpecial: Hide()\n            \n            unitFrame: Show()    \n            \n        elseif(envTable.showName == false) then\n            \n            unitFrame.ActorNameSpecial: Hide()\n            unitFrame: Hide()\n            \n            \n        else\n            \n            unitFrame.ActorNameSpecial: Show()\n            unitFrame.healthBar: Hide()\n            unitFrame:Show()                \n        end\n    end\nend",
},
["version"] = 5,
},
{
["OptionsValues"] = {
["ignoreFriendly"] = true,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    modTable.lockoutDurations = {\n        [1766] = 5, -- Kick\n        [2139] = 6, -- Counterspell\n        [6552] = 4, -- Pummel\n        [19647] = 6, -- Spell Lock\n        [132409] = 6, -- Spell Lock\n        [115781] = 6, -- Optical Blast\n        [47528] = 3, -- Mind Freeze\n        [57994] = 3, -- Wind Shear\n        [91807] = 2, -- Shambling Rush\n        [96231] = 4, -- Rebuke\n        [93985] = 4, -- Skull Bash\n        [116705] = 4, -- Spear Hand Strike\n        [147362] = 3, -- Counter Shot\n        [183752] = 3, -- Disrupt\n        [187707] = 3, -- Muzzle\n        [212619] = 6, -- Call Felhunter\n        [31935] = 3, -- Avenger's Shield\n        [217824] = 4, -- Shield of Virtue\n        [347008] = 4, -- Axe Toss\n        [97547] = 5, -- Solar Beam\n        [220543] = 3, -- Silence\n    }\n    \n    modTable.data = {}\n    \n    local function isFriendly(flags)\n        return bit.band(flags, COMBATLOG_OBJECT_REACTION_FRIENDLY)  > 0\n    end\n    \n    local function getSchoolColor(school)\n        return COMBATLOG_DEFAULT_COLORS.schoolColoring[school] or COMBATLOG_DEFAULT_COLORS.schoolColoring[Enum.Damageclass.MaskNone]\n    end\n    \n    local function getBorderColor(spellSchool) \n        local borderColor \n        if modTable.config.schoolBorders then\n            borderColor = getSchoolColor(spellSchool)\n        elseif Plater.db.profile.extra_icon_use_blizzard_border_color then\n            local color = DebuffTypeColor[\"none\"] or {r=0, b=0, g=0, a=0}\n            borderColor = {color.r, color.g, color.b, color.a or 1}\n        else\n            borderColor = Plater.db.profile.extra_icon_border_color\n        end\n        return borderColor\n    end\n    \n    local basekick = {\n        Show = function(self, frame)\n            local borderColor = getBorderColor(self.spellSchool)\n            frame:AddSpecificIcon(\n                self.id, \n                self.spellId, \n                borderColor, \n                self.startTime, \n                self.duration, \n                nil, \n                self.casterName and {text = self.casterName, text_color = self.casterClass} or false,\n                1, \n                nil, \n                self.caster, \n                false, \n                self.spellName, \n                nil\n            )\n            self.frame = frame\n        end,\n        Hide = function(self)\n            if self.frame then\n                self.frame:RemoveSpecificIcon(self.id)\n            end\n        end\n    }\n    \n    local function OnEvent(self, event)\n        local details = { CombatLogGetCurrentEventInfo() }\n        \n        if details[2] ~= \"SPELL_INTERRUPT\" then return end\n        if modTable.config.ignoreFriendly and isFriendly(details[10]) then return end\n        \n        local guid = details[8]\n        local spellId = details[12]\n        local texure = GetSpellTexture(spellId)\n        local spellName = details[13]\n        local school = details[17]\n        local caster = details[5]\n        local casterClass = select(2, UnitClass(caster or \"\"))\n        local casterName\n        if (casterClass and UnitPlayerControlled(caster)) then\n            casterName = UnitName(caster)\n        end\n        local startTime = GetTime()\n        local duration = modTable.lockoutDurations[spellId] or 4\n        local expirationTime = (startTime + duration)\n        local id = caster..startTime\n        \n        modTable.data[guid] = modTable.data[guid] or {}\n        \n        local kick = {\n            id = id,\n            spellId = spellId,\n            spellName = spellName,\n            texture = texure,\n            startTime = startTime,\n            duration = duration,\n            expirationTime = expirationTime,\n            caster = caster,\n            casterName = casterName,\n            casterClass = casterClass,\n            spellSchool = school,\n            Show = basekick.Show,\n            Hide = basekick.Hide\n        }\n        \n        modTable.data[guid][id] = kick\n        \n        C_Timer.NewTimer(duration, function()\n                kick:Hide()\n                modTable.data[guid][id] = nil\n                if next(modTable.data[guid]) == nil then\n                    modTable.data[guid] = nil\n                end\n        end)\n        \n    end\n    \n    modTable.eventFrame = modTable.eventFrame or GlobalPlaterInterruptEventFrame\n    if not modTable.eventFrame then\n        modTable.eventFrame = CreateFrame(\"Frame\", \"GlobalPlaterInterruptEventFrame\")\n        modTable.eventFrame:RegisterEvent(\"COMBAT_LOG_EVENT_UNFILTERED\")\n    end\n    \n    modTable.eventFrame:SetScript(\"OnEvent\",  OnEvent)\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local kicks = modTable.data[unitFrame.namePlateUnitGUID] or {}\n    for _, kick in pairs(kicks) do\n        kick:Show(unitFrame.ExtraIconFrame)\n    end\n    \nend",
},
["Time"] = 1698185255,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/mA-zQQEsD/4",
["Enabled"] = false,
["Revision"] = 924,
["semver"] = "1.0.3",
["Author"] = "Ретцер-Ревущий фьорд",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "PVP/PVE School Lock Buff Special",
["PlaterCore"] = 1,
["version"] = 4,
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 4,
["Key"] = "schoolBorders",
["Value"] = false,
["Name"] = "School based border color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change color of icon border depending on locked school",
},
{
["Type"] = 4,
["Key"] = "ignoreFriendly",
["Value"] = false,
["Name"] = "Ignore friendly nameplates",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore interrupts for friendly nameplates",
},
},
},
{
["Enabled"] = false,
["Revision"] = 12,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Options"] = {
},
["Author"] = "Healjkoom-Sargeras",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["UID"] = "0x65d7db972144bd31",
["Hooks"] = {
},
["Prio"] = 99,
["Time"] = 1708646129,
["PlaterCore"] = 1,
["Desc"] = "",
["Name"] = "New Mod",
["Icon"] = "",
["LastHookEdited"] = "",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    envTable.addHook(unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.addHook(unitFrame)\nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.healthBar.customShieldHookNeedsUpdate = true\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    local hb = unitFrame.healthBar\n    if hb.customShieldHookNeedsUpdate and hb.displayedUnit then\n        hb:UNIT_MAXHEALTH()\n        hb.customShieldHookNeedsUpdate = false\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.LibSharedMedia = LibStub:GetLibrary (\"LibSharedMedia-3.0\")\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --Disable for classic\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        function envTable.addHook(unitFrame) end\n        return\n    end\n    \n    --settings: (changing this requires a /reload)\n    local shieldTexture = \"\"\n    --local shieldTexture = \"Details Flat\"\n    local useHalfBar = false --use a \"half bar\" overlay if the health+absorb is > 100% of the health\n    local showAlways = false --show absorbs value if health amount is disabled\n    \n    \n    --init\n    local hb = unitFrame.healthBar\n    local unit = hb.displayedUnit\n    if shieldTexture and shieldTexture ~= \"\" then\n        local texture = modTable.LibSharedMedia:Fetch(\"statusbar\", shieldTexture)\n        hb.Settings.ShieldIndicatorTexture = texture or [[Interface\\RaidFrame\\Shield-Fill]]\n        hb.shieldAbsorbIndicator:SetTexture (hb.Settings.ShieldIndicatorTexture, true, true)\n    else\n        hb.Settings.ShieldIndicatorTexture = [[Interface\\RaidFrame\\Shield-Fill]]\n        hb.shieldAbsorbIndicator:SetTexture (hb.Settings.ShieldIndicatorTexture, true, true)\n    end\n    \n    -- ensure settings are up to date... workardound till fix in Plater core.\n    unitFrame.healthBar.Settings.ShowShields = Plater.db.profile.show_shield_prediction\n    \n    -- overwrite to add custom text\n    function Plater.UpdateLifePercentText (healthBar, unitId, showHealthAmount, showPercentAmount, showDecimals) -- ~health\n        \n        --get the cached health amount for performance\n        local currentHealth, maxHealth, absorb = healthBar.CurrentHealth, healthBar.CurrentHealthMax, healthBar.currentAbsorb\n        \n        if (showHealthAmount and showPercentAmount) then\n            local percent = currentHealth / maxHealth * 100\n            \n            if (showDecimals) then\n                if (percent < 10) then\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. format (\"%.2f\", percent) .. \"%)\")\n                    \n                elseif (percent < 99.9) then\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. format (\"%.1f\", percent) .. \"%)\")\n                else\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (100%)\")\n                end\n            else\n                healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. floor (percent) .. \"%)\")\n            end\n            \n        elseif (showHealthAmount) then\n            healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth))\n            \n        elseif (showPercentAmount) then\n            local percent = currentHealth / maxHealth * 100\n            \n            if (showDecimals) then\n                if (percent < 10) then\n                    healthBar.lifePercent:SetText (format (\"%.2f\", percent) .. \"%\")\n                    \n                elseif (percent < 99.9) then\n                    healthBar.lifePercent:SetText (format (\"%.1f\", percent) .. \"%\")\n                else\n                    healthBar.lifePercent:SetText (\"100%\")\n                end\n            else\n                healthBar.lifePercent:SetText (floor (percent) .. \"%\")\n            end\n            \n        else\n            healthBar.lifePercent:SetText (\"\")\n        end\n        \n        -- CUSTOM HERE --\n        if healthBar.currentAbsorb and healthBar.currentAbsorb > 0 then\n            if (showHealthAmount or showPercentAmount) then\n                healthBar.lifePercent:SetText(healthBar.lifePercent:GetText() .. \"  -  \" .. Plater.FormatNumber(healthBar.currentAbsorb))\n            elseif showAlways then\n                healthBar.lifePercent:SetText(Plater.FormatNumber(healthBar.currentAbsorb))\n            end\n        end\n        -- CUSTOM END --\n    end\n    \n    \n    -- overwrite UpdateHealPrediction on the healthBar\n    function envTable.addHook(unitFrame)\n        if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n            return\n        end\n        local hb = unitFrame.healthBar\n        \n        if not hb.isCustomShieldHook then\n            --health and absorbs prediction from Plater core, reworked to integrate shields into the health bar\n            hb.UpdateHealPrediction = function (self)\n                local currentHealth = self.currentHealth\n                local currentHealthMax = self.currentHealthMax\n                local healthPercent = currentHealth / currentHealthMax\n                \n                if (not currentHealthMax or currentHealthMax <= 0) then\n                    return\n                end\n                \n                --order is: the health of the unit > damage absorb > heal absorb > incoming heal\n                local width = self:GetWidth()\n                \n                hb.shieldAbsorbIndicator:Hide()\n                hb.shieldAbsorbGlow:Hide()\n                \n                if not self.displayedUnit then return end\n                \n                if (self.Settings.ShowHealingPrediction) then\n                    --incoming heal on the unit from all sources\n                    local unitHealIncoming = UnitGetIncomingHeals (self.displayedUnit) or 0\n                    --heal absorbs\n                    local unitHealAbsorb = UnitGetTotalHealAbsorbs (self.displayedUnit) or 0\n                    \n                    if (unitHealIncoming > 0) then\n                        --calculate what is the percent of health incoming based on the max health the player has\n                        local incomingPercent = unitHealIncoming / currentHealthMax\n                        self.incomingHealIndicator:Show()\n                        self.incomingHealIndicator:SetWidth (max (1, min (width * incomingPercent, abs (healthPercent - 1) * width)))\n                        self.incomingHealIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercent, 0)\n                        self.incomingHealIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercent, 0)\n                    else\n                        self.incomingHealIndicator:Hide()\n                    end\n                    \n                    if (unitHealAbsorb > 0) then\n                        local healAbsorbPercent = unitHealAbsorb / currentHealthMax\n                        self.healAbsorbIndicator:Show()\n                        self.healAbsorbIndicator:SetWidth (max (1, min (width * healAbsorbPercent, abs (healthPercent - 1) * width)))\n                        self.healAbsorbIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercent, 0)\n                        self.healAbsorbIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercent, 0)\n                    else\n                        self.healAbsorbIndicator:Hide()\n                    end\n                end\n                \n                if (self.Settings.ShowShields) then\n                    --damage absorbs\n                    local unitDamageAbsorb = UnitGetTotalAbsorbs (self.displayedUnit) or 0\n                    self.currentAbsorb = unitDamageAbsorb\n                    \n                    if (unitDamageAbsorb > 0) then\n                        local curHealthTotal = unitDamageAbsorb + currentHealth\n                        local damageAbsorbPercent\n                        local healthPercentAbsorb\n                        local isHalfBar = false\n                        if curHealthTotal > currentHealthMax then\n                            if useHalfBar then\n                                damageAbsorbPercent = unitDamageAbsorb / currentHealthMax\n                                if damageAbsorbPercent > 1 then\n                                    damageAbsorbPercent = 1 -- just limit it to the healthbar width...\n                                end\n                                healthPercentAbsorb = 1 - damageAbsorbPercent\n                                self:SetMinMaxValues (0, currentHealthMax)\n                                \n                                isHalfBar = true\n                            else\n                                damageAbsorbPercent = unitDamageAbsorb / curHealthTotal\n                                healthPercentAbsorb = currentHealth / curHealthTotal\n                                self:SetMinMaxValues (0, curHealthTotal)\n                            end\n                        else \n                            damageAbsorbPercent = unitDamageAbsorb / currentHealthMax\n                            healthPercentAbsorb = currentHealth / currentHealthMax\n                            self:SetMinMaxValues (0, currentHealthMax)\n                        end\n                        --print(healthPercentAbsorb, currentHealth, unitDamageAbsorb, damageAbsorbPercent)\n                        \n                        \n                        self.shieldAbsorbIndicator:SetWidth (width * damageAbsorbPercent)\n                        self.shieldAbsorbIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercentAbsorb, (isHalfBar and (- self:GetHeight() / 2)) or 0)\n                        self.shieldAbsorbIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercentAbsorb, 0)\n                        \n                        self.shieldAbsorbIndicator:Show()\n                        \n                    else\n                        self.shieldAbsorbIndicator:Hide()\n                    end\n                end\n                \n                hb.isCustomShieldHook = true\n            end\n            \n            if hb.displayedUnit then\n                hb.shieldAbsorbIndicator:Hide()\n                hb.shieldAbsorbGlow:Hide()\n                hb:UNIT_MAXHEALTH()\n            else\n                hb.customShieldHookNeedsUpdate = true\n            end\n            \n        end\n    end\n    \nend",
},
["Time"] = 1716069914,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/VtPjNl8Mg/7",
["Icon"] = 135940,
["Enabled"] = true,
["Revision"] = 1173,
["semver"] = "1.0.6",
["Author"] = "Elaiana-Proudmoore",
["Desc"] = "Adds absorbs to the health bar as full health value.",
["Prio"] = 99,
["Name"] = "Absorb Shields in Healthbar",
["PlaterCore"] = 1,
["version"] = 7,
["HooksTemp"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    envTable.addHook(unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.addHook(unitFrame)\nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.healthBar.customShieldHookNeedsUpdate = true\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    local hb = unitFrame.healthBar\n    if hb.customShieldHookNeedsUpdate and hb.displayedUnit then\n        hb:UNIT_MAXHEALTH()\n        hb.customShieldHookNeedsUpdate = false\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.LibSharedMedia = LibStub:GetLibrary (\"LibSharedMedia-3.0\")\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --Disable for classic\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        function envTable.addHook(unitFrame) end\n        return\n    end\n    \n    --settings: (changing this requires a /reload)\n    local shieldTexture = \"\"\n    --local shieldTexture = \"Details Flat\"\n    local useHalfBar = false --use a \"half bar\" overlay if the health+absorb is > 100% of the health\n    local showAlways = false --show absorbs value if health amount is disabled\n    \n    \n    --init\n    local hb = unitFrame.healthBar\n    local unit = hb.displayedUnit\n    if shieldTexture and shieldTexture ~= \"\" then\n        local texture = modTable.LibSharedMedia:Fetch(\"statusbar\", shieldTexture)\n        hb.Settings.ShieldIndicatorTexture = texture or [[Interface\\RaidFrame\\Shield-Fill]]\n        hb.shieldAbsorbIndicator:SetTexture (hb.Settings.ShieldIndicatorTexture, true, true)\n    else\n        hb.Settings.ShieldIndicatorTexture = [[Interface\\RaidFrame\\Shield-Fill]]\n        hb.shieldAbsorbIndicator:SetTexture (hb.Settings.ShieldIndicatorTexture, true, true)\n    end\n    \n    -- ensure settings are up to date... workardound till fix in Plater core.\n    unitFrame.healthBar.Settings.ShowShields = Plater.db.profile.show_shield_prediction\n    \n    -- overwrite to add custom text\n    function Plater.UpdateLifePercentText (healthBar, unitId, showHealthAmount, showPercentAmount, showDecimals) -- ~health\n        \n        --get the cached health amount for performance\n        local currentHealth, maxHealth, absorb = healthBar.CurrentHealth, healthBar.CurrentHealthMax, healthBar.currentAbsorb\n        \n        if (showHealthAmount and showPercentAmount) then\n            local percent = currentHealth / maxHealth * 100\n            \n            if (showDecimals) then\n                if (percent < 10) then\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. format (\"%.2f\", percent) .. \"%)\")\n                    \n                elseif (percent < 99.9) then\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. format (\"%.1f\", percent) .. \"%)\")\n                else\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (100%)\")\n                end\n            else\n                healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. floor (percent) .. \"%)\")\n            end\n            \n        elseif (showHealthAmount) then\n            healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth))\n            \n        elseif (showPercentAmount) then\n            local percent = currentHealth / maxHealth * 100\n            \n            if (showDecimals) then\n                if (percent < 10) then\n                    healthBar.lifePercent:SetText (format (\"%.2f\", percent) .. \"%\")\n                    \n                elseif (percent < 99.9) then\n                    healthBar.lifePercent:SetText (format (\"%.1f\", percent) .. \"%\")\n                else\n                    healthBar.lifePercent:SetText (\"100%\")\n                end\n            else\n                healthBar.lifePercent:SetText (floor (percent) .. \"%\")\n            end\n            \n        else\n            healthBar.lifePercent:SetText (\"\")\n        end\n        \n        -- CUSTOM HERE --\n        if healthBar.currentAbsorb and healthBar.currentAbsorb > 0 then\n            if (showHealthAmount or showPercentAmount) then\n                healthBar.lifePercent:SetText(healthBar.lifePercent:GetText() .. \"  -  \" .. Plater.FormatNumber(healthBar.currentAbsorb))\n            elseif showAlways then\n                healthBar.lifePercent:SetText(Plater.FormatNumber(healthBar.currentAbsorb))\n            end\n        end\n        -- CUSTOM END --\n    end\n    \n    \n    -- overwrite UpdateHealPrediction on the healthBar\n    function envTable.addHook(unitFrame)\n        if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n            return\n        end\n        local hb = unitFrame.healthBar\n        \n        if not hb.isCustomShieldHook then\n            --health and absorbs prediction from Plater core, reworked to integrate shields into the health bar\n            hb.UpdateHealPrediction = function (self)\n                local currentHealth = self.currentHealth\n                local currentHealthMax = self.currentHealthMax\n                local healthPercent = currentHealth / currentHealthMax\n                \n                if (not currentHealthMax or currentHealthMax <= 0) then\n                    return\n                end\n                \n                --order is: the health of the unit > damage absorb > heal absorb > incoming heal\n                local width = self:GetWidth()\n                \n                hb.shieldAbsorbIndicator:Hide()\n                hb.shieldAbsorbGlow:Hide()\n                \n                if not self.displayedUnit then return end\n                \n                if (self.Settings.ShowHealingPrediction) then\n                    --incoming heal on the unit from all sources\n                    local unitHealIncoming = UnitGetIncomingHeals (self.displayedUnit) or 0\n                    --heal absorbs\n                    local unitHealAbsorb = UnitGetTotalHealAbsorbs (self.displayedUnit) or 0\n                    \n                    if (unitHealIncoming > 0) then\n                        --calculate what is the percent of health incoming based on the max health the player has\n                        local incomingPercent = unitHealIncoming / currentHealthMax\n                        self.incomingHealIndicator:Show()\n                        self.incomingHealIndicator:SetWidth (max (1, min (width * incomingPercent, abs (healthPercent - 1) * width)))\n                        self.incomingHealIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercent, 0)\n                        self.incomingHealIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercent, 0)\n                    else\n                        self.incomingHealIndicator:Hide()\n                    end\n                    \n                    if (unitHealAbsorb > 0) then\n                        local healAbsorbPercent = unitHealAbsorb / currentHealthMax\n                        self.healAbsorbIndicator:Show()\n                        self.healAbsorbIndicator:SetWidth (max (1, min (width * healAbsorbPercent, abs (healthPercent - 1) * width)))\n                        self.healAbsorbIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercent, 0)\n                        self.healAbsorbIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercent, 0)\n                    else\n                        self.healAbsorbIndicator:Hide()\n                    end\n                end\n                \n                if (self.Settings.ShowShields) then\n                    --damage absorbs\n                    local unitDamageAbsorb = UnitGetTotalAbsorbs (self.displayedUnit) or 0\n                    self.currentAbsorb = unitDamageAbsorb\n                    \n                    if (unitDamageAbsorb > 0) then\n                        local curHealthTotal = unitDamageAbsorb + currentHealth\n                        local damageAbsorbPercent\n                        local healthPercentAbsorb\n                        local isHalfBar = false\n                        if curHealthTotal > currentHealthMax then\n                            if useHalfBar then\n                                damageAbsorbPercent = unitDamageAbsorb / currentHealthMax\n                                if damageAbsorbPercent > 1 then\n                                    damageAbsorbPercent = 1 -- just limit it to the healthbar width...\n                                end\n                                healthPercentAbsorb = 1 - damageAbsorbPercent\n                                self:SetMinMaxValues (0, currentHealthMax)\n                                \n                                isHalfBar = true\n                            else\n                                damageAbsorbPercent = unitDamageAbsorb / curHealthTotal\n                                healthPercentAbsorb = currentHealth / curHealthTotal\n                                self:SetMinMaxValues (0, curHealthTotal)\n                            end\n                        else \n                            damageAbsorbPercent = unitDamageAbsorb / currentHealthMax\n                            healthPercentAbsorb = currentHealth / currentHealthMax\n                            self:SetMinMaxValues (0, currentHealthMax)\n                        end\n                        --print(healthPercentAbsorb, currentHealth, unitDamageAbsorb, damageAbsorbPercent)\n                        \n                        \n                        self.shieldAbsorbIndicator:SetWidth (width * damageAbsorbPercent)\n                        self.shieldAbsorbIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercentAbsorb, (isHalfBar and (- self:GetHeight() / 2)) or 0)\n                        self.shieldAbsorbIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercentAbsorb, 0)\n                        \n                        self.shieldAbsorbIndicator:Show()\n                        \n                    else\n                        self.shieldAbsorbIndicator:Hide()\n                    end\n                end\n                \n                hb.isCustomShieldHook = true\n            end\n            \n            if hb.displayedUnit then\n                hb.shieldAbsorbIndicator:Hide()\n                hb.shieldAbsorbGlow:Hide()\n                hb:UNIT_MAXHEALTH()\n            else\n                hb.customShieldHookNeedsUpdate = true\n            end\n            \n        end\n    end\n    \nend",
},
["Options"] = {
{
["Type"] = 5,
["Name"] = "Options Intro",
["Value"] = "Options For @scriptname",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = "",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
},
{
["LastHookEdited"] = "Nameplate Created",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- /RELOAD AFTER IMPORTING OR CHANGING THE SCRIPT\n    -- SELECT THE INDICATOR AT THE TARGET TAB\n    \n    Plater.TargetIndicators    [\"Double Arrows\"] = {\n        path = [[Interface\\AddOns\\Plater\\media\\arrow_double_right_64]],\n        coords = {\n            {0, 1, 0, 1}, \n            {1, 0, 0, 1}\n        },\n        desaturated = false,\n        width = 17,\n        height = 13,\n        x = 14,\n        y = 0,\n        blend = \"ADD\",\n        color = \"white\",\n    }    \n    \nend\n\n\n",
},
["Time"] = 1716069959,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\arrow_double_right_64",
["Enabled"] = true,
["Revision"] = 166,
["semver"] = "",
["Author"] = "�r��ne-Kel'thuzad",
["Desc"] = "Adds double arrow as a target indicators option",
["Prio"] = 99,
["Name"] = "Double Arrow Target",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- /RELOAD AFTER IMPORTING OR CHANGING THE SCRIPT\n    -- SELECT THE INDICATOR AT THE TARGET TAB\n    \n    Plater.TargetIndicators    [\"Double Arrows\"] = {\n        path = [[Interface\\AddOns\\Plater\\media\\arrow_double_right_64]],\n        coords = {\n            {0, 1, 0, 1}, \n            {1, 0, 0, 1}\n        },\n        desaturated = false,\n        width = 17,\n        height = 13,\n        x = 14,\n        y = 0,\n        blend = \"ADD\",\n        color = \"white\",\n    }    \n    \nend\n\n\n",
},
["version"] = -1,
},
},
["auras_per_row_auto"] = false,
["aura_width2"] = 21,
["aura_stack_size"] = 11,
["aura_timer_decimals"] = true,
["aura_width"] = 29,
["aura_show_offensive_cd"] = true,
["bossmod_support_enabled"] = false,
["ghost_auras"] = {
["enabled"] = true,
["height"] = 4.546186923980713,
["width"] = 1.123701930046082,
["alpha"] = 0.7449636459350586,
["auras"] = {
["MONK"] = {
[2] = {
[411038] = true,
[116095] = true,
},
},
},
},
["health_cutoff"] = false,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["script_auto_imported"] = {
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 2,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Unit - Health Markers"] = 12,
["Cast - Tank Interrupt"] = 12,
["Cast - Important Target [P]"] = 2,
["Cast - Very Important"] = 15,
["Cast - Alert + Timer [P]"] = 4,
["Aura is Shield [P]"] = 2,
["Add - Warning [P]"] = 5,
["Fixate On You"] = 11,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Relics 9.2 M Dungeons"] = 2,
["Unit - Important"] = 11,
["Auto Set Skull"] = 11,
["Fixate"] = 11,
["Spiteful Affix"] = 3,
["Cast - Shield Interrupt"] = 2,
["Add - Non Elite Trash [P]"] = 4,
["Cast - On Going Cast [P]"] = 2,
["Countdown"] = 11,
["Cast - Stop Casting"] = 4,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 15,
["Add - Explode on Die [P]"] = 1,
["Explosion Affix M+"] = 14,
["Cast - Quick Flash"] = 2,
["Cast - Glowing [P]"] = 10,
["Unit - Show Energy"] = 11,
},
["target_highlight_color"] = {
nil,
1,
0.545098066329956,
},
["extra_icon_wide_icon"] = false,
["range_check_alpha"] = 1,
["click_space"] = {
180,
36,
},
["extra_icon_auras"] = {
360806,
"Precognition",
},
["castbar_target_font"] = "Friz Quadrata TT",
["semver"] = "1.0.6",
["range_check_in_range_or_target_alpha_friendlies"] = 0.8999999761581421,
["aura_frame2_anchor"] = {
["y"] = 11,
},
["cast_statusbar_texture"] = "Blizzard",
["auto_toggle_friendly"] = {
["cities"] = false,
["world"] = false,
},
["indicator_faction"] = false,
["castbar_icon_x_offset"] = 7,
["debuff_show_cc"] = false,
["pet_height_scale"] = 0.5699999928474426,
["aura_x_offset"] = 0,
["first_run3"] = true,
["transparency_behavior"] = 4,
["spell_animations"] = false,
["ui_parent_scale_tune"] = 1.559999942779541,
["health_statusbar_bgtexture"] = "Blizzard",
["indicator_raidmark_anchor"] = {
["y"] = -8.740005493164062,
["x"] = -0.06000518798828125,
["side"] = 9,
},
["extra_icon_width"] = 32.53479385375977,
["tank"] = {
["colors"] = {
["aggro"] = {
1,
0.003921568627451,
0,
},
},
},
["health_statusbar_texture"] = "Blizzard",
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Aura Reorder"] = 3,
["Cast Bar Icon Config"] = 2,
["Execute Range"] = 1,
["Extra Border"] = 2,
["Hide Neutral Units"] = 1,
["Target Color"] = 3,
["Attacking Specific Unit"] = 2,
["Combo Points"] = 6,
},
["cast_statusbar_color"] = {
nil,
0.70588235294118,
nil,
1,
},
["update_throttle"] = 0.1200000047683716,
["minor_width_scale"] = 0.8999999761581421,
["color_override"] = false,
["castbar_target_text_size"] = 8,
["focus_indicator_enabled"] = false,
["aura_frame1_anchor"] = {
["y"] = 20,
["side"] = 1,
},
["range_check_cast_bar_alpha_friendlies"] = 0,
["indicator_extra_raidmark"] = false,
["aura_show_debuffs_personal"] = false,
["indicator_rare"] = false,
["aura_show_dispellable"] = false,
["not_affecting_combat_alpha"] = 0.6499999761581421,
["aura_show_important"] = false,
["aura_height"] = 27,
["cast_statusbar_bgtexture"] = "Blizzard",
["aura2_x_offset"] = 0,
["target_indicator"] = "NONE",
["aura_show_buff_by_the_unit"] = false,
["target_shady_alpha"] = 0.949999988079071,
["extra_icon_show_swipe"] = false,
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "1",
["nameplateOverlapV"] = "0.20000000298023",
["nameplateLargeTopInset"] = "0.079999998211861",
["nameplateShowEnemyMinus"] = "0",
["NamePlateClassificationScale"] = "1.25",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplateOverlapH"] = "0.8",
["nameplateTargetRadialPosition"] = "1",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "41",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "1.008597612381",
["nameplateTargetBehindMaxDistance"] = "15",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "2.7",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "0",
["nameplatePersonalShowAlways"] = "0",
["nameplateMotionSpeed"] = "0.024999998509884",
["nameplateShowEnemyMinions"] = "0",
["nameplateShowEnemyPets"] = "1",
["nameplateShowFriendlyNPCs"] = "0",
["nameplateSelectedScale"] = "1.2008646726608",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateMotion"] = "0",
["nameplateMinScale"] = "0.8",
["nameplateShowDebuffsOnFriendly"] = "0",
["nameplateOtherTopInset"] = "0.079999998211861",
["nameplateShowEnemyGuardians"] = "0",
["NamePlateHorizontalScale"] = "1.4",
["nameplateShowEnemyTotems"] = "1",
["nameplateShowFriendlyGuardians"] = "0",
["nameplateOccludedAlphaMult"] = "1",
["nameplateShowFriends"] = "1",
["ShowNamePlateLoseAggroFlash"] = "0",
["ShowClassColorInNameplate"] = "1",
["nameplatePersonalShowInCombat"] = "0",
},
["indicator_elite"] = false,
["aura_enabled"] = false,
["login_counter"] = 34135,
["extra_icon_caster_name"] = false,
["click_space_friendly"] = {
111,
27,
},
["focus_texture"] = "Blizzard",
["aura_show_aura_by_the_player"] = false,
["indicator_raidmark_scale"] = 0.2000000029802322,
["border_thickness"] = 1.100000023841858,
["npc_colors"] = {
[3296] = {
true,
false,
"white",
},
},
["range_check_enabled"] = false,
["cast_statusbar_bgcolor"] = {
0,
0,
0,
0.49000000953674,
},
["resources"] = {
["scale"] = 0.800000011920929,
},
["patch_version"] = 36,
["pet_width_scale"] = 0.5699999928474426,
["range_check_in_range_or_target_alpha"] = 1,
["aura_timer_text_size"] = 10,
["health_selection_overlay_alpha"] = 0,
["health_selection_overlay"] = "Blizzard",
["number_region_first_run"] = true,
["stacking_nameplates_enabled"] = false,
["aura_tracker"] = {
["debuff"] = {
411038,
397899,
198909,
419865,
295459,
418561,
33786,
107570,
6466,
34694,
105421,
207167,
183517,
132651,
383005,
346992,
175940,
389270,
211015,
178072,
221527,
316595,
415001,
305485,
214429,
190481,
171153,
346736,
107079,
360958,
355336,
356723,
15487,
360806,
76577,
356727,
47476,
233759,
408,
3355,
321177,
396392,
200327,
317898,
5211,
99,
22570,
78675,
102359,
360806,
213691,
187650,
31661,
389794,
390171,
113724,
198898,
20066,
853,
115750,
8122,
15487,
64044,
1776,
408,
2094,
357768,
406896,
403662,
},
["buff_tracked"] = {
["227931"] = true,
["297133"] = true,
["163689"] = true,
["233210"] = true,
["209859"] = true,
},
["buff"] = {
13750,
108978,
203272,
189949,
292158,
368364,
189300,
1022,
6940,
210256,
360827,
144302,
292222,
390381,
248773,
123715,
118038,
122783,
196718,
79811,
401018,
329977,
388917,
321177,
289626,
418647,
198144,
292152,
54792,
81098,
394013,
394786,
173565,
102342,
53271,
212295,
196555,
383618,
363916,
129035,
316849,
122860,
278454,
279043,
236157,
125174,
740,
173189,
413004,
31519,
383269,
51271,
48792,
51052,
48707,
191427,
212800,
196718,
196555,
29166,
194223,
102543,
102560,
102558,
102342,
378464,
370960,
360827,
186265,
288613,
264735,
360952,
53271,
53480,
45438,
365350,
365362,
342245,
115203,
122278,
115078,
119381,
122783,
31884,
204018,
210256,
1022,
184662,
498,
642,
200183,
33206,
10060,
197268,
47788,
47536,
47585,
62618,
213610,
31224,
5277,
13750,
377362,
},
["track_method"] = 2,
["debuff_tracked"] = {
[357768] = true,
[198909] = true,
[313030] = true,
[411038] = true,
[397899] = true,
[419865] = true,
},
["buff_banned"] = {
["11649"] = true,
["5697"] = true,
["61574"] = true,
["333553"] = true,
["206150"] = true,
["61573"] = true,
},
},
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 0.9000000357627869,
},
},
["target_highlight_height"] = 10,
["target_highlight_alpha"] = 1,
["hide_friendly_castbars"] = true,
["transparency_behavior_on_enemies"] = false,
["version"] = 7,
["hover_highlight_alpha"] = 0.2999999821186066,
["target_shady_enabled"] = false,
["dps"] = {
["colors"] = {
["notontank"] = {
1,
0.043137254901961,
0,
},
["solo"] = {
1,
0,
0.003921568627451,
},
["noaggro"] = {
1,
0.003921568627451,
0,
},
},
},
["health_statusbar_bgcolor"] = {
0.11372549831867,
0.11372549831867,
0.11372549831867,
0.89000000059605,
},
["extra_icon_timer_outline"] = "OUTLINE",
["aura_alpha"] = 1,
["extra_icon_height"] = 27.18725395202637,
["aura_grow_direction"] = 3,
["range_check_alpha_friendlies"] = 1,
["auto_toggle_stacking"] = {
["party"] = false,
["raid"] = false,
["arena"] = false,
["world"] = false,
},
["extra_icon_show_stacks"] = false,
["aura_timer_text_font"] = "Friz Quadrata TT",
["target_highlight_texture"] = "Interface\\AddOns\\Plater\\images\\selection_indicator6",
},
["Default"] = {
["target_shady_combat_only"] = false,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 632,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Add the buff name in the trigger box.",
["NpcNames"] = {
},
["SpellIds"] = {
398151,
377738,
378149,
},
["PlaterCore"] = 1,
["Name"] = "Aura - Buff Alert [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1670201853,
["url"] = "",
["Icon"] = 2175503,
["Enabled"] = true,
["Revision"] = 533,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
240446,
385339,
198077,
210261,
360857,
389446,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Explosion Affix M+ [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 368,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Desc"] = "Add the debuff name in the trigger box.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Aura - Debuff Alert [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203758,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1213,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Cast start animation settings",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Key"] = "timerList",
["Value"] = {
},
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["version"] = -1,
["Name"] = "Cast - Alert + Timer [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670790652,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = true,
["Revision"] = 694,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["NpcNames"] = {
},
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
209410,
211464,
361180,
156718,
395859,
358320,
374045,
386757,
367500,
370225,
376200,
372107,
388923,
376934,
384899,
373960,
374724,
385551,
259732,
373424,
373084,
87618,
255041,
428926,
76634,
200050,
197546,
198079,
199193,
266181,
253544,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Ultra Important [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Name"] = "Health Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1669325410,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["Enabled"] = true,
["Revision"] = 662,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
376851,
396044,
381517,
373932,
397801,
208165,
392576,
198750,
387843,
387411,
211299,
198595,
198934,
198962,
156722,
281420,
274383,
259092,
367521,
374544,
385039,
382474,
369823,
377500,
260879,
186269,
378818,
371875,
372225,
200658,
266036,
265407,
164965,
429176,
428526,
418200,
407124,
415437,
264050,
267824,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Small Alert [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a small animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1626382829,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
["Enabled"] = true,
["Revision"] = 375,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "blinkEnabled",
["Value"] = true,
["Name"] = "Blink Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = true,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = false,
["Name"] = "Change NamePlate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 3,
["Name"] = "Timeleft to Blink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeleftToBlink",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Blink Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "blinkSpeed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.6,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "blinkMaxAlpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.2862745098039216,
0.00392156862745098,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "timerColorEnabled",
["Value"] = true,
["Name"] = "Timer Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Warning",
["Value"] = 8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeLeftWarning",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Critical",
["Value"] = 3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeLeftCritical",
},
{
["Type"] = 1,
["Key"] = "warningColor",
["Value"] = {
1,
0.8705882352941177,
0,
1,
},
["Name"] = "Warning Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Key"] = "criticalColor",
["Value"] = {
1,
0.07450980392156863,
0,
1,
},
["Name"] = "Critical Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["version"] = -1,
["Name"] = "Aura - Blink by Time Left [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["Time"] = 1669339628,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["Enabled"] = true,
["Revision"] = 878,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight the target name",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Important Target [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shows the target name in a separate box",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Name"] = "Option 27",
["Value"] = 0,
["Key"] = "option27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 28",
["Value"] = "Target Options",
["Key"] = "option28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 14,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetNameSize",
},
{
["Type"] = 4,
["Name"] = "Use Class Color",
["Value"] = true,
["Key"] = "colorByClass",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0,
0,
0,
0.9846720322966576,
},
["Key"] = "targetBgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "targetBgBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Name"] = "Frame Width",
["Value"] = 90,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetFrameWidth",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Key"] = "targetFrameHeight",
["Value"] = 20,
["Name"] = "Frame Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1673994690,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = true,
["Revision"] = 828,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
183263,
3636,
376171,
350687,
372735,
373017,
392488,
257732,
256060,
257899,
384633,
374339,
395694,
391634,
372701,
369328,
265487,
413044,
183526,
88194,
87762,
413385,
411001,
378282,
384161,
259572,
255371,
427460,
429172,
426500,
413607,
412922,
417481,
201399,
411994,
415770,
260907,
260703,
260741,
265876,
263959,
266225,
253517,
377488,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Very Important [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Time"] = 1604696441,
["url"] = "",
["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
["Enabled"] = false,
["Revision"] = 63,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Auto set skull marker",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "onlyInCombat",
["Value"] = false,
["Name"] = "Only in Combat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
["version"] = -1,
["Name"] = "Auto Set Skull",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604354364,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["Enabled"] = true,
["Revision"] = 206,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Countdown",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1670202265,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 620,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["SpellIds"] = {
375943,
385958,
388623,
377034,
374361,
381525,
386660,
385578,
384699,
153501,
153686,
154442,
192018,
219488,
372087,
391726,
391723,
377383,
388976,
370764,
387067,
391118,
391136,
382233,
209027,
212031,
207261,
207979,
198888,
199805,
199050,
191508,
152792,
153395,
209495,
257426,
255952,
257870,
413147,
383107,
377559,
388060,
376170,
384524,
375351,
390111,
369791,
369573,
369563,
369335,
369061,
375727,
265016,
265019,
260793,
260292,
272457,
272609,
269843,
183465,
226296,
188169,
183088,
410873,
411012,
88308,
382708,
375251,
375439,
372311,
373742,
372201,
374533,
377204,
201226,
204667,
198379,
200768,
253239,
250258,
255567,
194956,
427510,
426645,
412505,
412129,
419351,
401482,
404916,
200345,
200261,
198641,
265372,
271174,
264694,
264923,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animSpeed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["version"] = -1,
["Name"] = "Cast - Frontal Cone [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Time"] = 1604239880,
["url"] = "",
["Icon"] = 1029718,
["Enabled"] = true,
["Revision"] = 269,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Desc"] = "Show above the nameplate who is the player fixated",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Fixate [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203603,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1194,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
396640,
372743,
377389,
396812,
388392,
387955,
386546,
377503,
384808,
386024,
387615,
387606,
225100,
211401,
211470,
215433,
192563,
198959,
152818,
156776,
398206,
153524,
396073,
396018,
345202,
377950,
372223,
384194,
392451,
392924,
397889,
209413,
207980,
257397,
257736,
382787,
374699,
377402,
369602,
369465,
369400,
381593,
265091,
265433,
382791,
376780,
225573,
278444,
164887,
168082,
76813,
227913,
265368,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["version"] = -1,
["Name"] = "Cast - Big Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Time"] = 1611844883,
["url"] = "",
["Icon"] = 135945,
["Enabled"] = true,
["Revision"] = 186,
["semver"] = "",
["Author"] = "Symantec-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Time to die Spiteful affix",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Time to Die",
["Name"] = "Time to Die",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 50,
["Desc"] = "",
["Min"] = 10,
["Key"] = "bgWidth",
["Value"] = 27,
["Name"] = "Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "bgColor",
["Value"] = {
0.5058823529411764,
0.07058823529411765,
1,
1,
},
["Name"] = "Background Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "",
["Min"] = 7,
["Key"] = "textSize",
["Value"] = 8,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "textColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option11",
["Value"] = "Targeting",
["Name"] = "Targeting",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Target instead of Name",
["Value"] = true,
["Key"] = "switchTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Color if targeting You",
["Value"] = true,
["Key"] = "useTargetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Color if targeting You",
["Value"] = {
0.07058823529411765,
0.6196078431372549,
0,
1,
},
["Key"] = "targetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option11",
["Value"] = 0,
["Name"] = "Option 11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "M+ Spiteful",
["NpcNames"] = {
"174773",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1604357453,
["url"] = "",
["Icon"] = 136048,
["Enabled"] = true,
["Revision"] = 233,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show the energy amount above the nameplate.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "add trigger",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 16,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fontSize",
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.803921568627451,
0.803921568627451,
0.803921568627451,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["version"] = -1,
["Name"] = "Unit - Show Energy [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604087921,
["url"] = "",
["Icon"] = 841383,
["Enabled"] = true,
["Revision"] = 266,
["semver"] = "",
["Author"] = "Tecno-Azralon",
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Fixate On You [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1669327146,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 65,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Aura is Shield [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1668886509,
["url"] = "",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
["Enabled"] = true,
["Revision"] = 33,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["NpcNames"] = {
},
["SpellIds"] = {
426662,
426663,
},
["PlaterCore"] = 1,
["Name"] = "Fixate by Unit Buff [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0,
0.5568627450980392,
0.03529411764705882,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514190,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 547,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
376644,
373017,
386781,
384823,
372735,
385536,
392398,
375596,
387135,
360850,
212784,
199033,
199034,
200969,
394512,
397881,
396020,
374430,
384353,
265376,
193941,
411002,
169445,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["version"] = -1,
["Name"] = "Cast - Glowing [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1671066705,
["url"] = "",
["Icon"] = 134229,
["Enabled"] = true,
["Revision"] = 37,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["NpcNames"] = {
},
["SpellIds"] = {
191284,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Effect After Cast [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1670428019,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["SpellIds"] = {
385916,
386063,
388822,
373087,
397785,
106864,
193660,
198263,
387910,
370766,
375591,
384336,
209404,
209378,
210875,
396001,
397899,
386559,
382555,
258672,
258777,
257756,
257784,
256405,
256589,
393793,
388046,
375079,
390290,
369811,
369703,
226287,
410999,
372561,
256882,
172578,
412063,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.15,
["Key"] = "rotationDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Name"] = "Animation Start Duration",
["Value"] = 0.3,
["Key"] = "animStartDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Key"] = "textureStartAlpha",
["Value"] = 1,
["Name"] = "Texture Start Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "textureScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "textureAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["Name"] = "Cast - Circle AoE [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        [186227] = {20}, --Monstrous Decay\n        [184020] = {40}, -- Hulking Berserker\n        [91005] = {20}, --Naraxas\n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1683596223,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 146,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["NpcNames"] = {
"197697",
"59544",
"186227",
"184020",
"91005",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Health Markers [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Key"] = "indicatorAlpha",
["Value"] = 0.79,
["Name"] = "Vertical Line Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Name"] = "Fill Alpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670423785,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 572,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Name"] = "Nameplate Size Offset",
["Value"] = 3,
["Key"] = "nameplateSizeOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.7137255072593689,
0,
0.5631310641765594,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Extra Texture",
["Name"] = "Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Name"] = "Show Extra Texture",
["Value"] = false,
["Key"] = "showExtraTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.4627450980392157,
0,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "skullAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Alpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Name"] = "Scale",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "skullScale",
},
{
["Type"] = 7,
["Name"] = "Npc Color By NpcID",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
["version"] = -1,
["Name"] = "Add - Important [P]",
["NpcNames"] = {
"196548",
"195580",
"195820",
"195821",
"189886",
"75966",
"102019",
"187159",
"194897",
"104251",
"101326",
"189669",
"192464",
190381,
92538,
192464,
131009,
127315,
133361,
136330,
214117,
212483,
101008,
194745,
190426,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = false,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["NpcNames"] = {
"195138",
"192955",
"190294",
"76518",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Tag Number [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669324381,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = true,
["Revision"] = 887,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start",
["NpcNames"] = {
},
["SpellIds"] = {
392640,
397888,
209033,
385029,
374563,
377341,
369675,
369365,
369411,
278961,
202108,
88186,
200630,
255824,
252781,
250096,
200248,
197797,
264520,
418202,
201839,
412012,
411958,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Quick Flash [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["Time"] = 1670427654,
["url"] = "",
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color of  add",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.4392157196998596,
0.458823561668396,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Flash Nameplate",
["Value"] = true,
["Key"] = "useFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Name"] = "NpcID to Color",
["Value"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Add - Warning [P]",
["NpcNames"] = {
"190187",
"189893",
"99922",
"104822",
129758,
186696,
101075,
100818,
98081,
52019,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Time"] = 1670427838,
["url"] = "",
["Icon"] = "interface/addons/plater/media/duck_64",
["Enabled"] = true,
["Revision"] = 111,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.0941176563501358,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Scale",
["Value"] = true,
["Key"] = "useNameplateScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Nameplate Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "scale",
},
},
["version"] = -1,
["Name"] = "Add - Non Elite Trash [P]",
["NpcNames"] = {
"194622",
"190205",
"197398",
"77006",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669325411,
["url"] = "",
["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
["Enabled"] = true,
["Revision"] = 101,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "When the caster has a shield and only when the shield is removed the cast can be interrupted",
["NpcNames"] = {
},
["SpellIds"] = {
373688,
391050,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Shield Interrupt [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514185,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 506,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Just stop casting",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
377004,
381516,
196543,
199726,
200291,
268202,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Stop Casting [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669340350,
["url"] = "",
["Icon"] = "interface/addons/plater/media/radio_64",
["Enabled"] = true,
["Revision"] = 106,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["NpcNames"] = {
"194895",
"105703",
"59598",
"58319",
200388,
189299,
131402,
135052,
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Explode on Die [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useReverse",
["Value"] = false,
["Name"] = "Reverse Health Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useShake",
["Value"] = false,
["Name"] = "Enable Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Key"] = "shakeAmplitude",
["Value"] = 0.2,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 70,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBackground",
["Value"] = true,
["Name"] = "Show Red Background",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1673726734,
["url"] = "",
["Icon"] = 236209,
["Enabled"] = true,
["Revision"] = 18,
["semver"] = "",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["NpcNames"] = {
},
["SpellIds"] = {
372743,
372749,
384933,
},
["PlaterCore"] = 1,
["Name"] = "Aura While Casting [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1676905232,
["url"] = "",
["Icon"] = 4038101,
["Enabled"] = true,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["NpcNames"] = {
},
["SpellIds"] = {
388886,
209676,
377912,
},
["PlaterCore"] = 1,
["Name"] = "Cast - On Going Cast [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Dots Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Key"] = "speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Key"] = "minAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.01960784383118153,
0,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
},
},
["pet_height_scale"] = 0.4800000190734863,
["aura_x_offset"] = 0,
["saved_cvars_last_change"] = {
["ShowClassColorInNameplate"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateOverlapV"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["ShowNamePlateLoseAggroFlash"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateShowEnemyMinus"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["NamePlateClassificationScale"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateShowFriendlyTotems"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplatePersonalHideDelaySeconds"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateShowFriendlyPets"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateTargetRadialPosition"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateMinAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4140: in function `ForceCVars'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4138: in function <Interface/AddOns/Plater/Plater.lua:4138>\n",
["nameplateResourceOnTarget"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["clampTargetNameplateToScreen"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateShowAll"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateMaxDistance"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateShowFriendlyMinions"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateTargetBehindMaxDistance"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateShowEnemies"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["NamePlateVerticalScale"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateSelectedAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4142: in function `ForceCVars'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4138: in function <Interface/AddOns/Plater/Plater.lua:4138>\n",
["nameplateMotionSpeed"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateShowEnemyMinions"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateShowEnemyPets"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateShowFriendlyNPCs"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateSelectedScale"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateMinAlphaDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4141: in function `ForceCVars'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4138: in function <Interface/AddOns/Plater/Plater.lua:4138>\n",
["nameplateMinScale"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateOtherTopInset"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateShowEnemyTotems"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateShowFriendlyGuardians"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["NamePlateHorizontalScale"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateShowFriends"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateShowDebuffsOnFriendly"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateLargeTopInset"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
["nameplateShowEnemyGuardians"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function <Interface/AddOns/Plater/Plater.lua:1549>\n",
},
["hover_highlight"] = false,
["spell_animations"] = false,
["hover_highlight_alpha"] = 0,
["target_shady_enabled"] = false,
["aura_enabled"] = false,
["aura2_y_offset"] = 5,
["indicator_spec_always"] = true,
["health_statusbar_bgtexture"] = "Blizzard",
["plate_config"] = {
["player"] = {
["module_enabled"] = false,
},
["friendlyplayer"] = {
["module_enabled"] = false,
},
["global_health_width"] = 112,
["global_health_height"] = 12,
["enemyplayer"] = {
["actorname_text_color"] = {
nil,
0,
0.03137254901960784,
},
["percent_text_show_decimals"] = false,
["percent_text_font"] = "2002 Bold",
["spellpercent_text_font"] = "2002 Bold",
["actorname_text_font"] = "2002 Bold",
["percent_show_health"] = false,
["spellname_text_font"] = "2002 Bold",
["spellpercent_text_enabled"] = false,
["actorname_text_anchor"] = {
["side"] = 8,
},
["level_text_enabled"] = false,
},
["enemynpc"] = {
["actorname_text_font"] = "2002 Bold",
["big_actortitle_text_font"] = "2002 Bold",
["percent_text_font"] = "2002 Bold",
["spellpercent_text_font"] = "2002 Bold",
["quest_color_enabled"] = false,
["big_actorname_text_font"] = "2002 Bold",
["percent_show_health"] = false,
["level_text_enabled"] = false,
},
},
["indicator_quest"] = false,
["aura_y_offset"] = 5,
["use_ui_parent"] = true,
["health_statusbar_texture"] = "Blizzard",
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Hide Neutral Units"] = 1,
["Cast Bar Icon Config"] = 2,
["Attacking Specific Unit"] = 2,
["Extra Border"] = 2,
["Execute Range"] = 1,
["Target Color"] = 3,
["Aura Reorder"] = 3,
["Combo Points"] = 6,
},
["expansion_triggerwipe"] = {
[9] = true,
},
["show_aggro_glow"] = false,
["cast_statusbar_use_fade_effects"] = false,
["indicator_spec"] = false,
["hide_blizzard_castbar"] = true,
["resources_settings"] = {
["chr"] = {
["Player-3676-0DBAEEDD"] = "SoulShards",
["Player-76-0B9BE017"] = "Chi",
["Player-1071-0D602F1A"] = "Chi",
["Player-76-0BCB370B"] = "Chi",
["Player-1071-0CDBCD29"] = "Chi",
["Player-162-0B9541C3"] = "Chi",
["Player-86-09C7772A"] = "ComboPoints",
["Player-76-0BB706E0"] = "Chi",
["Player-76-0BA01ECC"] = "Chi",
["Player-1071-0D50A441"] = "Chi",
["Player-1071-0D5104CF"] = "Chi",
["Player-54-0D1E4CA6"] = "ComboPoints",
["Player-11-0A64F46C"] = "Chi",
["Player-1071-0D511A7C"] = "Chi",
["Player-76-0B986BBC"] = "Chi",
["Player-1071-0CDBCC87"] = "Chi",
["Player-3675-0A516FAE"] = "Chi",
["Player-1071-0D5A1C3A"] = "Chi",
["Player-76-0BA72A37"] = "Chi",
["Player-76-0BC23AB2"] = "Chi",
["Player-121-0AA2EB50"] = "Chi",
["Player-11-0E0E9D54"] = "Chi",
["Player-76-0B9DC332"] = "Chi",
["Player-76-0BB4A4DE"] = "SoulShards",
["Player-76-0BB7F9EF"] = "ComboPoints",
["Player-1071-0D951A77"] = "Chi",
["Player-1071-0D746A13"] = "Chi",
["Player-1071-0D8B9495"] = "Chi",
["Player-1136-0890814B"] = "Chi",
["Player-154-0BD7AFF1"] = "Chi",
["Player-76-0A256E99"] = "HolyPower",
["Player-3676-0D3F99E5"] = "Chi",
["Player-1071-0D60E6E9"] = "Essence",
["Player-11-07B70BFB"] = "SoulShards",
["Player-3676-0DD74467"] = "ComboPoints",
["Player-3675-0A512E22"] = "Chi",
["Player-76-0B991BFD"] = "Chi",
["Player-76-0B986AD7"] = "Chi",
["Player-76-0B9DB071"] = "Chi",
["Player-3676-0ABBD6D6"] = "Chi",
["Player-154-0BDF1086"] = "Chi",
["Player-76-0BD55532"] = "Chi",
["Player-76-0965ED3E"] = "ArcaneCharges",
["Player-76-0B990C65"] = "Essence",
["Player-76-0BC8716D"] = "ComboPoints",
["Player-11-077E772F"] = "Runes",
},
},
["indicator_pet"] = false,
["npc_cache"] = {
[61398] = {
"Xin the Weaponmaster",
"Mogu'shan Palace",
"enUS",
},
[100216] = {
"Hatecoil Wrangler",
"Eye of Azshara",
"enUS",
},
[97182] = {
"Night Watch Mariner",
"Maw of Souls",
"enUS",
},
[168111] = {
"Empowered Imperial Curator",
"Torghast, Tower of the Damned",
},
[99801] = {
"Destructor Tentacle",
"Maw of Souls",
"enUS",
},
[91785] = {
"Wandering Shellback",
"Eye of Azshara",
"enUS",
},
[87761] = {
"Dungeoneer's Training Dummy",
"FW Horde Garrison Level 3",
},
[96480] = {
"Viletongue Belcher",
"Vault of the Wardens",
"enUS",
},
[96512] = {
"Archdruid Glaidalis",
"Darkheart Thicket",
"enUS",
},
[97119] = {
"Shroud Hound",
"Maw of Souls",
"enUS",
},
[61670] = {
"Sik'thik Demolisher",
"Siege of Niuzao Temple",
"enUS",
},
[100249] = {
"Channeler Varisz",
"Eye of Azshara",
"enUS",
},
[61239] = {
"Glintrok Oracle",
"Mogu'shan Palace",
"enUS",
},
[91786] = {
"Gritslime Snail",
"Eye of Azshara",
"enUS",
},
[61814] = {
"Jin Ironfist",
"UNKNOWN",
"enUS",
},
[36296] = {
"Apothecary Hummel",
"Shadowfang Keep",
},
[61399] = {
"Glintrok Scout",
"Mogu'shan Palace",
"enUS",
},
[114526] = {
"Ghostly Understudy",
"Return to Karazhan",
"enUS",
},
[100250] = {
"Binder Ashioi",
"Eye of Azshara",
"enUS",
},
[95779] = {
"Festerhide Grizzly",
"Darkheart Thicket",
"enUS",
},
[91787] = {
"Cove Seagull",
"Eye of Azshara",
"enUS",
},
[125545] = {
"Blazing Imp",
"Antorus, the Burning Throne",
"enUS",
},
[95939] = {
"Skrog Tidestomper",
"Eye of Azshara",
"enUS",
},
[157002] = {
"Imperial Enforcer",
"Torghast, Tower of the Damned",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
"enUS",
},
[157003] = {
"Imperial Duelist",
"Torghast, Tower of the Damned",
},
[61240] = {
"Glintrok Skulker",
"Mogu'shan Palace",
"enUS",
},
[96323] = {
"Arachnis",
"SMV Alliance Garrison Level 3",
},
[151127] = {
"Lord of Torment",
"Torghast, Tower of the Damned",
},
[155790] = {
"Mawsworn Acolyte",
"Torghast, Tower of the Damned",
},
[102583] = {
"Fel Scorcher",
"Vault of the Wardens",
"enUS",
},
[102104] = {
"Enslaved Shieldmaiden",
"Maw of Souls",
"enUS",
},
[170418] = {
"Goxul the Devourer",
"Torghast, Tower of the Damned",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
"enUS",
},
[1547] = {
"Decrepit Darkhound",
"Death Knight Campaign - Undercity",
"enUS",
},
[114624] = {
"Arcane Warden",
"Return to Karazhan",
"enUS",
},
[1548] = {
"Cursed Darkhound",
"Death Knight Campaign - Undercity",
"enUS",
},
[99358] = {
"Rotheart Dryad",
"Darkheart Thicket",
"enUS",
},
[91789] = {
"Lady Hatecoil",
"Eye of Azshara",
"enUS",
},
[102584] = {
"Malignant Defiler",
"Vault of the Wardens",
"enUS",
},
[87318] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
},
[1553] = {
"Greater Duskbat",
"Death Knight Campaign - Undercity",
"enUS",
},
[98177] = {
"Glayvianna Soulrender",
"Vault of the Wardens",
"enUS",
},
[155793] = {
"Skeletal Remains",
"Torghast, Tower of the Damned",
},
[114625] = {
"Phantom Guest",
"Return to Karazhan",
"enUS",
},
[5697] = {
"Theresa",
"Death Knight Campaign - Undercity",
"enUS",
},
[99359] = {
"Rotheart Keeper",
"Darkheart Thicket",
"enUS",
},
[91790] = {
"Mak'rana Siltwalker",
"Eye of Azshara",
"enUS",
},
[61337] = {
"Glintrok Ironhide",
"Mogu'shan Palace",
"enUS",
},
[61928] = {
"Sik'thik Guardian",
"Pandaria",
"enUS",
},
[123760] = {
"Fel-Infused Destructor",
"Antorus, the Burning Throne",
"enUS",
},
[114626] = {
"Forlorn Spirit",
"Return to Karazhan",
"enUS",
},
[99360] = {
"Vilethorn Blossom",
"Darkheart Thicket",
"enUS",
},
[155221] = {
"Faeleaf Tender",
"Torghast, Tower of the Damned",
},
[125549] = {
"Hungering Stalker",
"Antorus, the Burning Throne",
"enUS",
},
[93963] = {
"Echo of Arthas Menethil",
"Icecrown Citadel",
"enUS",
},
[61242] = {
"Glintrok Ironhide",
"Mogu'shan Palace",
"enUS",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
"enUS",
},
[91792] = {
"Stormwake Hydra",
"Eye of Azshara",
"enUS",
},
[95433] = {
"Anguished Soul",
"Icecrown Citadel",
"enUS",
},
[61338] = {
"Glintrok Skulker",
"Mogu'shan Palace",
"enUS",
},
[99649] = {
"Dreadlord Mendacius",
"Vault of the Wardens",
"enUS",
},
[61929] = {
"Sik'thik Amber-Weaver",
"Pandaria",
"enUS",
},
[61434] = {
"Sik'thik Vanguard",
"Siege of Niuzao Temple",
"enUS",
},
[114628] = {
"Skeletal Waiter",
"Return to Karazhan",
"enUS",
},
[101438] = {
"Vileshard Chunk",
"Neltharion's Lair",
"enUS",
},
[91793] = {
"Seaspray Crab",
"Eye of Azshara",
"enUS",
},
[95434] = {
"Phantom Swordsman",
"Icecrown Citadel",
"enUS",
},
[62632] = {
"Sik'thik Engineer",
"Siege of Niuzao Temple",
"enUS",
},
[96584] = {
"Immoliant Fury",
"Vault of the Wardens",
"enUS",
},
[114629] = {
"Spectral Retainer",
"Return to Karazhan",
"enUS",
},
[61243] = {
"Gekkan",
"Mogu'shan Palace",
"enUS",
},
[91794] = {
"Saltscale Lurker",
"Eye of Azshara",
"enUS",
},
[98533] = {
"Foul Mother",
"Vault of the Wardens",
"enUS",
},
[157016] = {
"Imperial Archivist",
"Torghast, Tower of the Damned",
},
[154014] = {
"Imprisoned Cabalist",
"Torghast, Tower of the Damned",
},
[61387] = {
"Quilen Guardian",
"Mogu'shan Palace",
"enUS",
},
[61946] = {
"Harthak Stormcaller",
"Mogu'shan Palace",
"enUS",
},
[157017] = {
"Lithic Watcher",
"Torghast, Tower of the Damned",
},
[97320] = {
"Stoneskin Gatekeeper",
"Icecrown Citadel",
"enUS",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
"enUS",
},
[173114] = {
"Invasive Decayfly",
"Torghast, Tower of the Damned",
},
[95947] = {
"Mak'rana Hardshell",
"Eye of Azshara",
"enUS",
},
[88314] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
},
[62633] = {
"Sik'thik Builder",
"Siege of Niuzao Temple",
"enUS",
},
[97097] = {
"Helarjar Champion",
"Maw of Souls",
"enUS",
},
[90997] = {
"Mightstone Breaker",
"Neltharion's Lair",
"enUS",
},
[99365] = {
"Taintheart Stalker",
"Darkheart Thicket",
"enUS",
},
[91796] = {
"Skrog Wavecrasher",
"Eye of Azshara",
"enUS",
},
[61340] = {
"Glintrok Hexxer",
"Mogu'shan Palace",
"enUS",
},
[96587] = {
"Felsworn Infester",
"Vault of the Wardens",
"enUS",
},
[123191] = {
"Fel Hound",
"Antorus, the Burning Throne",
"enUS",
},
[61947] = {
"Kargesh Ribcrusher",
"Mogu'shan Palace",
"enUS",
},
[114632] = {
"Spectral Attendant",
"Return to Karazhan",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[98919] = {
"Seacursed Swiftblade",
"Maw of Souls",
"enUS",
},
[95885] = {
"Tirathon Saltheril",
"Vault of the Wardens",
"enUS",
},
[102592] = {
"Alliance Infantry",
"8.0 Boost Experience - Alliance",
},
[154020] = {
"Prisonbreak Cursewalker",
"Torghast, Tower of the Damned",
},
[116549] = {
"Backup Singer",
"Return to Karazhan",
"enUS",
},
[97163] = {
"Cursed Falke",
"Maw of Souls",
"enUS",
},
[114633] = {
"Spectral Valet",
"Return to Karazhan",
"enUS",
},
[95886] = {
"Ash'Golm",
"Vault of the Wardens",
"enUS",
},
[61389] = {
"Kargesh Highguard",
"Mogu'shan Palace",
"enUS",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
"enUS",
},
[61453] = {
"Mu'Shiba",
"Mogu'shan Palace",
"enUS",
},
[114634] = {
"Undying Servant",
"Return to Karazhan",
"enUS",
},
[61485] = {
"General Pa'valak",
"Siege of Niuzao Temple",
"enUS",
},
[113197] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[39049] = {
"Plagued Bruin",
"Death Knight Campaign - Undercity",
"enUS",
},
[95887] = {
"Glazer",
"Vault of the Wardens",
"enUS",
},
[155812] = {
"Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[110770] = {
"Lady Liadrin",
"Death Knight Campaign - Light's Hope Chapel",
"enUS",
},
[165138] = {
"Blight Bag",
"The Necrotic Wake",
},
[150958] = {
"Mawsworn Guard",
"Torghast, Tower of the Damned",
},
[91001] = {
"Tarspitter Lurker",
"Neltharion's Lair",
"enUS",
},
[61709] = {
"Spawn of Anger",
"UNKNOWN",
"enUS",
},
[62795] = {
"Sik'thik Warden",
"Siege of Niuzao Temple",
"enUS",
},
[95888] = {
"Cordana Felsong",
"Vault of the Wardens",
"enUS",
},
[183919] = {
"Dominated Sentry",
"Torghast, Tower of the Damned",
},
[125590] = {
"Antoran Felguard",
"Antorus, the Burning Throne",
"enUS",
},
[109877] = {
"Argent Rider",
"Death Knight Campaign - Light's Hope Chapel",
"enUS",
},
[97677] = {
"Barbed Spiderling",
"Vault of the Wardens",
"enUS",
},
[114636] = {
"Phantom Guardsman",
"Return to Karazhan",
"enUS",
},
[102404] = {
"Stoneclaw Grubmaster",
"Neltharion's Lair",
"enUS",
},
[101414] = {
"Saltscale Skulker",
"Eye of Azshara",
"enUS",
},
[123451] = {
"Felguard",
"Antorus, the Burning Throne",
"enUS",
},
[88288] = {
"Dungeoneer's Training Dummy",
"FW Horde Garrison Level 3",
},
[91003] = {
"Rokmora",
"Neltharion's Lair",
"enUS",
},
[97678] = {
"Aranasi Broodmother",
"Vault of the Wardens",
"enUS",
},
[62205] = {
"Wing Leader Ner'onok",
"Siege of Niuzao Temple",
"enUS",
},
[114637] = {
"Spectral Sentry",
"Return to Karazhan",
"enUS",
},
[61247] = {
"Glintrok Greenhorn",
"Mogu'shan Palace",
"enUS",
},
[123452] = {
"Fel Lord",
"Antorus, the Burning Throne",
"enUS",
},
[36272] = {
"Apothecary Frye",
"Shadowfang Keep",
},
[119524] = {
"Shrieking Hellbat",
"Legion Ship - Horizontal - Azsuna",
"enUS",
},
[100713] = {
"Rockbait Fisher",
"Neltharion's Lair",
"enUS",
},
[96657] = {
"Blade Dancer Illianna",
"Vault of the Wardens",
"enUS",
},
[97200] = {
"Seacursed Soulkeeper",
"Maw of Souls",
"enUS",
},
[100362] = {
"Grasping Tentacle",
"Maw of Souls",
"enUS",
},
[150965] = {
"Mawsworn Shackler",
"Torghast, Tower of the Damned",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[102566] = {
"Grimhorn the Enslaver",
"Vault of the Wardens",
"enUS",
},
[91005] = {
"Naraxas",
"Neltharion's Lair",
"enUS",
},
[102375] = {
"Runecarver Slave",
"Maw of Souls",
"enUS",
},
[176581] = {
"Spiked Ball",
"Sanctum of Domination",
},
[98926] = {
"Shadow Hunter",
"Vault of the Wardens",
"enUS",
},
[114288] = {
"Skeletal Warrior",
"Maw of Souls",
"enUS",
},
[13839] = {
"Royal Dreadguard",
"Death Knight Campaign - Undercity",
"enUS",
},
[61392] = {
"Harthak Flameseeker",
"Mogu'shan Palace",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
"enUS",
},
[114544] = {
"Skeletal Usher",
"Return to Karazhan",
"enUS",
},
[100364] = {
"Spirit of Vengeance",
"Vault of the Wardens",
"enUS",
},
[98384] = {
"Razormouth",
"Neltharion's Lair",
"enUS",
},
[95861] = {
"Hatecoil Oracle",
"Eye of Azshara",
"enUS",
},
[155824] = {
"Lumbering Creation",
"Torghast, Tower of the Damned",
},
[151353] = {
"Mawrat",
"Torghast, Tower of the Damned",
},
[97043] = {
"Seacursed Slaver",
"Maw of Souls",
"enUS",
},
[157102] = {
"Imperial Consular",
"Torghast, Tower of the Damned",
},
[170452] = {
"Essence Orb",
"Torghast, Tower of the Damned",
},
[91007] = {
"Dargrul",
"Neltharion's Lair",
"enUS",
},
[97171] = {
"Hatecoil Arcanist",
"Eye of Azshara",
"enUS",
},
[5696] = {
"Gerard Abernathy",
"Death Knight Campaign - Undercity",
"enUS",
},
[95766] = {
"Crazed Razorbeak",
"Darkheart Thicket",
"enUS",
},
[107104] = {
"Target Dummy",
"8.0 Boost Experience - Alliance",
},
[114801] = {
"Spectral Apprentice",
"Return to Karazhan",
"enUS",
},
[183931] = {
"Dominated Guardian",
"Torghast, Tower of the Damned",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
},
[91008] = {
"Rockbound Pelter",
"Neltharion's Lair",
"enUS",
},
[157807] = {
"Mawsworn Soulweaver",
"Torghast, Tower of the Damned",
},
[176523] = {
"Painsmith Raznal",
"Sanctum of Domination",
},
[114802] = {
"Spectral Journeyman",
"Return to Karazhan",
"enUS",
},
[105636] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[109895] = {
"Silver Highguard",
"Death Knight Campaign - Light's Hope Chapel",
"enUS",
},
[108798] = {
"Sewer Sludge",
"Death Knight Campaign - Undercity",
"enUS",
},
[106786] = {
"Bitterbrine Slave",
"Eye of Azshara",
"enUS",
},
[109894] = {
"Sunwalker Brave",
"Death Knight Campaign - Light's Hope Chapel",
"enUS",
},
[109893] = {
"Silver Hand Knight",
"Death Knight Campaign - Light's Hope Chapel",
"enUS",
},
[157809] = {
"Mawsworn Darkcaster",
"Torghast, Tower of the Damned",
},
[155215] = {
"Faeleaf Lasher",
"Torghast, Tower of the Damned",
},
[114541] = {
"Spectral Patron",
"Return to Karazhan",
"enUS",
},
[96247] = {
"Vileshard Crawler",
"Neltharion's Lair",
"enUS",
},
[79414] = {
"Training Dummy",
"8.0 Boost Experience - Alliance",
},
[119516] = {
"Frenzied Dedicant",
"Legion Ship - Horizontal - Azsuna",
"enUS",
},
[97365] = {
"Seacursed Mistmender",
"Maw of Souls",
"enUS",
},
[114260] = {
"Mrrgria",
"Return to Karazhan",
"enUS",
},
[114803] = {
"Spectral Stable Hand",
"Return to Karazhan",
"enUS",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[119466] = {
"Dread Captor",
"Legion Ship - Horizontal - Azsuna",
"enUS",
},
[93948] = {
"Baelgun Flamebeard",
"Icecrown Citadel",
"enUS",
},
[98173] = {
"Mystic Ssa'veh",
"Eye of Azshara",
"enUS",
},
[162729] = {
"Patchwerk Soldier",
"The Necrotic Wake",
},
[100360] = {
"Grasping Tentacle",
"Maw of Souls",
"enUS",
},
[106787] = {
"Bitterbrine Slave",
"Eye of Azshara",
"enUS",
},
[106785] = {
"Bitterbrine Slave",
"Eye of Azshara",
"enUS",
},
[61442] = {
"Kuai the Brute",
"Mogu'shan Palace",
"enUS",
},
[91808] = {
"Serpentrix",
"Eye of Azshara",
"enUS",
},
[96759] = {
"Helya",
"Maw of Souls",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[97185] = {
"The Grimewalker",
"Maw of Souls",
"enUS",
},
[95920] = {
"Animated Storm",
"Eye of Azshara",
"enUS",
},
[114261] = {
"Toe Knee",
"Return to Karazhan",
"enUS",
},
[125535] = {
"Riftworld Assistant",
"Antorus, the Burning Throne",
"enUS",
},
[94907] = {
"Spectral Knight",
"Icecrown Citadel",
"enUS",
},
[119467] = {
"Grand Inquisitor",
"Legion Ship - Horizontal - Azsuna",
"enUS",
},
[93949] = {
"Halahk the Deathbringer",
"Icecrown Citadel",
"enUS",
},
[91797] = {
"King Deepbeard",
"Eye of Azshara",
"enUS",
},
[61634] = {
"Commander Vo'jak",
"Siege of Niuzao Temple",
"enUS",
},
[95622] = {
"Razor Ice",
"Icecrown Citadel",
"enUS",
},
[88967] = {
"Training Dummy",
"SMV Alliance Garrison Level 3",
},
[155831] = {
"Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[102253] = {
"Understone Demolisher",
"Neltharion's Lair",
"enUS",
},
[102295] = {
"Emberhusk Dominator",
"Neltharion's Lair",
"enUS",
},
[155908] = {
"Deathspeaker",
"Torghast, Tower of the Damned",
},
[63106] = {
"Sik'thik Swarmer",
"Siege of Niuzao Temple",
"enUS",
},
[100526] = {
"Tormented Bloodseeker",
"Darkheart Thicket",
"enUS",
},
[95323] = {
"Enraged Zombie",
"Icecrown Citadel",
"enUS",
},
[114262] = {
"Attumen the Huntsman",
"Return to Karazhan",
"enUS",
},
[102430] = {
"Tarspitter Slug",
"Neltharion's Lair",
"enUS",
},
[100529] = {
"Hatespawn Slime",
"Darkheart Thicket",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
"enUS",
},
[93950] = {
"Magroth the Defender",
"Icecrown Citadel",
"enUS",
},
[108719] = {
"Gurgoth",
"Death Knight Campaign - Undercity",
"enUS",
},
[101679] = {
"Dreadsoul Poisoner",
"Darkheart Thicket",
"enUS",
},
[98963] = {
"Blazing Imp",
"Vault of the Wardens",
"enUS",
},
[99188] = {
"Waterlogged Soul Guard",
"Maw of Souls",
"enUS",
},
[152905] = {
"Tower Sentinel",
"Torghast, Tower of the Damned",
},
[61945] = {
"Gurthan Iron Maw",
"Mogu'shan Palace",
"enUS",
},
[103344] = {
"Oakheart",
"Darkheart Thicket",
"enUS",
},
[114804] = {
"Spectral Charger",
"Return to Karazhan",
"enUS",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[5699] = {
"Leona Tharpe",
"Death Knight Campaign - Undercity",
"enUS",
},
[129050] = {
"Antoran Felguard",
"Antorus, the Burning Throne",
"enUS",
},
[1554] = {
"Vampiric Duskbat",
"Death Knight Campaign - Undercity",
"enUS",
},
[91004] = {
"Ularogg Cragshaper",
"Neltharion's Lair",
"enUS",
},
[91332] = {
"Stoneclaw Hunter",
"Neltharion's Lair",
"enUS",
},
[114542] = {
"Ghostly Philanthropist",
"Return to Karazhan",
"enUS",
},
[93951] = {
"Gavinrad the Cruel",
"Icecrown Citadel",
"enUS",
},
[109824] = {
"Blighted Ghoul",
"Death Knight Campaign - Undercity",
"enUS",
},
[105720] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[5698] = {
"Joanna Whitehall",
"Death Knight Campaign - Undercity",
"enUS",
},
[155830] = {
"Mawsworn Disciple",
"Torghast, Tower of the Damned",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
"enUS",
},
[61699] = {
"Sik'thik Amberwing",
"Siege of Niuzao Temple",
"enUS",
},
[98973] = {
"Skeletal Warrior",
"Maw of Souls",
"enUS",
},
[91782] = {
"Hatecoil Crusher",
"Eye of Azshara",
"enUS",
},
[95772] = {
"Frenzied Nightclaw",
"Darkheart Thicket",
"enUS",
},
[179847] = {
"Shadowsteel Horror",
"Sanctum of Domination",
},
[92387] = {
"Drums of War",
"Neltharion's Lair",
"enUS",
},
[114264] = {
"Midnight",
"Return to Karazhan",
"enUS",
},
[152708] = {
"Mawsworn Seeker",
"Torghast, Tower of the Damned",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[101074] = {
"Hatespawn Whelpling",
"Darkheart Thicket",
"enUS",
},
[99200] = {
"Dresaron",
"Darkheart Thicket",
"enUS",
},
[96028] = {
"Wrath of Azshara",
"Eye of Azshara",
"enUS",
},
[157340] = {
"Skeletal Remains",
"Torghast, Tower of the Damned",
},
[95324] = {
"Mindless Ghoul",
"Icecrown Citadel",
"enUS",
},
[126333] = {
"Felseeker Ritualist",
"Antorus, the Burning Throne",
"enUS",
},
[92610] = {
"Understone Drummer",
"Neltharion's Lair",
"enUS",
},
[114584] = {
"Phantom Crew",
"Return to Karazhan",
"enUS",
},
[67093] = {
"Sik'thik Battle-Mender",
"Siege of Niuzao Temple",
"enUS",
},
[163121] = {
"Stitched Vanguard",
"The Necrotic Wake",
},
[155828] = {
"Runecarved Colossus",
"Torghast, Tower of the Damned",
},
[114712] = {
"Runecarver Slave",
"Maw of Souls",
"enUS",
},
[98954] = {
"Felsworn Myrmidon",
"Vault of the Wardens",
"enUS",
},
[91781] = {
"Hatecoil Warrior",
"Eye of Azshara",
"enUS",
},
[100539] = {
"Taintheart Deadeye",
"Darkheart Thicket",
"enUS",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
"enUS",
},
[51384] = {
"Forsaken Bat",
"Death Knight Campaign - Undercity",
"enUS",
},
[36565] = {
"Apothecary Baxter",
"Shadowfang Keep",
},
[125569] = {
"Riftworld Assistant",
"Antorus, the Burning Throne",
"enUS",
},
[157118] = {
"Royal Advisor",
"Torghast, Tower of the Damned",
},
[114265] = {
"Gang Ruffian",
"Return to Karazhan",
"enUS",
},
[108570] = {
"Undercity Guardian",
"Death Knight Campaign - Undercity",
"enUS",
},
[61444] = {
"Ming the Cunning",
"Mogu'shan Palace",
"enUS",
},
[171171] = {
"Mawsworn Archer",
"Torghast, Tower of the Damned",
},
[113998] = {
"Mightstone Breaker",
"Neltharion's Lair",
"enUS",
},
[92165] = {
"Dungeoneer's Training Dummy",
"Icecrown Citadel",
"enUS",
},
[157810] = {
"Mawsworn Endbringer",
"Torghast, Tower of the Damned",
},
[63808] = {
"Faintly Glowing Gem",
"Mogu'shan Palace",
"enUS",
},
[99956] = {
"Fel-Infused Fury",
"Vault of the Wardens",
"enUS",
},
[114266] = {
"Shoreline Tidespeaker",
"Return to Karazhan",
"enUS",
},
[61216] = {
"Glintrok Hexxer",
"Mogu'shan Palace",
"enUS",
},
[168106] = {
"Empowered Mawsworn Guard",
"Torghast, Tower of the Damned",
},
[61339] = {
"Glintrok Oracle",
"Mogu'shan Palace",
"enUS",
},
[157083] = {
"Stonewing Ravager",
"Torghast, Tower of the Damned",
},
[61910] = {
"Resin Flake",
"Siege of Niuzao Temple",
"enUS",
},
[61436] = {
"Sik'thik Bladedancer",
"Siege of Niuzao Temple",
"enUS",
},
[109891] = {
"Blood Knight",
"Death Knight Campaign - Light's Hope Chapel",
"enUS",
},
[99192] = {
"Shade of Xavius",
"Darkheart Thicket",
"enUS",
},
[65402] = {
"Gurthan Swiftblade",
"Mogu'shan Palace",
"enUS",
},
[61445] = {
"Haiyan the Unstoppable",
"Mogu'shan Palace",
"enUS",
},
[92350] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[92166] = {
"Raider's Training Dummy",
"Icecrown Citadel",
"enUS",
},
[97172] = {
"Saltsea Droplet",
"Eye of Azshara",
"enUS",
},
[116550] = {
"Spectral Patron",
"Return to Karazhan",
"enUS",
},
[61567] = {
"Vizier Jin'bak",
"Siege of Niuzao Temple",
"enUS",
},
[91783] = {
"Hatecoil Stormweaver",
"Eye of Azshara",
"enUS",
},
[183985] = {
"Empowered Worldbreaker",
"Torghast, Tower of the Damned",
},
[94913] = {
"Phantom Mage",
"Icecrown Citadel",
"enUS",
},
[99033] = {
"Helarjar Mistcaller",
"Maw of Souls",
"enUS",
},
[96756] = {
"Ymiron, the Fallen King",
"Maw of Souls",
"enUS",
},
[97170] = {
"Hatecoil Wavebinder",
"Eye of Azshara",
"enUS",
},
[95321] = {
"Icefallen Geist",
"Icecrown Citadel",
"enUS",
},
[109892] = {
"Argus Purifier",
"Death Knight Campaign - Light's Hope Chapel",
"enUS",
},
[119633] = {
"Fel Imp",
"Legion Ship - Horizontal - Azsuna",
"enUS",
},
[100248] = {
"Ritualist Lesha",
"Eye of Azshara",
"enUS",
},
[61701] = {
"Sik'thik Warrior",
"Siege of Niuzao Temple",
"enUS",
},
[109882] = {
"Argent Sentry",
"Death Knight Campaign - Light's Hope Chapel",
"enUS",
},
[96754] = {
"Harbaron",
"Maw of Souls",
"enUS",
},
[99307] = {
"Skjal",
"Maw of Souls",
"enUS",
},
[98363] = {
"Grasping Tentacle",
"Maw of Souls",
"enUS",
},
[85341] = {
"Lunarfall Raccoon",
"SMV Alliance Garrison Level 2",
},
[91784] = {
"Warlord Parjesh",
"Eye of Azshara",
"enUS",
},
[119515] = {
"Foul Dreadbringer",
"Legion Ship - Horizontal - Azsuna",
"enUS",
},
[168110] = {
"Empowered Imperial Duelist",
"Torghast, Tower of the Damned",
},
[119517] = {
"Frenzied Dedicant",
"Legion Ship - Horizontal - Azsuna",
"enUS",
},
[97173] = {
"Restless Tides",
"Eye of Azshara",
"enUS",
},
[119453] = {
"Felweaver Axtris",
"Legion Ship - Horizontal - Azsuna",
"enUS",
},
[118975] = {
"Xeritas",
"Legion Ship - Horizontal - Azsuna",
"enUS",
},
},
["castbar_icon_size"] = "same as castbar plus healthbar",
["aura_show_debuffs_personal"] = false,
["aggro_modifies"] = {
["health_bar_color"] = false,
},
["minor_height_scale"] = 0.4200000166893005,
["not_affecting_combat_alpha"] = 1,
["indicator_worldboss"] = false,
["aura2_x_offset"] = 0,
["target_indicator"] = "NONE",
["hook_data"] = {
{
["Enabled"] = false,
["Revision"] = 50,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Kastfall-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
},
["version"] = -1,
["Time"] = 1547392935,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["Name"] = "Color Automation [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 73,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Hide neutral units, show when selected, see the constructor script for options.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        --check the unit reaction\n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n            \n        else\n            envTable.HideNameplate (unitFrame)\n            \n        end    \n    end\n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when plater finishes an update on the nameplate\n    --check within the envTable if the healthBar of this nameplate should be hidden\n    if (envTable.IsHidden) then\n        if (unitFrame.healthBar:IsShown()) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.ShowNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.OnlyInOpenWorld = true;\n    envTable.ShowInCombat = true;\n    \n    --consts\n    envTable.REACTION_NEUTRAL = 4;\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        envTable.IsHidden = true\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        envTable.IsHidden = false\n    end\n    \nend\n\n\n\n\n",
},
["version"] = -1,
["Time"] = 1541606242,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 1990989,
["Name"] = "Hide Neutral Units [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 93,
["Options"] = {
},
["HooksTemp"] = {
},
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["version"] = -1,
["Desc"] = "Function Plater.UpdatePlateSize from Plater.lua exported to scritps.",
["Hooks"] = {
["Nameplate Added"] = "\n\n-- exported function Plater.UpdatePlateSize() from Plater.lua\n--this is for advanced users which wants to reorder the nameplate frame at their desire\n\n\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --check if there's a type of unit on this nameplate\n    local plateFrame = unitFrame:GetParent()\n    if (not plateFrame.actorType) then\n        return\n    end\n    \n    --get all the frames and cache some variables\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local profile = Plater.db.profile\n    local DB_PLATE_CONFIG = profile.plate_config\n    local isInCombat = Plater.IsInCombat()\n    local actorType = plateFrame.actorType\n    \n    local unitFrame = plateFrame.unitFrame\n    local healthBar = unitFrame.healthBar\n    local castBar = unitFrame.castBar\n    local powerBar = unitFrame.powerBar\n    local buffFrame1 = unitFrame.BuffFrame\n    local buffFrame2 = unitFrame.BuffFrame2\n    \n    --use in combat bars when in pvp\n    if (plateFrame.actorType == ACTORTYPE_ENEMY_PLAYER) then\n        if ((Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") and DB_PLATE_CONFIG.player.pvp_always_incombat) then\n            isInCombat = true\n        end\n    end\n    \n    --get the config for this actor type\n    local plateConfigs = DB_PLATE_CONFIG [actorType]\n    --get the config key based if the player is in combat\n    local castBarConfigKey, healthBarConfigKey, manaConfigKey = Plater.GetHashKey (isInCombat)\n    \n    --get the width and height from what the user set in the options panel\n    local healthBarWidth, healthBarHeight = unitFrame.customHealthBarWidth or plateConfigs [healthBarConfigKey][1], unitFrame.customHealthBarHeight or plateConfigs [healthBarConfigKey][2]\n    local castBarWidth, castBarHeight = unitFrame.customCastBarWidth or plateConfigs [castBarConfigKey][1], unitFrame.customCastBarHeight or plateConfigs [castBarConfigKey][2]\n    local powerBarWidth, powerBarHeight = unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][1], unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][2]\n    \n    --calculate the offset for the cast bar, this is done due to the cast bar be anchored to topleft and topright\n    local castBarOffSetX = (healthBarWidth - castBarWidth) / 2\n    local castBarOffSetY = plateConfigs.castbar_offset\n    \n    --calculate offsets for the power bar\n    local powerBarOffSetX = (healthBarWidth - powerBarWidth) / 2\n    local powerBarOffSetY = 0\n    \n    --calculate the size deviation for pets\n    local unitType = Plater.GetUnitType (plateFrame)\n    if (unitType == \"pet\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.pet_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.pet_width_scale\n        \n    elseif (unitType == \"minus\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.minor_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.minor_width_scale\n    end\n    \n    --unit frame - is set to be the same size as the plateFrame\n    unitFrame:ClearAllPoints()\n    unitFrame:SetAllPoints()\n    \n    --calculates the health bar anchor points\n    --it will always be placed in the center of the nameplate area (where it accepts mouse clicks) \n    local xOffSet = (plateFrame:GetWidth() - healthBarWidth) / 2\n    local yOffSet = (plateFrame:GetHeight() - healthBarHeight) / 2\n    \n    --set the health bar point\n    healthBar:ClearAllPoints()\n    PixelUtil.SetPoint (healthBar, \"topleft\", unitFrame, \"topleft\", xOffSet + profile.global_offset_x, -yOffSet + profile.global_offset_y)\n    PixelUtil.SetPoint (healthBar, \"bottomright\", unitFrame, \"bottomright\", -xOffSet + profile.global_offset_x, yOffSet + profile.global_offset_y)\n    \n    --set the cast bar point and size\n    castBar:ClearAllPoints()\n    PixelUtil.SetPoint (castBar, \"topleft\", healthBar, \"bottomleft\", castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetPoint (castBar, \"topright\", healthBar, \"bottomright\", -castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetHeight (castBar, castBarHeight)\n    PixelUtil.SetSize (castBar.Icon, castBarHeight, castBarHeight)\n    PixelUtil.SetSize (castBar.BorderShield, castBarHeight * 1.4, castBarHeight * 1.4)\n    \n    --set the power bar point and size\n    powerBar:ClearAllPoints()\n    PixelUtil.SetPoint (powerBar, \"topleft\", healthBar, \"bottomleft\", powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetPoint (powerBar, \"topright\", healthBar, \"bottomright\", -powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetHeight (powerBar, powerBarHeight)\n    \n    --power bar are hidden by default, show it if there's a custom size for it\n    if (unitFrame.customPowerBarWidth and unitFrame.customPowerBarHeight) then\n        powerBar:SetUnit (unitFrame.unit)\n    end\n    \n    --aura frames\n    local bf1Anchor = Plater.db.profile.aura_frame1_anchor\n    Plater.SetAnchor (buffFrame1, {side = bf1Anchor.side, x = bf1Anchor.x, y = bf1Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura_grow_direction or 2) == 2)\n    \n    local bf2Anchor = Plater.db.profile.aura_frame2_anchor\n    Plater.SetAnchor (buffFrame2, {side = bf2Anchor.side, x = bf2Anchor.x, y = bf2Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura2_grow_direction or 2) == 2)\n    \nend\n\n\n",
},
["Name"] = "Reorder Nameplate [Plater]",
["Time"] = 1596791840,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = 574574,
["LastHookEdited"] = "",
},
{
["Enabled"] = false,
["Revision"] = 59,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Change the nameplate color when a nameplate does not have the auras set in the constructor script.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --do nothing if the unit is the player it self\n    if (unitFrame.IsSelf) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    else\n        if (envTable.ForceRefreshNameplateColor) then\n            Plater.RefreshNameplateColor (unitFrame) \n        end\n    end    \n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --set this to true if you are not using threat colors in the health bar\n    envTable.ForceRefreshNameplateColor = true\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend",
},
["version"] = -1,
["Time"] = 1554138845,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 136207,
["Name"] = "Don't Have Aura [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 182,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Show how many raid members are targeting the unit",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShow = false;\n    envTable.TargetAmount:SetText (\"\")\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when a nameplate is added to the screen check if the player is in combat\n    if (InCombatLockdown()) then\n        --player is in combat, check if can check amount of targets\n        envTable.CanShow = envTable.CanShowTargetAmount();\n        \n    else\n        envTable.CanShow = false; \n    end\n    \n    envTable.TargetAmount:SetText (\"\");\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TargetAmount:SetText (\"\");\n    envTable.CanShow = false;\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --if the script is allowed to show the amount of targets\n    --also check if the unit is in combat\n    if (envTable.CanShow and UnitAffectingCombat (unitId)) then\n        \n        --check if can update the amount of targets following the cooldown set in the constructor script\n        --by default Plater updates the nameplate every 250ms, by default the cooldown is 2, so it'll update the amuont of target every 1/2 of a second\n        envTable.UpdateCooldown = envTable.UpdateCooldown + 1\n        if (envTable.UpdateCooldown < envTable.UpdateInterval) then\n            return\n        else\n            \n            --reset the cooldown interval to check the amount of target again\n            envTable.UpdateCooldown = 0\n            \n            --get the amount of targets\n            local amount;\n            if (envTable.InRaid) then\n                amount = envTable.NumTargetsInRaid (unitFrame)      \n                \n            elseif (envTable.InParty) then\n                amount = envTable.NumTargetsInParty (unitFrame)   \n                \n            else\n                envTable.TargetAmount:SetText (\"\")\n                return\n            end\n            \n            --update the amount text\n            if (amount == 0) then\n                envTable.TargetAmount:SetText (\"\")\n            else\n                envTable.TargetAmount:SetText (amount)\n            end\n            \n        end\n    end\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can show the amount of targets\n    envTable.CanShow = envTable.CanShowTargetAmount();\n    \n    if (not envTable.CanShow) then\n        envTable.TargetAmount:SetText (\"\") \n    end\nend\n\n\n\n\n",
["Constructor"] = "--all gray text like this are comments and do not run as code\n--build the settings and basic functions for the hook\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --declare setting variables:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    local showInRaid = true;\n    local showInDungeon = true;\n    local showInArena = false;\n    local showInBattleground = false;\n    local showInOpenWorld = true;\n    \n    envTable.UpdateInterval = 2; --each 2 updates in the nameplate it'll update the amount of targets\n    \n    local anchor = {\n        side = 6, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 4, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    \n    --frames:\n    \n    --create the text that will show the amount of people targeting the unit\n    if (not  unitFrame.healthBar.TargetAmount) then\n        envTable.TargetAmount = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.TargetAmount, anchor);\n        unitFrame.healthBar.TargetAmount = envTable.TargetAmount\n    end\n    \n    --in case Plater wipes the envTable\n    envTable.TargetAmount = unitFrame.healthBar.TargetAmount\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --private variables (they will be used in the other scripts within this hook)\n    envTable.CanShow = false;\n    envTable.UpdateCooldown = 0;\n    envTable.InRaid = false;\n    envTable.InParty = false;\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    --update the InRaid or InParty proprieties\n    function envTable.UpdateGroupType()\n        if (IsInRaid()) then\n            envTable.InRaid = true;\n            envTable.InParty = false;     \n            \n        elseif (IsInGroup()) then\n            envTable.InRaid = false;\n            envTable.InParty = true;   \n            \n        else\n            envTable.InRaid = false;            \n            envTable.InParty = false;\n        end\n    end\n    \n    --this function controls if the amount of targets can show following the settings in the top of this script\n    function envTable.CanShowTargetAmount()\n        \n        local _, instanceType, difficultyID, _, _, _, _, instanceMapID, instanceGroupSize = GetInstanceInfo()\n        \n        if (showInRaid and instanceType == \"raid\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInDungeon and instanceType == \"party\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInArena and instanceType == \"arena\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInBattleground and instanceType == \"pvp\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInOpenWorld and instanceType == \"none\") then\n            envTable.UpdateGroupType()\n            if (envTable.InRaid or envTable.InParty) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    --get the amount of player targetting the unit in raid or party\n    function envTable.NumTargetsInRaid (unitFrame)\n        local amount = 0\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        return amount\n    end\n    \n    function envTable.NumTargetsInParty()\n        local amount = 0\n        for i = 1, GetNumGroupMembers() - 1 do\n            local unit = \"party\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        local unit = \"playertarget\"\n        if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n            amount = amount + 1\n        end        \n        \n        return amount\n    end\n    \nend",
},
["version"] = -1,
["Time"] = 1548278227,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 1966587,
["Name"] = "Players Targeting a Target [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 176,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Tecno-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Add another border with more customizations. This border can also be manipulated by other scripts.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.IsEnabled) then\n        if (unitFrame.IsSelf) then\n            if (envTable.ShowOnPersonalBar) then\n                envTable.BorderFrame:Show()\n            else\n                envTable.BorderFrame:Hide() \n            end\n        else\n            envTable.BorderFrame:Show()\n        end   \n    end\n    \nend   \n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border color\n    local borderColor = \"yellow\"\n    \n    --size of the border\n    local borderSize = 1\n    \n    --transparency\n    local borderAlpha = 1\n    \n    --enabled (set to false it you only want to use the extra border in other scripts)\n    local isEnabled = true\n    \n    --export border (allow the border to be used by other scripts)\n    --other scripts can use:\n    --unitFrame.healthBar.extraBorder:Show()\n    --unitFrame.healthBar.extraBorder:SetVertexColor (r, g, b)\n    --unitFrame.healthBar.extraBorder:SetBorderSizes (borderSize)\n    local canExportBorder = true\n    \n    --do not add the border to personal bar\n    local noPersonalBar = true\n    \n    --private\n    do\n        \n        local newBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        envTable.BorderFrame = newBorder\n        \n        newBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n        newBorder:UpdateSizes()\n        \n        local r, g, b = DetailsFramework:ParseColors (borderColor)\n        newBorder:SetVertexColor (r, g, b, borderAlpha)\n        \n        envTable.ShowOnPersonalBar = not noPersonalBar\n        \n        if (canExportBorder) then\n            unitFrame.healthBar.extraBorder = newBorder\n        end\n        \n        if (not isEnabled) then\n            envTable.IsEnabled = false\n        else\n            envTable.IsEnabled = true\n        end\n    end\n    \nend\n\n\n",
},
["version"] = -1,
["Time"] = 1547409079,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Icon"] = 133689,
["Name"] = "Extra Border [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Changes the target color to the color set in the constructor script.",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["version"] = -1,
["Time"] = 1552354619,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 878211,
["Name"] = "Current Target Color [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 356,
["Options"] = {
},
["HooksTemp"] = {
},
["semver"] = "",
["Author"] = "Ditador-Azralon",
["version"] = -1,
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Name"] = "Aura Reorder [Plater]",
["Time"] = 1608663128,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["LastHookEdited"] = "",
},
{
["Enabled"] = false,
["Revision"] = 348,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Icon Settings",
["Value"] = "Icon Settings:",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Icon",
["Value"] = true,
["Key"] = "showIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the castbar icon when enabled",
},
{
["Type"] = 4,
["Name"] = "Icon on Left Side",
["Value"] = true,
["Key"] = "iconOnLeftSide",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled it anchor the icon on the left side, right otherwise",
},
{
["Type"] = 4,
["Key"] = "useFullSize",
["Value"] = false,
["Name"] = "Use Big Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled the icon has the size of the cast bar plus the healthbar",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Fine tune the icon size",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "iconSizeOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Icon Size Offset",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Space between the icon and the cast bar",
["Min"] = -5,
["Name"] = "Icon Padding",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "iconPadding",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Interrupt Texture",
["Value"] = "Can't Interrupt Texture:",
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Texture",
["Value"] = true,
["Key"] = "showTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled show a texture to tell the cast can't be interrupted",
},
{
["Type"] = 3,
["Name"] = "Texture Path",
["Value"] = "Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON",
["Key"] = "iconTexturePath",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Insert the path for the texture",
},
{
["Type"] = 4,
["Name"] = "Texture Desaturated",
["Value"] = true,
["Key"] = "desaturatedTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enbaled, texture is shown in black & white",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
0.3056715726852417,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Select the color of the texture",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture width",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 10,
["Key"] = "textureWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Width",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "The texture is set to be the same size as the cast bar, fine tune the height as wanted",
["Min"] = -16,
["Name"] = "Texture Height Mod",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureHeightMod",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture position",
["Min"] = -32,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "texturePosition",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Position",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust the texture transparency",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["HooksTemp"] = {
},
["semver"] = "",
["Author"] = "Ditador-Azralon",
["version"] = -1,
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["Name"] = "Cast Bar Icon Settings [P]",
["Time"] = 1597097268,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\castbar_icon",
["LastHookEdited"] = "",
},
{
["Enabled"] = false,
["Revision"] = 84,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Ahwa-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Add extra effects to execute range. See the constructor script for options.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        if (healthBar.CurrentHealth / healthBar.CurrentHealthMax <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end        \n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = false\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"green\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * envTable.ExecutePercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
},
["version"] = -1,
["Time"] = 1547406548,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 135358,
["Name"] = "Execute Range [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 363,
["Options"] = {
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
0.5019607843137255,
0.5019607843137255,
0,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBarColor",
["Value"] = true,
["Name"] = "Change Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBorderColor",
["Value"] = false,
["Name"] = "Change Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetColors",
["Value"] = true,
["Name"] = "Reset Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["HooksTemp"] = {
},
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["version"] = -1,
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["Name"] = "Attacking Specific Unit [Plater]",
["Time"] = 1620377377,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_attacking_unit",
["LastHookEdited"] = "",
},
{
["Enabled"] = false,
["Revision"] = 284,
["Options"] = {
},
["HooksTemp"] = {
},
["semver"] = "",
["Author"] = "Izimode-Azralon",
["version"] = -1,
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["Name"] = "Combo Points [Plater]",
["Time"] = 1621935143,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = 135426,
["LastHookEdited"] = "",
},
},
["aura_show_buff_by_the_unit"] = false,
["target_shady_alpha"] = 0,
["saved_cvars"] = {
["ShowClassColorInNameplate"] = "1",
["nameplateOverlapV"] = "1.0900000333786",
["ShowNamePlateLoseAggroFlash"] = "1",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplateTargetRadialPosition"] = "1",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["clampTargetNameplateToScreen"] = "1",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "100",
["nameplateShowFriendlyMinions"] = "0",
["nameplateTargetBehindMaxDistance"] = "30",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateMotionSpeed"] = "0.05",
["nameplateShowEnemyMinions"] = "1",
["nameplateShowEnemyPets"] = "0",
["nameplateShowFriendlyNPCs"] = "0",
["nameplateSelectedScale"] = "1.15",
["nameplateShowFriends"] = "0",
["nameplateMinScale"] = "1",
["nameplateOtherTopInset"] = "0.085",
["nameplateShowEnemyTotems"] = "1",
["nameplateShowFriendlyGuardians"] = "0",
["nameplateShowEnemyGuardians"] = "0",
["NamePlateHorizontalScale"] = "1",
["nameplateLargeTopInset"] = "0.085",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateShowDebuffsOnFriendly"] = "0",
},
["login_counter"] = 819,
["script_data_trash"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1625793282,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1154,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["__TrashAt"] = 1631062291,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Name"] = "Cast - Alert + Timer [P]",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Cast start animation settings",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 7,
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Value"] = {
{
"350421",
"5",
},
{
"355787",
"15",
},
{
"348513",
"14",
},
{
"348513",
"14",
},
},
["Key"] = "timerList",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["version"] = -1,
["SpellIds"] = {
350421,
355787,
348513,
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, scriptTable.config.segmentsAmount do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\nend",
["Time"] = 1660511537,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 341,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show a different animation for the cast bar.",
["__TrashAt"] = 1667930345,
["NpcNames"] = {
},
["SpellIds"] = {
373429,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Glowing [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Name"] = "Amount of Segments",
["Value"] = 7,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetFromScale(0.2, 1)\n        texture.scale:SetToScale(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\nend\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    function envTable.CheckUnit(unitFrame, envTable)\n        if (envTable._NpcID == 185680) then\n            --haste\n            envTable.SetColor(unitFrame, \"haste\")\n            \n        elseif (envTable._NpcID == 185683) then\n            --movement speed\n            envTable.SetColor(unitFrame, \"ms\")\n            \n        elseif (envTable._NpcID == 185685) then\n            --cooldown reduction\n            envTable.SetColor(unitFrame, \"cdr\")\n            \n        end\n    end\n    \n    function envTable.SetColor(unitFrame, bonusType)\n        \n        local r, g, b, a, name\n        \n        if (bonusType == \"haste\") then\n            name = scriptTable.config.hasteName\n            r, g, b, a = DetailsFramework:ParseColors(scriptTable.config.hasteColor)\n            \n        elseif (bonusType == \"ms\") then\n            name = scriptTable.config.msName\n            r, g, b, a = DetailsFramework:ParseColors(scriptTable.config.msColor)\n            \n        elseif (bonusType == \"cdr\") then\n            name = scriptTable.config.cdrName\n            r, g, b, a = DetailsFramework:ParseColors(scriptTable.config.cdrColor)\n        end\n        \n        Plater.SetNameplateColor(unitFrame, r, g, b, a)\n        if (scriptTable.config.canChangeSize) then\n            Plater.SetNameplateSize(unitFrame, scriptTable.config.width, scriptTable.config.height)\n        end\n        \n        --border\n        if (scriptTable.config.showBorder) then\n            r, g, b, a = r+0.2, g+0.2, b+0.2\n            Plater.SetBorderColor(unitFrame, r, g, b)\n        end\n        \n        --name\n        unitFrame.healthBar.unitName:SetText(name)\n    end\nend\n\n\n--185685 cooldown reduction\n--185680 haste\n--185683 movement speed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckUnit(unitFrame, envTable)\nend\n\n\n",
["Time"] = 1647994498,
["url"] = "",
["Icon"] = 4263293,
["Enabled"] = true,
["Revision"] = 70,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Make more easy to distinguish relics within dungeons in 9.2 patch",
["NpcNames"] = {
},
["Name"] = "Relics 9.2 M Dungeons",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "ColorSettingsAnchor",
["Value"] = "Color Settings",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Adjust the nameplate color for each mob",
},
{
["Type"] = 1,
["Name"] = "Haste Color",
["Value"] = {
0.4549019607843137,
0.2156862745098039,
0.5490196078431373,
1,
},
["Key"] = "hasteColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "haste color",
},
{
["Type"] = 1,
["Key"] = "msColor",
["Value"] = {
0.3098039215686275,
0.5215686274509804,
0.2588235294117647,
1,
},
["Name"] = "Moviment Speep Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "moviment speep color",
},
{
["Type"] = 1,
["Name"] = "Cooldown Reduction Color",
["Value"] = {
0.1725490196078431,
0.2823529411764706,
0.5215686274509804,
1,
},
["Key"] = "cdrColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "cooldown reduction color",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "SizeSettingsAnchor",
["Value"] = "Size Settings",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "canChangeSize",
["Value"] = false,
["Name"] = "Change Nameplate Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If this is checked, the nameplate size is changed to the values below",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "total width of the nameplate",
["Min"] = 50,
["Key"] = "width",
["Value"] = 100,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Width",
},
{
["Type"] = 2,
["Max"] = 40,
["Desc"] = "total height of the nameplate",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 12,
["Name"] = "Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "height",
},
{
["Type"] = 6,
["Name"] = "Option 9",
["Value"] = 0,
["Key"] = "option9",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "BorderSettingsAnchor",
["Value"] = "Border Settings",
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Paint Border",
["Value"] = true,
["Key"] = "showBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, the color of the border will have the same color as the nameplate",
},
{
["Type"] = 6,
["Name"] = "Option 12",
["Value"] = 0,
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "NameSettings",
["Value"] = "Name Settings",
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 3,
["Name"] = "Haste Name",
["Value"] = "HASTE",
["Key"] = "hasteName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "",
},
{
["Type"] = 3,
["Key"] = "cdrName",
["Value"] = "CDR",
["Name"] = "Cooldown Reduction Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "",
},
{
["Type"] = 3,
["Name"] = "Movement Speed Name",
["Value"] = "MS",
["Key"] = "msName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckUnit(unitFrame, envTable)\n    \nend",
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (you may need /reload if some configs isn't applied immediately)    \n    --change the nameplate color to this if allowed\n    envTable.CanChangeNameplateColor = scriptTable.config.changeNameplateColor --\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset --\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/skullbones_128]])\n    unitFrame.UnitImportantSkullTexture:SetPoint(\"center\", unitFrame.healthBar, \"center\", 0, -5)\n    \n    unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n    unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n    unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n164362 - smily morsel - plaguefall\n168882 - fleeting manifestation - sanguine depths\n170234 - oppressive banner - theater of pain\n168988 - overgrowth - Mists of Tirna Scithe\n170452 - essesnce orb - torghast\n\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can change the nameplate color\n    if (envTable.CanChangeNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1604599472,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 355,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\nend\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Nameplate Size Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "nameplateSizeOffset",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.7137254901960784,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Skull Texture",
["Name"] = "Skull Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.4627450980392157,
0,
1,
},
["Name"] = "Skull Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "",
["Min"] = 0,
["Name"] = "Alpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "skullAlpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "",
["Min"] = 0.4,
["Key"] = "skullScale",
["Value"] = 0.6,
["Name"] = "Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Unit - Important [Plater]",
["NpcNames"] = {
},
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1618996775,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tank",
["Enabled"] = true,
["Revision"] = 843,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Cast alert for abilities which only the tank can interrupt.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Tank Interrupt [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.lifePercent = {\n        --npcId         percent divisions\n        [154564] = {80, 30},   --debug\n        [164451] = {40}, --dessia the decapirator - theater of pain\n        [164463] = {40}, --Paceran the Virulent - theater of pain\n        [164461] = {40}, -- Sathel the Accursed - theater of pain\n        [165946]= {50}, -- ~mordretha - thather of pain\n        [164501] = {70, 40, 10}, --mistcaller - tina scythe\n        [164218] = {70, 40}, --Lord Chamberlain - Halls of Atonement\n    }\n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1606506781,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 109,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.79,
["Key"] = "indicatorAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Vertical Line Alpha",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Key"] = "fillAlpha",
["Value"] = 0.2,
["Name"] = "Fill Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Unit - Health Markers [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n--[=[\n\n154564 - debug\n\n168098 - empowered coldheart agent\n156212 - coldheart agent\n\n\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, scriptTable.config.nameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1604607993,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 406,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n    \n    unitFrame.healthBar.MainTargetDotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + scriptTable.config.nameplateSizeOffset)\n    \nend\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = true,
["Key"] = "changeNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Key"] = "nameplateSizeOffset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Nameplate Size Offset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.7137254901960784,
0,
1,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Unit - Main Target [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1605214963,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 607,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Add the buff name in the trigger box.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Aura - Buff Alert [Plater]",
["NpcNames"] = {
},
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1604454032,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 351,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Desc"] = "Add the debuff name in the trigger box.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = false,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "dotsEnabled",
["Value"] = true,
["Name"] = "Dots Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Aura - Debuff Alert [Plater]",
["NpcNames"] = {
},
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    envTable.HealthBarColor = scriptTable.config.healthBarColor\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0.016\n    \n    --update the health bar color coloring from yellow to red\n    --Plater.SetNameplateColor (unitFrame, max (envTable._CastPercent/100, .66), abs (envTable._CastPercent/100 - 1), 0, 1)\n    \n    Plater.SetNameplateColor (unitFrame, envTable.HealthBarColor)\nend\n\n\n",
["Time"] = 1604617977,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = true,
["Revision"] = 513,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    \nend",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a special animation showing the explosion time.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 1,
["Name"] = "Health Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the health bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "arrowHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Ultra Important [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1604617585,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["Enabled"] = true,
["Revision"] = 595,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a small animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.6,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Small Alert [Plater]",
["NpcNames"] = {
},
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, scriptTable.config.segmentsAmount do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n\n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\nend",
["Time"] = 1666836560,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 346,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\nend\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 7,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Glowing [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["Time"] = 1625696653,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["Enabled"] = true,
["Revision"] = 836,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight the target name",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Shows the target name in a separate box",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Key"] = "option27",
["Value"] = 0,
["Name"] = "Option 27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option28",
["Value"] = "Target Options",
["Name"] = "Option 28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Fraction"] = false,
["Value"] = 14,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetNameSize",
},
{
["Type"] = 4,
["Key"] = "colorByClass",
["Value"] = true,
["Name"] = "Use Class Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "textColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "targetBgColor",
["Value"] = {
0,
0,
0,
0.9846720322966576,
},
["Name"] = "Background Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "targetBgBorderColor",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Fraction"] = false,
["Value"] = 90,
["Name"] = "Frame Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetFrameWidth",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Name"] = "Frame Height",
["Value"] = 20,
["Key"] = "targetFrameHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Important Target [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1626467946,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1162,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Cast start animation settings",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Name"] = "Shake Amplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 7,
["Key"] = "timerList",
["Value"] = {
{
"350421",
"5",
},
{
"355787",
"15",
},
{
"348513",
"14",
},
{
"348513",
"14",
},
},
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Alert + Timer [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1660259323,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 52,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["NpcNames"] = {
},
["Name"] = "Aura is Shield [P]",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1618996691,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1060,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Big Alert [Plater]",
["NpcNames"] = {
},
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    envTable.HealthBarColor = scriptTable.config.healthBarColor\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n\nend\n\n\n",
["Time"] = 1604698647,
["url"] = "",
["Icon"] = 2175503,
["Enabled"] = true,
["Revision"] = 462,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\nend\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showArrow",
["Value"] = true,
["Name"] = "Show Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["SpellIds"] = {
240446,
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Explosion Affix M+ [Plater]",
["NpcNames"] = {
},
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1660340256,
["url"] = "",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
["Enabled"] = true,
["Revision"] = 25,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["NpcNames"] = {
},
["Name"] = "Fixate by Unit Buff [P]",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0,
0.5568627450980392,
0.03529411764705882,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.movingArrow = envTable.movingArrow or Plater:CreateImage (self, [[Interface\\PETBATTLES\\PetBattle-StatIcons]], 16, self:GetHeight(), \"background\", {0, 15/32, 18/32, 30/32})\n    \n    --envTable.movingArrow.color = scriptTable.config.arrowColor\n    envTable.movingArrow:SetAlpha (scriptTable.config.arrowAlpha)\n    envTable.movingArrow:SetDesaturated (scriptTable.config.desaturateArrow)\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (envTable.movingArrow, \n        function() \n            envTable.movingArrow:Show() \n            envTable.movingArrow:SetPoint(\"left\", 0, 0)\n        end, \n        function() envTable.movingArrow:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend",
["Time"] = 1604599443,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 460,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Name"] = "Arrow Alpha",
["Value"] = 0.275,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Name"] = "Animation Speed",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animSpeed",
},
{
["Type"] = 4,
["Key"] = "desaturateArrow",
["Value"] = false,
["Name"] = "Use White Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Frontal Cone [Plater]",
["NpcNames"] = {
},
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1618996917,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = true,
["Revision"] = 717,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n        end\n    end\n    \nend\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Very Important [Plater]",
["NpcNames"] = {
},
["__TrashAt"] = 1670199880,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1669326597,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = true,
["Revision"] = 143,
["semver"] = "",
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["__TrashAt"] = 1670877390,
["NpcNames"] = {
},
["SpellIds"] = {
385916,
386063,
388822,
373087,
397785,
106864,
193660,
198263,
387910,
370766,
375591,
384336,
209404,
209378,
210875,
396001,
397899,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Circle AoE [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.15,
["Key"] = "rotationDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.5,
["Name"] = "Animation Start Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 0.6,
["Key"] = "textureStartAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    Plater.SetNameplateColor(unitFrame, scriptTable.config.healthBarColor)\n    \nend\n\n\n",
["Time"] = 1669326367,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = true,
["Revision"] = 641,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["__TrashAt"] = 1670877390,
["NpcNames"] = {
},
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
209410,
211464,
361180,
156718,
395859,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Ultra Important [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Health Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the health bar color to this one.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.168627455830574,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetNameplateColor (unitFrame, scriptTable.config.healthBarColor)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    Plater.DenyColorChange(unitFrame, true)\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1669340396,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 515,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["__TrashAt"] = 1670877390,
["NpcNames"] = {
"196548",
"195580",
"195820",
"195821",
"189886",
"75966",
"102019",
"187159",
"194897",
"104251",
"101326",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Important [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = true,
["Key"] = "changeNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Key"] = "nameplateSizeOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Nameplate Size Offset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.7137255072593689,
0,
0.5631310641765594,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Extra Texture",
["Value"] = "Extra Texture",
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Key"] = "showExtraTexture",
["Value"] = false,
["Name"] = "Show Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
0.4627450980392157,
0,
1,
},
["Key"] = "skullColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Key"] = "skullAlpha",
["Value"] = 0.2,
["Name"] = "Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Fraction"] = true,
["Value"] = 0.6,
["Key"] = "skullScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Scale",
},
{
["Type"] = 7,
["Key"] = "npcColor",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"chocolate",
},
{
"195820",
"chocolate",
},
{
"195821",
"chocolate",
},
{
"189886",
"firebrickdark",
},
{
"75966",
"midnightblue",
},
{
"102019 ",
"chocolate",
},
{
"187159",
"darkmagenta",
},
{
"194897",
"darkmagenta",
},
{
"104251",
"cornflowerblue",
},
},
["Name"] = "Npc Color By NpcID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    Plater.DenyColorChange(unitFrame, true)\nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, scriptTable.config.segmentsAmount do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\nend",
["Time"] = 1669326364,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 453,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["__TrashAt"] = 1670877390,
["NpcNames"] = {
},
["SpellIds"] = {
376644,
373017,
386781,
384823,
372735,
385536,
392398,
375596,
387135,
209033,
360850,
212784,
207980,
199033,
199034,
200969,
394512,
397881,
396020,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Glowing [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Name"] = "Amount of Segments",
["Value"] = 7,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669339757,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1207,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["__TrashAt"] = 1670877390,
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Alert + Timer [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Cast start animation settings",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 7,
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Value"] = {
},
["Key"] = "timerList",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    \nend\n\n\n",
["Time"] = 1669340472,
["url"] = "",
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Enabled"] = true,
["Revision"] = 122,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color of  adds",
["__TrashAt"] = 1670877390,
["NpcNames"] = {
"190187",
"189893",
"99922",
"104822",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Warning [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.4392157196998596,
0.458823561668396,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 4,
["Key"] = "useFlash",
["Value"] = true,
["Name"] = "Flash Nameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Key"] = "npcColor",
["Value"] = {
{
"189893",
"firebrickdark",
},
{
"190187",
"firebrickdark",
},
{
"99922",
"saddlebrown",
},
{
"153285",
"firebrickdark",
},
{
"104822",
"firebrickdark",
},
},
["Name"] = "NpcID to Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    Plater.DenyColorChange(unitFrame, true)\n    \n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\nend\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669327145,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1183,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["__TrashAt"] = 1670877391,
["NpcNames"] = {
},
["SpellIds"] = {
396640,
372743,
377389,
396812,
388392,
387955,
386546,
377503,
384808,
386024,
387615,
387606,
225100,
211401,
211470,
215433,
192563,
198959,
152818,
156776,
398206,
153524,
396073,
396018,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Big Alert [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.4,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Name"] = "Shake Amplitude",
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    Plater.SetNameplateColor(unitFrame, scriptTable.config.healthBarColor)\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n",
["Time"] = 1669249865,
["url"] = "",
["Icon"] = 2175503,
["Enabled"] = true,
["Revision"] = 509,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["__TrashAt"] = 1670877391,
["NpcNames"] = {
},
["SpellIds"] = {
240446,
385339,
198077,
210261,
360857,
},
["PlaterCore"] = 1,
["Name"] = "Explosion Affix M+ [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a special animation showing the explosion time.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Name"] = "Arrow Alpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Name"] = "Arrow Height",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Health Bar",
["Name"] = "Health Bar Title",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Health Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    Plater.DenyColorChange(unitFrame, true)\nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n        Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n      Plater.SetNameplateColor (unitFrame, scriptTable.config.nameplateColor)\n    \nend\n\n\n",
["Time"] = 1669340403,
["url"] = "",
["Icon"] = "interface/addons/plater/media/duck_64",
["Enabled"] = true,
["Revision"] = 36,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "",
["__TrashAt"] = 1670877391,
["NpcNames"] = {
"194622",
"190205",
"197398",
"77006",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Non Elite Trash [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.0941176563501358,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, true)\n    \n    \n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, scriptTable.config.segmentsAmount do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\nend",
["Time"] = 1669257042,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 416,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Just stop casting",
["__TrashAt"] = 1670877391,
["NpcNames"] = {
},
["SpellIds"] = {
377004,
381516,
196543,
199726,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Stop Casting [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\nend\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.movingArrow = envTable.movingArrow or Plater:CreateImage (self, [[Interface\\PETBATTLES\\PetBattle-StatIcons]], 16, self:GetHeight(), \"background\", {0, 15/32, 18/32, 30/32})\n    \n    --envTable.movingArrow.color = scriptTable.config.arrowColor\n    envTable.movingArrow:SetAlpha (scriptTable.config.arrowAlpha)\n    envTable.movingArrow:SetDesaturated (scriptTable.config.desaturateArrow)\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (envTable.movingArrow, \n        function() \n            envTable.movingArrow:Show() \n            envTable.movingArrow:SetPoint(\"left\", 0, 0)\n        end, \n        function() envTable.movingArrow:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.movingArrow:SetAlpha(scriptTable.config.arrowAlpha)\n    \nend",
["Time"] = 1669339586,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 560,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["__TrashAt"] = 1670877391,
["NpcNames"] = {
},
["SpellIds"] = {
375943,
385958,
388623,
377034,
374361,
372107,
381525,
386660,
385578,
384699,
153501,
153686,
154442,
192018,
219488,
372087,
391726,
391723,
377383,
388976,
370764,
387067,
391118,
391136,
382233,
209027,
212031,
207261,
207979,
198888,
199805,
199050,
191508,
152792,
153395,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Frontal Cone [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.275,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animSpeed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    \n    envTable.movingArrow:SetAlpha(scriptTable.config.arrowAlpha)\n    envTable.movingArrow:SetHeight(self:GetHeight() - 2)\n    envTable.movingArrow:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.movingArrow:SetDesaturated (scriptTable.config.desaturateArrow)\n    \n    envTable.movingAnimation:Play()\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669326503,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = true,
["Revision"] = 786,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["__TrashAt"] = 1670877391,
["NpcNames"] = {
},
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Very Important [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n        end)\n    end\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340966,
["url"] = "",
["Icon"] = 134229,
["Enabled"] = true,
["Revision"] = 21,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["NpcNames"] = {
},
["SpellIds"] = {
191284,
},
["Name"] = "Cast - Effect After Cast [P]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["__TrashAt"] = 1672234247,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670202618,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = true,
["Revision"] = 687,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a special animation showing the explosion time.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Name"] = "Health Bar Height Mod",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = true,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.168627455830574,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showArrow",
["Value"] = true,
["Name"] = "Show Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Name"] = "Arrow Alpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Name"] = "Arrow Height",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Name"] = "Color List by SpellId",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Key"] = "castColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
209410,
211464,
361180,
156718,
395859,
358320,
374045,
386757,
367500,
370225,
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Ultra Important [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1672234247,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = true,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["NpcNames"] = {
"195138",
"192955",
"190294",
"76518",
},
["SpellIds"] = {
},
["Name"] = "Add - Tag Number [P]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
["__TrashAt"] = 1672234247,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, scriptTable.config.segmentsAmount do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            texture:Hide()\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        textureStretched:Hide()  \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        print(\"no envTable.NextPercent\")\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \nend",
["Time"] = 1670623964,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 498,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Name"] = "Cast Color by SpellID",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Key"] = "castColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["SpellIds"] = {
376644,
373017,
386781,
384823,
372735,
385536,
392398,
375596,
387135,
209033,
360850,
212784,
207980,
199033,
199034,
200969,
394512,
397881,
396020,
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Glowing [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1672234247,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \nend",
["Time"] = 1671311518,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 511,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["__TrashAt"] = 1673807035,
["NpcNames"] = {
},
["SpellIds"] = {
376644,
373017,
386781,
384823,
372735,
385536,
392398,
375596,
387135,
209033,
360850,
212784,
207980,
199033,
199034,
200969,
394512,
397881,
396020,
374430,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Glowing [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Name"] = "Cast Color by SpellID",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Key"] = "castColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, scriptTable.config.segmentsAmount do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \nend",
["Time"] = 1670202019,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 468,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Just stop casting",
["__TrashAt"] = 1673807035,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
377004,
381516,
196543,
199726,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Name"] = "Amount of Segments",
["Value"] = 5,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Stop Casting [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670202618,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = true,
["Revision"] = 798,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\nend",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
183263,
3636,
376171,
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Very Important [Plater]",
["NpcNames"] = {
},
["__TrashAt"] = 1674662529,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1669340967,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 137,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["NpcNames"] = {
"197697",
"59544",
},
["SpellIds"] = {
},
["Name"] = "Add - Health Markers [P]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "indicatorAlpha",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "fillAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fill Alpha",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["__TrashAt"] = 1683770895,
},
},
["health_cutoff"] = false,
["castbar_target_text_size"] = 55.01922225952148,
["cast_statusbar_bgtexture"] = "Blizzard",
["castbar_target_anchor"] = {
["x"] = 3.814697265625e-05,
},
["minor_width_scale"] = 0.4800000190734863,
["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark2",
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["script_auto_imported"] = {
["Relics 9.2 M Dungeons"] = 2,
["Cast - Effect After Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 2,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Unit - Health Markers"] = 12,
["Cast - Tank Interrupt"] = 12,
["Cast - Important Target [P]"] = 2,
["Cast - Very Important"] = 15,
["Cast - Alert + Timer [P]"] = 4,
["Aura is Shield [P]"] = 2,
["Add - Warning [P]"] = 5,
["Fixate On You"] = 11,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Glowing [P]"] = 10,
["Cast - Circular Swipe"] = 4,
["Auto Set Skull"] = 11,
["Fixate"] = 11,
["Spiteful Affix"] = 3,
["Cast - Shield Interrupt"] = 2,
["Add - Non Elite Trash [P]"] = 4,
["Cast - On Going Cast [P]"] = 2,
["Cast - Stop Casting"] = 4,
["Countdown"] = 11,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 15,
["Add - Explode on Die [P]"] = 1,
["Aura - Buff Alert"] = 15,
["Cast - Quick Flash"] = 2,
["Unit - Important"] = 11,
["Unit - Show Energy"] = 11,
},
["ghost_auras"] = {
["auras"] = {
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
},
["range_check_in_range_or_target_alpha"] = 1,
["health_selection_overlay_alpha"] = 0,
["border_thickness"] = 0.9700000286102295,
["show_interrupt_author"] = false,
["number_region_first_run"] = true,
["first_run3"] = true,
["health_selection_overlay"] = "Blizzard",
["range_check_alpha"] = 1,
["ui_parent_scale_tune"] = 1.406249965948519,
["castbar_icon_customization_enabled"] = false,
["castbar_target_font"] = "2002 Bold",
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1.164546608924866,
},
},
["target_highlight"] = false,
["tank"] = {
["colors"] = {
["aggro"] = {
1,
0.1137254901960784,
0,
},
["anothertank"] = {
1,
0.07450980392156863,
0.03137254901960784,
},
["pulling"] = {
nil,
0.04313725490196078,
0.1058823529411765,
},
},
},
["aura_tracker"] = {
["track_method"] = 2,
["buff_tracked"] = {
[227931] = true,
[233210] = true,
[209859] = true,
[163689] = true,
[297133] = true,
},
},
["color_override"] = false,
["focus_indicator_enabled"] = false,
["target_highlight_alpha"] = 0,
["health_cutoff_upper"] = false,
["target_highlight_height"] = 2,
["cast_statusbar_texture"] = "Blizzard",
["health_statusbar_bgcolor"] = {
0.1137254901960784,
0.1137254901960784,
0.1137254901960784,
0.8900000005960464,
},
["not_affecting_combat_enabled"] = true,
["patch_version"] = 36,
["pet_width_scale"] = 0.4900000095367432,
["target_highlight_texture"] = "Interface\\AddOns\\Plater\\images\\selection_indicator1",
},
["df-profile-main2"] = {
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = false,
["Revision"] = 632,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = false,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.40392156862745,
0.003921568627451,
0,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "dotsEnabled",
["Value"] = true,
["Name"] = "Dots Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.32156862745098,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Add the buff name in the trigger box.",
["SpellIds"] = {
398151,
377738,
378149,
},
["Name"] = "Aura - Buff Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Time"] = 1611844883,
["url"] = "",
["Icon"] = 135945,
["Enabled"] = false,
["Revision"] = 186,
["semver"] = "",
["Author"] = "Symantec-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Time to Die",
["Name"] = "Time to Die",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 50,
["Desc"] = "",
["Min"] = 10,
["Key"] = "bgWidth",
["Value"] = 27,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Width",
},
{
["Type"] = 1,
["Key"] = "bgColor",
["Value"] = {
0.50588235294118,
0.070588235294118,
1,
1,
},
["Name"] = "Background Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "",
["Min"] = 7,
["Key"] = "textSize",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 1,
["Key"] = "textColor",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Name"] = "Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option11",
["Value"] = "Targeting",
["Name"] = "Targeting",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "switchTargetName",
["Value"] = true,
["Name"] = "Show Target instead of Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useTargetingColor",
["Value"] = true,
["Name"] = "Change Color if targeting You",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "targetingColor",
["Value"] = {
0.070588235294118,
0.61960784313725,
0,
1,
},
["Name"] = "Color if targeting You",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option11",
["Value"] = 0,
["Name"] = "Option 11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Time to die Spiteful affix",
["SpellIds"] = {
},
["Name"] = "M+ Spiteful",
["NpcNames"] = {
"174773",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1673994690,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = false,
["Revision"] = 828,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.56470588235294,
0.56470588235294,
0.56470588235294,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.41176470588235,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
183263,
3636,
376171,
350687,
372735,
373017,
392488,
257732,
256060,
257899,
384633,
374339,
395694,
391634,
372701,
369328,
265487,
413044,
183526,
88194,
87762,
413385,
411001,
378282,
384161,
259572,
255371,
427460,
429172,
426500,
413607,
412922,
417481,
201399,
411994,
415770,
260907,
260703,
260741,
265876,
263959,
266225,
253517,
377488,
},
["Name"] = "Cast - Very Important [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1670201853,
["url"] = "",
["Icon"] = 2175503,
["Enabled"] = false,
["Revision"] = 533,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showArrow",
["Value"] = true,
["Name"] = "Show Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.6156862745098,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["SpellIds"] = {
240446,
385339,
198077,
210261,
360857,
389446,
},
["Name"] = "Explosion Affix M+ [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = false,
["Revision"] = 368,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = false,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.40392156862745,
0.003921568627451,
0,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "dotsEnabled",
["Value"] = true,
["Name"] = "Dots Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.32156862745098,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Author"] = "Tercioo-Sylvanas",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["semver"] = "",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
},
["Desc"] = "Add the debuff name in the trigger box.",
["Name"] = "Aura - Debuff Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670790652,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = false,
["Revision"] = 694,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.431372,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showArrow",
["Value"] = true,
["Name"] = "Show Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.6156862745098,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
209410,
211464,
361180,
156718,
395859,
358320,
374045,
386757,
367500,
370225,
376200,
372107,
388923,
376934,
384899,
373960,
374724,
385551,
259732,
373424,
373084,
87618,
255041,
428926,
76634,
200050,
197546,
198079,
199193,
266181,
253544,
},
["Name"] = "Cast - Ultra Important [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203603,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1194,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.43137254901961,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["SpellIds"] = {
396640,
372743,
377389,
396812,
388392,
387955,
386546,
377503,
384808,
386024,
387615,
387606,
225100,
211401,
211470,
215433,
192563,
198959,
152818,
156776,
398206,
153524,
396073,
396018,
345202,
377950,
372223,
384194,
392451,
392924,
397889,
209413,
207980,
257397,
257736,
382787,
374699,
377402,
369602,
369465,
369400,
381593,
265091,
265433,
382791,
376780,
225573,
278444,
164887,
168082,
76813,
227913,
265368,
},
["Name"] = "Cast - Big Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1669325410,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["Enabled"] = true,
["Revision"] = 662,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a small animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["SpellIds"] = {
376851,
396044,
381517,
373932,
397801,
208165,
392576,
198750,
387843,
387411,
211299,
198595,
198934,
198962,
156722,
281420,
274383,
259092,
367521,
374544,
385039,
382474,
369823,
377500,
260879,
186269,
378818,
371875,
372225,
200658,
266036,
265407,
164965,
429176,
428526,
418200,
407124,
415437,
264050,
267824,
},
["Name"] = "Cast - Small Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Time"] = 1604696441,
["url"] = "",
["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
["Enabled"] = false,
["Revision"] = 63,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "onlyInCombat",
["Value"] = false,
["Name"] = "Only in Combat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Auto set skull marker",
["SpellIds"] = {
},
["Name"] = "Auto Set Skull",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1634089535,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["Enabled"] = false,
["Revision"] = 376,
["semver"] = "",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["SpellIds"] = {
},
["Prio"] = 99,
["Name"] = "Aura - Blink by Time Left [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "blinkEnabled",
["Value"] = true,
["Name"] = "Blink Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = true,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = false,
["Name"] = "Change NamePlate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Key"] = "timeleftToBlink",
["Value"] = 3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Timeleft to Blink",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Key"] = "blinkSpeed",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Key"] = "blinkMaxAlpha",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.28627450980392,
0.003921568627451,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "timerColorEnabled",
["Value"] = true,
["Name"] = "Timer Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Key"] = "timeLeftWarning",
["Value"] = 8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Time Left Warning",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Key"] = "timeLeftCritical",
["Value"] = 3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Time Left Critical",
},
{
["Type"] = 1,
["Key"] = "warningColor",
["Value"] = {
1,
0.87058823529412,
0,
1,
},
["Name"] = "Warning Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Key"] = "criticalColor",
["Value"] = {
1,
0.074509803921569,
0,
1,
},
["Name"] = "Critical Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604354364,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["Enabled"] = false,
["Revision"] = 206,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Options"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["SpellIds"] = {
},
["Name"] = "Countdown",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1670202265,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 620,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.73,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Key"] = "animSpeed",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Speed",
},
{
["Type"] = 4,
["Key"] = "desaturateArrow",
["Value"] = false,
["Name"] = "Use White Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["SpellIds"] = {
375943,
385958,
388623,
377034,
374361,
381525,
386660,
385578,
384699,
153501,
153686,
154442,
192018,
219488,
372087,
391726,
391723,
377383,
388976,
370764,
387067,
391118,
391136,
382233,
209027,
212031,
207261,
207979,
198888,
199805,
199050,
191508,
152792,
153395,
209495,
257426,
255952,
257870,
413147,
383107,
377559,
388060,
376170,
384524,
375351,
390111,
369791,
369573,
369563,
369335,
369061,
375727,
265016,
265019,
260793,
260292,
272457,
272609,
269843,
183465,
226296,
188169,
183088,
410873,
411012,
88308,
382708,
375251,
375439,
372311,
373742,
372201,
374533,
377204,
201226,
204667,
198379,
200768,
253239,
250258,
255567,
194956,
427510,
426645,
412505,
412129,
419351,
401482,
404916,
200345,
200261,
198641,
265372,
271174,
264694,
264923,
},
["Name"] = "Cast - Frontal Cone [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Time"] = 1622197554,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["Icon"] = 1029718,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["Enabled"] = false,
["Revision"] = 270,
["semver"] = "",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["SpellIds"] = {
},
["Prio"] = 99,
["Name"] = "Fixate [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["Desc"] = "Show above the nameplate who is the player fixated",
["Options"] = {
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1604357453,
["url"] = "",
["Icon"] = 136048,
["Enabled"] = false,
["Revision"] = 233,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Name"] = "add trigger",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Key"] = "fontSize",
["Value"] = 16,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.80392156862745,
0.80392156862745,
0.80392156862745,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Show the energy amount above the nameplate.",
["SpellIds"] = {
},
["Name"] = "Unit - Show Energy [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1622197554,
["url"] = "",
["Icon"] = 841383,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["Revision"] = 267,
["semver"] = "",
["Enabled"] = false,
["Temp_ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["Author"] = "Tecno-Azralon",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["version"] = -1,
["Prio"] = 99,
["Name"] = "Fixate On You [Plater]",
["PlaterCore"] = 1,
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Options"] = {
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203758,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1213,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Cast start animation settings",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.43137254901961,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 7,
["Key"] = "timerList",
["Value"] = {
},
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["SpellIds"] = {
},
["Name"] = "Cast - Alert + Timer [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["Time"] = 1669339628,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["Enabled"] = true,
["Revision"] = 878,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shows the target name in a separate box",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.56470588235294,
0.56470588235294,
0.56470588235294,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.41176470588235,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Key"] = "option27",
["Value"] = 0,
["Name"] = "Option 27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option28",
["Value"] = "Target Options",
["Name"] = "Option 28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Key"] = "targetNameSize",
["Value"] = 14,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 4,
["Key"] = "colorByClass",
["Value"] = true,
["Name"] = "Use Class Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "textColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "targetBgColor",
["Value"] = {
0,
0,
0,
0.98467203229666,
},
["Name"] = "Background Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "targetBgBorderColor",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Key"] = "targetFrameWidth",
["Value"] = 90,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Frame Width",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Key"] = "targetFrameHeight",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Frame Height",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Highlight the target name",
["SpellIds"] = {
},
["Name"] = "Cast - Important Target [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1669327146,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 65,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Options"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["SpellIds"] = {
},
["Name"] = "Aura is Shield [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1668886509,
["url"] = "",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
["Enabled"] = true,
["Revision"] = 33,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Options"] = {
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0,
0.55686274509804,
0.035294117647059,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["SpellIds"] = {
426662,
426663,
},
["Name"] = "Fixate by Unit Buff [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514190,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 547,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.95686274509804,
1,
0.98823529411765,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.85882352941176,
0.43137254901961,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Show a different animation for the cast bar.",
["SpellIds"] = {
376644,
373017,
386781,
384823,
372735,
385536,
392398,
375596,
387135,
360850,
212784,
199033,
199034,
200969,
394512,
397881,
396020,
374430,
384353,
265376,
193941,
411002,
169445,
},
["Name"] = "Cast - Glowing [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1671066705,
["url"] = "",
["Icon"] = 134229,
["Enabled"] = true,
["Revision"] = 37,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Options"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["SpellIds"] = {
191284,
},
["Name"] = "Cast - Effect After Cast [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1670428019,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.15,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Start Duration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Key"] = "textureStartAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Start Alpha",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["SpellIds"] = {
385916,
386063,
388822,
373087,
397785,
106864,
193660,
198263,
387910,
370766,
375591,
384336,
209404,
209378,
210875,
396001,
397899,
386559,
382555,
258672,
258777,
257756,
257784,
256405,
256589,
393793,
388046,
375079,
390290,
369811,
369703,
226287,
410999,
372561,
256882,
172578,
412063,
},
["Name"] = "Cast - Circle AoE [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        [186227] = {20}, --Monstrous Decay\n        [184020] = {40}, -- Hulking Berserker\n        [91005] = {20}, --Naraxas\n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1683596223,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 146,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Key"] = "indicatorAlpha",
["Value"] = 0.79,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Vertical Line Alpha",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Key"] = "fillAlpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fill Alpha",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["SpellIds"] = {
},
["Name"] = "Add - Health Markers [P]",
["NpcNames"] = {
"197697",
"59544",
"186227",
"184020",
"91005",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670423785,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 572,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.52549019607843,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Key"] = "nameplateSizeOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Nameplate Size Offset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.71372550725937,
0,
0.56313106417656,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Extra Texture",
["Name"] = "Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Key"] = "showExtraTexture",
["Value"] = false,
["Name"] = "Show Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.46274509803922,
0,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Key"] = "skullAlpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Alpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Key"] = "skullScale",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Scale",
},
{
["Type"] = 7,
["Key"] = "npcColor",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
["Name"] = "Npc Color By NpcID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["SpellIds"] = {
},
["Name"] = "Add - Important [P]",
["NpcNames"] = {
"196548",
"195580",
"195820",
"195821",
"189886",
"75966",
"102019",
"187159",
"194897",
"104251",
"101326",
"189669",
"192464",
190381,
92538,
192464,
131009,
127315,
133361,
136330,
214117,
212483,
101008,
194745,
190426,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = false,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
["Options"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["SpellIds"] = {
},
["Name"] = "Add - Tag Number [P]",
["NpcNames"] = {
"195138",
"192955",
"190294",
"76518",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669324381,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = true,
["Revision"] = 887,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.43137254901961,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Key"] = "shakeAmplitude",
["Value"] = 25,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 30,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Play a very fast flash when the cast start",
["SpellIds"] = {
392640,
397888,
209033,
385029,
374563,
377341,
369675,
369365,
369411,
278961,
202108,
88186,
200630,
255824,
252781,
250096,
200248,
197797,
264520,
418202,
201839,
412012,
411958,
},
["Name"] = "Cast - Quick Flash [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["Time"] = 1670427654,
["url"] = "",
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.43921571969986,
0.4588235616684,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useFlash",
["Value"] = true,
["Name"] = "Flash Nameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Key"] = "npcColor",
["Value"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
["Name"] = "NpcID to Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Change the color of  add",
["SpellIds"] = {
},
["Name"] = "Add - Warning [P]",
["NpcNames"] = {
"190187",
"189893",
"99922",
"104822",
129758,
186696,
101075,
100818,
98081,
52019,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Time"] = 1670427838,
["url"] = "",
["Icon"] = "interface/addons/plater/media/duck_64",
["Enabled"] = true,
["Revision"] = 111,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.094117656350136,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useNameplateScale",
["Value"] = true,
["Name"] = "Change Nameplate Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Key"] = "scale",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Nameplate Scale",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "",
["SpellIds"] = {
},
["Name"] = "Add - Non Elite Trash [P]",
["NpcNames"] = {
"194622",
"190205",
"197398",
"77006",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669325411,
["url"] = "",
["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
["Enabled"] = true,
["Revision"] = 101,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
["Options"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "When the caster has a shield and only when the shield is removed the cast can be interrupted",
["SpellIds"] = {
373688,
391050,
},
["Name"] = "Cast - Shield Interrupt [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514185,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 506,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.95686274509804,
1,
0.98823529411765,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.85882352941176,
0.43137254901961,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Just stop casting",
["SpellIds"] = {
377004,
381516,
196543,
199726,
200291,
268202,
},
["Name"] = "Cast - Stop Casting [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669340350,
["url"] = "",
["Icon"] = "interface/addons/plater/media/radio_64",
["Enabled"] = true,
["Revision"] = 106,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 4,
["Key"] = "useReverse",
["Value"] = false,
["Name"] = "Reverse Health Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useShake",
["Value"] = false,
["Name"] = "Enable Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Key"] = "shakeAmplitude",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 70,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBackground",
["Value"] = true,
["Name"] = "Show Red Background",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "",
["SpellIds"] = {
},
["Name"] = "Add - Explode on Die [P]",
["NpcNames"] = {
"194895",
"105703",
"59598",
"58319",
200388,
189299,
131402,
135052,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1673726734,
["url"] = "",
["Icon"] = 236209,
["Enabled"] = true,
["Revision"] = 18,
["semver"] = "",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Options"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["SpellIds"] = {
372743,
372749,
384933,
},
["Name"] = "Aura While Casting [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1676905232,
["url"] = "",
["Icon"] = 4038101,
["Enabled"] = true,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
["Options"] = {
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
1,
1,
0.41662168502808,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots Y Offset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Key"] = "speed",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "minAlpha",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Min Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.019607843831182,
0,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["SpellIds"] = {
388886,
209676,
377912,
},
["Name"] = "Cast - On Going Cast [P]",
["NpcNames"] = {
},
},
},
["saved_cvars_last_change"] = {
["nameplateShowFriends"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Blizzard_SharedXML/CvarUtil.lua\"]:72: in function `SetValue'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua\"]:187: in function `SetValueInternal'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua\"]:67: in function `SetValue'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Settings.lua\"]:229: in function `SetValue'\n[string \"FRIENDNAMEPLATES\"]:6: in function <[string \"FRIENDNAMEPLATES\"]:1>\n",
["clampTargetNameplateToScreen"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:5622: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:5620>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:811: in function <Interface/AddOns/Details/Libs/DF/slider.lua:762>\n",
["nameplateSelectedScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:5714: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:5712>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/mixins.lua\"]:372: in function `RunHooksForWidget'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:749: in function <Interface/AddOns/Details/Libs/DF/slider.lua:713>\n",
["nameplateMaxDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:6067: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:6065>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/mixins.lua\"]:372: in function `RunHooksForWidget'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:749: in function <Interface/AddOns/Details/Libs/DF/slider.lua:713>\n[string \"=[C]\"]: in function `SetValue'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:75: in function <Interface/AddOns/Details/Libs/DF/slider.lua:44>\n[string \"=(tail call)\"]: ?\n[string \"@Interface/AddOns/Details/Libs/DF/buildmenu.lua\"]:722: in function `RefreshOptions'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:514: in function `RefreshOptionsFrame'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1391: in function `RefreshConfig'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1398: in function `?'\n...\n[string \"@Interface/AddOns/BattleGroundEnemies/Libs/AceConfig-3.0/AceConfigDialog-3.0/AceConfigDialog-3.0.lua\"]:45: in function <...nfig-3.0/AceConfigDialog-3.0/AceConfigDialog-3.0.lua:43>\n[string \"@Interface/AddOns/BattleGroundEnemies/Libs/AceConfig-3.0/AceConfigDialog-3.0/AceConfigDialog-3.0.lua\"]:831: in function <...nfig-3.0/AceConfigDialog-3.0/AceConfigDialog-3.0.lua:658>\n[string \"=[C]\"]: ?\n[string \"@Interface/AddOns/BattleGroundEnemies/Libs/AceGUI-3.0/AceGUI-3.0.lua\"]:66: in function <...s/BattleGroundEnemies/Libs/AceGUI-3.0/AceGUI-3.0.lua:64>\n[string \"@Interface/AddOns/BattleGroundEnemies/Libs/AceGUI-3.0/AceGUI-3.0.lua\"]:300: in function `Fire'\n[string \"@Interface/AddOns/BattleGroundEnemies/Libs/AceGUI-3.0/widgets/AceGUIWidget-DropDown.lua\"]:432: in function <...es/Libs/AceGUI-3.0/widgets/AceGUIWidget-DropDown.lua:423>\n[string \"=[C]\"]: ?\n[string \"@Interface/AddOns/BattleGroundEnemies/Libs/AceGUI-3.0/AceGUI-3.0.lua\"]:66: in function <...s/BattleGroundEnemies/Libs/AceGUI-3.0/AceGUI-3.0.lua:64>\n[string \"@Interface/AddOns/BattleGroundEnemies/Libs/AceGUI-3.0/AceGUI-3.0.lua\"]:300: in function `Fire'\n[string \"@Interface/AddOns/BattleGroundEnemies/Libs/AceGUI-3.0/widgets/AceGUIWidget-DropDown-Items.lua\"]:351: in function <...s/AceGUI-3.0/widgets/AceGUIWidget-DropDown-Items.lua:341>\n",
["nameplateTargetRadialPosition"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:5623: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:5620>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:811: in function <Interface/AddOns/Details/Libs/DF/slider.lua:762>\n",
["nameplateSelfScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:4365: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:4363>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/mixins.lua\"]:372: in function `RunHooksForWidget'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:749: in function <Interface/AddOns/Details/Libs/DF/slider.lua:713>\n[string \"=[C]\"]: in function `SetValue'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:75: in function <Interface/AddOns/Details/Libs/DF/slider.lua:44>\n[string \"=(tail call)\"]: ?\n[string \"@Interface/AddOns/Details/Libs/DF/buildmenu.lua\"]:722: in function `RefreshOptions'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:514: in function `RefreshOptionsFrame'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1391: in function `RefreshConfig'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1398: in function `?'\n...\n[string \"@Interface/AddOns/BattleGroundEnemies/Libs/AceConfig-3.0/AceConfigDialog-3.0/AceConfigDialog-3.0.lua\"]:45: in function <...nfig-3.0/AceConfigDialog-3.0/AceConfigDialog-3.0.lua:43>\n[string \"@Interface/AddOns/BattleGroundEnemies/Libs/AceConfig-3.0/AceConfigDialog-3.0/AceConfigDialog-3.0.lua\"]:831: in function <...nfig-3.0/AceConfigDialog-3.0/AceConfigDialog-3.0.lua:658>\n[string \"=[C]\"]: ?\n[string \"@Interface/AddOns/BattleGroundEnemies/Libs/AceGUI-3.0/AceGUI-3.0.lua\"]:66: in function <...s/BattleGroundEnemies/Libs/AceGUI-3.0/AceGUI-3.0.lua:64>\n[string \"@Interface/AddOns/BattleGroundEnemies/Libs/AceGUI-3.0/AceGUI-3.0.lua\"]:300: in function `Fire'\n[string \"@Interface/AddOns/BattleGroundEnemies/Libs/AceGUI-3.0/widgets/AceGUIWidget-DropDown.lua\"]:432: in function <...es/Libs/AceGUI-3.0/widgets/AceGUIWidget-DropDown.lua:423>\n[string \"=[C]\"]: ?\n[string \"@Interface/AddOns/BattleGroundEnemies/Libs/AceGUI-3.0/AceGUI-3.0.lua\"]:66: in function <...s/BattleGroundEnemies/Libs/AceGUI-3.0/AceGUI-3.0.lua:64>\n[string \"@Interface/AddOns/BattleGroundEnemies/Libs/AceGUI-3.0/AceGUI-3.0.lua\"]:300: in function `Fire'\n[string \"@Interface/AddOns/BattleGroundEnemies/Libs/AceGUI-3.0/widgets/AceGUIWidget-DropDown-Items.lua\"]:351: in function <...s/AceGUI-3.0/widgets/AceGUIWidget-DropDown-Items.lua:341>\n",
},
["aura_cache_by_name"] = {
["unending breath"] = {
5697,
},
["sphere of despair"] = {
411038,
},
["solar beam"] = {
78675,
81261,
97547,
129888,
129889,
129891,
165282,
165283,
165286,
177454,
295521,
295532,
295533,
300660,
300678,
300682,
311930,
313030,
},
["detect invisibility"] = {
11649,
62856,
},
["paralysis"] = {
35202,
66830,
84030,
115078,
173342,
177578,
213369,
357768,
},
["leg sweep"] = {
119381,
128787,
164392,
174417,
285270,
292306,
397899,
},
["song of chi-ji"] = {
198898,
198909,
},
["fear"] = {
5782,
12096,
12542,
22678,
26070,
26580,
26661,
27641,
27990,
29168,
29321,
30002,
30530,
30584,
30615,
31358,
31970,
32241,
33547,
33924,
34259,
38154,
38595,
38660,
39119,
39176,
39210,
39415,
41150,
46561,
51240,
59669,
65809,
68950,
70171,
81442,
83613,
113712,
115186,
117573,
118699,
125204,
128098,
130616,
130940,
134938,
142884,
144062,
173093,
182806,
204730,
205398,
214304,
220540,
221424,
223170,
240136,
242084,
242739,
245902,
246277,
246307,
248028,
251419,
259874,
259995,
266918,
287685,
287687,
288545,
331741,
342914,
344887,
375205,
400529,
419865,
},
},
["url"] = "https://wago.io/vzrQ_-iCn/7",
["hover_highlight"] = false,
["target_shady_enabled"] = false,
["cast_statusbar_spark_alpha"] = 0.8299999833106995,
["aura2_y_offset"] = 11,
["health_selection_overlay"] = "Blizzard",
["expansion_triggerwipe"] = {
[9] = true,
[8] = true,
},
["show_aggro_glow"] = false,
["cast_statusbar_color_nointerrupt"] = {
0.96470588235294,
1,
0.9843137254902,
1,
},
["npc_cache"] = {
[69134] = {
"Kazra'jin",
"Throne of Thunder",
"enUS",
},
[69390] = {
"Zandalari Storm-Caller",
"Throne of Thunder",
"enUS",
},
[188100] = {
"Shrieking Whelp",
"The Azure Vault",
"enUS",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
"enUS",
},
[59467] = {
"Candlestick Mage",
"Scholomance",
"enUS",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
"enUS",
},
[70414] = {
"Skumblade Pillager",
"Mogu Island Loot Room",
"enUS",
},
[59915] = {
"Jasper Guardian",
"Mogu'shan Vaults",
"enUS",
},
[70798] = {
"Kor'kron Emberguard",
"The Secrets of Ragefire",
"enUS",
},
[60043] = {
"Jade Guardian",
"Mogu'shan Vaults",
"enUS",
},
[64393] = {
"Night Terror",
"Terrace of Endless Spring",
"enUS",
},
[190405] = {
"Infuser Sariya",
"Halls of Infusion",
"enUS",
},
[56589] = {
"Striker Ga'dok",
"Gate of the Setting Sun",
"enUS",
},
[56717] = {
"Hoptallus",
"Stormstout Brewery",
"enUS",
},
[61003] = {
"Dread Spawn",
"Terrace of Endless Spring",
"enUS",
},
[61131] = {
"Mogu'shan Secret-Keeper",
"Mogu'shan Vaults",
"enUS",
},
[61387] = {
"Quilen Guardian",
"Mogu'shan Palace",
"enUS",
},
[73742] = {
"Thresher Turret",
"Siege of Orgrimmar",
"enUS",
},
[187593] = {
"Primal Flame",
"Vault of the Incarnates",
"enUS",
},
[200131] = {
"Sha-Touched Guardian",
"Temple of the Jade Serpent",
"enUS",
},
[70544] = {
"Hekima the Wise",
"Blood in the Snow",
"enUS",
},
[72847] = {
"Hellscream Annihilator",
"Siege of Orgrimmar",
"enUS",
},
[64458] = {
"Kor'thik Warsinger",
"Heart of Fear",
"enUS",
},
[69905] = {
"Gurubashi Berserker",
"Throne of Thunder",
"enUS",
},
[62795] = {
"Sik'thik Warden",
"Siege of Niuzao Temple",
"enUS",
},
[56718] = {
"Hopper",
"Stormstout Brewery",
"enUS",
},
[73104] = {
"Unstable Spark",
"Siege of Orgrimmar",
"enUS",
},
[59213] = {
"Woven Boneguard",
"Scholomance",
"enUS",
},
[71825] = {
"Foul Slime",
"Siege of Orgrimmar",
"enUS",
},
[69906] = {
"Zandalari High Priest",
"Throne of Thunder",
"enUS",
},
[59789] = {
"Thalnos the Soulrender",
"Scarlet Monastery",
"enUS",
},
[68883] = {
"Sully \"The Pickle\" McLeary",
"Lion's Landing",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
"enUS",
},
[62348] = {
"Sik'thik Soldier",
"Siege of Niuzao Temple",
"enUS",
},
[73745] = {
"Kor'kron Iron Sentinel",
"Siege of Orgrimmar",
"enUS",
},
[60621] = {
"Corrupted Waters",
"Terrace of Endless Spring",
"enUS",
},
[56719] = {
"Sha of Violence",
"Shado-Pan Monastery",
"enUS",
},
[69012] = {
"Lesser Diffused Lightning",
"Throne of Thunder",
"enUS",
},
[67093] = {
"Sik'thik Battle-Mender",
"Siege of Niuzao Temple",
"enUS",
},
[197835] = {
"Kaurdyth",
"Vault of the Incarnates",
"enUS",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
"enUS",
},
[184018] = {
"Bromach",
"Uldaman: Legacy of Tyr",
"enUS",
},
[61453] = {
"Mu'Shiba",
"Mogu'shan Palace",
"enUS",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
"enUS",
},
[184019] = {
"Burly Rock-Thrower",
"Uldaman: Legacy of Tyr",
"enUS",
},
[59982] = {
"Meat Graft",
"Scholomance",
"enUS",
},
[69013] = {
"Diffused Lightning",
"Throne of Thunder",
"enUS",
},
[184020] = {
"Hulking Berserker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[192464] = {
"Raging Ember",
"Neltharus",
"enUS",
},
[69909] = {
"Amani'shi Flame Chanter",
"Throne of Thunder",
"enUS",
},
[68118] = {
"Kor'kron Pilot",
"Assault on Zan'vess",
"enUS",
},
[63053] = {
"Garalon's Leg",
"Heart of Fear",
"enUS",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[69910] = {
"Drakkari Frost Warden",
"Throne of Thunder",
"enUS",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
"enUS",
},
[72981] = {
"Aggron",
"Siege of Orgrimmar",
"enUS",
},
[69911] = {
"Zandalari Warlord",
"Throne of Thunder",
"enUS",
},
[68248] = {
"Corpse Spider",
"Throne of Thunder",
"enUS",
},
[198868] = {
"Primalist Voltweaver",
"Vault of the Incarnates",
"enUS",
},
[199124] = {
"Primalist Chillblaster",
"Vault of the Incarnates",
"enUS",
},
[69017] = {
"Primordius",
"Throne of Thunder",
"enUS",
},
[62543] = {
"Blade Lord Ta'yak",
"Heart of Fear",
"enUS",
},
[56658] = {
"Corrupt Droplet",
"Temple of the Jade Serpent",
"enUS",
},
[72728] = {
"Kor'kron Blood Axe",
"Siege of Orgrimmar",
"enUS",
},
[61392] = {
"Harthak Flameseeker",
"Mogu'shan Palace",
"enUS",
},
[198871] = {
"Sundered Scaleguard",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[198872] = {
"Sundered Manaweaver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[71578] = {
"Amber Parasite",
"Siege of Orgrimmar",
"enUS",
},
[198873] = {
"Sundered Edgelord",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[74009] = {
"Crawler Mine",
"Siege of Orgrimmar",
"enUS",
},
[68508] = {
"Bloodhilt Earth-Singer",
"Lion's Landing",
"enUS",
},
[70683] = {
"Dark Shaman Xorenth",
"The Secrets of Ragefire",
"enUS",
},
[198874] = {
"Sundered Siegemaster",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[72986] = {
"Shanna Sparkfizz",
"Siege of Orgrimmar",
"enUS",
},
[63568] = {
"Amber-Ridden Mushan",
"Heart of Fear",
"enUS",
},
[69916] = {
"Gurubashi Berserker",
"Throne of Thunder",
"enUS",
},
[59794] = {
"Krik'thik Disruptor",
"Gate of the Setting Sun",
"enUS",
},
[70684] = {
"Frostmane Mauler",
"Blood in the Snow",
"enUS",
},
[190688] = {
"Blazing Fiend",
"Vault of the Incarnates",
"enUS",
},
[186339] = {
"Teera",
"The Nokhud Offensive",
"enUS",
},
[202971] = {
"Null Glimmer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[193760] = {
"Surging Ruiner",
"Vault of the Incarnates",
"enUS",
},
[70429] = {
"Flesh'rok the Diseased",
"Throne of Thunder",
"enUS",
},
[70557] = {
"Zandalari Prophet",
"Throne of Thunder",
"enUS",
},
[192481] = {
"Decaying Slime",
"Brackenhide Hollow",
"enUS",
},
[198878] = {
"Primalist Tempestmaker",
"Vault of the Incarnates",
"enUS",
},
[191714] = {
"Seeking Stormling",
"Vault of the Incarnates",
"enUS",
},
[194273] = {
"Witherling",
"Brackenhide Hollow",
"enUS",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
"enUS",
},
[63569] = {
"Amber Searsting",
"Heart of Fear",
"enUS",
},
[159219] = {
"Umbral Seer",
"Ny'alotha, the Waking City",
"enUS",
},
[68639] = {
"Bloodhilt Battlemage",
"Lion's Landing",
"enUS",
},
[200927] = {
"Smolderon",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[60051] = {
"Cobalt Guardian",
"Mogu'shan Vaults",
"enUS",
},
[189669] = {
"Binding Spear",
"Neltharus",
"enUS",
},
[71454] = {
"Malkorok",
"Siege of Orgrimmar",
"enUS",
},
[70047] = {
"Glacial Freeze Totem",
"Throne of Thunder",
"enUS",
},
[72350] = {
"Dragonmaw Elite Grunt",
"Siege of Orgrimmar",
"enUS",
},
[68640] = {
"Bloodhilt Lightsworn",
"Lion's Landing",
"enUS",
},
[61139] = {
"Shan-xi Watershaper",
"Mogu'shan Vaults",
"enUS",
},
[57109] = {
"Minion of Doubt",
"Temple of the Jade Serpent",
"enUS",
},
[59220] = {
"Jandice Barov",
"Scholomance",
"enUS",
},
[67361] = {
"Horde Swashbuckler",
"Naval Battle Scenario",
"enUS",
},
[63570] = {
"Sra'thik Pool-Tender",
"Heart of Fear",
"enUS",
},
[72351] = {
"Dragonmaw Flagbearer",
"Siege of Orgrimmar",
"enUS",
},
[196581] = {
"White Tiger Statue",
"Siege of Orgrimmar",
"enUS",
},
[69153] = {
"Living Sand",
"Throne of Thunder",
"enUS",
},
[64338] = {
"Instructor Kli'thak",
"Heart of Fear",
"enUS",
},
[159224] = {
"Gryth'ax the Executioner",
"Ny'alotha, the Waking City",
"enUS",
},
[184300] = {
"Ebonstone Golem",
"Uldaman: Legacy of Tyr",
"enUS",
},
[67874] = {
"Bloodhilt Wolf-Sister",
"Lion's Landing",
"enUS",
},
[72352] = {
"Dragonmaw Ebon Stalker",
"Siege of Orgrimmar",
"enUS",
},
[62995] = {
"Animated Protector",
"Terrace of Endless Spring",
"enUS",
},
[160249] = {
"Spike Tentacle",
"Ny'alotha, the Waking City",
"enUS",
},
[190187] = {
"Draconic Image",
"The Azure Vault",
"enUS",
},
[59605] = {
"Sodden Hozen Brawler",
"Stormstout Brewery",
"enUS",
},
[72353] = {
"Dragonmaw Flameslinger",
"Siege of Orgrimmar",
"enUS",
},
[70690] = {
"Blood of Y'Shaarj",
"Heart of the Old God Scenario",
"enUS",
},
[64339] = {
"Instructor Tak'thok",
"Heart of Fear",
"enUS",
},
[70179] = {
"Ritual Guard",
"Throne of Thunder",
"enUS",
},
[72354] = {
"Dragonmaw Bonecrusher",
"Siege of Orgrimmar",
"enUS",
},
[60885] = {
"Minion of Fear",
"Terrace of Endless Spring",
"enUS",
},
[70691] = {
"Mouth of Terror",
"Heart of the Old God Scenario",
"enUS",
},
[73250] = {
"Kor'kron Wild Gun",
"Siege of Orgrimmar",
"enUS",
},
[195820] = {
"Nokhud Saboteur",
"The Nokhud Offensive",
"enUS",
},
[71715] = {
"Orgrimmar Faithful",
"Siege of Orgrimmar",
"enUS",
},
[191215] = {
"Tarasek Legionnaire",
"UNKNOWN",
"enUS",
},
[72355] = {
"High Enforcer Thranok",
"Siege of Orgrimmar",
"enUS",
},
[72483] = {
"Sarok",
"Siege of Orgrimmar",
"enUS",
},
[64340] = {
"Instructor Maltik",
"Heart of Fear",
"enUS",
},
[67366] = {
"Horde Officer",
"Naval Battle Scenario",
"enUS",
},
[56472] = {
"Fragrant Lotus",
"Shado-Pan Monastery",
"enUS",
},
[72484] = {
"Zazo",
"Siege of Orgrimmar",
"enUS",
},
[59223] = {
"Brother Korloff",
"Scarlet Monastery",
"enUS",
},
[61334] = {
"Cursed Mogu Sculpture",
"Mogu'shan Vaults",
"enUS",
},
[61398] = {
"Xin the Weaponmaster",
"Mogu'shan Palace",
"enUS",
},
[59479] = {
"Yan-Zhu the Uncasked",
"Stormstout Brewery",
"enUS",
},
[67879] = {
"Commander Tel'vrak",
"Assault on Zan'vess",
"enUS",
},
[72485] = {
"Goma",
"Siege of Orgrimmar",
"enUS",
},
[61910] = {
"Resin Flake",
"Siege of Niuzao Temple",
"enUS",
},
[70822] = {
"Earthborn Hatred",
"Heart of the Old God Scenario",
"enUS",
},
[162306] = {
"Aqir Drone",
"Ny'alotha, the Waking City",
"enUS",
},
[73253] = {
"Manifestation of Rage",
"Siege of Orgrimmar",
"enUS",
},
[64341] = {
"Instructor Zarik",
"Heart of Fear",
"enUS",
},
[187894] = {
"Infused Whelp",
"Ruby Life Pools",
"enUS",
},
[60375] = {
"Zandalari Skullcharger",
"Mogu'shan Vaults",
"enUS",
},
[2630] = {
"Earthbind Totem",
"Theramore's Fall (A)",
"enUS",
},
[186615] = {
"The Raging Tempest",
"The Nokhud Offensive",
"enUS",
},
[69927] = {
"Zandalari Prelate",
"Throne of Thunder",
"enUS",
},
[72358] = {
"Kor'kron Cannon",
"Siege of Orgrimmar",
"enUS",
},
[64917] = {
"Sra'thik Ambercaller",
"Heart of Fear",
"enUS",
},
[186616] = {
"Granyth",
"The Nokhud Offensive",
"enUS",
},
[68904] = {
"Suen",
"Throne of Thunder",
"enUS",
},
[191222] = {
"Juvenile Frost Proto-Dragon",
"UNKNOWN",
"enUS",
},
[71591] = {
"Automated Shredder",
"Siege of Orgrimmar",
"enUS",
},
[59480] = {
"Brittle Skeleton",
"Scholomance",
"enUS",
},
[72487] = {
"Kozish",
"Siege of Orgrimmar",
"enUS",
},
[70824] = {
"Fiery Anger",
"Heart of the Old God Scenario",
"enUS",
},
[68905] = {
"Lu'lin",
"Throne of Thunder",
"enUS",
},
[191736] = {
"Crawth",
"Algeth'ar Academy",
"enUS",
},
[186107] = {
"Vault Keeper",
"Uldaman: Legacy of Tyr",
"enUS",
},
[73767] = {
"Kor'kron Shredder",
"Siege of Orgrimmar",
"enUS",
},
[191225] = {
"Tarasek Earthreaver",
"UNKNOWN",
"enUS",
},
[72744] = {
"Kor'kron Skullsplitter",
"Siege of Orgrimmar",
"enUS",
},
[196855] = {
"Braekkas",
"Vault of the Incarnates",
"enUS",
},
[65174] = {
"Echo of Force and Verve",
"Heart of Fear",
"enUS",
},
[63191] = {
"Garalon",
"Heart of Fear",
"enUS",
},
[65494] = {
"Rok'nah Skirmisher",
"Theramore's Fall (A)",
"enUS",
},
[196856] = {
"Primal Stormsentry",
"Vault of the Incarnates",
"enUS",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
"enUS",
},
[59801] = {
"Krik'thik Wind Shaper",
"Gate of the Setting Sun",
"enUS",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[71466] = {
"Iron Juggernaut",
"Siege of Orgrimmar",
"enUS",
},
[190205] = {
"Scorchling",
"Ruby Life Pools",
"enUS",
},
[192764] = {
"Flame Guardian",
"Vault of the Incarnates",
"enUS",
},
[195579] = {
"Primal Gust",
"The Nokhud Offensive",
"enUS",
},
[72490] = {
"Overseer Mojka",
"Siege of Orgrimmar",
"enUS",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
"enUS",
},
[191230] = {
"Dragonspawn Flamebender",
"UNKNOWN",
"enUS",
},
[195580] = {
"Nokhud Saboteur",
"The Nokhud Offensive",
"enUS",
},
[61337] = {
"Glintrok Ironhide",
"Mogu'shan Palace",
"enUS",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
"enUS",
},
[71979] = {
"Kor'kron Warbringer",
"Siege of Orgrimmar",
"enUS",
},
[70060] = {
"Shadowed Voodoo Spirit",
"Throne of Thunder",
"enUS",
},
[68141] = {
"Kor'kron Infiltrator",
"Assault on Zan'vess",
"enUS",
},
[68397] = {
"Lei Shen",
"Throne of Thunder",
"enUS",
},
[192767] = {
"Primal Icebulk",
"Vault of the Incarnates",
"enUS",
},
[205305] = {
"Fractured Causality",
"10.1.5 Time Rifts - Scourge (Azmourne)",
"enUS",
},
[191232] = {
"Drakonid Stormbringer",
"UNKNOWN",
"enUS",
},
[210423] = {
"Keeper of the Dream",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
"enUS",
},
[64728] = {
"Kruntog",
"Theramore's Fall (A)",
"enUS",
},
[72236] = {
"Embodied Doubt",
"Siege of Orgrimmar",
"enUS",
},
[72492] = {
"Shimra",
"Siege of Orgrimmar",
"enUS",
},
[186116] = {
"Gutshot",
"Brackenhide Hollow",
"enUS",
},
[58971] = {
"Webbed Victim",
"Throne of Thunder",
"enUS",
},
[61338] = {
"Glintrok Skulker",
"Mogu'shan Palace",
"enUS",
},
[184582] = {
"Eric \"The Swift\"",
"Uldaman: Legacy of Tyr",
"enUS",
},
[68143] = {
"Squad Leader Bosh",
"Assault on Zan'vess",
"enUS",
},
[72365] = {
"Dragonmaw Cannoneer",
"Siege of Orgrimmar",
"enUS",
},
[72493] = {
"Trak'gen",
"Siege of Orgrimmar",
"enUS",
},
[70702] = {
"Flame Hound",
"The Secrets of Ragefire",
"enUS",
},
[69167] = {
"Gurubashi Bloodlord",
"Throne of Thunder",
"enUS",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
"enUS",
},
[208380] = {
"Val'kyr Shadowguard",
"10.1.5 Time Rifts - Scourge (Azmourne)",
"enUS",
},
[159764] = {
"Jesh'ra",
"Ny'alotha, the Waking City",
"enUS",
},
[56541] = {
"Master Snowdrift",
"Shado-Pan Monastery",
"enUS",
},
[72238] = {
"Embodied Despair",
"Siege of Orgrimmar",
"enUS",
},
[210172] = {
"Zaqali Juggernaut",
"Dragon Isles",
"enUS",
},
[186120] = {
"Treemouth",
"Brackenhide Hollow",
"enUS",
},
[70703] = {
"Core Spider",
"The Secrets of Ragefire",
"enUS",
},
[70959] = {
"Urtharges the Destroyer",
"Heart of the Old God Scenario",
"enUS",
},
[210173] = {
"Zaqali Steelshaper",
"Dragon Isles",
"enUS",
},
[61339] = {
"Glintrok Oracle",
"Mogu'shan Palace",
"enUS",
},
[186121] = {
"Decatriarch Wratheye",
"Brackenhide Hollow",
"enUS",
},
[71983] = {
"Farseer Wolf Rider",
"Siege of Orgrimmar",
"enUS",
},
[74158] = {
"Kor'kron Gunner",
"Siege of Orgrimmar",
"enUS",
},
[72367] = {
"Dragonmaw Tidal Shaman",
"Siege of Orgrimmar",
"enUS",
},
[70448] = {
"Ancient Python",
"Throne of Thunder",
"enUS",
},
[186122] = {
"Rira Hackclaw",
"Brackenhide Hollow",
"enUS",
},
[184331] = {
"Infinite Timereaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[64346] = {
"Parasitoid Sha",
"Terrace of Endless Spring",
"enUS",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
"enUS",
},
[73775] = {
"War Master Kragg",
"Siege of Orgrimmar",
"enUS",
},
[71984] = {
"Siege Engineer",
"Siege of Orgrimmar",
"enUS",
},
[72496] = {
"Overseer Thathung",
"Siege of Orgrimmar",
"enUS",
},
[186124] = {
"Gashtooth",
"Brackenhide Hollow",
"enUS",
},
[56862] = {
"Drunken Hozen Brawler",
"Stormstout Brewery",
"enUS",
},
[59293] = {
"Scarlet Cannoneer",
"Scarlet Halls",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
"enUS",
},
[73904] = {
"Kor'kron Iron Sentinel",
"Siege of Orgrimmar",
"enUS",
},
[59613] = {
"Professor Slate",
"Scholomance",
"enUS",
},
[66100] = {
"Apparition of Terror",
"Terrace of Endless Spring",
"enUS",
},
[184335] = {
"Infinite Agent",
"Uldaman: Legacy of Tyr",
"enUS",
},
[193291] = {
"Apex Blazewing",
"Neltharus",
"enUS",
},
[71474] = {
"Embodied Despair",
"Siege of Orgrimmar",
"enUS",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
"enUS",
},
[71858] = {
"Wavebinder Kardris",
"Siege of Orgrimmar",
"enUS",
},
[58590] = {
"Scarlet Zealot",
"Scarlet Monastery",
"enUS",
},
[60701] = {
"Zian of the Endless Shadow",
"Mogu'shan Vaults",
"enUS",
},
[195851] = {
"Ukhel Deathspeaker",
"The Nokhud Offensive",
"enUS",
},
[72498] = {
"Theramore Citizen",
"Siege of Orgrimmar",
"enUS",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
"enUS",
},
[56863] = {
"Sleepy Hozen Brawler",
"Stormstout Brewery",
"enUS",
},
[192781] = {
"Ore Elemental",
"Neltharus",
"enUS",
},
[70963] = {
"Lieutenant Fizzel",
"Naval Battle Scenario",
"enUS",
},
[193293] = {
"Qalashi Warden",
"Neltharus",
"enUS",
},
[69172] = {
"Sul'lithuz Stonegazer",
"Throne of Thunder",
"enUS",
},
[210437] = {
"Verdant Boughwalker",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[71603] = {
"Sha Puddle",
"Siege of Orgrimmar",
"enUS",
},
[71859] = {
"Earthbreaker Haromm",
"Siege of Orgrimmar",
"enUS",
},
[59614] = {
"Bored Student",
"Scholomance",
"enUS",
},
[187154] = {
"Unstable Curator",
"The Azure Vault",
"enUS",
},
[69173] = {
"Farraki Skirmisher",
"Throne of Thunder",
"enUS",
},
[71476] = {
"Embodied Misery",
"Siege of Orgrimmar",
"enUS",
},
[64732] = {
"Rok'nah Grunt",
"Theramore's Fall (A)",
"enUS",
},
[195855] = {
"Risen Warrior",
"The Nokhud Offensive",
"enUS",
},
[58783] = {
"Scarlet Initiate",
"Scarlet Monastery",
"enUS",
},
[186644] = {
"Leymor",
"The Azure Vault",
"enUS",
},
[73012] = {
"Klaxxi Skirmisher",
"Siege of Orgrimmar",
"enUS",
},
[193553] = {
"Nokhud Warhound",
"The Nokhud Offensive",
"enUS",
},
[71477] = {
"Embodied Gloom",
"Siege of Orgrimmar",
"enUS",
},
[59359] = {
"Flesh Horror",
"Scholomance",
"enUS",
},
[59487] = {
"Bubble Shield",
"Stormstout Brewery",
"enUS",
},
[59551] = {
"Bopper",
"Stormstout Brewery",
"enUS",
},
[70326] = {
"Stone Sentry",
"Mogu Island Loot Room",
"enUS",
},
[190484] = {
"Kyrakka",
"Ruby Life Pools",
"enUS",
},
[192787] = {
"Qalashi Spinecrusher",
"Neltharus",
"enUS",
},
[69175] = {
"Farraki Wastewalker",
"Throne of Thunder",
"enUS",
},
[71478] = {
"Embodied Anguish",
"Siege of Orgrimmar",
"enUS",
},
[190485] = {
"Erkhart Stormvein",
"Ruby Life Pools",
"enUS",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[64733] = {
"Rok'nah Loa-Singer",
"Theramore's Fall (A)",
"enUS",
},
[70327] = {
"Stone Watcher",
"Mogu Island Loot Room",
"enUS",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[56865] = {
"Aqua Dancer",
"Stormstout Brewery",
"enUS",
},
[192789] = {
"Nokhud Longbow",
"The Nokhud Offensive",
"enUS",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
"enUS",
},
[191510] = {
"Smoldering Hellion",
"Vault of the Incarnates",
"enUS",
},
[189719] = {
"Watcher Irideus",
"Halls of Infusion",
"enUS",
},
[71479] = {
"He Softfoot",
"Siege of Orgrimmar",
"enUS",
},
[204560] = {
"Incorporeal Being",
"Ruby Life Pools",
"enUS",
},
[63518] = {
"Den Mother Moof",
"Brewmoon Festival",
"enUS",
},
[69944] = {
"Sand Elemental",
"Throne of Thunder",
"enUS",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[70328] = {
"Zandalari Venomblade",
"Mogu Island Loot Room",
"enUS",
},
[196117] = {
"Crystal Thrasher",
"The Azure Vault",
"enUS",
},
[192791] = {
"Nokhud Warspear",
"The Nokhud Offensive",
"enUS",
},
[71480] = {
"Sun Tenderheart",
"Siege of Orgrimmar",
"enUS",
},
[60384] = {
"Zandalari Pterror Wing",
"Mogu'shan Vaults",
"enUS",
},
[60576] = {
"Stone Quilen",
"Mogu'shan Vaults",
"enUS",
},
[64734] = {
"Rok'nah Hag",
"Theramore's Fall (A)",
"enUS",
},
[189466] = {
"Irontorch Commander",
"Neltharus",
"enUS",
},
[189722] = {
"Gulping Goliath",
"Halls of Infusion",
"enUS",
},
[56930] = {
"Krik'thik Swarm Bringer",
"Gate of the Setting Sun",
"enUS",
},
[65310] = {
"Turnip Punching Bag",
"Algeth'ar Academy",
"enUS",
},
[71481] = {
"Embodied Sorrow",
"Siege of Orgrimmar",
"enUS",
},
[63519] = {
"Water Spirit",
"Brewmoon Festival",
"enUS",
},
[192794] = {
"Nokhud Beastmaster",
"The Nokhud Offensive",
"enUS",
},
[71993] = {
"Desperation Spawn",
"Siege of Orgrimmar",
"enUS",
},
[72249] = {
"Galakras",
"Siege of Orgrimmar",
"enUS",
},
[70586] = {
"Eternal Guardian",
"Throne of Thunder",
"enUS",
},
[197145] = {
"Colossal Stormfiend",
"Vault of the Incarnates",
"enUS",
},
[71482] = {
"Embodied Desperation",
"Siege of Orgrimmar",
"enUS",
},
[64479] = {
"Gatecrusher",
"Theramore's Fall (A)",
"enUS",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
"enUS",
},
[197146] = {
"Qalashi Emissary",
"Vault of the Incarnates",
"enUS",
},
[64735] = {
"Rok'nah Headhunter",
"Theramore's Fall (A)",
"enUS",
},
[189470] = {
"Lava Flare",
"Neltharus",
"enUS",
},
[58722] = {
"Lilian Voss",
"Scholomance",
"enUS",
},
[70587] = {
"Shale Stalker",
"Throne of Thunder",
"enUS",
},
[56867] = {
"Fiery Trickster",
"Stormstout Brewery",
"enUS",
},
[197147] = {
"Qalashi Honor Guard",
"Vault of the Incarnates",
"enUS",
},
[189471] = {
"Qalashi Blacksmith",
"Neltharus",
"enUS",
},
[189727] = {
"Khajin the Unyielding",
"Halls of Infusion",
"enUS",
},
[61345] = {
"Mogu Archer",
"Mogu'shan Vaults",
"enUS",
},
[63520] = {
"Li Te",
"Brewmoon Festival",
"enUS",
},
[197148] = {
"Qalashi Lavabearer",
"Vault of the Incarnates",
"enUS",
},
[201754] = {
"Sarkareth",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[59746] = {
"Scarlet Centurion",
"Scarlet Monastery",
"enUS",
},
[190496] = {
"Terros",
"Vault of the Incarnates",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[197149] = {
"Qalashi Lavamancer",
"Vault of the Incarnates",
"enUS",
},
[189729] = {
"Primal Tsunami",
"Halls of Infusion",
"enUS",
},
[60386] = {
"Zandalari Terror Rider",
"Mogu'shan Vaults",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
"enUS",
},
[197406] = {
"Aggravated Skitterfly",
"Algeth'ar Academy",
"enUS",
},
[70205] = {
"Weisheng",
"Throne of Thunder",
"enUS",
},
[70589] = {
"Cavern Burrower",
"Throne of Thunder",
"enUS",
},
[59299] = {
"Scarlet Guardian",
"Scarlet Halls",
"enUS",
},
[63521] = {
"Disturbed Saurok",
"Brewmoon Festival",
"enUS",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
"enUS",
},
[70206] = {
"Untrained Quilen",
"Throne of Thunder",
"enUS",
},
[192803] = {
"War Ohuna",
"The Nokhud Offensive",
"enUS",
},
[203806] = {
"Whisper in the Dark",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[64353] = {
"Set'thik Gale-Slicer",
"Heart of Fear",
"enUS",
},
[186151] = {
"Balakar Khan",
"The Nokhud Offensive",
"enUS",
},
[196642] = {
"Hungry Lasher",
"Algeth'ar Academy",
"enUS",
},
[193572] = {
"Nokhud Warsmith",
"The Nokhud Offensive",
"enUS",
},
[195875] = {
"Desecrated Bakar",
"The Nokhud Offensive",
"enUS",
},
[70463] = {
"Frostmane Snowstalker",
"Blood in the Snow",
"enUS",
},
[186664] = {
"Stonevault Ambusher",
"Uldaman: Legacy of Tyr",
"enUS",
},
[195876] = {
"Desecrated Ohuna",
"The Nokhud Offensive",
"enUS",
},
[61347] = {
"Kingsguard",
"Mogu'shan Vaults",
"enUS",
},
[59684] = {
"Hozen Party Animal",
"Stormstout Brewery",
"enUS",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
"enUS",
},
[70464] = {
"Frostmane Witch Doctor",
"Blood in the Snow",
"enUS",
},
[184107] = {
"Runic Protector",
"Uldaman: Legacy of Tyr",
"enUS",
},
[196645] = {
"Desecrated Bakar",
"The Nokhud Offensive",
"enUS",
},
[199716] = {
"Nokhud Brute",
"The Nokhud Offensive",
"enUS",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
"enUS",
},
[62691] = {
"Living Amber",
"Heart of Fear",
"enUS",
},
[60708] = {
"Meng the Demented",
"Mogu'shan Vaults",
"enUS",
},
[70465] = {
"Frostmane Bonechiller",
"Blood in the Snow",
"enUS",
},
[72768] = {
"Kor'kron War Wolf",
"Siege of Orgrimmar",
"enUS",
},
[189227] = {
"Qalashi Hunter",
"Neltharus",
"enUS",
},
[199718] = {
"Nokhud Huntmaster",
"The Nokhud Offensive",
"enUS",
},
[65442] = {
"Warlord Rok'nah",
"Theramore's Fall (A)",
"enUS",
},
[70594] = {
"Mist Lurker",
"Throne of Thunder",
"enUS",
},
[73153] = {
"Arcweaver Reinforcements",
"Siege of Orgrimmar",
"enUS",
},
[60197] = {
"Training Dummy",
"Scarlet Monastery",
"enUS",
},
[64355] = {
"Kor'thik Silentwing",
"Heart of Fear",
"enUS",
},
[69699] = {
"Massive Anima Golem",
"Throne of Thunder",
"enUS",
},
[68036] = {
"Durumu the Forgotten",
"Throne of Thunder",
"enUS",
},
[60709] = {
"Qiang the Merciless",
"Mogu'shan Vaults",
"enUS",
},
[70595] = {
"Frostmane Prowler",
"Blood in the Snow",
"enUS",
},
[190510] = {
"Vault Guard",
"The Azure Vault",
"enUS",
},
[70979] = {
"Water Elemental",
"Blood in the Snow",
"enUS",
},
[59302] = {
"Sergeant Verdone",
"Scarlet Halls",
"enUS",
},
[65507] = {
"Rok'nah Felcaster",
"Theramore's Fall (A)",
"enUS",
},
[69700] = {
"Large Anima Golem",
"Throne of Thunder",
"enUS",
},
[59494] = {
"Yeasty Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[189232] = {
"Kokia Blazehoof",
"Ruby Life Pools",
"enUS",
},
[11859] = {
"Doomguard",
"Throne of Thunder",
"enUS",
},
[70468] = {
"Bonechiller Barafu",
"Blood in the Snow",
"enUS",
},
[61989] = {
"Cursed Mogu Sculpture",
"Mogu'shan Vaults",
"enUS",
},
[73155] = {
"Brute Reinforcements",
"Siege of Orgrimmar",
"enUS",
},
[73539] = {
"Kor'kron Den Mother",
"Siege of Orgrimmar",
"enUS",
},
[73667] = {
"Windreaver Tar'rath",
"Siege of Orgrimmar",
"enUS",
},
[69701] = {
"Anima Golem",
"Throne of Thunder",
"enUS",
},
[195119] = {
"Primalist Shockcaster",
"Ruby Life Pools",
"enUS",
},
[189234] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
"enUS",
},
[60710] = {
"Subetai the Swift",
"Mogu'shan Vaults",
"enUS",
},
[68294] = {
"S.H.A.R.K. Sapper",
"Lion's Landing",
"enUS",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[201261] = {
"Kazzara, the Hellforged",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
"enUS",
},
[32666] = {
"Training Dummy",
"Siege of Orgrimmar",
"enUS",
},
[65444] = {
"Captain Mousson",
"Theramore's Fall (A)",
"enUS",
},
[69702] = {
"Ritualist Gond",
"Throne of Thunder",
"enUS",
},
[69958] = {
"Corrupted Vita",
"Throne of Thunder",
"enUS",
},
[61670] = {
"Sik'thik Demolisher",
"Siege of Niuzao Temple",
"enUS",
},
[189492] = {
"Raszageth",
"Vault of the Incarnates",
"enUS",
},
[59751] = {
"Shado-Pan Warden",
"Shado-Pan Monastery",
"enUS",
},
[14498] = {
"Tosamina",
"Siege of Orgrimmar",
"enUS",
},
[70982] = {
"Frost Totem",
"Blood in the Snow",
"enUS",
},
[64357] = {
"Kor'thik Swarmer",
"Heart of Fear",
"enUS",
},
[73541] = {
"Kor'kron Wolf Pup",
"Siege of Orgrimmar",
"enUS",
},
[65609] = {
"Sky-Captain \"Dashing\" Dazrip",
"Theramore's Fall (A)",
"enUS",
},
[67784] = {
"Scorpid Relocator",
"Assault on Zan'vess",
"enUS",
},
[60583] = {
"Protector Kaolan",
"Terrace of Endless Spring",
"enUS",
},
[58664] = {
"Instructor Chillheart's Phylactery",
"Scholomance",
"enUS",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
"enUS",
},
[70471] = {
"Frostmane Berserker",
"Blood in the Snow",
"enUS",
},
[212779] = {
"Umbraclaw",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[59240] = {
"Scarlet Hall Guardian",
"Scarlet Halls",
"enUS",
},
[73670] = {
"Gate-Crasher Sav'ah",
"Siege of Orgrimmar",
"enUS",
},
[65610] = {
"Airship Crewman",
"Theramore's Fall (A)",
"enUS",
},
[72263] = {
"Essence of Corruption",
"Siege of Orgrimmar",
"enUS",
},
[59752] = {
"Shado-Pan Ambusher",
"Shado-Pan Monastery",
"enUS",
},
[159303] = {
"Monstrous Behemoth",
"Ny'alotha, the Waking City",
"enUS",
},
[72903] = {
"Kor'kron Siegemaster",
"Siege of Orgrimmar",
"enUS",
},
[73415] = {
"Ichor of Y'Shaarj",
"Siege of Orgrimmar",
"enUS",
},
[184124] = {
"Sentinel Talondras",
"Uldaman: Legacy of Tyr",
"enUS",
},
[65611] = {
"Airship Marine",
"Theramore's Fall (A)",
"enUS",
},
[72264] = {
"Manifestation of Corruption",
"Siege of Orgrimmar",
"enUS",
},
[70473] = {
"Frostmane Headhunter",
"Blood in the Snow",
"enUS",
},
[184125] = {
"Chrono-Lord Deios",
"Uldaman: Legacy of Tyr",
"enUS",
},
[59241] = {
"Scarlet Treasurer",
"Scarlet Halls",
"enUS",
},
[65510] = {
"Rok'nah Wave-Caller",
"Theramore's Fall (A)",
"enUS",
},
[63527] = {
"Bataari Yaungol",
"Brewmoon Festival",
"enUS",
},
[69834] = {
"Lightning Guardian",
"Throne of Thunder",
"enUS",
},
[70474] = {
"Farastu",
"Blood in the Snow",
"enUS",
},
[61928] = {
"Sik'thik Guardian",
"Siege of Niuzao Temple",
"enUS",
},
[60009] = {
"Feng the Accursed",
"Mogu'shan Vaults",
"enUS",
},
[159308] = {
"Zealous Adherent",
"Ny'alotha, the Waking City",
"enUS",
},
[71626] = {
"Kor'kron Banner",
"Siege of Orgrimmar",
"enUS",
},
[62632] = {
"Sik'thik Engineer",
"Siege of Niuzao Temple",
"enUS",
},
[70219] = {
"Putrid Waste",
"Throne of Thunder",
"enUS",
},
[56747] = {
"Gu Cloudstrike",
"Shado-Pan Monastery",
"enUS",
},
[56875] = {
"Krik'thik Demolisher",
"Gate of the Setting Sun",
"enUS",
},
[189247] = {
"Tamed Phoenix",
"Neltharus",
"enUS",
},
[59242] = {
"Woven Boneguard",
"Scholomance",
"enUS",
},
[184130] = {
"Earthen Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[63528] = {
"Warbringer Qobi",
"Brewmoon Festival",
"enUS",
},
[63592] = {
"Set'thik Gustwing",
"Heart of Fear",
"enUS",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
"enUS",
},
[184131] = {
"Earthen Guardian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[194622] = {
"Scorchling",
"Ruby Life Pools",
"enUS",
},
[69069] = {
"Living Fluid",
"Throne of Thunder",
"enUS",
},
[71244] = {
"Kor'kron Shadowblade",
"The Secrets of Ragefire",
"enUS",
},
[210231] = {
"Tainted Lasher",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
"enUS",
},
[62633] = {
"Sik'thik Builder",
"Siege of Niuzao Temple",
"enUS",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
"enUS",
},
[61034] = {
"Terror Spawn",
"Terrace of Endless Spring",
"enUS",
},
[69070] = {
"Viscous Horror",
"Throne of Thunder",
"enUS",
},
[71245] = {
"Kor'kron Dark Shaman",
"The Secrets of Ragefire",
"enUS",
},
[67407] = {
"Bloodhilt Raider",
"Lion's Landing",
"enUS",
},
[184134] = {
"Scavenging Leaper",
"Uldaman: Legacy of Tyr",
"enUS",
},
[63529] = {
"Karsar the Bloodletter",
"Brewmoon Festival",
"enUS",
},
[63593] = {
"Set'thik Zephyrian",
"Heart of Fear",
"enUS",
},
[195138] = {
"Detonating Crystal",
"The Azure Vault",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
"enUS",
},
[69455] = {
"Zandalari Water-Binder",
"Throne of Thunder",
"enUS",
},
[62442] = {
"Tsulong",
"Terrace of Endless Spring",
"enUS",
},
[67920] = {
"Uduji Hexer",
"Lion's Landing",
"enUS",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
"enUS",
},
[208445] = {
"Larodar, Keeper of the Flame",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[56877] = {
"Raigonn",
"Gate of the Setting Sun",
"enUS",
},
[186696] = {
"Quaking Totem",
"Uldaman: Legacy of Tyr",
"enUS",
},
[214075] = {
"Cycle Warden",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[59372] = {
"Scarlet Scholar",
"Scarlet Halls",
"enUS",
},
[73806] = {
"Kor'kron Machinist",
"Siege of Orgrimmar",
"enUS",
},
[63594] = {
"Coagulated Amber",
"Heart of Fear",
"enUS",
},
[70224] = {
"Rotting Scavenger",
"Throne of Thunder",
"enUS",
},
[72655] = {
"Fragment of Pride",
"Siege of Orgrimmar",
"enUS",
},
[71504] = {
"Siegecrafter Blackfuse",
"Siege of Orgrimmar",
"enUS",
},
[60396] = {
"Emperor's Rage",
"Mogu'shan Vaults",
"enUS",
},
[158041] = {
"N'Zoth the Corruptor",
"Ny'alotha, the Waking City",
"enUS",
},
[195399] = {
"Curious Swoglet",
"Halls of Infusion",
"enUS",
},
[72272] = {
"Minion of Y'Shaarj",
"Siege of Orgrimmar",
"enUS",
},
[198214] = {
"Broodguardian Ziruss",
"Vault of the Incarnates",
"enUS",
},
[72784] = {
"Kor'kron Gunner",
"Siege of Orgrimmar",
"enUS",
},
[63275] = {
"Corrupted Protector",
"Terrace of Endless Spring",
"enUS",
},
[59309] = {
"Obedient Hound",
"Scarlet Halls",
"enUS",
},
[59373] = {
"Scarlet Pupil",
"Scarlet Halls",
"enUS",
},
[59501] = {
"Reanimated Corpse",
"Scholomance",
"enUS",
},
[71378] = {
"Quilen Guardian",
"Siege of Orgrimmar",
"enUS",
},
[69459] = {
"Bound Water Elemental",
"Throne of Thunder",
"enUS",
},
[60397] = {
"Emperor's Strength",
"Mogu'shan Vaults",
"enUS",
},
[70227] = {
"Skittering Spiderling",
"Throne of Thunder",
"enUS",
},
[60781] = {
"Soul Fragment",
"Mogu'shan Vaults",
"enUS",
},
[72658] = {
"Amalgamated Hubris",
"Siege of Orgrimmar",
"enUS",
},
[71123] = {
"Echo of Y'Shaarj",
"Heart of the Old God Scenario",
"enUS",
},
[67413] = {
"Wolf-Rider Gaja",
"Lion's Landing",
"enUS",
},
[61485] = {
"General Pa'valak",
"Siege of Niuzao Temple",
"enUS",
},
[191311] = {
"Infinite Whelp",
"Uldaman: Legacy of Tyr",
"enUS",
},
[72787] = {
"Ancient Brewmaster Spirit",
"Siege of Orgrimmar",
"enUS",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[71380] = {
"Animated Stone Mogu",
"Siege of Orgrimmar",
"enUS",
},
[60398] = {
"Emperor's Courage",
"Mogu'shan Vaults",
"enUS",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
"enUS",
},
[62701] = {
"Mutated Construct",
"Heart of Fear",
"enUS",
},
[72276] = {
"Amalgam of Corruption",
"Siege of Orgrimmar",
"enUS",
},
[190034] = {
"Blazebound Destroyer",
"Ruby Life Pools",
"enUS",
},
[194896] = {
"Primal Stormshield",
"The Nokhud Offensive",
"enUS",
},
[69078] = {
"Sul the Sandcrawler",
"Throne of Thunder",
"enUS",
},
[188244] = {
"Primal Juggernaut",
"Ruby Life Pools",
"enUS",
},
[63597] = {
"Coagulated Amber",
"Heart of Fear",
"enUS",
},
[213576] = {
"Verdant Boughwalker",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[70230] = {
"Zandalari Blade Initiate",
"Throne of Thunder",
"enUS",
},
[63853] = {
"Zar'thik Supplicant",
"Heart of Fear",
"enUS",
},
[208459] = {
"Fiery Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[72661] = {
"Zeal",
"Siege of Orgrimmar",
"enUS",
},
[194898] = {
"Primalist Arcblade",
"The Nokhud Offensive",
"enUS",
},
[60143] = {
"Gara'jal the Spiritbinder",
"Mogu'shan Vaults",
"enUS",
},
[71382] = {
"Burial Urn",
"Siege of Orgrimmar",
"enUS",
},
[210507] = {
"Stalwart Bristlebruin",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[69591] = {
"Lurker in the Night",
"Throne of Thunder",
"enUS",
},
[72150] = {
"Kor'kron Shadowmage",
"Siege of Orgrimmar",
"enUS",
},
[208461] = {
"Scorching Roots",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[72662] = {
"Vanity",
"Siege of Orgrimmar",
"enUS",
},
[187224] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[59184] = {
"Jandice Barov",
"Scholomance",
"enUS",
},
[71383] = {
"Kor'thik Warcaller",
"Siege of Orgrimmar",
"enUS",
},
[67417] = {
"Gaja's War-Wolf",
"Lion's Landing",
"enUS",
},
[194389] = {
"Lava Spawn",
"Neltharus",
"enUS",
},
[59632] = {
"Champion Sithiss",
"A Brewing Storm",
"enUS",
},
[70232] = {
"Muckbat",
"Throne of Thunder",
"enUS",
},
[68313] = {
"Roaming Fog",
"Throne of Thunder",
"enUS",
},
[72535] = {
"Stone Statue",
"Siege of Orgrimmar",
"enUS",
},
[72791] = {
"Lingering Corruption",
"Siege of Orgrimmar",
"enUS",
},
[60208] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[185691] = {
"Vicious Hyena",
"Brackenhide Hollow",
"enUS",
},
[69465] = {
"Jin'rokh the Breaker",
"Throne of Thunder",
"enUS",
},
[60400] = {
"Jan-xi",
"Mogu'shan Vaults",
"enUS",
},
[62511] = {
"Amber-Shaper Un'sok",
"Heart of Fear",
"enUS",
},
[58737] = {
"Viletongue Raider",
"A Brewing Storm",
"enUS",
},
[56754] = {
"Azure Serpent",
"Shado-Pan Monastery",
"enUS",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
"enUS",
},
[71385] = {
"Sri'thik Bombardier",
"Siege of Orgrimmar",
"enUS",
},
[188252] = {
"Melidrussa Chillworn",
"Ruby Life Pools",
"enUS",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
"enUS",
},
[214608] = {
"Screaming Soul",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[186206] = {
"Cruel Bonecrusher",
"Brackenhide Hollow",
"enUS",
},
[70746] = {
"Frostmane Flesh-Eater",
"Blood in the Snow",
"enUS",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
"enUS",
},
[67548] = {
"Sunwalker Chagon",
"Lion's Landing",
"enUS",
},
[71770] = {
"Kor'kron Ironblade",
"Siege of Orgrimmar",
"enUS",
},
[72154] = {
"Desecrated Weapon",
"Siege of Orgrimmar",
"enUS",
},
[70235] = {
"Frozen Head",
"Throne of Thunder",
"enUS",
},
[58738] = {
"Viletongue Skirmisher",
"A Brewing Storm",
"enUS",
},
[60913] = {
"Energy Charge",
"Mogu'shan Vaults",
"enUS",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
"enUS",
},
[71259] = {
"Huntmaster S'thoc",
"A Brewing Storm",
"enUS",
},
[71515] = {
"General Nazgrim",
"Siege of Orgrimmar",
"enUS",
},
[71771] = {
"Kor'kron Arcweaver",
"Siege of Orgrimmar",
"enUS",
},
[70236] = {
"Crazed Storm-Caller",
"Throne of Thunder",
"enUS",
},
[72411] = {
"Kor'kron Provisioner",
"Siege of Orgrimmar",
"enUS",
},
[64368] = {
"Apparition of Fear",
"Terrace of Endless Spring",
"enUS",
},
[71516] = {
"Kor'kron Ironblade",
"Siege of Orgrimmar",
"enUS",
},
[60402] = {
"Zandalari Fire-Dancer",
"Mogu'shan Vaults",
"enUS",
},
[71772] = {
"Kor'kron Assassin",
"Siege of Orgrimmar",
"enUS",
},
[72412] = {
"Kor'kron Grunt",
"Siege of Orgrimmar",
"enUS",
},
[58803] = {
"Residual Hatred",
"Shado-Pan Monastery",
"enUS",
},
[56884] = {
"Corrupted Taran Zhu",
"Shado-Pan Monastery",
"enUS",
},
[70877] = {
"Volatile Earth",
"Heart of the Old God Scenario",
"enUS",
},
[71517] = {
"Kor'kron Arcweaver",
"Siege of Orgrimmar",
"enUS",
},
[67551] = {
"Dark Cleric Laresa",
"Lion's Landing",
"enUS",
},
[71773] = {
"Kor'kron Warshaman",
"Siege of Orgrimmar",
"enUS",
},
[73948] = {
"Commander Ik'tal",
"Siege of Orgrimmar",
"enUS",
},
[162417] = {
"Anubisath Sentinel",
"Ny'alotha, the Waking City",
"enUS",
},
[206172] = {
"Nymue",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
"enUS",
},
[71518] = {
"Kor'kron Assassin",
"Siege of Orgrimmar",
"enUS",
},
[73949] = {
"Commander Na'kaz",
"Siege of Orgrimmar",
"enUS",
},
[58676] = {
"Scarlet Defender",
"Scarlet Halls",
"enUS",
},
[197219] = {
"Vile Lasher",
"Algeth'ar Academy",
"enUS",
},
[187240] = {
"Drakonid Breaker",
"The Azure Vault",
"enUS",
},
[73310] = {
"Dragonmaw War Banner",
"Siege of Orgrimmar",
"enUS",
},
[63346] = {
"The Dark of Night",
"Terrace of Endless Spring",
"enUS",
},
[208478] = {
"Volcoross",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[67809] = {
"Zan'thik Slasher",
"Assault on Zan'vess",
"enUS",
},
[70240] = {
"Shan'ze Celestial Shaper",
"Throne of Thunder",
"enUS",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
"enUS",
},
[198500] = {
"Council Earthcaller",
"Vault of the Incarnates",
"enUS",
},
[72927] = {
"Kovok",
"Siege of Orgrimmar",
"enUS",
},
[187242] = {
"Tarasek Looter",
"The Azure Vault",
"enUS",
},
[71392] = {
"Shadow Ritualist Phylactery",
"Siege of Orgrimmar",
"enUS",
},
[69473] = {
"Ra-den",
"Throne of Thunder",
"enUS",
},
[198501] = {
"Council Icecaller",
"Vault of the Incarnates",
"enUS",
},
[73951] = {
"Commander Tik",
"Siege of Orgrimmar",
"enUS",
},
[68194] = {
"Young Egg of Ji-Kun",
"Throne of Thunder",
"enUS",
},
[188011] = {
"Primal Terrasentry",
"Ruby Life Pools",
"enUS",
},
[198502] = {
"Council Stormcaller",
"Vault of the Incarnates",
"enUS",
},
[73184] = {
"Starved Yeti",
"Siege of Orgrimmar",
"enUS",
},
[71393] = {
"Mogu Shadow Ritualist",
"Siege of Orgrimmar",
"enUS",
},
[196200] = {
"Algeth'ar Echoknight",
"Algeth'ar Academy",
"enUS",
},
[73696] = {
"Grand Master Alchemist Ki'xen",
"Siege of Orgrimmar",
"enUS",
},
[196712] = {
"Nullification Device",
"Halls of Infusion",
"enUS",
},
[72929] = {
"Sra'thik Amber-Master",
"Siege of Orgrimmar",
"enUS",
},
[73185] = {
"Enraged Mushan Beast",
"Siege of Orgrimmar",
"enUS",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
"enUS",
},
[56439] = {
"Sha of Doubt",
"Temple of the Jade Serpent",
"enUS",
},
[56631] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[64947] = {
"Mogu'shan Warden",
"Mogu'shan Vaults",
"enUS",
},
[58998] = {
"Scarlet Defender",
"Scarlet Halls",
"enUS",
},
[71395] = {
"Modified Anima Golem",
"Siege of Orgrimmar",
"enUS",
},
[163708] = {
"Umbral Gatekeeper",
"Ny'alotha, the Waking City",
"enUS",
},
[186737] = {
"Telash Greywing",
"The Azure Vault",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
"enUS",
},
[186738] = {
"Umbrelskul",
"The Azure Vault",
"enUS",
},
[69221] = {
"Zandalari Dinomancer",
"Throne of Thunder",
"enUS",
},
[67430] = {
"Uduji Berserker",
"Lion's Landing",
"enUS",
},
[186227] = {
"Monstrous Decay",
"Brackenhide Hollow",
"enUS",
},
[67814] = {
"Bloodhilt Grunt",
"Lion's Landing",
"enUS",
},
[70245] = {
"Training Dummy",
"Throne of Thunder",
"enUS",
},
[62837] = {
"Grand Empress Shek'zeer",
"Heart of Fear",
"enUS",
},
[58807] = {
"Vestige of Hatred",
"Shado-Pan Monastery",
"enUS",
},
[186740] = {
"Arcane Construct",
"The Azure Vault",
"enUS",
},
[189299] = {
"Decaying Slime",
"Brackenhide Hollow",
"enUS",
},
[189555] = {
"Astral Attendant",
"The Azure Vault",
"enUS",
},
[71397] = {
"Zar'thik Amber Priest",
"Siege of Orgrimmar",
"enUS",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
"enUS",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
"enUS",
},
[195697] = {
"Thunderbeast Rider",
"The Nokhud Offensive",
"enUS",
},
[72421] = {
"Kor'kron Overseer",
"Siege of Orgrimmar",
"enUS",
},
[211306] = {
"Fiery Vines",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[71398] = {
"Zar'thik Swarmer",
"Siege of Orgrimmar",
"enUS",
},
[70247] = {
"Venomous Head",
"Throne of Thunder",
"enUS",
},
[187767] = {
"Embar Firepath",
"Vault of the Incarnates",
"enUS",
},
[63030] = {
"Enslaved Bonesmasher",
"Heart of Fear",
"enUS",
},
[67177] = {
"Zar'thik Supplicant",
"Heart of Fear",
"enUS",
},
[69352] = {
"Vampiric Cave Bat",
"Throne of Thunder",
"enUS",
},
[69480] = {
"Blessed Loa Spirit",
"Throne of Thunder",
"enUS",
},
[199027] = {
"Magmas",
"Vault of the Incarnates",
"enUS",
},
[61623] = {
"Sap Globule",
"Siege of Niuzao Temple",
"enUS",
},
[70248] = {
"Arcane Head",
"Throne of Thunder",
"enUS",
},
[72423] = {
"Auctioneer Fazdran",
"Siege of Orgrimmar",
"enUS",
},
[73191] = {
"Aqueous Defender",
"Siege of Orgrimmar",
"enUS",
},
[67434] = {
"Uduji",
"Lion's Landing",
"enUS",
},
[71656] = {
"Kor'kron Sniper",
"Siege of Orgrimmar",
"enUS",
},
[62711] = {
"Amber Monstrosity",
"Heart of Fear",
"enUS",
},
[187771] = {
"Kadros Icewrath",
"Vault of the Incarnates",
"enUS",
},
[63031] = {
"Set'thik Fanatic",
"Heart of Fear",
"enUS",
},
[59193] = {
"Boneweaver",
"Scholomance",
"enUS",
},
[71401] = {
"Proto-Drake Whelp",
"The Secrets of Ragefire",
"enUS",
},
[71529] = {
"Thok the Bloodthirsty",
"Siege of Orgrimmar",
"enUS",
},
[59705] = {
"Scarlet Flamethrower",
"Scarlet Monastery",
"enUS",
},
[72425] = {
"Auctioneer Xifa",
"Siege of Orgrimmar",
"enUS",
},
[70762] = {
"Lieutenant Sparklighter",
"Naval Battle Scenario",
"enUS",
},
[64183] = {
"Enormous Stone Quilen",
"Mogu'shan Vaults",
"enUS",
},
[58810] = {
"Fragment of Hatred",
"Shado-Pan Monastery",
"enUS",
},
[63032] = {
"Sra'thik Shield Master",
"Heart of Fear",
"enUS",
},
[73194] = {
"Kor'kron Iron Scorpion",
"Siege of Orgrimmar",
"enUS",
},
[210293] = {
"Firelands Destroyer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[69740] = {
"Nerfmw",
"Throne of Thunder",
"enUS",
},
[72427] = {
"Orgrimmar Peon",
"Siege of Orgrimmar",
"enUS",
},
[186242] = {
"Skulking Gutstabber",
"Brackenhide Hollow",
"enUS",
},
[210295] = {
"Flamewaker Infernoguard",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[60410] = {
"Elegon",
"Mogu'shan Vaults",
"enUS",
},
[71788] = {
"Crawler Mine",
"Siege of Orgrimmar",
"enUS",
},
[69869] = {
"Essence of Anima",
"Throne of Thunder",
"enUS",
},
[74091] = {
"Kor'kron Iron Sentinel",
"Siege of Orgrimmar",
"enUS",
},
[68078] = {
"Iron Qon",
"Throne of Thunder",
"enUS",
},
[58683] = {
"Scarlet Myrmidon",
"Scarlet Halls",
"enUS",
},
[72428] = {
"Horthus",
"Siege of Orgrimmar",
"enUS",
},
[56764] = {
"Consuming Sha",
"Shado-Pan Monastery",
"enUS",
},
[70893] = {
"Lieutenant Blasthammer",
"Naval Battle Scenario",
"enUS",
},
[61242] = {
"Glintrok Ironhide",
"Mogu'shan Palace",
"enUS",
},
[71405] = {
"Set'thik Wind Wielder",
"Siege of Orgrimmar",
"enUS",
},
[61434] = {
"Sik'thik Vanguard",
"Siege of Niuzao Temple",
"enUS",
},
[69870] = {
"Essence of Vita",
"Throne of Thunder",
"enUS",
},
[68079] = {
"Ro'shak",
"Throne of Thunder",
"enUS",
},
[72429] = {
"Olvia",
"Siege of Orgrimmar",
"enUS",
},
[190340] = {
"Refti Defender",
"Halls of Infusion",
"enUS",
},
[72941] = {
"Dragonmaw Grunt",
"Siege of Orgrimmar",
"enUS",
},
[64185] = {
"Bataari War Yeti",
"Brewmoon Festival",
"enUS",
},
[73197] = {
"Lesser Sha Puddle",
"Siege of Orgrimmar",
"enUS",
},
[196482] = {
"Overgrown Ancient",
"Algeth'ar Academy",
"enUS",
},
[68080] = {
"Quet'zal",
"Throne of Thunder",
"enUS",
},
[60731] = {
"Undying Shadows",
"Mogu'shan Vaults",
"enUS",
},
[72430] = {
"Shan'ti",
"Siege of Orgrimmar",
"enUS",
},
[56765] = {
"Destroying Sha",
"Shado-Pan Monastery",
"enUS",
},
[58876] = {
"Starving Hound",
"Scarlet Halls",
"enUS",
},
[72942] = {
"Dragonmaw Flagbearer",
"Siege of Orgrimmar",
"enUS",
},
[61243] = {
"Gekkan",
"Mogu'shan Palace",
"enUS",
},
[71407] = {
"Amber",
"Siege of Orgrimmar",
"enUS",
},
[194181] = {
"Vexamus",
"Algeth'ar Academy",
"enUS",
},
[69872] = {
"Crackling Stalker",
"Throne of Thunder",
"enUS",
},
[68081] = {
"Dam'ren",
"Throne of Thunder",
"enUS",
},
[61947] = {
"Kargesh Ribcrusher",
"Mogu'shan Palace",
"enUS",
},
[72943] = {
"Dragonmaw Proto-Drake",
"Siege of Orgrimmar",
"enUS",
},
[71152] = {
"Skeer the Bloodseeker",
"Siege of Orgrimmar",
"enUS",
},
[71408] = {
"Kun-Da",
"Siege of Orgrimmar",
"enUS",
},
[190345] = {
"Primalist Geomancer",
"Halls of Infusion",
"enUS",
},
[184972] = {
"Eranog",
"Vault of the Incarnates",
"enUS",
},
[58685] = {
"Scarlet Evangelist",
"Scarlet Halls",
"enUS",
},
[56766] = {
"Volatile Energy",
"Shado-Pan Monastery",
"enUS",
},
[63035] = {
"Zar'thik Zealot",
"Heart of Fear",
"enUS",
},
[71153] = {
"Hisek the Swarmkeeper",
"Siege of Orgrimmar",
"enUS",
},
[71409] = {
"Commander Zak'tar",
"Siege of Orgrimmar",
"enUS",
},
[61436] = {
"Sik'thik Bladedancer",
"Siege of Niuzao Temple",
"enUS",
},
[69746] = {
"Adamson",
"Throne of Thunder",
"enUS",
},
[71921] = {
"Darkfang",
"Siege of Orgrimmar",
"enUS",
},
[187021] = {
"Rotbow Sentry",
"Brackenhide Hollow",
"enUS",
},
[72433] = {
"Mokvar the Treasurer",
"Siege of Orgrimmar",
"enUS",
},
[205304] = {
"Fractured Causality",
"10.1.5 Time Rifts - Titan (Ulderoth)",
"enUS",
},
[190348] = {
"Primalist Ravager",
"Halls of Infusion",
"enUS",
},
[68497] = {
"Vampiric Cave Bat",
"Throne of Thunder",
"enUS",
},
[72945] = {
"Dragonmaw Bonecrusher",
"Siege of Orgrimmar",
"enUS",
},
[73073] = {
"Corrupted Boil",
"Siege of Orgrimmar",
"enUS",
},
[71154] = {
"Ka'roz the Locust",
"Siege of Orgrimmar",
"enUS",
},
[59884] = {
"Fallen Crusader",
"Scarlet Monastery",
"enUS",
},
[162305] = {
"Aqir Heartpiercer",
"Ny'alotha, the Waking City",
"enUS",
},
[71642] = {
"Congealed Sha",
"Siege of Orgrimmar",
"enUS",
},
[64916] = {
"Kor'thik Swarmguard",
"Heart of Fear",
"enUS",
},
[69957] = {
"Corrupted Anima",
"Throne of Thunder",
"enUS",
},
[67426] = {
"Admiral Hagman",
"Naval Battle Scenario",
"enUS",
},
[72050] = {
"Crawler Mine",
"Siege of Orgrimmar",
"enUS",
},
[67368] = {
"Parrot",
"Naval Battle Scenario",
"enUS",
},
[67391] = {
"Lieutenant Drak'on",
"Naval Battle Scenario",
"enUS",
},
[72434] = {
"Treasury Guard",
"Siege of Orgrimmar",
"enUS",
},
[72562] = {
"Poison Bolt Totem",
"Siege of Orgrimmar",
"enUS",
},
[159305] = {
"Maddened Conscript",
"Ny'alotha, the Waking City",
"enUS",
},
[63036] = {
"Kor'thik Extremist",
"Heart of Fear",
"enUS",
},
[68668] = {
"S.H.A.R.K. Medic",
"Lion's Landing",
"enUS",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
"enUS",
},
[71155] = {
"Korven the Prime",
"Siege of Orgrimmar",
"enUS",
},
[200387] = {
"Shambling Infester",
"Temple of the Jade Serpent",
"enUS",
},
[62360] = {
"Corrupt Droplet",
"Temple of the Jade Serpent",
"enUS",
},
[56511] = {
"Corrupt Living Water",
"Temple of the Jade Serpent",
"enUS",
},
[59191] = {
"Commander Lindon",
"Scarlet Halls",
"enUS",
},
[198716] = {
"Unstable Storm",
"Vault of the Incarnates",
"enUS",
},
[71923] = {
"Bloodclaw",
"Siege of Orgrimmar",
"enUS",
},
[158367] = {
"Basher Tentacle",
"Ny'alotha, the Waking City",
"enUS",
},
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
"enUS",
},
[62358] = {
"Corrupt Droplet",
"Temple of the Jade Serpent",
"enUS",
},
[68341] = {
"Eye Sentry",
"Throne of Thunder",
"enUS",
},
[72563] = {
"Healing Tide Totem",
"Siege of Orgrimmar",
"enUS",
},
[25865] = {
"Frozen Core",
"Coilfang: The Slave Pens",
"enUS",
},
[59426] = {
"Bopper",
"Stormstout Brewery",
"enUS",
},
[72947] = {
"Kor'kron Demolisher",
"Siege of Orgrimmar",
"enUS",
},
[68581] = {
"Daggin Windbeard",
"Lion's Landing",
"enUS",
},
[71156] = {
"Kaz'tik the Manipulator",
"Siege of Orgrimmar",
"enUS",
},
[67309] = {
"Dreadguard Cavalry",
"Lion's Landing",
"enUS",
},
[72424] = {
"Auctioneer Ralinza",
"Siege of Orgrimmar",
"enUS",
},
[62397] = {
"Wind Lord Mel'jarak",
"Heart of Fear",
"enUS",
},
[71519] = {
"Kor'kron Warshaman",
"Siege of Orgrimmar",
"enUS",
},
[190609] = {
"Echo of Doragosa",
"Algeth'ar Academy",
"enUS",
},
[65783] = {
"Summoned Imp",
"Theramore's Fall (A)",
"enUS",
},
[70445] = {
"Stormbringer Draz'kil",
"Throne of Thunder",
"enUS",
},
[209800] = {
"Cycle Warden",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[192786] = {
"Qalashi Plunderer",
"Neltharus",
"enUS",
},
[72564] = {
"Doomlord",
"Siege of Orgrimmar",
"enUS",
},
[64956] = {
"Storm Totem",
"Theramore's Fall (A)",
"enUS",
},
[59518] = {
"Bloated Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[61239] = {
"Glintrok Oracle",
"Mogu'shan Palace",
"enUS",
},
[69388] = {
"Zandalari Spear-Shaper",
"Throne of Thunder",
"enUS",
},
[73188] = {
"Captive Cave Bat",
"Siege of Orgrimmar",
"enUS",
},
[71157] = {
"Xaril the Poisoned Mind",
"Siege of Orgrimmar",
"enUS",
},
[69132] = {
"High Priestess Mar'li",
"Throne of Thunder",
"enUS",
},
[194241] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[56636] = {
"Commander Ri'mok",
"Gate of the Setting Sun",
"enUS",
},
[59873] = {
"Corrupt Living Water",
"Temple of the Jade Serpent",
"enUS",
},
[61945] = {
"Gurthan Iron Maw",
"Pandaria",
"enUS",
},
[59519] = {
"Stout Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[198424] = {
"Primalist Frostsculptor",
"Vault of the Incarnates",
"enUS",
},
[61216] = {
"Glintrok Hexxer",
"Mogu'shan Palace",
"enUS",
},
[56927] = {
"Hozen Party Animal",
"Stormstout Brewery",
"enUS",
},
[58812] = {
"Hateful Essence",
"Shado-Pan Monastery",
"enUS",
},
[59771] = {
"Zombified Corpse",
"Scarlet Monastery",
"enUS",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
"enUS",
},
[64061] = {
"Mogu'shan Warden",
"Mogu'shan Vaults",
"enUS",
},
[198503] = {
"Council Flamecaller",
"Vault of the Incarnates",
"enUS",
},
[71030] = {
"Overseer Elaglo",
"The Secrets of Ragefire",
"enUS",
},
[71158] = {
"Rik'kal the Dissector",
"Siege of Orgrimmar",
"enUS",
},
[194330] = {
"Decaying Slime",
"Brackenhide Hollow",
"enUS",
},
[69821] = {
"Thunder Lord",
"Throne of Thunder",
"enUS",
},
[71542] = {
"Blood",
"Siege of Orgrimmar",
"enUS",
},
[190923] = {
"Zephyrling",
"Halls of Infusion",
"enUS",
},
[58108] = {
"Krik'thik Infiltrator",
"Gate of the Setting Sun",
"enUS",
},
[211339] = {
"Dream Seedling",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[69131] = {
"Frost King Malakk",
"Throne of Thunder",
"enUS",
},
[198081] = {
"Quarry Earthshaper",
"Vault of the Incarnates",
"enUS",
},
[61946] = {
"Harthak Stormcaller",
"Mogu'shan Palace",
"enUS",
},
[196116] = {
"Crystal Fury",
"The Azure Vault",
"enUS",
},
[64957] = {
"Vicious Wyvern",
"Theramore's Fall (A)",
"enUS",
},
[197398] = {
"Hungry Lasher",
"Algeth'ar Academy",
"enUS",
},
[71334] = {
"Poison Bolt Totem",
"The Secrets of Ragefire",
"enUS",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
"enUS",
},
[70209] = {
"Untrained Quilen",
"Throne of Thunder",
"enUS",
},
[184303] = {
"Skittering Crawler",
"Uldaman: Legacy of Tyr",
"enUS",
},
[61247] = {
"Glintrok Greenhorn",
"Mogu'shan Palace",
"enUS",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
"enUS",
},
[71543] = {
"Immerseus",
"Siege of Orgrimmar",
"enUS",
},
[190359] = {
"Skulking Zealot",
"Halls of Infusion",
"enUS",
},
[69351] = {
"Greater Cave Bat",
"Throne of Thunder",
"enUS",
},
[65786] = {
"Wave-Caller Zulga",
"Theramore's Fall (A)",
"enUS",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
"enUS",
},
[60586] = {
"Elder Asani",
"Terrace of Endless Spring",
"enUS",
},
[189467] = {
"Qalashi Bonesplitter",
"Neltharus",
"enUS",
},
[184986] = {
"Kurog Grimtotem",
"Vault of the Incarnates",
"enUS",
},
[71433] = {
"Spark of Life",
"Siege of Orgrimmar",
"enUS",
},
[59808] = {
"Shado-Pan Stormbringer",
"Shado-Pan Monastery",
"enUS",
},
[56637] = {
"Ook-Ook",
"Stormstout Brewery",
"enUS",
},
[61399] = {
"Glintrok Scout",
"Mogu'shan Palace",
"enUS",
},
[56929] = {
"Krik'thik Protectorate",
"Gate of the Setting Sun",
"enUS",
},
[71160] = {
"Iyyokuk the Lucid",
"Siege of Orgrimmar",
"enUS",
},
[189901] = {
"Warlord Sargha",
"Neltharus",
"enUS",
},
[70665] = {
"Kor'kron Dire Soldier",
"The Secrets of Ragefire",
"enUS",
},
[64446] = {
"Training Dummy",
"Scarlet Monastery",
"enUS",
},
[190294] = {
"Nokhud Stormcaster",
"The Nokhud Offensive",
"enUS",
},
[60480] = {
"Titan Spark",
"Mogu'shan Vaults",
"enUS",
},
[64902] = {
"Kor'thik Fleshrender",
"Heart of Fear",
"enUS",
},
[193352] = {
"Hextrick Totem",
"Brackenhide Hollow",
"enUS",
},
[70153] = {
"Fungal Growth",
"Throne of Thunder",
"enUS",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[62847] = {
"Dissonance Field",
"Heart of Fear",
"enUS",
},
[157354] = {
"Vexiona",
"Ny'alotha, the Waking City",
"enUS",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
"enUS",
},
[59503] = {
"Brittle Skeleton",
"Scholomance",
"enUS",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
"enUS",
},
[208365] = {
"Aerwynn",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[71161] = {
"Kil'ruk the Wind-Reaver",
"Siege of Orgrimmar",
"enUS",
},
[70246] = {
"Spirit Flayer",
"Throne of Thunder",
"enUS",
},
[65522] = {
"Bubble Shield",
"Stormstout Brewery",
"enUS",
},
[204931] = {
"Fyrakk",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[72810] = {
"Staff of Resonating Water",
"Siege of Orgrimmar",
"enUS",
},
[199182] = {
"Jumping Spiderling",
"Vault of the Incarnates",
"enUS",
},
[59521] = {
"Bubbling Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[61341] = {
"Mounted Mogu",
"Mogu'shan Vaults",
"enUS",
},
[189340] = {
"Chargath, Bane of Scales",
"Neltharus",
"enUS",
},
[198263] = {
"Stalwart Broodwarden",
"Vault of the Incarnates",
"enUS",
},
[71388] = {
"Amber-Encased Kunchong",
"Siege of Orgrimmar",
"enUS",
},
[70308] = {
"Soul-Fed Construct",
"Throne of Thunder",
"enUS",
},
[64729] = {
"Rok'nah Raider",
"Theramore's Fall (A)",
"enUS",
},
[64063] = {
"Mogu'shan Arcanist",
"Mogu'shan Vaults",
"enUS",
},
[60033] = {
"Frenzied Spirit",
"Scarlet Monastery",
"enUS",
},
[68142] = {
"Kor'kron Priest",
"Assault on Zan'vess",
"enUS",
},
[61929] = {
"Sik'thik Amber-Weaver",
"Siege of Niuzao Temple",
"enUS",
},
[196043] = {
"Primalist Infuser",
"Halls of Infusion",
"enUS",
},
[197982] = {
"Storm Warrior",
"Ruby Life Pools",
"enUS",
},
[194897] = {
"Stormsurge Totem",
"The Nokhud Offensive",
"enUS",
},
[72237] = {
"Embodied Fear",
"Siege of Orgrimmar",
"enUS",
},
[56706] = {
"Krik'thik Bombardier",
"Gate of the Setting Sun",
"enUS",
},
[73452] = {
"Harbinger of Y'Shaarj",
"Siege of Orgrimmar",
"enUS",
},
[56731] = {
"Habanero Brew",
"Stormstout Brewery",
"enUS",
},
[59800] = {
"Krik'thik Rager",
"Gate of the Setting Sun",
"enUS",
},
[68220] = {
"Gastropod",
"Throne of Thunder",
"enUS",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
"enUS",
},
[68476] = {
"Horridon",
"Throne of Thunder",
"enUS",
},
[190366] = {
"Curious Swoglet",
"Halls of Infusion",
"enUS",
},
[65151] = {
"Captain Seahoof",
"Theramore's Fall (A)",
"enUS",
},
[72954] = {
"Kor'thik Honor Guard",
"Siege of Orgrimmar",
"enUS",
},
[70341] = {
"Tormented Spirit",
"Throne of Thunder",
"enUS",
},
[190245] = {
"Broodkeeper Diurna",
"Vault of the Incarnates",
"enUS",
},
[189318] = {
"Infected Bear",
"Brackenhide Hollow",
"enUS",
},
[194816] = {
"Forgewrought Monstrosity",
"Neltharus",
"enUS",
},
[59458] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[58632] = {
"Armsmaster Harlan",
"Scarlet Halls",
"enUS",
},
[69756] = {
"Anima Orb",
"Throne of Thunder",
"enUS",
},
[59522] = {
"Sudsy Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[59150] = {
"Flameweaver Koegler",
"Scarlet Halls",
"enUS",
},
[56890] = {
"Krik'thik Infiltrator",
"Gate of the Setting Sun",
"enUS",
},
[68221] = {
"Bore Worm",
"Throne of Thunder",
"enUS",
},
[59778] = {
"Krik'thik Striker",
"Gate of the Setting Sun",
"enUS",
},
[64358] = {
"Set'thik Tempest",
"Heart of Fear",
"enUS",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
"enUS",
},
[198577] = {
"Unstable Flame",
"Vault of the Incarnates",
"enUS",
},
[63526] = {
"Bataari Flamecaller",
"Brewmoon Festival",
"enUS",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
"enUS",
},
[3977] = {
"High Inquisitor Whitemane",
"Scarlet Monastery",
"enUS",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
"enUS",
},
[71420] = {
"Hungry Kunchong",
"Siege of Orgrimmar",
"enUS",
},
[203809] = {
"Entropic Hatred",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[73723] = {
"Jun-Wei",
"Siege of Orgrimmar",
"enUS",
},
[62205] = {
"Wing Leader Ner'onok",
"Siege of Niuzao Temple",
"enUS",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
"enUS",
},
[67966] = {
"Whirl Turtle",
"Throne of Thunder",
"enUS",
},
[68222] = {
"Bow Fly Swarm",
"Throne of Thunder",
"enUS",
},
[185508] = {
"Claw Fighter",
"Brackenhide Hollow",
"enUS",
},
[184422] = {
"Emberon",
"Uldaman: Legacy of Tyr",
"enUS",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
"enUS",
},
[190370] = {
"Squallbringer Cyraz",
"Halls of Infusion",
"enUS",
},
[72828] = {
"Nameless Windwalker Spirit",
"Siege of Orgrimmar",
"enUS",
},
[65152] = {
"Captain Korthok",
"Theramore's Fall (A)",
"enUS",
},
[71734] = {
"Sha of Pride",
"Siege of Orgrimmar",
"enUS",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
"enUS",
},
[61250] = {
"Sorcerer Mogu",
"Mogu'shan Vaults",
"enUS",
},
[69374] = {
"War-God Jalak",
"Throne of Thunder",
"enUS",
},
[190371] = {
"Primalist Earthshaker",
"Halls of Infusion",
"enUS",
},
[73724] = {
"Zu Yin",
"Siege of Orgrimmar",
"enUS",
},
[59459] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[74108] = {
"Kor'kron Shredder",
"Siege of Orgrimmar",
"enUS",
},
[61634] = {
"Commander Vo'jak",
"Siege of Niuzao Temple",
"enUS",
},
[72983] = {
"Corrupted Skullsplitter",
"Siege of Orgrimmar",
"enUS",
},
[186208] = {
"Rotbow Ranger",
"Brackenhide Hollow",
"enUS",
},
[196694] = {
"Arcane Forager",
"Algeth'ar Academy",
"enUS",
},
[189266] = {
"Qalashi Trainee",
"Neltharus",
"enUS",
},
[69232] = {
"Ball Lightning",
"Throne of Thunder",
"enUS",
},
[69382] = {
"Malignant Ooze",
"Throne of Thunder",
"enUS",
},
[192769] = {
"Thondrozus",
"Vault of the Incarnates",
"enUS",
},
[58198] = {
"Shado-Pan Disciple",
"Shado-Pan Monastery",
"enUS",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
"enUS",
},
[197793] = {
"Awakened Juggernaut",
"Vault of the Incarnates",
"enUS",
},
[69375] = {
"Hidden Fog",
"Throne of Thunder",
"enUS",
},
[62402] = {
"Kor'thik Elite Blademaster",
"Heart of Fear",
"enUS",
},
[73725] = {
"Xiang-Lin",
"Siege of Orgrimmar",
"enUS",
},
[72964] = {
"Goro'dan",
"Siege of Orgrimmar",
"enUS",
},
[58674] = {
"Angry Hound",
"Scarlet Halls",
"enUS",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
"enUS",
},
[58823] = {
"Scholomance Neophyte",
"Scholomance",
"enUS",
},
[64900] = {
"Gash'nul",
"Theramore's Fall (A)",
"enUS",
},
[58756] = {
"Scarlet Evoker",
"Scarlet Halls",
"enUS",
},
[212327] = {
"Zaqali Flamemancer",
"Dragon Isles",
"enUS",
},
[59360] = {
"Meat Graft",
"Scholomance",
"enUS",
},
[63106] = {
"Sik'thik Swarmer",
"Siege of Niuzao Temple",
"enUS",
},
[72958] = {
"Dragonmaw Tidal Shaman",
"Siege of Orgrimmar",
"enUS",
},
[73086] = {
"Healing Tide Totem",
"Siege of Orgrimmar",
"enUS",
},
[73414] = {
"Kor'kron Reaper",
"Siege of Orgrimmar",
"enUS",
},
[73342] = {
"Fallen Pool Tender",
"Siege of Orgrimmar",
"enUS",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
"enUS",
},
[72191] = {
"Overlord Runthak",
"Siege of Orgrimmar",
"enUS",
},
[194469] = {
"Wither Slasher",
"Brackenhide Hollow",
"enUS",
},
[59460] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[192934] = {
"Volatile Infuser",
"Vault of the Incarnates",
"enUS",
},
[61699] = {
"Sik'thik Amberwing",
"Siege of Niuzao Temple",
"enUS",
},
[25740] = {
"Ahune",
"Coilfang: The Slave Pens",
"enUS",
},
[184581] = {
"Baelog",
"Uldaman: Legacy of Tyr",
"enUS",
},
[201560] = {
"Primalist Flamecaller",
"Vault of the Incarnates",
"enUS",
},
[71475] = {
"Rook Stonetoe",
"Siege of Orgrimmar",
"enUS",
},
[199916] = {
"Decaying Slime",
"Brackenhide Hollow",
"enUS",
},
[64132] = {
"Amber Growth",
"Heart of Fear",
"enUS",
},
[160183] = {
"Void Fanatic",
"Ny'alotha, the Waking City",
"enUS",
},
[59974] = {
"Murphs",
"Scarlet Monastery",
"enUS",
},
[10955] = {
"Summoned Water Elemental",
"Theramore's Fall (A)",
"enUS",
},
[58605] = {
"Scarlet Judicator",
"Scarlet Monastery",
"enUS",
},
[60047] = {
"Amethyst Guardian",
"Mogu'shan Vaults",
"enUS",
},
[196203] = {
"Ethereal Restorer",
"Algeth'ar Academy",
"enUS",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
"enUS",
},
[192680] = {
"Guardian Sentry",
"Algeth'ar Academy",
"enUS",
},
[58757] = {
"Scholomance Acolyte",
"Scholomance",
"enUS",
},
[199333] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
"enUS",
},
[205736] = {
"Sundered Siegemaster",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[196263] = {
"Nokhud Neophyte",
"The Nokhud Offensive",
"enUS",
},
[70401] = {
"Zandalari Arcweaver",
"Mogu Island Loot Room",
"enUS",
},
[198310] = {
"Flame Tarasek",
"Vault of the Incarnates",
"enUS",
},
[186284] = {
"Gutchewer Bear",
"Brackenhide Hollow",
"enUS",
},
[187768] = {
"Dathea Stormlash",
"Vault of the Incarnates",
"enUS",
},
[187638] = {
"Flamescale Tarasek",
"Vault of the Incarnates",
"enUS",
},
[73088] = {
"Dragonmaw War Banner",
"Siege of Orgrimmar",
"enUS",
},
[62838] = {
"Zan'thik Ambermancer",
"Assault on Zan'vess",
"enUS",
},
[197799] = {
"Quarry Infuser",
"Vault of the Incarnates",
"enUS",
},
[186739] = {
"Azureblade",
"The Azure Vault",
"enUS",
},
[59804] = {
"Gripping Hatred",
"Shado-Pan Monastery",
"enUS",
},
[61444] = {
"Ming the Cunning",
"Mogu'shan Palace",
"enUS",
},
[59461] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[181861] = {
"Magmatusk",
"Neltharus",
"enUS",
},
[58739] = {
"Borokhula the Destroyer",
"A Brewing Storm",
"enUS",
},
[65785] = {
"Sergeant Grud",
"Theramore's Fall (A)",
"enUS",
},
[60399] = {
"Qin-xi",
"Mogu'shan Vaults",
"enUS",
},
[61567] = {
"Vizier Jin'bak",
"Siege of Niuzao Temple",
"enUS",
},
[210512] = {
"Ashen Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[66652] = {
"Lesser Volatile Energy",
"Shado-Pan Monastery",
"enUS",
},
[189813] = {
"Dathea, Ascended",
"Vault of the Incarnates",
"enUS",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
"enUS",
},
[72194] = {
"Hellscream Demolisher",
"Siege of Orgrimmar",
"enUS",
},
[195821] = {
"Nokhud Saboteur",
"The Nokhud Offensive",
"enUS",
},
[197801] = {
"Awakened Terrasentry",
"Vault of the Incarnates",
"enUS",
},
[69712] = {
"Ji-Kun",
"Throne of Thunder",
"enUS",
},
[203811] = {
"Incarnation of Entropy",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
"enUS",
},
[58555] = {
"Scarlet Fanatic",
"Scarlet Monastery",
"enUS",
},
[187772] = {
"Opalfang",
"Vault of the Incarnates",
"enUS",
},
[58684] = {
"Scarlet Scourge Hewer",
"Scarlet Halls",
"enUS",
},
[205734] = {
"Sundered Edgelord",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[66181] = {
"Zar'thik Supplicant",
"Heart of Fear",
"enUS",
},
[58758] = {
"Soul Fragment",
"Scholomance",
"enUS",
},
[58822] = {
"Risen Guard",
"Scholomance",
"enUS",
},
[62980] = {
"Imperial Vizier Zor'lok",
"Heart of Fear",
"enUS",
},
[70787] = {
"Skullcrusher Gundu",
"Blood in the Snow",
"enUS",
},
[58898] = {
"Vigilant Watchman",
"Scarlet Halls",
"enUS",
},
[61042] = {
"Cheng Kang",
"Terrace of Endless Spring",
"enUS",
},
[205735] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[210147] = {
"Harbinger of Incineration",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[200926] = {
"Igira the Cruel",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
"enUS",
},
[61445] = {
"Haiyan the Unstoppable",
"Mogu'shan Palace",
"enUS",
},
[188673] = {
"Smoldering Colossus",
"Vault of the Incarnates",
"enUS",
},
[186338] = {
"Maruuk",
"The Nokhud Offensive",
"enUS",
},
[159417] = {
"Demented Knife-Twister",
"Ny'alotha, the Waking City",
"enUS",
},
[61701] = {
"Sik'thik Warrior",
"Siege of Niuzao Temple",
"enUS",
},
[187967] = {
"Sennarth",
"Vault of the Incarnates",
"enUS",
},
[72451] = {
"Kor'kron Dark Shaman",
"Siege of Orgrimmar",
"enUS",
},
[196577] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
"enUS",
},
[59303] = {
"Houndmaster Braun",
"Scarlet Halls",
"enUS",
},
[64068] = {
"Mogu'shan Engine Keeper",
"Mogu'shan Vaults",
"enUS",
},
[194990] = {
"Stormseeker Acolyte",
"Vault of the Incarnates",
"enUS",
},
[73091] = {
"Blackfuse Sellsword",
"Siege of Orgrimmar",
"enUS",
},
[205737] = {
"Sundered Manaweaver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[71712] = {
"Despair Spawn",
"Siege of Orgrimmar",
"enUS",
},
[210294] = {
"Flamespreader",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[62405] = {
"Sra'thik Amber-Trapper",
"Heart of Fear",
"enUS",
},
[160182] = {
"Void Initiate",
"Ny'alotha, the Waking City",
"enUS",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[194991] = {
"Oathsworn Vanguard",
"Vault of the Incarnates",
"enUS",
},
[70202] = {
"Manchu",
"Throne of Thunder",
"enUS",
},
[187315] = {
"Disease Slasher",
"Brackenhide Hollow",
"enUS",
},
[59980] = {
"Meat Graft",
"Scholomance",
"enUS",
},
[72452] = {
"Kor'kron Dire Wolf",
"Siege of Orgrimmar",
"enUS",
},
[159425] = {
"Occult Shadowmender",
"Ny'alotha, the Waking City",
"enUS",
},
[208367] = {
"Pip",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[70789] = {
"Zandalari Rage Banner",
"Blood in the Snow",
"enUS",
},
[68870] = {
"Mishka",
"Lion's Landing",
"enUS",
},
[194467] = {
"Disease Slasher",
"Brackenhide Hollow",
"enUS",
},
[193457] = {
"Balara",
"The Nokhud Offensive",
"enUS",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
"enUS",
},
[161217] = {
"Aqir Skitterer",
"Ny'alotha, the Waking City",
"enUS",
},
[56876] = {
"Krik'thik Sapper",
"Gate of the Setting Sun",
"enUS",
},
[72770] = {
"Kor'kron Dark Farseer",
"Siege of Orgrimmar",
"enUS",
},
[70212] = {
"Flaming Head",
"Throne of Thunder",
"enUS",
},
[60585] = {
"Elder Regail",
"Terrace of Endless Spring",
"enUS",
},
[187231] = {
"Wither Biter",
"Brackenhide Hollow",
"enUS",
},
[208363] = {
"Urctos",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[61442] = {
"Kuai the Brute",
"Mogu'shan Palace",
"enUS",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
"enUS",
},
[192761] = {
"Iskakx",
"Vault of the Incarnates",
"enUS",
},
[72131] = {
"Blind Blademaster",
"Siege of Orgrimmar",
"enUS",
},
[69427] = {
"Dark Animus",
"Throne of Thunder",
"enUS",
},
[68871] = {
"Amber Kearnen",
"Lion's Landing",
"enUS",
},
[73538] = {
"Kor'kron War Wolf",
"Siege of Orgrimmar",
"enUS",
},
[187139] = {
"Crystal Thrasher",
"The Azure Vault",
"enUS",
},
[73349] = {
"Tormented Initiate",
"Siege of Orgrimmar",
"enUS",
},
[69383] = {
"Quivering Blob",
"Throne of Thunder",
"enUS",
},
[64453] = {
"Set'thik Windblade",
"Heart of Fear",
"enUS",
},
[69639] = {
"Humming Crystal",
"Throne of Thunder",
"enUS",
},
[67720] = {
"Zan'thik Drone",
"Assault on Zan'vess",
"enUS",
},
[63808] = {
"Faintly Glowing Gem",
"Mogu'shan Palace",
"enUS",
},
[197298] = {
"Nascent Proto-Dragon",
"UNKNOWN",
"enUS",
},
[72198] = {
"Empowered Desecrated Weapon",
"Siege of Orgrimmar",
"enUS",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
"enUS",
},
[56713] = {
"Master Snowdrift",
"Shado-Pan Monastery",
"enUS",
},
[56763] = {
"Regenerating Sha",
"Shado-Pan Monastery",
"enUS",
},
[70663] = {
"Embercore",
"The Secrets of Ragefire",
"enUS",
},
[60999] = {
"Sha of Fear",
"Terrace of Endless Spring",
"enUS",
},
[72966] = {
"Resonating Amber",
"Siege of Orgrimmar",
"enUS",
},
[59080] = {
"Darkmaster Gandling",
"Scholomance",
"enUS",
},
[72172] = {
"Reflection",
"Siege of Orgrimmar",
"enUS",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
"enUS",
},
[73152] = {
"Storeroom Guard",
"Siege of Orgrimmar",
"enUS",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
"enUS",
},
[209090] = {
"Tindral Sageswift",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[59464] = {
"Hopper",
"Stormstout Brewery",
"enUS",
},
[198869] = {
"Sundered Devastator",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[67977] = {
"Tortos",
"Throne of Thunder",
"enUS",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
"enUS",
},
[197831] = {
"Quarry Stonebreaker",
"Vault of the Incarnates",
"enUS",
},
[72455] = {
"Overseer Komak",
"Siege of Orgrimmar",
"enUS",
},
[56912] = {
"Krik'thik Engulfer",
"Gate of the Setting Sun",
"enUS",
},
[64165] = {
"Bataari Outrunner",
"Brewmoon Festival",
"enUS",
},
[59368] = {
"Krastinovian Carver",
"Scholomance",
"enUS",
},
[60040] = {
"Commander Durand",
"Scarlet Monastery",
"enUS",
},
[73095] = {
"Blackfuse Engineer",
"Siege of Orgrimmar",
"enUS",
},
[73223] = {
"Pterrordax",
"Siege of Orgrimmar",
"enUS",
},
[187159] = {
"Shrieking Whelp",
"The Azure Vault",
"enUS",
},
[210170] = {
"Zaqali Flamemancer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[64454] = {
"Zar'thik Augurer",
"Heart of Fear",
"enUS",
},
[194487] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[187246] = {
"Nullmagic Hornswog",
"The Azure Vault",
"enUS",
},
[56924] = {
"Inflamed Hozen Brawler",
"Stormstout Brewery",
"enUS",
},
[58569] = {
"Scarlet Purifier",
"Scarlet Monastery",
"enUS",
},
[58633] = {
"Instructor Chillheart",
"Scholomance",
"enUS",
},
[56473] = {
"Flying Snow",
"Shado-Pan Monastery",
"enUS",
},
[72456] = {
"Korgra the Snake",
"Siege of Orgrimmar",
"enUS",
},
[72893] = {
"Orgrimmar Peon",
"Siege of Orgrimmar",
"enUS",
},
[62983] = {
"Lei Shi",
"Terrace of Endless Spring",
"enUS",
},
[56906] = {
"Saboteur Kip'tilak",
"Gate of the Setting Sun",
"enUS",
},
[210290] = {
"Firelands Flameguard",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[189478] = {
"Forgemaster Gorek",
"Neltharus",
"enUS",
},
[65173] = {
"Echo of Attenuation",
"Heart of Fear",
"enUS",
},
[72486] = {
"Doyo'da",
"Siege of Orgrimmar",
"enUS",
},
[65414] = {
"Ethereal Sha",
"Shado-Pan Monastery",
"enUS",
},
[60381] = {
"Zandalari Infiltrator",
"Mogu'shan Vaults",
"enUS",
},
[61448] = {
"Sik'thik Soldier",
"Siege of Niuzao Temple",
"enUS",
},
[194745] = {
"Rotfang Hyena",
"Brackenhide Hollow",
"enUS",
},
[158375] = {
"Corruptor Tentacle",
"Ny'alotha, the Waking City",
"enUS",
},
[200761] = {
"Wild Ohuna",
"The Nokhud Offensive",
"enUS",
},
[210436] = {
"Flowering Lasher",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[185534] = {
"Bonebolt Hunter",
"Brackenhide Hollow",
"enUS",
},
[61340] = {
"Glintrok Hexxer",
"Mogu'shan Palace",
"enUS",
},
[66413] = {
"Yeasty Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[72422] = {
"Auctioneer Drezmit",
"Siege of Orgrimmar",
"enUS",
},
[67774] = {
"Zan'thik Brutalizer",
"Assault on Zan'vess",
"enUS",
},
[192955] = {
"Draconic Illusion",
"The Azure Vault",
"enUS",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[207796] = {
"Burning Colossus",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[189472] = {
"Qalashi Lavabearer",
"Neltharus",
"enUS",
},
[189893] = {
"Infused Whelp",
"Ruby Life Pools",
"enUS",
},
[62408] = {
"Zar'thik Battle-Mender",
"Heart of Fear",
"enUS",
},
[56448] = {
"Wise Mari",
"Temple of the Jade Serpent",
"enUS",
},
[56395] = {
"Shado-Pan Novice",
"Shado-Pan Monastery",
"enUS",
},
[69899] = {
"Farraki Sand Conjurer",
"Throne of Thunder",
"enUS",
},
[207341] = {
"Blistering Spear",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[190407] = {
"Aqua Rager",
"Halls of Infusion",
"enUS",
},
[61240] = {
"Glintrok Skulker",
"Mogu'shan Palace",
"enUS",
},
[189886] = {
"Blazebound Firestorm",
"Ruby Life Pools",
"enUS",
},
[67764] = {
"Felhand Demon-Speaker",
"Lion's Landing",
"enUS",
},
[190686] = {
"Frozen Destroyer",
"Vault of the Incarnates",
"enUS",
},
[63048] = {
"Kor'thik Slicer",
"Heart of Fear",
"enUS",
},
[209333] = {
"Gnarlroot",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[73098] = {
"Kor'kron Overseer",
"Siege of Orgrimmar",
"enUS",
},
[73226] = {
"Lesser Sha Puddle",
"Siege of Orgrimmar",
"enUS",
},
[71865] = {
"Garrosh Hellscream",
"Siege of Orgrimmar",
"enUS",
},
[65415] = {
"Void Sha",
"Shado-Pan Monastery",
"enUS",
},
[56732] = {
"Liu Flameheart",
"Temple of the Jade Serpent",
"enUS",
},
[65402] = {
"Gurthan Swiftblade",
"Mogu'shan Palace",
"enUS",
},
[61389] = {
"Kargesh Highguard",
"Mogu'shan Palace",
"enUS",
},
[68669] = {
"S.H.A.R.K. Rocketeer",
"Lion's Landing",
"enUS",
},
[67416] = {
"Bloodhilt Wolf",
"Lion's Landing",
"enUS",
},
[67360] = {
"Horde Cannoneer",
"Naval Battle Scenario",
"enUS",
},
[59722] = {
"Pile of Corpses",
"Scarlet Monastery",
"enUS",
},
[59175] = {
"Master Archer",
"Scarlet Halls",
"enUS",
},
[162718] = {
"Iron-Willed Enforcer",
"Ny'alotha, the Waking City",
"enUS",
},
[68685] = {
"Admiral Taylor",
"Lion's Landing",
"enUS",
},
[210150] = {
"Flametouched Enforcer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[63508] = {
"Xuen",
"Lion's Landing",
"enUS",
},
[72489] = {
"Barkeep Morag",
"Siege of Orgrimmar",
"enUS",
},
[69133] = {
"Unharnessed Power",
"Throne of Thunder",
"enUS",
},
[73530] = {
"Dragonmaw Grunt",
"Siege of Orgrimmar",
"enUS",
},
[71644] = {
"Living Corruption",
"Siege of Orgrimmar",
"enUS",
},
[25756] = {
"Ahunite Coldwave",
"Coilfang: The Slave Pens",
"enUS",
},
[156575] = {
"Dark Inquisitor Xanesh",
"Ny'alotha, the Waking City",
"enUS",
},
[156818] = {
"Wrathion",
"Ny'alotha, the Waking City",
"enUS",
},
[65807] = {
"Overseer Lurguk",
"Theramore's Fall (A)",
"enUS",
},
[163690] = {
"Shath'Yar Scribe",
"Ny'alotha, the Waking City",
"enUS",
},
[191206] = {
"Primalist Mage",
"UNKNOWN",
"enUS",
},
[162647] = {
"Willing Sacrifice",
"Ny'alotha, the Waking City",
"enUS",
},
[162534] = {
"Anubisath Sentinel",
"Ny'alotha, the Waking City",
"enUS",
},
[163712] = {
"Dying Voidspawn",
"Ny'alotha, the Waking City",
"enUS",
},
[162303] = {
"Aqir Swarmkeeper",
"Ny'alotha, the Waking City",
"enUS",
},
[63049] = {
"Set'thik Swiftblade",
"Heart of Fear",
"enUS",
},
[159510] = {
"Eye of the Depths",
"Ny'alotha, the Waking City",
"enUS",
},
[163836] = {
"Psychophage",
"Ny'alotha, the Waking City",
"enUS",
},
[162933] = {
"Thought Harvester",
"Ny'alotha, the Waking City",
"enUS",
},
},
["extra_icon_timer_decimals"] = true,
["indicator_anchor"] = {
["x"] = 0.09999847412109375,
},
["health_selection_overlay_alpha"] = 0,
["minor_height_scale"] = 0.949999988079071,
["aura_padding"] = 2.059999942779541,
["indicator_worldboss"] = false,
["aura_width2"] = 21,
["aura_stack_size"] = 11,
["aura_timer_decimals"] = true,
["health_cutoff"] = false,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
},
["extra_icon_wide_icon"] = false,
["range_check_alpha"] = 1,
["semver"] = "1.0.6",
["aura_frame2_anchor"] = {
["y"] = 11,
},
["cast_statusbar_texture"] = "Blizzard",
["auto_toggle_friendly"] = {
["cities"] = false,
["world"] = false,
},
["castbar_icon_x_offset"] = 7,
["debuff_show_cc"] = false,
["transparency_behavior"] = 4,
["spell_animations"] = false,
["extra_icon_width"] = 32.53479385375977,
["health_statusbar_texture"] = "Blizzard",
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Extra Border"] = 2,
["Cast Bar Icon Config"] = 2,
["Attacking Specific Unit"] = 2,
["Combo Points"] = 6,
["Hide Neutral Units"] = 1,
["Target Color"] = 3,
["Execute Range"] = 1,
["Aura Reorder"] = 3,
},
["minor_width_scale"] = 0.8999999761581421,
["indicator_pet"] = false,
["aura_frame1_anchor"] = {
["y"] = 20,
["side"] = 1,
},
["range_check_cast_bar_alpha_friendlies"] = 0,
["honor_blizzard_plate_alpha"] = true,
["indicator_rare"] = false,
["aura_show_dispellable"] = false,
["aura_show_important"] = false,
["aura_height"] = 27,
["cast_statusbar_bgtexture"] = "Blizzard",
["aura2_x_offset"] = 0,
["target_indicator"] = "NONE",
["aura_show_buff_by_the_unit"] = false,
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "1",
["nameplateOverlapV"] = "0.20000000298023",
["nameplateLargeTopInset"] = "0.079999998211861",
["nameplateShowEnemyMinus"] = "0",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplatePersonalShowInCombat"] = "0",
["nameplateTargetRadialPosition"] = "1",
["nameplateMinAlpha"] = "0.90135484",
["clampTargetNameplateToScreen"] = "1",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "41",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "1",
["nameplateTargetBehindMaxDistance"] = "15",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "0",
["nameplatePersonalShowAlways"] = "0",
["nameplateMotionSpeed"] = "0.024999998509884",
["nameplateShowEnemyMinions"] = "0",
["nameplateShowEnemyPets"] = "1",
["nameplateShowFriendlyNPCs"] = "0",
["nameplateSelectedScale"] = "1.1380871534348",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateMotion"] = "0",
["nameplateMinScale"] = "0.8",
["nameplateOverlapH"] = "0.8",
["nameplateOtherTopInset"] = "0.079999998211861",
["ShowClassColorInNameplate"] = "1",
["ShowNamePlateLoseAggroFlash"] = "0",
["nameplateShowEnemyTotems"] = "1",
["nameplateShowFriendlyGuardians"] = "0",
["nameplateOccludedAlphaMult"] = "1",
["nameplateShowFriends"] = "1",
["NamePlateHorizontalScale"] = "1",
["nameplateShowEnemyGuardians"] = "0",
["nameplateShowDebuffsOnFriendly"] = "0",
},
["login_counter"] = 37651,
["extra_icon_caster_name"] = false,
["click_space_friendly"] = {
111,
27,
},
["hide_friendly_castbars"] = true,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 0.9500000476837158,
},
},
["target_highlight_texture"] = "Interface\\AddOns\\Plater\\images\\selection_indicator6",
["aura_timer_text_color"] = {
nil,
0.93333333333333,
0,
},
["hover_highlight_alpha"] = 0.2999999821186066,
["aura_enabled"] = false,
["indicator_spec_always"] = true,
["plate_config"] = {
["player"] = {
["castbar_enabled"] = false,
["power_percent_text_enabled"] = false,
["healthbar_enabled"] = false,
["power_enabled"] = false,
["percent_text_enabled"] = false,
["percent_show_health"] = false,
["spellpercent_text_enabled"] = false,
["percent_text_ooc"] = false,
["percent_show_percent"] = false,
["percent_text_show_decimals"] = false,
["module_enabled"] = false,
},
["friendlyplayer"] = {
["big_actorname_text_size"] = 14,
["level_text_size"] = 8,
["cast"] = {
140,
1,
},
["fixed_class_color"] = {
0.1450980454683304,
[3] = 0.1960784494876862,
},
["percent_text_show_decimals"] = false,
["big_actorname_text_shadow_color"] = {
0,
0,
0,
1,
},
["spellpercent_text_outline"] = "NONE",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["mana_incombat"] = {
nil,
4,
},
["actorname_use_guild_color"] = false,
["all_names"] = true,
["actorname_text_outline"] = "NONE",
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 5,
["only_damaged"] = false,
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["only_thename"] = true,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["percent_show_percent"] = false,
["cast_incombat"] = {
140,
1,
},
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
1,
},
["spellname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_outline"] = "OUTLINE",
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["actorname_text_size"] = 6,
["big_actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_anchor"] = {
["y"] = 3,
},
["spellpercent_text_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_size"] = 10,
["castbar_offset"] = -0.5,
["percent_text_font"] = "Friz Quadrata TT",
["buff_frame_y_offset"] = 0,
["quest_enabled"] = true,
["actorname_friend_color"] = {
0.7098039388656616,
nil,
nil,
0,
},
["big_actortitle_text_size"] = 14,
["quest_color_enabled"] = true,
["health_incombat"] = {
140,
10,
},
["health"] = {
140,
10,
},
["actorname_text_color"] = {
0.1215686351060867,
nil,
0.1882353127002716,
0,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_alpha"] = 0.699999988079071,
["mana"] = {
nil,
4,
},
},
["friendlynpc"] = {
["show_guild_name"] = false,
["level_text_size"] = 8,
["actorname_use_class_color"] = false,
["cast"] = {
100,
},
["fixed_class_color"] = {
0,
1,
0,
1,
},
["actorname_text_color"] = {
0.9686275124549866,
[3] = 0.874509871006012,
},
["percent_text_show_decimals"] = false,
["click_through"] = false,
["spellpercent_text_outline"] = "NONE",
["module_enabled"] = false,
["actorname_text_font"] = "Friz Quadrata TT",
["actorname_use_guild_color"] = false,
["big_actortitle_text_color"] = {
nil,
0.8000000715255737,
nil,
0,
},
["actorname_text_spacing"] = 8,
["only_damaged"] = false,
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["only_thename"] = false,
["big_actortitle_text_font"] = "2002 Bold",
["health_incombat"] = {
100,
10,
},
["big_actorname_text_color"] = {
0.501960813999176,
nil,
0.501960813999176,
1,
},
["cast_incombat"] = {
100,
10,
},
["actorname_use_friends_color"] = true,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["actorname_text_size"] = 9,
["big_actorname_text_font"] = "2002 Bold",
["level_text_alpha"] = 0.699999988079071,
["spellpercent_text_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_size"] = 10,
["big_actortitle_text_size"] = 6,
["percent_text_font"] = "Friz Quadrata TT",
["actorname_guild_color"] = {
0.498039,
1,
0.2,
1,
},
["percent_show_percent"] = false,
["actorname_friend_color"] = {
0.71,
1,
1,
1,
},
["spellname_text_size"] = 8,
["health"] = {
100,
10,
},
["enabled"] = false,
["spellname_text_font"] = "Friz Quadrata TT",
},
["enemynpc"] = {
["castbar_offset"] = -0.5,
["cast"] = {
125,
15,
},
["percent_text_shadow_color"] = {
1,
1,
1,
},
["actorname_text_color"] = {
nil,
0.007843137254902,
0,
},
["spellname_text_outline"] = "NONE",
["spellpercent_text_outline"] = "NONE",
["actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_spacing"] = 11,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["spellpercent_text_size"] = 10,
["cast_incombat"] = {
125,
15,
},
["spellname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_outline"] = "NONE",
["actorname_text_size"] = 12,
["big_actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_size"] = 12,
["big_actortitle_text_size"] = 12,
["actorname_text_anchor"] = {
["y"] = 3,
["side"] = 8,
},
["spellpercent_text_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_size"] = 10,
["percent_text_font"] = "2002 Bold",
["percent_text_show_decimals"] = false,
["quest_enabled"] = false,
["health_incombat"] = {
125,
10,
},
["spellname_text_size"] = 10,
["health"] = {
125,
10,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_show_health"] = false,
["spellpercent_text_enabled"] = false,
["level_text_alpha"] = 0.699999988079071,
["level_text_enabled"] = false,
},
["global_health_width"] = 140,
["enemyplayer"] = {
["big_actorname_text_size"] = 14,
["level_text_size"] = 8,
["actorname_use_class_color"] = true,
["cast"] = {
125,
15,
},
["fixed_class_color"] = {
nil,
0.4000000357627869,
0.1019607931375504,
},
["spellpercent_text_outline"] = "NONE",
["actorname_text_font"] = "Friz Quadrata TT",
["all_names"] = true,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast_incombat"] = {
125,
15,
},
["spellname_text_font"] = "Friz Quadrata TT",
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["castbar_offset"] = -0.5,
["level_text_alpha"] = 0.699999988079071,
["spellpercent_text_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_enabled"] = false,
["big_actortitle_text_size"] = 14,
["percent_text_font"] = "Friz Quadrata TT",
["actorname_text_color"] = {
0.9019608497619629,
nil,
0.9215686917304993,
0,
},
["quest_enabled"] = true,
["percent_text_show_decimals"] = false,
["quest_color_enabled"] = true,
["health_incombat"] = {
125,
10,
},
["health"] = {
125,
10,
},
["actorname_text_anchor"] = {
["y"] = 3,
["side"] = 8,
},
["percent_text_size"] = 10,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_show_health"] = false,
["level_text_enabled"] = false,
},
["global_health_height"] = 11,
},
["aura_y_offset"] = 20,
["use_ui_parent"] = true,
["aura_show_defensive_cd"] = true,
["focus_texture"] = "Blizzard",
["cast_statusbar_bgcolor"] = {
0,
0,
0,
0.49000000953674,
},
["border_thickness"] = 1.100000023841858,
["resources_settings"] = {
["chr"] = {
["Player-3676-0D98B2A2"] = "Chi",
["Player-11-0E5C3449"] = "Chi",
["Player-76-0BA72A37"] = "Chi",
["Player-76-0BD55532"] = "Chi",
["Player-1071-0D6B24AA"] = "Chi",
["Player-76-0BB4A4DE"] = "SoulShards",
["Player-1071-0D8B9495"] = "Chi",
["Player-76-0BC23AB2"] = "Chi",
["Player-1071-0D5A1C3A"] = "Chi",
["Player-76-0BB706E0"] = "Chi",
["Player-1071-0D5104CF"] = "Chi",
["Player-154-0BD7AFF1"] = "Chi",
["Player-76-0B991BFD"] = "Chi",
["Player-76-0B986AD7"] = "Chi",
["Player-11-0E140B20"] = "Chi",
["Player-1071-0D50A441"] = "Chi",
["Player-154-0BDF1086"] = "Chi",
["Player-1071-0D5B5266"] = "Chi",
["Player-76-0BC8716D"] = "ComboPoints",
["Player-76-0B990C65"] = "Essence",
["Player-3675-0A516FAE"] = "Chi",
["Player-3676-0DD9A3D1"] = "Chi",
},
},
["indicator_scale"] = 2.490000009536743,
["border_color"] = {
0.96862745098039,
0.95294117647059,
0.9843137254902,
1,
},
["focus_color"] = {
nil,
nil,
nil,
0,
},
["ignore_softinteract_objects"] = true,
["npc_colors"] = {
[3296] = {
true,
false,
"white",
},
},
["hook_data"] = {
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["Time"] = 1597097268,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\castbar_icon",
["Enabled"] = false,
["Revision"] = 348,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Icon Settings:",
["Name"] = "Icon Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showIcon",
["Value"] = true,
["Name"] = "Show Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the castbar icon when enabled",
},
{
["Type"] = 4,
["Key"] = "iconOnLeftSide",
["Value"] = true,
["Name"] = "Icon on Left Side",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled it anchor the icon on the left side, right otherwise",
},
{
["Type"] = 4,
["Key"] = "useFullSize",
["Value"] = false,
["Name"] = "Use Big Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled the icon has the size of the cast bar plus the healthbar",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Fine tune the icon size",
["Min"] = 0,
["Key"] = "iconSizeOffset",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Icon Size Offset",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Space between the icon and the cast bar",
["Min"] = -5,
["Key"] = "iconPadding",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Icon Padding",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option5",
["Value"] = "Can't Interrupt Texture:",
["Name"] = "Interrupt Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showTexture",
["Value"] = true,
["Name"] = "Show Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled show a texture to tell the cast can't be interrupted",
},
{
["Type"] = 3,
["Key"] = "iconTexturePath",
["Value"] = "Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON",
["Name"] = "Texture Path",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Insert the path for the texture",
},
{
["Type"] = 4,
["Key"] = "desaturatedTexture",
["Value"] = true,
["Name"] = "Texture Desaturated",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enbaled, texture is shown in black & white",
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
1,
1,
1,
0.30567157268524,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Select the color of the texture",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture width",
["Min"] = 1,
["Key"] = "textureWidth",
["Value"] = 10,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Width",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "The texture is set to be the same size as the cast bar, fine tune the height as wanted",
["Min"] = -16,
["Key"] = "textureHeightMod",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Height Mod",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture position",
["Min"] = -32,
["Key"] = "texturePosition",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Position",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust the texture transparency",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
},
["HooksTemp"] = {
},
["Name"] = "Cast Bar Icon Settings [P]",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
},
["Time"] = 1547392935,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["Enabled"] = false,
["Revision"] = 50,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["Name"] = "Color Automation [Plater]",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        if (healthBar.CurrentHealth / healthBar.CurrentHealthMax <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end        \n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = false\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"green\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * envTable.ExecutePercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
},
["Time"] = 1547406548,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 135358,
["Enabled"] = false,
["Revision"] = 84,
["semver"] = "",
["Author"] = "Ahwa-Azralon",
["Desc"] = "Add extra effects to execute range. See the constructor script for options.",
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["Name"] = "Execute Range [Plater]",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["Time"] = 1620377377,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_attacking_unit",
["Enabled"] = false,
["Revision"] = 363,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
0.50196078431373,
0.50196078431373,
0,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBarColor",
["Value"] = true,
["Name"] = "Change Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBorderColor",
["Value"] = false,
["Name"] = "Change Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetColors",
["Value"] = true,
["Name"] = "Reset Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["HooksTemp"] = {
},
["Name"] = "Attacking Specific Unit [Plater]",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        --check the unit reaction\n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n            \n        else\n            envTable.HideNameplate (unitFrame)\n            \n        end    \n    end\n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when plater finishes an update on the nameplate\n    --check within the envTable if the healthBar of this nameplate should be hidden\n    if (envTable.IsHidden) then\n        if (unitFrame.healthBar:IsShown()) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.ShowNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.OnlyInOpenWorld = true;\n    envTable.ShowInCombat = true;\n    \n    --consts\n    envTable.REACTION_NEUTRAL = 4;\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        envTable.IsHidden = true\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        envTable.IsHidden = false\n    end\n    \nend\n\n\n\n\n",
},
["Time"] = 1541606242,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 1990989,
["Enabled"] = false,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Hide neutral units, show when selected, see the constructor script for options.",
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["Name"] = "Hide Neutral Units [Plater]",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["Time"] = 1621935143,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 135426,
["Enabled"] = false,
["Revision"] = 284,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["Name"] = "Combo Points [Plater]",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.IsEnabled) then\n        if (unitFrame.IsSelf) then\n            if (envTable.ShowOnPersonalBar) then\n                envTable.BorderFrame:Show()\n            else\n                envTable.BorderFrame:Hide() \n            end\n        else\n            envTable.BorderFrame:Show()\n        end   \n    end\n    \nend   \n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border color\n    local borderColor = \"yellow\"\n    \n    --size of the border\n    local borderSize = 1\n    \n    --transparency\n    local borderAlpha = 1\n    \n    --enabled (set to false it you only want to use the extra border in other scripts)\n    local isEnabled = true\n    \n    --export border (allow the border to be used by other scripts)\n    --other scripts can use:\n    --unitFrame.healthBar.extraBorder:Show()\n    --unitFrame.healthBar.extraBorder:SetVertexColor (r, g, b)\n    --unitFrame.healthBar.extraBorder:SetBorderSizes (borderSize)\n    local canExportBorder = true\n    \n    --do not add the border to personal bar\n    local noPersonalBar = true\n    \n    --private\n    do\n        \n        local newBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        envTable.BorderFrame = newBorder\n        \n        newBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n        newBorder:UpdateSizes()\n        \n        local r, g, b = DetailsFramework:ParseColors (borderColor)\n        newBorder:SetVertexColor (r, g, b, borderAlpha)\n        \n        envTable.ShowOnPersonalBar = not noPersonalBar\n        \n        if (canExportBorder) then\n            unitFrame.healthBar.extraBorder = newBorder\n        end\n        \n        if (not isEnabled) then\n            envTable.IsEnabled = false\n        else\n            envTable.IsEnabled = true\n        end\n    end\n    \nend\n\n\n",
},
["Time"] = 1622195123,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 133689,
["Enabled"] = false,
["Revision"] = 179,
["semver"] = "",
["Author"] = "Tecno-Azralon",
["Desc"] = "Add another border with more customizations. This border can also be manipulated by other scripts.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Extra Border [Plater]",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Added"] = "\n\n-- exported function Plater.UpdatePlateSize() from Plater.lua\n--this is for advanced users which wants to reorder the nameplate frame at their desire\n\n\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --check if there's a type of unit on this nameplate\n    local plateFrame = unitFrame:GetParent()\n    if (not plateFrame.actorType) then\n        return\n    end\n    \n    --get all the frames and cache some variables\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local profile = Plater.db.profile\n    local DB_PLATE_CONFIG = profile.plate_config\n    local isInCombat = Plater.IsInCombat()\n    local actorType = plateFrame.actorType\n    \n    local unitFrame = plateFrame.unitFrame\n    local healthBar = unitFrame.healthBar\n    local castBar = unitFrame.castBar\n    local powerBar = unitFrame.powerBar\n    local buffFrame1 = unitFrame.BuffFrame\n    local buffFrame2 = unitFrame.BuffFrame2\n    \n    --use in combat bars when in pvp\n    if (plateFrame.actorType == ACTORTYPE_ENEMY_PLAYER) then\n        if ((Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") and DB_PLATE_CONFIG.player.pvp_always_incombat) then\n            isInCombat = true\n        end\n    end\n    \n    --get the config for this actor type\n    local plateConfigs = DB_PLATE_CONFIG [actorType]\n    --get the config key based if the player is in combat\n    local castBarConfigKey, healthBarConfigKey, manaConfigKey = Plater.GetHashKey (isInCombat)\n    \n    --get the width and height from what the user set in the options panel\n    local healthBarWidth, healthBarHeight = unitFrame.customHealthBarWidth or plateConfigs [healthBarConfigKey][1], unitFrame.customHealthBarHeight or plateConfigs [healthBarConfigKey][2]\n    local castBarWidth, castBarHeight = unitFrame.customCastBarWidth or plateConfigs [castBarConfigKey][1], unitFrame.customCastBarHeight or plateConfigs [castBarConfigKey][2]\n    local powerBarWidth, powerBarHeight = unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][1], unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][2]\n    \n    --calculate the offset for the cast bar, this is done due to the cast bar be anchored to topleft and topright\n    local castBarOffSetX = (healthBarWidth - castBarWidth) / 2\n    local castBarOffSetY = plateConfigs.castbar_offset\n    \n    --calculate offsets for the power bar\n    local powerBarOffSetX = (healthBarWidth - powerBarWidth) / 2\n    local powerBarOffSetY = 0\n    \n    --calculate the size deviation for pets\n    local unitType = Plater.GetUnitType (plateFrame)\n    if (unitType == \"pet\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.pet_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.pet_width_scale\n        \n    elseif (unitType == \"minus\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.minor_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.minor_width_scale\n    end\n    \n    --unit frame - is set to be the same size as the plateFrame\n    unitFrame:ClearAllPoints()\n    unitFrame:SetAllPoints()\n    \n    --calculates the health bar anchor points\n    --it will always be placed in the center of the nameplate area (where it accepts mouse clicks) \n    local xOffSet = (plateFrame:GetWidth() - healthBarWidth) / 2\n    local yOffSet = (plateFrame:GetHeight() - healthBarHeight) / 2\n    \n    --set the health bar point\n    healthBar:ClearAllPoints()\n    PixelUtil.SetPoint (healthBar, \"topleft\", unitFrame, \"topleft\", xOffSet + profile.global_offset_x, -yOffSet + profile.global_offset_y)\n    PixelUtil.SetPoint (healthBar, \"bottomright\", unitFrame, \"bottomright\", -xOffSet + profile.global_offset_x, yOffSet + profile.global_offset_y)\n    \n    --set the cast bar point and size\n    castBar:ClearAllPoints()\n    PixelUtil.SetPoint (castBar, \"topleft\", healthBar, \"bottomleft\", castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetPoint (castBar, \"topright\", healthBar, \"bottomright\", -castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetHeight (castBar, castBarHeight)\n    PixelUtil.SetSize (castBar.Icon, castBarHeight, castBarHeight)\n    PixelUtil.SetSize (castBar.BorderShield, castBarHeight * 1.4, castBarHeight * 1.4)\n    \n    --set the power bar point and size\n    powerBar:ClearAllPoints()\n    PixelUtil.SetPoint (powerBar, \"topleft\", healthBar, \"bottomleft\", powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetPoint (powerBar, \"topright\", healthBar, \"bottomright\", -powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetHeight (powerBar, powerBarHeight)\n    \n    --power bar are hidden by default, show it if there's a custom size for it\n    if (unitFrame.customPowerBarWidth and unitFrame.customPowerBarHeight) then\n        powerBar:SetUnit (unitFrame.unit)\n    end\n    \n    --aura frames\n    local bf1Anchor = Plater.db.profile.aura_frame1_anchor\n    Plater.SetAnchor (buffFrame1, {side = bf1Anchor.side, x = bf1Anchor.x, y = bf1Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura_grow_direction or 2) == 2)\n    \n    local bf2Anchor = Plater.db.profile.aura_frame2_anchor\n    Plater.SetAnchor (buffFrame2, {side = bf2Anchor.side, x = bf2Anchor.x, y = bf2Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura2_grow_direction or 2) == 2)\n    \nend\n\n\n",
},
["Time"] = 1596791840,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 574574,
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Function Plater.UpdatePlateSize from Plater.lua exported to scritps.",
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["Name"] = "Reorder Nameplate [Plater]",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --do nothing if the unit is the player it self\n    if (unitFrame.IsSelf) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    else\n        if (envTable.ForceRefreshNameplateColor) then\n            Plater.RefreshNameplateColor (unitFrame) \n        end\n    end    \n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --set this to true if you are not using threat colors in the health bar\n    envTable.ForceRefreshNameplateColor = true\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend",
},
["Time"] = 1554138845,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 136207,
["Enabled"] = false,
["Revision"] = 59,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Change the nameplate color when a nameplate does not have the auras set in the constructor script.",
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["Name"] = "Don't Have Aura [Plater]",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShow = false;\n    envTable.TargetAmount:SetText (\"\")\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when a nameplate is added to the screen check if the player is in combat\n    if (InCombatLockdown()) then\n        --player is in combat, check if can check amount of targets\n        envTable.CanShow = envTable.CanShowTargetAmount();\n        \n    else\n        envTable.CanShow = false; \n    end\n    \n    envTable.TargetAmount:SetText (\"\");\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TargetAmount:SetText (\"\");\n    envTable.CanShow = false;\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --if the script is allowed to show the amount of targets\n    --also check if the unit is in combat\n    if (envTable.CanShow and UnitAffectingCombat (unitId)) then\n        \n        --check if can update the amount of targets following the cooldown set in the constructor script\n        --by default Plater updates the nameplate every 250ms, by default the cooldown is 2, so it'll update the amuont of target every 1/2 of a second\n        envTable.UpdateCooldown = envTable.UpdateCooldown + 1\n        if (envTable.UpdateCooldown < envTable.UpdateInterval) then\n            return\n        else\n            \n            --reset the cooldown interval to check the amount of target again\n            envTable.UpdateCooldown = 0\n            \n            --get the amount of targets\n            local amount;\n            if (envTable.InRaid) then\n                amount = envTable.NumTargetsInRaid (unitFrame)      \n                \n            elseif (envTable.InParty) then\n                amount = envTable.NumTargetsInParty (unitFrame)   \n                \n            else\n                envTable.TargetAmount:SetText (\"\")\n                return\n            end\n            \n            --update the amount text\n            if (amount == 0) then\n                envTable.TargetAmount:SetText (\"\")\n            else\n                envTable.TargetAmount:SetText (amount)\n            end\n            \n        end\n    end\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can show the amount of targets\n    envTable.CanShow = envTable.CanShowTargetAmount();\n    \n    if (not envTable.CanShow) then\n        envTable.TargetAmount:SetText (\"\") \n    end\nend\n\n\n\n\n",
["Constructor"] = "--all gray text like this are comments and do not run as code\n--build the settings and basic functions for the hook\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --declare setting variables:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    local showInRaid = true;\n    local showInDungeon = true;\n    local showInArena = false;\n    local showInBattleground = false;\n    local showInOpenWorld = true;\n    \n    envTable.UpdateInterval = 2; --each 2 updates in the nameplate it'll update the amount of targets\n    \n    local anchor = {\n        side = 6, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 4, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    \n    --frames:\n    \n    --create the text that will show the amount of people targeting the unit\n    if (not  unitFrame.healthBar.TargetAmount) then\n        envTable.TargetAmount = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.TargetAmount, anchor);\n        unitFrame.healthBar.TargetAmount = envTable.TargetAmount\n    end\n    \n    --in case Plater wipes the envTable\n    envTable.TargetAmount = unitFrame.healthBar.TargetAmount\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --private variables (they will be used in the other scripts within this hook)\n    envTable.CanShow = false;\n    envTable.UpdateCooldown = 0;\n    envTable.InRaid = false;\n    envTable.InParty = false;\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    --update the InRaid or InParty proprieties\n    function envTable.UpdateGroupType()\n        if (IsInRaid()) then\n            envTable.InRaid = true;\n            envTable.InParty = false;     \n            \n        elseif (IsInGroup()) then\n            envTable.InRaid = false;\n            envTable.InParty = true;   \n            \n        else\n            envTable.InRaid = false;            \n            envTable.InParty = false;\n        end\n    end\n    \n    --this function controls if the amount of targets can show following the settings in the top of this script\n    function envTable.CanShowTargetAmount()\n        \n        local _, instanceType, difficultyID, _, _, _, _, instanceMapID, instanceGroupSize = GetInstanceInfo()\n        \n        if (showInRaid and instanceType == \"raid\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInDungeon and instanceType == \"party\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInArena and instanceType == \"arena\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInBattleground and instanceType == \"pvp\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInOpenWorld and instanceType == \"none\") then\n            envTable.UpdateGroupType()\n            if (envTable.InRaid or envTable.InParty) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    --get the amount of player targetting the unit in raid or party\n    function envTable.NumTargetsInRaid (unitFrame)\n        local amount = 0\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        return amount\n    end\n    \n    function envTable.NumTargetsInParty()\n        local amount = 0\n        for i = 1, GetNumGroupMembers() - 1 do\n            local unit = \"party\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        local unit = \"playertarget\"\n        if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n            amount = amount + 1\n        end        \n        \n        return amount\n    end\n    \nend",
},
["Time"] = 1548278227,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 1966587,
["Enabled"] = false,
["Revision"] = 182,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show how many raid members are targeting the unit",
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["Name"] = "Players Targeting a Target [Plater]",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1608663128,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = false,
["Revision"] = 356,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["Name"] = "Aura Reorder [Plater]",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["Time"] = 1552354619,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 878211,
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Changes the target color to the color set in the constructor script.",
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["Name"] = "Current Target Color [Plater]",
},
{
["OptionsValues"] = {
["enableClassification"] = true,
["targetBorder"] = {
1,
1,
1,
1,
},
["enableBorder"] = true,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateBorder(self, unitFrame)\n    modTable.UpdateClassificationIndicator(self, unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateBorder(self, unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateClassificationIndicator(self, unitFrame)\nend\n\n\n",
["Initialization"] = "function(modTable)\n    local UNITREACTION_HOSTILE = 3\n    local UNITREACTION_NEUTRAL = 4\n    local UNITREACTION_FRIENDLY = 5\n    \n    local ACTORTYPE_FRIENDLY_PLAYER = \"friendlyplayer\"\n    local ACTORTYPE_FRIENDLY_NPC = \"friendlynpc\"\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local ACTORTYPE_ENEMY_NPC = \"enemynpc\"\n    local ACTORTYPE_PLAYER = \"player\"\n    \n    function modTable.UpdateBorder(self, unitFrame)\n        if modTable.config.enableBorder then\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetBorderColor(self, modTable.config.targetBorder)\n            else\n                Plater.SetBorderColor(self, modTable.config.notargetBorder)\n            end\n        end\n    end\n    \n    function modTable.UpdateClassificationIndicator(self, unitFrame)\n        if modTable.config.enableClassification then\n            if self.actorType == ACTORTYPE_ENEMY_NPC then\n                local unitClassification = UnitClassification (self.namePlateUnitToken)\n                if (unitClassification == \"worldboss\") then\n                    modTable.SetClassificationIndicator(unitFrame, \"elite\")\n                elseif (unitClassification == \"rareelite\") then\n                    modTable.SetClassificationIndicator(unitFrame, \"rare\")\n                elseif (unitClassification == \"elite\") then\n                    modTable.SetClassificationIndicator(unitFrame, \"elite\")\n                elseif (unitClassification == \"rare\") then\n                    modTable.SetClassificationIndicator(unitFrame, \"rare\")\n                else\n                    modTable.SetClassificationIndicator(unitFrame, \"none\")\n                end\n            else\n                modTable.SetClassificationIndicator(unitFrame, \"none\")\n            end\n        end\n    end\n    \n    function modTable.SetClassificationIndicator(unitFrame, type)\n        if unitFrame.ClassificationIndicatorType == type then return end\n        unitFrame.ClassificationIndicatorType = type\n        local indicator = unitFrame.ClassificationIndicator\n        if indicator then\n            if type == \"elite\" then\n                indicator:SetTexCoord(0, 0.15, 0.343, 0.609)\n                indicator:Show()\n            elseif type == \"rare\" then\n                indicator:SetTexCoord(0, 0.15, 0.5, 0.78)\n                indicator:Show()\n            elseif type == \"none\" then\n                indicator:Hide()\n            end\n        end\n    end\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    unitFrame.ClassificationIndicator = unitFrame.ClassificationIndicator or \n    Plater:CreateImage(unitFrame.healthBar, \n        [[Interface\\TargetingFrame\\Nameplates]], 14, 13, \"overlay\", {0, 0.15, 0.24, 0.48})\n    Plater.SetAnchor(unitFrame.ClassificationIndicator, {\n            side = 2,\n            x = 0, --x offset\n            y = 0, --y offset\n    })\n    \n    unitFrame.ClassificationIndicator:Hide()\n    unitFrame.ClassificationIndicatorType = \"none\"\nend",
},
["Time"] = 1696420160,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/8nX2H6c7V/1",
["Icon"] = 298586,
["Enabled"] = true,
["Revision"] = 319,
["semver"] = "1.0.0",
["Author"] = "Sanlulpriest-熊猫酒仙",
["Desc"] = "",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "CLASSIFICATION",
["Value"] = "Blizzlike Classification Indicator",
["Name"] = "Blizzlike Classification Indicator",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "enableClassification",
["Value"] = true,
["Name"] = "Enable",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "BLANK1",
["Value"] = 0,
["Name"] = "Blank1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "BORDER_COLOR",
["Value"] = "Border Color",
["Name"] = "Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "enableBorder",
["Value"] = true,
["Name"] = "Enable",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "targetBorder",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Target Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "notargetBorder",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Notarget Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["LastHookEdited"] = "",
["Name"] = "Blizz-Style Border&Indicator",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateShield(unitFrame)\nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateShield(unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    function envTable.updateShield(frame) \n        local castBar = frame.castBar\n        local shield = castBar.BorderShield\n        \n        if not castBar.canInterrupt then\n            shield:Hide()\n        end \n    end\nend\n\n\n",
},
["Time"] = 1622242504,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/JLVY55vqV/1",
["Icon"] = 133504,
["Enabled"] = true,
["Revision"] = 14,
["semver"] = "1.0.0",
["Author"] = "Egraowdh-Illidan",
["Desc"] = "Removes the shield border on uninterruptible casts",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "No Castbar Shield",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Player Logon"] = "function ()\n    local DF = _G [\"DetailsFramework\"]\n    Plater.CreateShowAuraIconAnimation =  function (iconFrame)\n        local iconShowInAnimation = DF:CreateAnimationHub (iconFrame)\n        iconFrame.ShowAnimation = iconShowInAnimation\n    end\nend",
},
["Time"] = 1622995996,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/gSQ9tPyO7/1",
["Icon"] = 519384,
["Enabled"] = true,
["Revision"] = 11,
["semver"] = "1.0.0",
["Author"] = "Ariani-Antonidas",
["Desc"] = "",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Disable Aura Show Animation",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    local Details = Details\n    unitFrame.HealerTexture:Hide()\n    \n    if (Details and Details.realversion >= 134) then\n        local spec = Details:GetSpecByGUID (unitFrame.namePlateUnitGUID)\n        if (spec and envTable.HealerSpecs [spec]) then\n            \n            --custom icon indicator\n            if (envTable.ShowCustomIndicator) then\n                unitFrame.HealerTexture:Show()                \n                if (envTable.UseClassColor) then\n                    unitFrame.HealerTexture.vertexcolor = select (2, UnitClass (unitId))\n                else\n                    unitFrame.HealerTexture.vertexcolor = envTable.Color\n                end\n            end\n            \n            --regular indicator from plater\n            if (envTable.ShowRegularIndicator) then\n                Plater.ShowIndicator (unitFrame, envTable.Texture, envTable.Width, envTable.Height) \n            end\n            \n        end\n    end\n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --options\n    --custom indicator is a custom icon added by this script\n    envTable.ShowCustomIndicator = true\n    --regular indicator is the indicator row within Plater default indicators\n    envTable.ShowRegularIndicator = false\n    \n    --custom indicator options\n    envTable.Texture = [[Interface\\AddOns\\Plater\\media\\cross_64]]\n    envTable.Width = 16\n    envTable.Height = 16\n    \n    envTable.Anchor = {\n        side = 7, --topright\n        x = envTable.Width / 2, --x offset\n        y = -envTable.Width / 2, --y offset\n    }\n    \n    envTable.UseClassColor = false\n    envTable.Color = \"white\" --only use this color when use class color is false\n    \n    --private\n    envTable.HealerSpecs = {\n        [105] = true, -->  druid resto\n        [270] = true, --> monk mw\n        [65] = true, --> paladin holy\n        [256] = true,  --> priest disc\n        [257] = true,  --> priest holy\n        [264] = true, --> shaman resto\n    }\n    \n    unitFrame.HealerTexture = unitFrame.HealerTexture or Plater:CreateImage (unitFrame.healthBar.FrameOverlay, texture, envTable.Width, envTable.Height, \"overlay\")\n    \n    unitFrame.HealerTexture.width = envTable.Width\n    unitFrame.HealerTexture.height = envTable.Height\n    unitFrame.HealerTexture.texture = envTable.Texture\n    Plater.SetAnchor (unitFrame.HealerTexture, envTable.Anchor)\n    \nend",
},
["Time"] = 1659734036,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/aIlB_UgaU/1",
["Icon"] = "Interface\\AddOns\\Plater\\media\\cross_64",
["Enabled"] = true,
["Revision"] = 106,
["semver"] = "1.0.0",
["Author"] = "Izimode-Azralon",
["Desc"] = "Add a cross icon into the nameplate of healers. Must have Details! Damage Meter installed.",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Healer Indicator",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ActorType == \"enemyplayer\") then\n        Plater:SetFontSize (unitFrame.unitName, Plater.GetConfig (unitFrame).actorname_text_size)\n    end\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    if (IsActiveBattlefieldArena()) then\n        if (unitFrame.ActorType == \"enemyplayer\") then\n            for i = 1, 5 do\n                local unitGUID = UnitGUID (\"arena\" .. i)\n                if (unitGUID == unitFrame.namePlateUnitGUID) then\n                    unitFrame.unitName:SetText (i)\n                    Plater:SetFontSize (unitFrame.unitName, envTable.FontSize)\n                end\n            end\n        end\n    end\nend\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FontSize = 14\n    \nend\n\n\n",
},
["Time"] = 1714423708,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/U9UuVxS2K/1",
["Icon"] = "Interface\\AddOns\\Plater\\media\\x_64",
["Enabled"] = true,
["Revision"] = 36,
["semver"] = "1.0.0",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show the arena enemy number instead of the player name.",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "Nameplate Updated",
["Name"] = "Arena Enemy Number",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    local classIcon = unitFrame.classIcon\n    if (classIcon) then\n        classIcon:Hide()\n    end\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    local parent = unitFrame\n    local classIcon = parent.classIcon\n    if (not unitFrame.IsSelf and not unitFrame.namePlateNpcId and unitFrame.namePlateUnitReaction >= 5) then\n        local _,class = UnitClass(unitFrame.unit)\n        classIcon.icon:SetTexCoord(unpack(CLASS_ICON_TCOORDS[class]))\n        classIcon:Show()\n        \n        local icon = parent.classIcon.icon\n        if (parent.healthBar:IsVisible()) then\n            icon:ClearAllPoints()\n            icon:SetPoint ('bottom', parent.healthBar, 'top', 0, 0)\n        else\n            icon:ClearAllPoints()\n            icon:SetPoint ('bottom', parent.ActorNameSpecial, 'top', 0, 0)\n        end\n    else\n        classIcon:Hide()\n    end\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    local parent = unitFrame\n    if (not parent.classIcon) then\n        local classIcon = CreateFrame (\"frame\", nil, unitFrame)\n        classIcon:SetFrameLevel (parent:GetFrameLevel() + 5)\n        classIcon:SetPoint ('topleft', parent, 'topleft', 0, 0)\n        parent.classIcon = classIcon\n        \n        local icon = Plater:CreateImage (classIcon, [[Interface\\TargetingFrame\\UI-Classes-Circles]], 25, 25)\n        classIcon.icon = icon\n    end\nend",
},
["Time"] = 1696420182,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/9DJAuod-L/1",
["Icon"] = 2188585,
["Enabled"] = false,
["Revision"] = 362,
["semver"] = "1.0.0",
["Author"] = "Daisukidesu-Moon Guard",
["Desc"] = "Adds class icons to the top of friendly players nameplates.",
["Prio"] = 99,
["Name"] = "Class Icons Friendly Players",
["PlaterCore"] = 1,
["version"] = 1,
["HooksTemp"] = {
},
["Options"] = {
},
},
{
["OptionsValues"] = {
["y"] = 4,
["hideauras"] = true,
["hidehp"] = true,
["hidename"] = true,
["test"] = false,
["size"] = 32,
},
["LastHookEdited"] = "Nameplate Added",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if modTable.units[unitFrame.namePlateNpcId] or modTable.config.test then\n        if modTable.config.changecolor then\n            Plater.SetNameplateColor (unitFrame, modTable.config.color)\n        end\n        if modTable.config.hidename then\n            unitFrame.healthBar.unitName:Hide()\n        end\n        if modTable.config.hidehp then\n            unitFrame.healthBar.lifePercent:Hide()\n        end\n        if modTable.config.hideauras then\n            unitFrame.BuffFrame:Hide()\n            unitFrame.BuffFrame2:Hide()\n        end\n    end\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    unitFrame.TIF:Hide()\n    \n    local texture\n    \n    if modTable.config.test then\n        texture = modTable.RandomTexture()\n    else\n        texture = modTable.units[unitFrame.namePlateNpcId]\n    end\n    \n    if not texture then return end\n    \n    unitFrame.TIF.t:SetTexture(texture)\n    unitFrame.TIF:Show()\n    \nend\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    \n    modTable.units = {\n        -- war\n        [119052] = GetSpellTexture(236320), -- War Banner\n        -- sham\n        [3527] = GetSpellTexture(5394), -- Healing Stream Totem\n        [5913] = GetSpellTexture(8143), -- Tremor Totem\n        [61245] = GetSpellTexture(192058), -- Capacitor Totem\n        [2630] = GetSpellTexture(2484), -- Earthbind Totem\n        [53006] = GetSpellTexture(98008), -- Spirit Link Totem\n        [59764] = GetSpellTexture(108280), -- Healing Tide Totem\n        [10467] = GetSpellTexture(16191), -- Mana Tide Totem\n        [6112] = GetSpellTexture(8512), -- Windfury Totem\n        [97369] = GetSpellTexture(192222), -- Liquid Magma Totem\n        [100943] = GetSpellTexture(198838), -- Earthen Wall Totem\n        [78001] = GetSpellTexture(157153), -- Cloudburst Totem\n        [104818] = GetSpellTexture(207399), -- Ancestral Protection Totem\n        [60561] = GetSpellTexture(51485), -- Earthgrab Totem\n        [105427] = GetSpellTexture(204330), -- Skyfury Totem\n        [5925] = GetSpellTexture(204336), -- Grounding Totem\n        [105451] = GetSpellTexture(204331), -- Counterstrike Totem\n        [97285] = GetSpellTexture(192077), -- Wind Rush Totem\n        [166523] = GetSpellTexture(324386), -- Vesper Totem\n        -- tazavesh\n        [179733] = GetSpellTexture(355132),  -- Invigorating Fish Stick\n    }\n    \n    modTable.RandomTexture = function()\n        local random = random(19)\n        local i = 0\n        for k, v in pairs(modTable.units) do\n            i = i+1\n            if i == random then\n                return v\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if not unitFrame.TIF then\n        -- create frame\n        local f = CreateFrame(\"Frame\", nil, unitFrame.healthBar.FrameOverlay)\n        f:SetFrameStrata(\"BACKGROUND\")\n        f:SetWidth(modTable.config.size)\n        f:SetHeight(modTable.config.size)\n        local t = f:CreateTexture(nil, \"BACKGROUND\")\n        t:SetAllPoints(f)\n        f.t = t\n        t:SetTexCoord(.08, .92, .08, .92)\n        f:SetPoint(\"BOTTOM\", unitFrame.healthBar.FrameOverlay, \"TOP\", 0, modTable.config.y)\n        f:Show() \n        unitFrame.TIF = f\n        -- create border\n        unitFrame.TIF.Border = CreateFrame(\n            \"Frame\", \n            nil, \n            f, \n            \"NamePlateFullBorderTemplate\"\n        )\n        unitFrame.TIF.Border:SetVertexColor(0, 0, 0)\n        unitFrame.TIF.Border:SetBorderSizes (0.5, 0.5, 0.5, 0.5)\n        unitFrame.TIF.Border:UpdateSizes()\n    end\n    \nend\n\n\n",
},
["Time"] = 1716041584,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/LBLLVTl9f/6",
["Enabled"] = true,
["Revision"] = 825,
["semver"] = "1.0.5",
["Author"] = "Ретцер-Ревущий фьорд",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "PVP Totem Plates",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Name"] = "test mode",
["Value"] = false,
["Key"] = "test",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "delim",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "size and positioning",
["Value"] = "size & positioning",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 256,
["Desc"] = "",
["Min"] = 32,
["Fraction"] = false,
["Value"] = 50,
["Key"] = "size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "icon size",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "anchor = topcenter",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "y",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "y offset",
},
{
["Type"] = 6,
["Name"] = "delim",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "color options",
["Value"] = "plate color",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "change color",
["Value"] = true,
["Key"] = "changecolor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "plate color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "delim",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "other options",
["Value"] = "other",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "hide name",
["Value"] = true,
["Key"] = "hidename",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "hide health text",
["Value"] = true,
["Key"] = "hidehp",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Max"] = 256,
["Desc"] = "",
["Min"] = 32,
["Fraction"] = false,
["Value"] = 50,
["Key"] = "hideauras",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Name"] = "hide auras",
},
},
["HooksTemp"] = {
},
["version"] = 6,
},
{
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    envTable.ShowHealthBar(unitFrame, unitId)\n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    envTable.ShowHealthBar(unitFrame, unitId)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --Use this to change if the names should always show or hide all names except for target\n    envTable.showName = true\n    \n    function envTable.ShowHealthBar(unitFrame, unitId)\n        \n        if((unitFrame.PlayerCannotAttack and unitFrame.namePlateIsTarget) or unitFrame.PlayerCannotAttack \n        == false) then\n            \n            local name = UnitName(unitId) \n            unitFrame.healthBar.unitName: SetText(name)               \n            \n            Plater.ShowHealthBar(unitFrame)\n            \n            --These hide the special names and titles\n            unitFrame.ActorNameSpecial: Hide()\n            unitFrame.ActorTitleSpecial: Hide()\n            \n            unitFrame: Show()    \n            \n        elseif(envTable.showName == false) then\n            \n            unitFrame.ActorNameSpecial: Hide()\n            unitFrame: Hide()\n            \n            \n        else\n            \n            unitFrame.ActorNameSpecial: Show()\n            unitFrame.healthBar: Hide()\n            unitFrame:Show()                \n        end\n    end\nend",
},
["Time"] = 1696733275,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/KbXj85CEz/5",
["Icon"] = 878211,
["Enabled"] = false,
["Revision"] = 748,
["semver"] = "1.0.4",
["Author"] = "Fntp-Argent Dawn",
["Desc"] = "Hides plate of a friendly unless you target it",
["Prio"] = 99,
["Name"] = "HidePlayerName",
["PlaterCore"] = 1,
["version"] = 5,
["HooksTemp"] = {
},
["Options"] = {
},
},
{
["OptionsValues"] = {
["ignoreFriendly"] = true,
},
["LastHookEdited"] = "",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    modTable.lockoutDurations = {\n        [1766] = 5, -- Kick\n        [2139] = 6, -- Counterspell\n        [6552] = 4, -- Pummel\n        [19647] = 6, -- Spell Lock\n        [132409] = 6, -- Spell Lock\n        [115781] = 6, -- Optical Blast\n        [47528] = 3, -- Mind Freeze\n        [57994] = 3, -- Wind Shear\n        [91807] = 2, -- Shambling Rush\n        [96231] = 4, -- Rebuke\n        [93985] = 4, -- Skull Bash\n        [116705] = 4, -- Spear Hand Strike\n        [147362] = 3, -- Counter Shot\n        [183752] = 3, -- Disrupt\n        [187707] = 3, -- Muzzle\n        [212619] = 6, -- Call Felhunter\n        [31935] = 3, -- Avenger's Shield\n        [217824] = 4, -- Shield of Virtue\n        [347008] = 4, -- Axe Toss\n        [97547] = 5, -- Solar Beam\n        [220543] = 3, -- Silence\n    }\n    \n    modTable.data = {}\n    \n    local function isFriendly(flags)\n        return bit.band(flags, COMBATLOG_OBJECT_REACTION_FRIENDLY)  > 0\n    end\n    \n    local function getSchoolColor(school)\n        return COMBATLOG_DEFAULT_COLORS.schoolColoring[school] or COMBATLOG_DEFAULT_COLORS.schoolColoring[Enum.Damageclass.MaskNone]\n    end\n    \n    local function getBorderColor(spellSchool) \n        local borderColor \n        if modTable.config.schoolBorders then\n            borderColor = getSchoolColor(spellSchool)\n        elseif Plater.db.profile.extra_icon_use_blizzard_border_color then\n            local color = DebuffTypeColor[\"none\"] or {r=0, b=0, g=0, a=0}\n            borderColor = {color.r, color.g, color.b, color.a or 1}\n        else\n            borderColor = Plater.db.profile.extra_icon_border_color\n        end\n        return borderColor\n    end\n    \n    local basekick = {\n        Show = function(self, frame)\n            local borderColor = getBorderColor(self.spellSchool)\n            frame:AddSpecificIcon(\n                self.id, \n                self.spellId, \n                borderColor, \n                self.startTime, \n                self.duration, \n                nil, \n                self.casterName and {text = self.casterName, text_color = self.casterClass} or false,\n                1, \n                nil, \n                self.caster, \n                false, \n                self.spellName, \n                nil\n            )\n            self.frame = frame\n        end,\n        Hide = function(self)\n            if self.frame then\n                self.frame:RemoveSpecificIcon(self.id)\n            end\n        end\n    }\n    \n    local function OnEvent(self, event)\n        local details = { CombatLogGetCurrentEventInfo() }\n        \n        if details[2] ~= \"SPELL_INTERRUPT\" then return end\n        if modTable.config.ignoreFriendly and isFriendly(details[10]) then return end\n        \n        local guid = details[8]\n        local spellId = details[12]\n        local texure = GetSpellTexture(spellId)\n        local spellName = details[13]\n        local school = details[17]\n        local caster = details[5]\n        local casterClass = select(2, UnitClass(caster or \"\"))\n        local casterName\n        if (casterClass and UnitPlayerControlled(caster)) then\n            casterName = UnitName(caster)\n        end\n        local startTime = GetTime()\n        local duration = modTable.lockoutDurations[spellId] or 4\n        local expirationTime = (startTime + duration)\n        local id = caster..startTime\n        \n        modTable.data[guid] = modTable.data[guid] or {}\n        \n        local kick = {\n            id = id,\n            spellId = spellId,\n            spellName = spellName,\n            texture = texure,\n            startTime = startTime,\n            duration = duration,\n            expirationTime = expirationTime,\n            caster = caster,\n            casterName = casterName,\n            casterClass = casterClass,\n            spellSchool = school,\n            Show = basekick.Show,\n            Hide = basekick.Hide\n        }\n        \n        modTable.data[guid][id] = kick\n        \n        C_Timer.NewTimer(duration, function()\n                kick:Hide()\n                modTable.data[guid][id] = nil\n                if next(modTable.data[guid]) == nil then\n                    modTable.data[guid] = nil\n                end\n        end)\n        \n    end\n    \n    modTable.eventFrame = modTable.eventFrame or GlobalPlaterInterruptEventFrame\n    if not modTable.eventFrame then\n        modTable.eventFrame = CreateFrame(\"Frame\", \"GlobalPlaterInterruptEventFrame\")\n        modTable.eventFrame:RegisterEvent(\"COMBAT_LOG_EVENT_UNFILTERED\")\n    end\n    \n    modTable.eventFrame:SetScript(\"OnEvent\",  OnEvent)\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local kicks = modTable.data[unitFrame.namePlateUnitGUID] or {}\n    for _, kick in pairs(kicks) do\n        kick:Show(unitFrame.ExtraIconFrame)\n    end\n    \nend",
},
["Time"] = 1698185255,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/mA-zQQEsD/4",
["Enabled"] = false,
["Revision"] = 924,
["semver"] = "1.0.3",
["Author"] = "Ретцер-Ревущий фьорд",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "PVP/PVE School Lock Buff Special",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Name"] = "School based border color",
["Value"] = false,
["Key"] = "schoolBorders",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change color of icon border depending on locked school",
},
{
["Type"] = 4,
["Name"] = "Ignore friendly nameplates",
["Value"] = false,
["Key"] = "ignoreFriendly",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore interrupts for friendly nameplates",
},
},
["HooksTemp"] = {
},
["version"] = 4,
},
{
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    envTable.UpdateNameplateText (unitFrame)    \n    \nend\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    envTable.UpdateNameplateText (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    \n    envTable.HideFriendlyTextOutOfCombat = true\n    envTable.HideFriendlyTextInCombat = false\n    envTable.AlwaysShowTextForTarget = true\n    \n    --private\n    function envTable.UpdateNameplateText (unitFrame)\n        if (unitFrame.namePlateUnitReaction == 5) then\n            \n            if (envTable.AlwaysShowTextForTarget and unitFrame.namePlateIsTarget) then\n                unitFrame.unitName:Show()\n                --unitFrame.healthBar.actorLevel:Show()\n                --unitFrame.healthBar.lifePercent:Show()\n                \n            else\n                if (Plater.IsInCombat()) then\n                    if (envTable.HideFriendlyTextInCombat) then\n                        unitFrame.unitName:Hide()\n                        --unitFrame.healthBar.actorLevel:Hide()\n                        --unitFrame.healthBar.lifePercent:Hide()\n                    else\n                        unitFrame.unitName:Show()\n                        --unitFrame.healthBar.actorLevel:Show()\n                        --unitFrame.healthBar.lifePercent:Show()\n                    end\n                else\n                    if (envTable.HideFriendlyTextOutOfCombat) then\n                        unitFrame.unitName:Hide()\n                        --unitFrame.healthBar.actorLevel:Hide()\n                        --unitFrame.healthBar.lifePercent:Hide()\n                    else\n                        unitFrame.unitName:Show()\n                        -- unitFrame.healthBar.actorLevel:Show()\n                        -- unitFrame.healthBar.lifePercent:Show()                \n                    end\n                end\n            end\n        end        \n    end\nend\n\n\n\n\n",
},
["Time"] = 1716672464,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/34w5pqNcU/1",
["Icon"] = 537227,
["Enabled"] = true,
["Revision"] = 68,
["semver"] = "1.0.0",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Adjusts the visibility of texts for neutral units.",
["Prio"] = 99,
["Name"] = "Hide Friendly Names",
["PlaterCore"] = 1,
["version"] = 1,
["HooksTemp"] = {
},
["Options"] = {
},
},
},
["auras_per_row_auto"] = false,
["aura_width"] = 29,
["bossmod_support_enabled"] = false,
["ghost_auras"] = {
["height"] = 4.546186923980713,
["auras"] = {
["MONK"] = {
[2] = {
[411038] = true,
},
},
},
["alpha"] = 0.7449636459350586,
["width"] = 1.123701930046082,
},
["extra_icon_show_stacks"] = false,
["range_check_enabled"] = false,
["target_highlight_color"] = {
nil,
1,
0.545098066329956,
},
["extra_icon_height"] = 27.18725395202637,
["resources"] = {
["scale"] = 0.800000011920929,
},
["click_space"] = {
180,
36,
},
["castbar_target_font"] = "Friz Quadrata TT",
["range_check_in_range_or_target_alpha_friendlies"] = 0.8999999761581421,
["indicator_quest"] = false,
["stacking_nameplates_enabled"] = false,
["aura_stack_anchor"] = {
["y"] = -17.5,
["x"] = 7.5,
},
["target_shady_combat_only"] = false,
["pet_height_scale"] = 0.449999988079071,
["aura_x_offset"] = 0,
["range_check_alpha_friendlies"] = 1,
["health_selection_overlay_color"] = {
0.9568628072738647,
[3] = 0.9294118285179138,
},
["ui_parent_scale_tune"] = 1.559999942779541,
["profile_name"] = "df-profile-main2",
["health_statusbar_bgtexture"] = "Blizzard",
["indicator_raidmark_anchor"] = {
["y"] = 12.63999938964844,
["side"] = 8,
},
["tank"] = {
["colors"] = {
["aggro"] = {
1,
0.003921568627451,
0,
},
},
},
["aura_tracker"] = {
["buff_banned"] = {
["333553"] = true,
["61573"] = true,
["206150"] = true,
["11649"] = true,
["61574"] = true,
["5697"] = true,
},
["buff"] = {
13750,
108978,
203272,
189949,
292158,
368364,
189300,
1022,
6940,
210256,
360827,
144302,
292222,
390381,
248773,
123715,
118038,
122783,
196718,
79811,
401018,
329977,
388917,
321177,
289626,
418647,
198144,
292152,
54792,
81098,
394013,
394786,
173565,
102342,
53271,
212295,
196555,
383618,
363916,
129035,
316849,
122860,
278454,
279043,
236157,
125174,
740,
173189,
413004,
31519,
383269,
51271,
48792,
51052,
48707,
191427,
212800,
196718,
196555,
29166,
194223,
102543,
102560,
102558,
102342,
378464,
370960,
360827,
186265,
288613,
264735,
360952,
53271,
53480,
45438,
365350,
365362,
342245,
115203,
122278,
115078,
119381,
122783,
31884,
204018,
210256,
1022,
184662,
498,
642,
200183,
33206,
10060,
197268,
47788,
47536,
47585,
62618,
213610,
31224,
5277,
13750,
377362,
},
["debuff"] = {
411038,
397899,
198909,
419865,
295459,
418561,
33786,
107570,
6466,
34694,
105421,
207167,
183517,
132651,
383005,
346992,
175940,
389270,
211015,
178072,
221527,
316595,
415001,
305485,
214429,
190481,
171153,
346736,
107079,
360958,
355336,
356723,
15487,
360806,
76577,
356727,
47476,
233759,
408,
3355,
321177,
396392,
200327,
317898,
5211,
99,
22570,
78675,
102359,
360806,
213691,
187650,
31661,
389794,
390171,
113724,
198898,
20066,
853,
115750,
8122,
15487,
64044,
1776,
408,
2094,
357768,
406896,
},
["debuff_tracked"] = {
[419865] = true,
[198909] = true,
[313030] = true,
[357768] = true,
[397899] = true,
[411038] = true,
},
["track_method"] = 2,
["buff_tracked"] = {
["227931"] = true,
["297133"] = true,
["163689"] = true,
["233210"] = true,
["209859"] = true,
},
},
["cast_statusbar_color"] = {
nil,
0.70588235294118,
nil,
1,
},
["update_throttle"] = 0.1200000047683716,
["color_override"] = false,
["focus_indicator_enabled"] = false,
["tocversion"] = 100207,
["indicator_extra_raidmark"] = false,
["aura_show_debuffs_personal"] = false,
["not_affecting_combat_alpha"] = 0.6499999761581421,
["health_cutoff_upper"] = false,
["target_highlight_alpha"] = 1,
["target_shady_alpha"] = 0.8999999761581421,
["extra_icon_show_swipe"] = false,
["target_highlight_height"] = 10,
["version"] = 7,
["castbar_target_text_size"] = 8,
["aura_show_aura_by_the_player"] = false,
["indicator_elite"] = false,
["indicator_raidmark_scale"] = 0.2000000029802322,
["patch_version"] = 36,
["range_check_in_range_or_target_alpha"] = 1,
["aura_timer_text_size"] = 10,
["show_interrupt_author"] = false,
["number_region_first_run"] = true,
["color_override_colors"] = {
[3] = {
0.91764705882353,
0,
0.035294117647059,
},
},
["health_animation_time_dilatation"] = 2.619999885559082,
["aggro_modifies"] = {
["health_bar_color"] = false,
},
["aura_show_offensive_cd"] = true,
["health_statusbar_bgcolor"] = {
0.11372549831867,
0.11372549831867,
0.11372549831867,
0.89000000059605,
},
["extra_icon_timer_outline"] = "OUTLINE",
["script_auto_imported"] = {
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 2,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Unit - Health Markers"] = 12,
["Cast - Tank Interrupt"] = 12,
["Cast - Important Target [P]"] = 2,
["Cast - Shield Interrupt"] = 2,
["Cast - Alert + Timer [P]"] = 4,
["Aura is Shield [P]"] = 2,
["Add - Warning [P]"] = 5,
["Unit - Show Energy"] = 11,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Glowing [P]"] = 10,
["Cast - Circular Swipe"] = 4,
["Cast - Very Important"] = 15,
["Add - Explode on Die [P]"] = 1,
["Spiteful Affix"] = 3,
["Cast - Quick Flash"] = 2,
["Add - Non Elite Trash [P]"] = 4,
["Cast - Stop Casting"] = 4,
["Cast - On Going Cast [P]"] = 2,
["Countdown"] = 11,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 15,
["Fixate"] = 11,
["Auto Set Skull"] = 11,
["Unit - Important"] = 11,
["Relics 9.2 M Dungeons"] = 2,
["Fixate On You"] = 11,
},
["aura_alpha"] = 1,
["indicator_faction"] = false,
["dps"] = {
["colors"] = {
["solo"] = {
1,
0,
0.003921568627451,
},
["notontank"] = {
1,
0.043137254901961,
0,
},
["noaggro"] = {
1,
0.003921568627451,
0,
},
},
},
["pet_width_scale"] = 0.5,
["first_run3"] = true,
["aura_timer_text_font"] = "Friz Quadrata TT",
["transparency_behavior_on_enemies"] = false,
["aura_grow_direction"] = 3,
["auto_toggle_stacking"] = {
["party"] = false,
["raid"] = false,
["arena"] = false,
["world"] = false,
},
},
["Mythic_plus"] = {
["target_shady_combat_only"] = false,
["aura_show_only_short_dispellable_on_players"] = true,
["aura_timer_text_color"] = {
nil,
0.93333333333333,
0,
},
["saved_cvars_last_change"] = {
["nameplateMinAlpha"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4121: in function `ForceCVars'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4119: in function <Interface/AddOns/Plater/Plater.lua:4119>\n",
["nameplateMinAlphaDistance"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4122: in function `ForceCVars'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4119: in function <Interface/AddOns/Plater/Plater.lua:4119>\n",
["nameplateSelectedAlpha"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4123: in function `ForceCVars'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4119: in function <Interface/AddOns/Plater/Plater.lua:4119>\n",
["nameplateShowEnemyPets"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:12925: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:12923>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:811: in function <Interface/AddOns/Details/Libs/DF/slider.lua:762>\n",
["nameplateShowFriends"] = "[string \"=[C]\"]: ?\n[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/SharedXML/CvarUtil.lua\"]:72: in function `SetValue'\n[string \"@Interface/SharedXML/Settings/Blizzard_Setting.lua\"]:187: in function `SetValueInternal'\n[string \"@Interface/SharedXML/Settings/Blizzard_Setting.lua\"]:67: in function `SetValue'\n[string \"@Interface/SharedXML/Settings/Blizzard_Settings.lua\"]:229: in function `SetValue'\n[string \"FRIENDNAMEPLATES\"]:3: in function <[string \"FRIENDNAMEPLATES\"]:1>\n",
},
["aura_cache_by_name"] = {
["fear"] = {
5782,
12096,
12542,
22678,
26070,
26580,
26661,
27641,
27990,
29168,
29321,
30002,
30530,
30584,
30615,
31358,
31970,
32241,
33547,
33924,
34259,
38154,
38595,
38660,
39119,
39176,
39210,
39415,
41150,
46561,
51240,
59669,
65809,
68950,
70171,
81442,
83613,
113712,
115186,
117573,
118699,
125204,
128098,
130616,
130940,
134938,
142884,
144062,
173093,
182806,
204730,
205398,
214304,
220540,
221424,
223170,
240136,
242084,
242739,
245902,
246277,
246307,
248028,
251419,
259874,
259995,
266918,
287685,
287687,
288545,
331741,
342914,
344887,
375205,
400529,
419865,
},
["sphere of despair"] = {
411038,
},
["solar beam"] = {
78675,
81261,
97547,
129888,
129889,
129891,
165282,
165283,
165286,
177454,
295521,
295532,
295533,
300660,
300678,
300682,
311930,
313030,
},
["detect invisibility"] = {
11649,
62856,
},
["paralysis"] = {
35202,
66830,
84030,
115078,
173342,
177578,
213369,
357768,
},
["leg sweep"] = {
119381,
128787,
164392,
174417,
285270,
292306,
397899,
},
["song of chi-ji"] = {
198898,
198909,
},
["unending breath"] = {
5697,
},
},
["url"] = "https://wago.io/vzrQ_-iCn/7",
["hover_highlight"] = false,
["aura_stack_anchor"] = {
["y"] = -17.5,
["x"] = 7.5,
},
["extra_icon_show_stacks"] = false,
["stacking_nameplates_enabled"] = false,
["aura2_y_offset"] = 11,
["indicator_spec_always"] = true,
["plate_config"] = {
["player"] = {
["spellpercent_text_enabled"] = false,
["percent_text_show_decimals"] = false,
["castbar_enabled"] = false,
["power_percent_text_enabled"] = false,
["healthbar_enabled"] = false,
["percent_show_percent"] = false,
["percent_text_enabled"] = false,
["power_enabled"] = false,
["percent_text_ooc"] = false,
["percent_show_health"] = false,
["module_enabled"] = false,
},
["friendlyplayer"] = {
["actorname_use_friends_color"] = false,
["level_text_size"] = 8,
["only_thename"] = true,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
140,
1,
},
["big_actortitle_text_size"] = 14,
["fixed_class_color"] = {
0.1450980454683304,
[3] = 0.1960784494876862,
},
["actorname_text_color"] = {
0.1215686351060867,
[3] = 0.1882353127002716,
},
["percent_text_show_decimals"] = false,
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["cast_incombat"] = {
140,
1,
},
["big_actorname_text_shadow_color"] = {
0,
0,
0,
1,
},
["spellpercent_text_outline"] = "NONE",
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
1,
},
["actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["mana_incombat"] = {
nil,
4,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["actorname_use_guild_color"] = false,
["all_names"] = true,
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["actorname_text_anchor"] = {
["y"] = 3,
},
["spellpercent_text_color"] = {
nil,
nil,
nil,
0,
},
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 9,
["only_damaged"] = false,
["buff_frame_y_offset"] = 0,
["big_actorname_text_size"] = 14,
["quest_enabled"] = true,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["mana"] = {
nil,
4,
},
["quest_color_enabled"] = true,
["health_incombat"] = {
140,
10,
},
["health"] = {
140,
10,
},
["percent_text_size"] = 10,
["percent_text_font"] = "Friz Quadrata TT",
["castbar_offset"] = -0.5,
["percent_show_percent"] = false,
["spellname_text_font"] = "Friz Quadrata TT",
},
["friendlynpc"] = {
["castbar_offset"] = -0.5,
["actorname_friend_color"] = {
0.71,
1,
1,
1,
},
["level_text_size"] = 8,
["actorname_use_class_color"] = false,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
140,
15,
},
["big_actortitle_text_size"] = 10,
["fixed_class_color"] = {
0,
1,
0,
1,
},
["big_actorname_text_color"] = {
0.50196078431373,
nil,
0.50196078431373,
1,
},
["actorname_text_color"] = {
0.50588235294118,
0.54117647058824,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
140,
15,
},
["click_through"] = false,
["spellpercent_text_outline"] = "NONE",
["actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_outline"] = "NONE",
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["actorname_text_size"] = 12,
["big_actorname_text_font"] = "Friz Quadrata TT",
["actorname_use_guild_color"] = false,
["actorname_text_anchor"] = {
["y"] = 3,
},
["spellpercent_text_color"] = {
nil,
nil,
nil,
0,
},
["big_actortitle_text_outline"] = "NONE",
["actorname_text_spacing"] = 11,
["only_damaged"] = false,
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["actorname_guild_color"] = {
0.498039,
1,
0.2,
1,
},
["percent_show_percent"] = false,
["only_thename"] = false,
["actorname_use_friends_color"] = true,
["spellname_text_font"] = "Friz Quadrata TT",
["health_incombat"] = {
140,
11,
},
["health"] = {
140,
11,
},
["percent_text_size"] = 10,
["show_guild_name"] = false,
["big_actorname_text_size"] = 10,
["percent_text_font"] = "Friz Quadrata TT",
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
},
["enemynpc"] = {
["actorname_text_font"] = "Friz Quadrata TT",
["castbar_offset"] = -0.5,
["spellname_text_font"] = "Friz Quadrata TT",
["actorname_text_size"] = 12,
["big_actorname_text_outline"] = "NONE",
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
125,
15,
},
["spellpercent_text_size"] = 10,
["big_actorname_text_font"] = "Friz Quadrata TT",
["percent_text_shadow_color"] = {
1,
1,
1,
},
["big_actorname_text_size"] = 12,
["percent_text_size"] = 10,
["percent_show_health"] = false,
["spellpercent_text_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_enabled"] = false,
["actorname_text_spacing"] = 11,
["percent_text_font"] = "2002 Bold",
["actorname_text_color"] = {
nil,
0.007843137254902,
0,
},
["health_incombat"] = {
125,
10,
},
["cast_incombat"] = {
125,
15,
},
["spellname_text_outline"] = "NONE",
["percent_text_show_decimals"] = false,
["quest_enabled"] = false,
["spellname_text_size"] = 10,
["health"] = {
125,
10,
},
["spellpercent_text_outline"] = "NONE",
["actorname_text_anchor"] = {
["y"] = 3,
["side"] = 8,
},
["big_actortitle_text_size"] = 12,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_enabled"] = false,
},
["global_health_height"] = 11,
["enemyplayer"] = {
["actorname_text_font"] = "Friz Quadrata TT",
["castbar_offset"] = -0.5,
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["level_text_size"] = 8,
["actorname_use_class_color"] = true,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
125,
15,
},
["all_names"] = true,
["big_actorname_text_font"] = "Friz Quadrata TT",
["big_actortitle_text_size"] = 14,
["fixed_class_color"] = {
nil,
0.4000000357627869,
0.1019607931375504,
},
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["y"] = 3,
["side"] = 8,
},
["spellpercent_text_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_size"] = 10,
["actorname_text_spacing"] = 11,
["percent_text_font"] = "Friz Quadrata TT",
["big_actorname_text_size"] = 14,
["actorname_text_color"] = {
0.90196078431373,
[3] = 0.92156862745098,
},
["cast_incombat"] = {
125,
15,
},
["quest_enabled"] = true,
["percent_text_show_decimals"] = false,
["quest_color_enabled"] = true,
["health_incombat"] = {
125,
10,
},
["health"] = {
125,
10,
},
["spellpercent_text_outline"] = "NONE",
["spellname_text_font"] = "Friz Quadrata TT",
["spellpercent_text_enabled"] = false,
["percent_show_health"] = false,
["level_text_enabled"] = false,
},
["global_health_width"] = 140,
},
["indicator_quest"] = false,
["aura_y_offset"] = 20,
["use_ui_parent"] = true,
["aura_show_defensive_cd"] = true,
["expansion_triggerwipe"] = {
[9] = true,
[8] = true,
},
["show_aggro_glow"] = false,
["cast_statusbar_color_nointerrupt"] = {
0.96470588235294,
1,
0.9843137254902,
1,
},
["show_interrupt_author"] = false,
["border_thickness"] = 1.100000023841858,
["resources_settings"] = {
["chr"] = {
["Player-3676-0D98B2A2"] = "Chi",
["Player-11-0E5C3449"] = "Chi",
["Player-76-0BA72A37"] = "Chi",
["Player-76-0BC23AB2"] = "Chi",
["Player-76-0BB4A4DE"] = "SoulShards",
["Player-1071-0D8B9495"] = "Chi",
["Player-1071-0D6B24AA"] = "Chi",
["Player-76-0B991BFD"] = "Chi",
["Player-1071-0D5A1C3A"] = "Chi",
["Player-76-0BB706E0"] = "Chi",
["Player-11-0E140B20"] = "Chi",
["Player-1071-0D50A441"] = "Chi",
["Player-1071-0D5104CF"] = "Chi",
["Player-1071-0D5B5266"] = "Chi",
["Player-3675-0A516FAE"] = "Chi",
["Player-76-0B990C65"] = "Essence",
["Player-76-0B986AD7"] = "Chi",
["Player-3676-0DD9A3D1"] = "Chi",
},
},
["npc_cache"] = {
[75829] = {
"Nhallish",
"Shadowmoon Burial Grounds",
"enUS",
},
[63106] = {
"Sik'thik Swarmer",
"Siege of Niuzao Temple",
"enUS",
},
[109908] = {
"Nightmare Abomination",
"Darkheart Thicket",
"enUS",
},
[110995] = {
"Ranger General Feleor",
"Black Rook Hold",
"enUS",
},
[213806] = {
"Splotch",
"Throne of the Tides",
"enUS",
},
[207796] = {
"Burning Colossus",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
"enUS",
},
[64353] = {
"Set'thik Gale-Slicer",
"Heart of Fear",
"enUS",
},
[11261] = {
"Doctor Theolen Krastinov",
"Scholomance",
"enUS",
},
[97185] = {
"The Grimewalker",
"Maw of Souls",
"enUS",
},
[61444] = {
"Ming the Cunning",
"Mogu'shan Palace",
"enUS",
},
[99359] = {
"Rotheart Keeper",
"Darkheart Thicket",
"enUS",
},
[95779] = {
"Festerhide Grizzly",
"Darkheart Thicket",
"enUS",
},
[95843] = {
"King Haldor",
"Halls of Valor",
"enUS",
},
[131585] = {
"Enthralled Guard",
"Waycrest Manor",
"enUS",
},
[58823] = {
"Scholomance Neophyte",
"Scholomance",
"enUS",
},
[131009] = {
"Spirit of Gold",
"Atal'Dazar",
"enUS",
},
[99360] = {
"Vilethorn Blossom",
"Darkheart Thicket",
"enUS",
},
[59974] = {
"Mysticallx",
"Scarlet Monastery",
"enUS",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
"enUS",
},
[96611] = {
"Angerhoof Bull",
"Halls of Valor",
"enUS",
},
[10470] = {
"Scholomance Neophyte",
"Scholomance",
"enUS",
},
[10478] = {
"Splintered Skeleton",
"Scholomance",
"enUS",
},
[10486] = {
"Risen Warrior",
"Scholomance",
"enUS",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
"enUS",
},
[10502] = {
"Lady Illucia Barov",
"Scholomance",
"enUS",
},
[99233] = {
"Ember",
"Vault of the Wardens",
"enUS",
},
[61445] = {
"Haiyan the Unstoppable",
"Mogu'shan Palace",
"enUS",
},
[102430] = {
"Tarspitter Slug",
"Neltharion's Lair",
"enUS",
},
[84400] = {
"Flourishing Ancient",
"The Everbloom",
"enUS",
},
[61701] = {
"Sik'thik Warrior",
"Siege of Niuzao Temple",
"enUS",
},
[58664] = {
"Instructor Chillheart's Phylactery",
"Scholomance",
"enUS",
},
[59751] = {
"Shado-Pan Warden",
"Shado-Pan Monastery",
"enUS",
},
[58856] = {
"Haunting Sha",
"Temple of the Jade Serpent",
"enUS",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
"enUS",
},
[117776] = {
"Shadow Council Warlock",
"Tomb of Sargeras",
"enUS",
},
[56906] = {
"Saboteur Kip'tilak",
"Gate of the Setting Sun",
"enUS",
},
[10678] = {
"Plagued Hatchling",
"Scholomance",
"enUS",
},
[200131] = {
"Sha-Touched Guardian",
"Temple of the Jade Serpent",
"enUS",
},
[59080] = {
"Darkmaster Gandling",
"Scholomance",
"enUS",
},
[200387] = {
"Shambling Infester",
"Temple of the Jade Serpent",
"enUS",
},
[109017] = {
"Cordana Felsong",
"Vault of the Wardens",
"enUS",
},
[213942] = {
"Sludge",
"Throne of the Tides",
"enUS",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
"enUS",
},
[64355] = {
"Kor'thik Silentwing",
"Heart of Fear",
"enUS",
},
[62405] = {
"Sra'thik Amber-Trapper",
"Heart of Fear",
"enUS",
},
[59368] = {
"Krastinovian Carver",
"Scholomance",
"enUS",
},
[59464] = {
"Hopper",
"Stormstout Brewery",
"enUS",
},
[105629] = {
"Wyrmtongue Scavenger",
"The Arcway",
"enUS",
},
[60583] = {
"Protector Kaolan",
"Terrace of Endless Spring",
"enUS",
},
[61670] = {
"Sik'thik Demolisher",
"Siege of Niuzao Temple",
"enUS",
},
[58633] = {
"Instructor Chillheart",
"Scholomance",
"enUS",
},
[118289] = {
"Maiden of Vigilance",
"Tomb of Sargeras",
"enUS",
},
[75451] = {
"Defiled Spirit",
"Shadowmoon Burial Grounds",
"enUS",
},
[56747] = {
"Gu Cloudstrike",
"Shado-Pan Monastery",
"enUS",
},
[131849] = {
"Crazed Marksman",
"Waycrest Manor",
"enUS",
},
[116691] = {
"Belac",
"Tomb of Sargeras",
"enUS",
},
[56875] = {
"Krik'thik Demolisher",
"Gate of the Setting Sun",
"enUS",
},
[60999] = {
"Sha of Fear",
"Terrace of Endless Spring",
"enUS",
},
[98533] = {
"Foul Mother",
"Vault of the Wardens",
"enUS",
},
[131850] = {
"Maddened Survivalist",
"Waycrest Manor",
"enUS",
},
[66181] = {
"Zar'thik Supplicant",
"Heart of Fear",
"enUS",
},
[75452] = {
"Bonemaw",
"Shadowmoon Burial Grounds",
"enUS",
},
[40923] = {
"Unstable Corruption",
"Throne of the Tides",
"enUS",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
"enUS",
},
[135048] = {
"Gorestained Piglet",
"Waycrest Manor",
"enUS",
},
[99365] = {
"Taintheart Stalker",
"Darkheart Thicket",
"enUS",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
"enUS",
},
[118930] = {
"Ixallon the Soulbreaker",
"Tomb of Sargeras",
"enUS",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
"enUS",
},
[135049] = {
"Dreadwing Raven",
"Waycrest Manor",
"enUS",
},
[139269] = {
"Gloom Horror",
"Waycrest Manor",
"enUS",
},
[58826] = {
"Zao Sunseeker",
"Temple of the Jade Serpent",
"enUS",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
"enUS",
},
[56876] = {
"Krik'thik Sapper",
"Gate of the Setting Sun",
"enUS",
},
[82039] = {
"Rockspine Stinger",
"Draenor",
"enUS",
},
[209090] = {
"Tindral Sageswift",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[105952] = {
"Withered Manawraith",
"The Arcway",
"enUS",
},
[117269] = {
"Kil'jaeden",
"Tomb of Sargeras",
"enUS",
},
[136330] = {
"Soul Thorns",
"Waycrest Manor",
"enUS",
},
[59242] = {
"Woven Boneguard",
"Scholomance",
"enUS",
},
[64453] = {
"Set'thik Windblade",
"Heart of Fear",
"enUS",
},
[83894] = {
"Dulhu",
"The Everbloom",
"enUS",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[103459] = {
"Rockback Snapper",
"Neltharion's Lair",
"enUS",
},
[60585] = {
"Elder Regail",
"Terrace of Endless Spring",
"enUS",
},
[98728] = {
"Acidic Bile",
"The Arcway",
"enUS",
},
[56589] = {
"Striker Ga'dok",
"Gate of the Setting Sun",
"enUS",
},
[59722] = {
"Pile of Corpses",
"Eastern Kingdoms",
"enUS",
},
[56717] = {
"Hoptallus",
"UNKNOWN",
"enUS",
},
[61928] = {
"Sik'thik Guardian",
"Siege of Niuzao Temple",
"enUS",
},
[62983] = {
"Lei Shi",
"Terrace of Endless Spring",
"enUS",
},
[56877] = {
"Raigonn",
"Gate of the Setting Sun",
"enUS",
},
[59051] = {
"Strife",
"Temple of the Jade Serpent",
"enUS",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
"enUS",
},
[65317] = {
"Xiang",
"Temple of the Jade Serpent",
"enUS",
},
[10471] = {
"Scholomance Acolyte",
"Scholomance",
"enUS",
},
[64358] = {
"Set'thik Tempest",
"Heart of Fear",
"enUS",
},
[10487] = {
"Risen Protector",
"Scholomance",
"enUS",
},
[10495] = {
"Diseased Ghoul",
"Scholomance",
"enUS",
},
[64454] = {
"Zar'thik Augurer",
"Heart of Fear",
"enUS",
},
[59467] = {
"Candlestick Mage",
"Scholomance",
"enUS",
},
[102566] = {
"Grimhorn the Enslaver",
"Vault of the Wardens",
"enUS",
},
[98538] = {
"Lady Velandras Ravencrest",
"Black Rook Hold",
"enUS",
},
[62632] = {
"Sik'thik Engineer",
"Siege of Niuzao Temple",
"enUS",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[64902] = {
"Kor'thik Fleshrender",
"Heart of Fear",
"enUS",
},
[97068] = {
"Storm Drake",
"Halls of Valor",
"enUS",
},
[61929] = {
"Sik'thik Amber-Weaver",
"Siege of Niuzao Temple",
"enUS",
},
[102375] = {
"Runecarver Slave",
"Maw of Souls",
"enUS",
},
[63048] = {
"Kor'thik Slicer",
"Pandaria",
"enUS",
},
[105636] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[100713] = {
"Rockbait Fisher",
"Neltharion's Lair",
"enUS",
},
[65414] = {
"Ethereal Sha",
"Shado-Pan Monastery",
"enUS",
},
[103271] = {
"Kraxa",
"Neltharion's Lair",
"enUS",
},
[131863] = {
"Raal the Gluttonous",
"Waycrest Manor",
"enUS",
},
[99307] = {
"Skjal",
"Maw of Souls",
"enUS",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
"enUS",
},
[63592] = {
"Set'thik Gustwing",
"Heart of Fear",
"enUS",
},
[198998] = {
"Tyr, the Infinite Keeper",
"Dawn of the Infinite",
"enUS",
},
[62633] = {
"Sik'thik Builder",
"Siege of Niuzao Temple",
"enUS",
},
[98732] = {
"Plagued Rat",
"The Arcway",
"enUS",
},
[73349] = {
"Tormented Initiate",
"Siege of Orgrimmar",
"enUS",
},
[75459] = {
"Plagued Bat",
"Shadowmoon Burial Grounds",
"enUS",
},
[56719] = {
"Sha of Violence",
"Shado-Pan Monastery",
"enUS",
},
[205265] = {
"Time-Displaced Trooper",
"Dawn of the Infinite",
"enUS",
},
[59884] = {
"Fallen Crusader",
"Scarlet Monastery",
"enUS",
},
[59980] = {
"Meat Graft",
"Scholomance",
"enUS",
},
[199000] = {
"Chrono-Lord Deios",
"Dawn of the Infinite",
"enUS",
},
[39616] = {
"Naz'jar Invader",
"Throne of the Tides",
"enUS",
},
[98733] = {
"Withered Fiend",
"The Arcway",
"enUS",
},
[59213] = {
"Woven Boneguard",
"Scholomance",
"enUS",
},
[95920] = {
"Animated Storm",
"Eye of Azshara",
"enUS",
},
[75652] = {
"Void Spawn",
"Shadowmoon Burial Grounds",
"enUS",
},
[62442] = {
"Tsulong",
"Terrace of Endless Spring",
"enUS",
},
[134041] = {
"Infected Peasant",
"Waycrest Manor",
"enUS",
},
[203861] = {
"Horde Destroyer",
"Dawn of the Infinite",
"enUS",
},
[63593] = {
"Set'thik Zephyrian",
"Heart of Fear",
"enUS",
},
[98542] = {
"Amalgam of Souls",
"Black Rook Hold",
"enUS",
},
[99629] = {
"Bitterbrine Scavenger",
"Eye of Azshara",
"enUS",
},
[120153] = {
"Eonic Defender",
"Tomb of Sargeras",
"enUS",
},
[129552] = {
"Monzumi",
"Atal'Dazar",
"enUS",
},
[98926] = {
"Shadow Hunter",
"Vault of the Wardens",
"enUS",
},
[120473] = {
"Tidescale Combatant",
"Tomb of Sargeras",
"enUS",
},
[59789] = {
"Thalnos the Soulrender",
"Scarlet Monastery",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
"enUS",
},
[97200] = {
"Seacursed Soulkeeper",
"Maw of Souls",
"enUS",
},
[122967] = {
"Priestess Alun'za",
"Atal'Dazar",
"enUS",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
"enUS",
},
[127315] = {
"Reanimation Totem",
"Atal'Dazar",
"enUS",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
"enUS",
},
[77700] = {
"Shadowmoon Exhumer",
"Shadowmoon Burial Grounds",
"enUS",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
"enUS",
},
[81984] = {
"Gnarlroot",
"The Everbloom",
"enUS",
},
[122968] = {
"Yazma",
"Atal'Dazar",
"enUS",
},
[100526] = {
"Tormented Bloodseeker",
"Darkheart Thicket",
"enUS",
},
[105705] = {
"Bound Energy",
"Court of Stars",
"enUS",
},
[59598] = {
"Lesser Sha",
"Temple of the Jade Serpent",
"enUS",
},
[96754] = {
"Harbaron",
"Maw of Souls",
"enUS",
},
[62795] = {
"Sik'thik Warden",
"Siege of Niuzao Temple",
"enUS",
},
[121498] = {
"Twilight Soul",
"Tomb of Sargeras",
"enUS",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
"enUS",
},
[97202] = {
"Olmyr the Enlightened",
"Halls of Valor",
"enUS",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
"enUS",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
"enUS",
},
[59982] = {
"Meat Graft",
"Scholomance",
"enUS",
},
[200926] = {
"Igira the Cruel",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[105706] = {
"Priestess of Misery",
"The Arcway",
"enUS",
},
[10432] = {
"Vectus",
"Scholomance",
"enUS",
},
[73226] = {
"Lesser Sha Puddle",
"Siege of Orgrimmar",
"enUS",
},
[63275] = {
"Corrupted Protector",
"Terrace of Endless Spring",
"enUS",
},
[10472] = {
"Scholomance Occultist",
"Scholomance",
"enUS",
},
[10480] = {
"Unstable Corpse",
"Scholomance",
"enUS",
},
[10488] = {
"Risen Construct",
"Scholomance",
"enUS",
},
[64458] = {
"Kor'thik Warsinger",
"Heart of Fear",
"enUS",
},
[61453] = {
"Mu'Shiba",
"Mogu'shan Palace",
"enUS",
},
[11551] = {
"Necrofiend",
"Scholomance",
"enUS",
},
[122970] = {
"Shadowblade Stalker",
"Atal'Dazar",
"enUS",
},
[59503] = {
"Brittle Skeleton",
"Scholomance",
"enUS",
},
[101679] = {
"Dreadsoul Poisoner",
"Darkheart Thicket",
"enUS",
},
[96756] = {
"Ymiron, the Fallen King",
"Maw of Souls",
"enUS",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
"enUS",
},
[120477] = {
"Deep Stalker",
"Tomb of Sargeras",
"enUS",
},
[56754] = {
"Azure Serpent",
"Shado-Pan Monastery",
"enUS",
},
[112741] = {
"Wrathguard Decimator",
"Assault on Violet Hold",
"enUS",
},
[100529] = {
"Hatespawn Slime",
"Darkheart Thicket",
"enUS",
},
[120158] = {
"Volatile Corruption",
"Tomb of Sargeras",
"enUS",
},
[59184] = {
"Jandice Barov",
"Scholomance",
"enUS",
},
[205151] = {
"Tyr's Vanguard",
"Dawn of the Infinite",
"enUS",
},
[91003] = {
"Rokmora",
"Neltharion's Lair",
"enUS",
},
[125977] = {
"Reanimation Totem",
"Atal'Dazar",
"enUS",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
"enUS",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
"enUS",
},
[119072] = {
"The Desolate Host",
"Tomb of Sargeras",
"enUS",
},
[117154] = {
"Razorjaw Acolyte",
"Tomb of Sargeras",
"enUS",
},
[99891] = {
"Storm Drake",
"Halls of Valor",
"enUS",
},
[91004] = {
"Ularogg Cragshaper",
"Neltharion's Lair",
"enUS",
},
[103344] = {
"Oakheart",
"Darkheart Thicket",
"enUS",
},
[96247] = {
"Vileshard Crawler",
"Neltharion's Lair",
"enUS",
},
[56915] = {
"Sun",
"Temple of the Jade Serpent",
"enUS",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[77130] = {
"Sargerei Ritualist",
"Auchindoun",
"enUS",
},
[98677] = {
"Rook Spiderling",
"Black Rook Hold",
"enUS",
},
[59153] = {
"Rattlegore",
"Scholomance",
"enUS",
},
[99956] = {
"Fel-Infused Fury",
"Vault of the Wardens",
"enUS",
},
[91005] = {
"Naraxas",
"Neltharion's Lair",
"enUS",
},
[207969] = {
"Horde Raider",
"Dawn of the Infinite",
"enUS",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
"enUS",
},
[77131] = {
"Sargerei Spirit-Tender",
"Auchindoun",
"enUS",
},
[67093] = {
"Sik'thik Battle-Mender",
"Siege of Niuzao Temple",
"enUS",
},
[102962] = {
"Nightmare Abomination",
"Darkheart Thicket",
"enUS",
},
[63853] = {
"Zar'thik Supplicant",
"Heart of Fear",
"enUS",
},
[36296] = {
"Apothecary Hummel",
"Shadowfang Keep",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
"enUS",
},
[122847] = {
"Umbral Priestess",
"Tomb of Sargeras",
"enUS",
},
[56884] = {
"Taran Zhu",
"Shado-Pan Monastery",
"enUS",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
"enUS",
},
[77132] = {
"Sargerei Zealot",
"Auchindoun",
"enUS",
},
[95674] = {
"Fenryr",
"Halls of Valor",
"enUS",
},
[120482] = {
"Tidescale Seacaller",
"Tomb of Sargeras",
"enUS",
},
[97081] = {
"King Bjorn",
"Halls of Valor",
"enUS",
},
[61392] = {
"Harthak Flameseeker",
"Mogu'shan Palace",
"enUS",
},
[81864] = {
"Dreadpetal",
"Draenor",
"enUS",
},
[62511] = {
"Amber-Shaper Un'sok",
"Heart of Fear",
"enUS",
},
[62543] = {
"Blade Lord Ta'yak",
"Heart of Fear",
"enUS",
},
[92350] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[77133] = {
"Sargerei Hoplite",
"Auchindoun",
"enUS",
},
[58803] = {
"Residual Hatred",
"Shado-Pan Monastery",
"enUS",
},
[91008] = {
"Rockbound Pelter",
"Neltharion's Lair",
"enUS",
},
[98425] = {
"Unstable Amalgamation",
"The Arcway",
"enUS",
},
[10433] = {
"Marduk Blackpool",
"Scholomance",
"enUS",
},
[98681] = {
"Rook Spinner",
"Black Rook Hold",
"enUS",
},
[57109] = {
"Minion of Doubt",
"Temple of the Jade Serpent",
"enUS",
},
[118374] = {
"Captain Yathae Moonstrike",
"Tomb of Sargeras",
"enUS",
},
[10481] = {
"Reanimated Corpse",
"Scholomance",
"enUS",
},
[10489] = {
"Risen Guard",
"Scholomance",
"enUS",
},
[97083] = {
"King Ranulf",
"Halls of Valor",
"enUS",
},
[10505] = {
"Instructor Malicia",
"Scholomance",
"enUS",
},
[122850] = {
"Umbral Guard",
"Tomb of Sargeras",
"enUS",
},
[98362] = {
"Troubled Soul",
"Black Rook Hold",
"enUS",
},
[98426] = {
"Unstable Ooze",
"The Arcway",
"enUS",
},
[105651] = {
"Dreadborne Seer",
"The Arcway",
"enUS",
},
[98810] = {
"Wrathguard Bladelord",
"Black Rook Hold",
"enUS",
},
[122851] = {
"Umbral Archer",
"Tomb of Sargeras",
"enUS",
},
[214117] = {
"Stormflurry Totem",
"Throne of the Tides",
"enUS",
},
[135474] = {
"Thistle Acolyte",
"Waycrest Manor",
"enUS",
},
[76177] = {
"Soulbinder Nyami",
"Auchindoun",
"enUS",
},
[113197] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[207341] = {
"Blistering Spear",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[213607] = {
"Deep Sea Murloc",
"Throne of the Tides",
"enUS",
},
[14861] = {
"Blood Steward of Kirtonos",
"Scholomance",
"enUS",
},
[56439] = {
"Sha of Doubt",
"Temple of the Jade Serpent",
"enUS",
},
[211306] = {
"Fiery Vines",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[96574] = {
"Stormforged Sentinel",
"Halls of Valor",
"enUS",
},
[92610] = {
"Understone Drummer",
"Neltharion's Lair",
"enUS",
},
[56631] = {
"Hopling",
"UNKNOWN",
"enUS",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
"enUS",
},
[91332] = {
"Stoneclaw Hunter",
"Neltharion's Lair",
"enUS",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
"enUS",
},
[58198] = {
"Shado-Pan Disciple",
"Shado-Pan Monastery",
"enUS",
},
[64368] = {
"Apparition of Fear",
"Terrace of Endless Spring",
"enUS",
},
[97087] = {
"Valarjar Champion",
"Halls of Valor",
"enUS",
},
[40935] = {
"Gilgoblin Hunter",
"Throne of the Tides",
"enUS",
},
[98366] = {
"Ghostly Retainer",
"Black Rook Hold",
"enUS",
},
[56472] = {
"Fragrant Lotus",
"Shado-Pan Monastery",
"enUS",
},
[59605] = {
"Sodden Hozen Brawler",
"Pandaria",
"enUS",
},
[91781] = {
"Hatecoil Warrior",
"Eye of Azshara",
"enUS",
},
[206068] = {
"Temporal Fusion",
"Dawn of the Infinite",
"enUS",
},
[56792] = {
"Figment of Doubt",
"Temple of the Jade Serpent",
"enUS",
},
[59893] = {
"Empowering Spirit",
"Scarlet Monastery",
"enUS",
},
[102395] = {
"Infiltrator Assassin",
"Assault on Violet Hold",
"enUS",
},
[105720] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[57080] = {
"Corrupted Scroll",
"Temple of the Jade Serpent",
"enUS",
},
[91782] = {
"Hatecoil Crusher",
"Eye of Azshara",
"enUS",
},
[206070] = {
"Chronaxie",
"Dawn of the Infinite",
"enUS",
},
[11257] = {
"Scholomance Handler",
"Scholomance",
"enUS",
},
[40936] = {
"Faceless Watcher",
"Throne of the Tides",
"enUS",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
"enUS",
},
[63570] = {
"Sra'thik Pool-Tender",
"Heart of Fear",
"enUS",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[56473] = {
"Flying Snow",
"Shado-Pan Monastery",
"enUS",
},
[91783] = {
"Hatecoil Stormweaver",
"Eye of Azshara",
"enUS",
},
[58807] = {
"Vestige of Hatred",
"Shado-Pan Monastery",
"enUS",
},
[99200] = {
"Dresaron",
"Darkheart Thicket",
"enUS",
},
[102397] = {
"Wrathlord Bulwark",
"Assault on Violet Hold",
"enUS",
},
[101438] = {
"Vileshard Chunk",
"Neltharion's Lair",
"enUS",
},
[121003] = {
"Rez the Tombwatcher",
"Tomb of Sargeras",
"enUS",
},
[102781] = {
"Fel Bat Pup",
"Black Rook Hold",
"enUS",
},
[91784] = {
"Warlord Parjesh",
"Eye of Azshara",
"enUS",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
"enUS",
},
[10498] = {
"Spectral Tutor",
"Scholomance",
"enUS",
},
[10506] = {
"Kirtonos the Herald",
"Scholomance",
"enUS",
},
[97219] = {
"Solsten",
"Halls of Valor",
"enUS",
},
[102398] = {
"Blazing Infernal",
"Assault on Violet Hold",
"enUS",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
"enUS",
},
[121004] = {
"Razorjaw Myrmidon",
"Tomb of Sargeras",
"enUS",
},
[99649] = {
"Dreadlord Mendacius",
"Vault of the Wardens",
"enUS",
},
[105915] = {
"Nightborne Reclaimer",
"The Arcway",
"enUS",
},
[212981] = {
"Hapless Assistant",
"The Everbloom",
"enUS",
},
[91785] = {
"Wandering Shellback",
"Eye of Azshara",
"enUS",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
"enUS",
},
[56890] = {
"Krik'thik Infiltrator",
"Gate of the Setting Sun",
"enUS",
},
[40586] = {
"Lady Naz'jar",
"Throne of the Tides",
"enUS",
},
[76057] = {
"Carrion Worm",
"Shadowmoon Burial Grounds",
"enUS",
},
[98691] = {
"Risen Scout",
"Black Rook Hold",
"enUS",
},
[91786] = {
"Gritslime Snail",
"Eye of Azshara",
"enUS",
},
[131527] = {
"Lord Waycrest",
"Waycrest Manor",
"enUS",
},
[61398] = {
"Xin the Weaponmaster",
"Mogu'shan Palace",
"enUS",
},
[102336] = {
"Portal Keeper",
"Assault on Violet Hold",
"enUS",
},
[100354] = {
"Grasping Tentacle",
"Maw of Souls",
"enUS",
},
[59480] = {
"Brittle Skeleton",
"Scholomance",
"enUS",
},
[59544] = {
"The Nodding Tiger",
"Temple of the Jade Serpent",
"enUS",
},
[98756] = {
"Arcane Anomaly",
"The Arcway",
"enUS",
},
[117782] = {
"Eredar Bloodmage",
"Tomb of Sargeras",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
"enUS",
},
[210172] = {
"Zaqali Juggernaut",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[59800] = {
"Krik'thik Rager",
"Gate of the Setting Sun",
"enUS",
},
[56763] = {
"Regenerating Sha",
"Shado-Pan Monastery",
"enUS",
},
[61910] = {
"Resin Flake",
"Siege of Niuzao Temple",
"enUS",
},
[102337] = {
"Portal Guardian",
"Assault on Violet Hold",
"enUS",
},
[98207] = {
"Nal'tira",
"The Arcway",
"enUS",
},
[116689] = {
"Atrigan",
"Tomb of Sargeras",
"enUS",
},
[200927] = {
"Smolderon",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[210147] = {
"Harbinger of Incineration",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[117264] = {
"Maiden of Valor",
"Tomb of Sargeras",
"enUS",
},
[201222] = {
"Valow, Timesworn Keeper",
"Dawn of the Infinite",
"enUS",
},
[120463] = {
"Undersea Custodian",
"Tomb of Sargeras",
"enUS",
},
[95861] = {
"Hatecoil Oracle",
"Eye of Azshara",
"enUS",
},
[96640] = {
"Valarjar Marksman",
"Halls of Valor",
"enUS",
},
[59193] = {
"Boneweaver",
"Scholomance",
"enUS",
},
[204931] = {
"Fyrakk",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[122963] = {
"Rezan",
"Atal'Dazar",
"enUS",
},
[62358] = {
"Corrupt Droplet",
"Temple of the Jade Serpent",
"enUS",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
"enUS",
},
[61399] = {
"Glintrok Scout",
"Mogu'shan Palace",
"enUS",
},
[96677] = {
"Steeljaw Grizzly",
"Halls of Valor",
"enUS",
},
[96609] = {
"Gildedfur Stag",
"Halls of Valor",
"enUS",
},
[135240] = {
"Soul Essence",
"Kul Tiras",
"enUS",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
"enUS",
},
[76407] = {
"Ner'zhul",
"Shadowmoon Burial Grounds",
"enUS",
},
[59545] = {
"The Golden Beetle",
"Temple of the Jade Serpent",
"enUS",
},
[96584] = {
"Immoliant Fury",
"Vault of the Wardens",
"enUS",
},
[62408] = {
"Zar'thik Battle-Mender",
"Heart of Fear",
"enUS",
},
[102446] = {
"Fel Lord Betrug",
"Assault on Violet Hold",
"enUS",
},
[40925] = {
"Tainted Sentry",
"Throne of the Tides",
"enUS",
},
[56636] = {
"Commander Ri'mok",
"Gate of the Setting Sun",
"enUS",
},
[76444] = {
"Subjugated Soul",
"Shadowmoon Burial Grounds",
"enUS",
},
[102335] = {
"Portal Guardian",
"Assault on Violet Hold",
"enUS",
},
[59801] = {
"Krik'thik Wind Shaper",
"Gate of the Setting Sun",
"enUS",
},
[58810] = {
"Fragment of Hatred",
"Shado-Pan Monastery",
"enUS",
},
[97119] = {
"Shroud Hound",
"Maw of Souls",
"enUS",
},
[40633] = {
"Naz'jar Honor Guard",
"Throne of the Tides",
"enUS",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
"enUS",
},
[63030] = {
"Enslaved Bonesmasher",
"Heart of Fear",
"enUS",
},
[56924] = {
"Inflamed Hozen Brawler",
"Stormstout Brewery",
"enUS",
},
[112739] = {
"Shadowy Overfiend",
"Assault on Violet Hold",
"enUS",
},
[102272] = {
"Felguard Destroyer",
"Assault on Violet Hold",
"enUS",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[99804] = {
"Valarjar Falconer",
"Halls of Valor",
"enUS",
},
[98759] = {
"Vicious Manafang",
"The Arcway",
"enUS",
},
[45620] = {
"Naz'jar Soldier",
"Throne of the Tides",
"enUS",
},
[61240] = {
"Glintrok Skulker",
"Mogu'shan Palace",
"enUS",
},
[64341] = {
"Instructor Zarik",
"Heart of Fear",
"enUS",
},
[96934] = {
"Valarjar Trapper",
"Halls of Valor",
"enUS",
},
[11258] = {
"Frail Skeleton",
"Scholomance",
"enUS",
},
[97097] = {
"Helarjar Champion",
"Maw of Souls",
"enUS",
},
[40577] = {
"Naz'jar Sentinel",
"Throne of the Tides",
"enUS",
},
[116939] = {
"Fallen Avatar",
"Tomb of Sargeras",
"enUS",
},
[102404] = {
"Stoneclaw Grubmaster",
"Neltharion's Lair",
"enUS",
},
[115767] = {
"Mistress Sassz'ine",
"Tomb of Sargeras",
"enUS",
},
[100486] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
"enUS",
},
[101637] = {
"Valarjar Aspirant",
"Halls of Valor",
"enUS",
},
[105699] = {
"Mana Saber",
"Court of Stars",
"enUS",
},
[56541] = {
"Master Snowdrift",
"Shado-Pan Monastery",
"enUS",
},
[62711] = {
"Amber Monstrosity",
"Heart of Fear",
"enUS",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
"enUS",
},
[56637] = {
"Ook-Ook",
"Stormstout Brewery",
"enUS",
},
[76446] = {
"Shadowmoon Dominator",
"Shadowmoon Burial Grounds",
"enUS",
},
[116407] = {
"Harjatan",
"Tomb of Sargeras",
"enUS",
},
[64917] = {
"Sra'thik Ambercaller",
"Heart of Fear",
"enUS",
},
[56765] = {
"Destroying Sha",
"Shado-Pan Monastery",
"enUS",
},
[102277] = {
"Deadeye Decoy",
"Darkheart Thicket",
"enUS",
},
[10901] = {
"Lorekeeper Polkelt",
"Scholomance",
"enUS",
},
[59930] = {
"Empowered Zombie",
"Scarlet Monastery",
"enUS",
},
[63031] = {
"Set'thik Fanatic",
"Heart of Fear",
"enUS",
},
[45672] = {
"Naz'jar Soldier",
"Throne of the Tides",
"enUS",
},
[121011] = {
"Tidescale Witch",
"Tomb of Sargeras",
"enUS",
},
[98205] = {
"Corstilax",
"The Arcway",
"enUS",
},
[96587] = {
"Felsworn Infester",
"Vault of the Wardens",
"enUS",
},
[104246] = {
"Duskwatch Guard",
"Court of Stars",
"enUS",
},
[58108] = {
"Krik'thik Infiltrator",
"Gate of the Setting Sun",
"enUS",
},
[56718] = {
"Hopper",
"Stormstout Brewery",
"enUS",
},
[127879] = {
"Shieldbearer of Zul",
"Atal'Dazar",
"enUS",
},
[10475] = {
"Scholomance Student",
"Scholomance",
"enUS",
},
[10491] = {
"Risen Bonewarder",
"Scholomance",
"enUS",
},
[61337] = {
"Glintrok Ironhide",
"Mogu'shan Palace",
"enUS",
},
[131667] = {
"Soulbound Goliath",
"Waycrest Manor",
"enUS",
},
[10507] = {
"The Ravenian",
"Scholomance",
"enUS",
},
[77042] = {
"Sargerei Defender",
"Auchindoun",
"enUS",
},
[100360] = {
"Grasping Tentacle",
"Maw of Souls",
"enUS",
},
[58201] = {
"Sha Manifestation",
"Shado-Pan Monastery",
"enUS",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
"enUS",
},
[101639] = {
"Valarjar Shieldmaiden",
"Halls of Valor",
"enUS",
},
[59547] = {
"Jiang",
"Temple of the Jade Serpent",
"enUS",
},
[212681] = {
"Vicious Snap Dragon",
"Throne of the Tides",
"enUS",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
"enUS",
},
[56731] = {
"Habanero Brew",
"Stormstout Brewery",
"enUS",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
"enUS",
},
[67177] = {
"Zar'thik Supplicant",
"Heart of Fear",
"enUS",
},
[98954] = {
"Felsworn Myrmidon",
"Vault of the Wardens",
"enUS",
},
[59771] = {
"Zombified Corpse",
"Scarlet Monastery",
"enUS",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
"enUS",
},
[131669] = {
"Jagged Hound",
"Waycrest Manor",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"Draenor",
"enUS",
},
[61945] = {
"Gurthan Iron Maw",
"Mogu'shan Palace",
"enUS",
},
[56862] = {
"Drunken Hozen Brawler",
"Stormstout Brewery",
"enUS",
},
[63032] = {
"Sra'thik Shield Master",
"Heart of Fear",
"enUS",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
"enUS",
},
[61442] = {
"Kuai the Brute",
"Mogu'shan Palace",
"enUS",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
"enUS",
},
[63597] = {
"Coagulated Amber",
"Heart of Fear",
"enUS",
},
[120182] = {
"Tormented Priestess",
"Tomb of Sargeras",
"enUS",
},
[109080] = {
"Inquisitor Tormentorum",
"Vault of the Wardens",
"enUS",
},
[129517] = {
"Reanimated Raptor",
"Atal'Dazar",
"enUS",
},
[61242] = {
"Glintrok Ironhide",
"Mogu'shan Palace",
"enUS",
},
[95886] = {
"Ash'Golm",
"Vault of the Wardens",
"enUS",
},
[102104] = {
"Enslaved Shieldmaiden",
"Maw of Souls",
"enUS",
},
[102270] = {
"Eredar Invader",
"Assault on Violet Hold",
"enUS",
},
[101549] = {
"Arcane Minion",
"Black Rook Hold",
"enUS",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
"enUS",
},
[61434] = {
"Sik'thik Vanguard",
"Siege of Niuzao Temple",
"enUS",
},
[100362] = {
"Grasping Tentacle",
"Maw of Souls",
"enUS",
},
[99188] = {
"Waterlogged Soul Guard",
"Maw of Souls",
"enUS",
},
[61389] = {
"Kargesh Highguard",
"Mogu'shan Palace",
"enUS",
},
[101951] = {
"Shivermaw",
"Assault on Violet Hold",
"enUS",
},
[102302] = {
"Portal Keeper",
"Assault on Violet Hold",
"enUS",
},
[97163] = {
"Cursed Falke",
"Maw of Souls",
"enUS",
},
[97677] = {
"Barbed Spiderling",
"Vault of the Wardens",
"enUS",
},
[98293] = {
"Saltsea Globule",
"Eye of Azshara",
"enUS",
},
[75839] = {
"Vigilant Kaathar",
"Auchindoun",
"enUS",
},
[77812] = {
"Sargerei Soulbinder",
"Auchindoun",
"enUS",
},
[95887] = {
"Glazer",
"Vault of the Wardens",
"enUS",
},
[131545] = {
"Lady Waycrest",
"Waycrest Manor",
"enUS",
},
[59804] = {
"Gripping Hatred",
"Shado-Pan Monastery",
"enUS",
},
[56767] = {
"Shado-Pan Fire Archer",
"Shado-Pan Monastery",
"enUS",
},
[102583] = {
"Fel Scorcher",
"Vault of the Wardens",
"enUS",
},
[61946] = {
"Harthak Stormcaller",
"Mogu'shan Palace",
"enUS",
},
[56863] = {
"Sleepy Hozen Brawler",
"Stormstout Brewery",
"enUS",
},
[64340] = {
"Instructor Maltik",
"Heart of Fear",
"enUS",
},
[56927] = {
"Hozen Party Animal",
"Stormstout Brewery",
"enUS",
},
[198999] = {
"Morchie",
"Dawn of the Infinite",
"enUS",
},
[10503] = {
"Jandice Barov",
"Scholomance",
"enUS",
},
[81522] = {
"Witherbark",
"The Everbloom",
"enUS",
},
[97678] = {
"Aranasi Broodmother",
"Vault of the Wardens",
"enUS",
},
[213770] = {
"Ink of Ozumat",
"Throne of the Tides",
"enUS",
},
[61243] = {
"Gekkan",
"Mogu'shan Palace",
"enUS",
},
[121399] = {
"Inquisitor Sebilus",
"Tomb of Sargeras",
"enUS",
},
[95888] = {
"Cordana Felsong",
"Vault of the Wardens",
"enUS",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
"enUS",
},
[61339] = {
"Glintrok Oracle",
"Mogu'shan Palace",
"enUS",
},
[66413] = {
"Yeasty Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[102282] = {
"Lord Malgath",
"Assault on Violet Hold",
"enUS",
},
[75715] = {
"Reanimated Ritual Bones",
"Shadowmoon Burial Grounds",
"enUS",
},
[100364] = {
"Spirit of Vengeance",
"Vault of the Wardens",
"enUS",
},
[77080] = {
"Sargerei Arbiter",
"Auchindoun",
"enUS",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
"enUS",
},
[56448] = {
"Wise Mari",
"Temple of the Jade Serpent",
"enUS",
},
[113398] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[113699] = {
"Forgotten Spirit",
"The Arcway",
"enUS",
},
[59613] = {
"Professor Slate",
"Scholomance",
"enUS",
},
[73191] = {
"Aqueous Defender",
"Siege of Orgrimmar",
"enUS",
},
[104251] = {
"Duskwatch Sentry",
"Court of Stars",
"enUS",
},
[121400] = {
"Accusator Gnazh",
"Tomb of Sargeras",
"enUS",
},
[64916] = {
"Kor'thik Swarmguard",
"Heart of Fear",
"enUS",
},
[118715] = {
"Reanimated Templar",
"Tomb of Sargeras",
"enUS",
},
[118523] = {
"Huntress Kasparian",
"Tomb of Sargeras",
"enUS",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
"enUS",
},
[120697] = {
"Worshiper of Elune",
"Tomb of Sargeras",
"enUS",
},
[61947] = {
"Kargesh Ribcrusher",
"Mogu'shan Palace",
"enUS",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
"enUS",
},
[203799] = {
"Horde Axe Thrower",
"Dawn of the Infinite",
"enUS",
},
[98208] = {
"Advisor Vandros",
"The Arcway",
"enUS",
},
[115902] = {
"Razorjaw Waverunner",
"Tomb of Sargeras",
"enUS",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
"enUS",
},
[99358] = {
"Rotheart Dryad",
"Darkheart Thicket",
"enUS",
},
[96657] = {
"Blade Dancer Illianna",
"Vault of the Wardens",
"enUS",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
"enUS",
},
[206230] = {
"Infinite Diversionist",
"Dawn of the Infinite",
"enUS",
},
[99033] = {
"Helarjar Mistcaller",
"Maw of Souls",
"enUS",
},
[10477] = {
"Scholomance Necromancer",
"Scholomance",
"enUS",
},
[118460] = {
"Engine of Souls",
"Tomb of Sargeras",
"enUS",
},
[61340] = {
"Glintrok Hexxer",
"Mogu'shan Palace",
"enUS",
},
[64357] = {
"Kor'thik Swarmer",
"Heart of Fear",
"enUS",
},
[174773] = {
"Spiteful Shade",
"Darkheart Thicket",
"enUS",
},
[61436] = {
"Sik'thik Bladedancer",
"Siege of Niuzao Temple",
"enUS",
},
[98792] = {
"Wyrmtongue Scavenger",
"Black Rook Hold",
"enUS",
},
[98368] = {
"Ghostly Protector",
"Black Rook Hold",
"enUS",
},
[91789] = {
"Lady Hatecoil",
"Eye of Azshara",
"enUS",
},
[63594] = {
"Coagulated Amber",
"Heart of Fear",
"enUS",
},
[206063] = {
"Temporal Deviation",
"Dawn of the Infinite",
"enUS",
},
[105682] = {
"Felguard Destroyer",
"The Arcway",
"enUS",
},
[59614] = {
"Bored Student",
"Scholomance",
"enUS",
},
[128435] = {
"Toxic Saurid",
"Atal'Dazar",
"enUS",
},
[64339] = {
"Instructor Tak'thok",
"Heart of Fear",
"enUS",
},
[201756] = {
"Mysticallx",
"Dawn of the Infinite",
"enUS",
},
[96015] = {
"Inquisitor Tormentorum",
"Vault of the Wardens",
"enUS",
},
[76518] = {
"Ritual of Bones",
"Shadowmoon Burial Grounds",
"enUS",
},
[59752] = {
"Shado-Pan Ambusher",
"Shado-Pan Monastery",
"enUS",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
"enUS",
},
[97170] = {
"Hatecoil Wavebinder",
"Eye of Azshara",
"enUS",
},
[98949] = {
"Smashspite the Hateful",
"Black Rook Hold",
"enUS",
},
[56865] = {
"Aqua Dancer",
"Pandaria",
"enUS",
},
[63035] = {
"Zar'thik Zealot",
"Heart of Fear",
"enUS",
},
[71603] = {
"Sha Puddle",
"Siege of Orgrimmar",
"enUS",
},
[136541] = {
"Bile Oozeling",
"Waycrest Manor",
"enUS",
},
[36565] = {
"Apothecary Baxter",
"Shadowfang Keep",
"enUS",
},
[99664] = {
"Restless Soul",
"Black Rook Hold",
"enUS",
},
[120188] = {
"Wailing Soul",
"Tomb of Sargeras",
"enUS",
},
[76263] = {
"Sargerei Magus",
"Auchindoun",
"enUS",
},
[61213] = {
"Krik'thik Conscript",
"Gate of the Setting Sun",
"enUS",
},
[84767] = {
"Twisted Abomination",
"The Everbloom",
"enUS",
},
[10476] = {
"Scholomance Necrolyte",
"Scholomance",
"enUS",
},
[102094] = {
"Risen Swordsman",
"Black Rook Hold",
"enUS",
},
[97043] = {
"Seacursed Slaver",
"Maw of Souls",
"enUS",
},
[10500] = {
"Spectral Teacher",
"Scholomance",
"enUS",
},
[10508] = {
"Ras Frostwhisper",
"Scholomance",
"enUS",
},
[59501] = {
"Reanimated Corpse",
"Scholomance",
"enUS",
},
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
"enUS",
},
[59078] = {
"Failed Student",
"Scholomance",
"enUS",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
"enUS",
},
[59519] = {
"Stout Brew Alemental",
"UNKNOWN",
"enUS",
},
[205212] = {
"Infinite Keeper",
"Dawn of the Infinite",
"enUS",
},
[101839] = {
"Risen Companion",
"Black Rook Hold",
"enUS",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
"enUS",
},
[98770] = {
"Wrathguard Felblade",
"The Arcway",
"enUS",
},
[203678] = {
"Grommash Hellscream",
"Dawn of the Infinite",
"enUS",
},
[106059] = {
"Warp Shade",
"The Arcway",
"enUS",
},
[101008] = {
"Stinging Swarm",
"Black Rook Hold",
"enUS",
},
[102095] = {
"Risen Lancer",
"Black Rook Hold",
"enUS",
},
[119742] = {
"Felguard Invader",
"Tomb of Sargeras",
"enUS",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
"enUS",
},
[97172] = {
"Saltsea Droplet",
"Eye of Azshara",
"enUS",
},
[102351] = {
"Mana Wyrm",
"The Arcway",
"enUS",
},
[96759] = {
"Helya",
"Maw of Souls",
"enUS",
},
[63036] = {
"Kor'thik Extremist",
"Pandaria",
"enUS",
},
[60586] = {
"Elder Asani",
"Terrace of Endless Spring",
"enUS",
},
[121021] = {
"Shadowsworn Invader",
"Tomb of Sargeras",
"enUS",
},
[97171] = {
"Hatecoil Arcanist",
"Eye of Azshara",
"enUS",
},
[1853] = {
"Darkmaster Gandling",
"Scholomance",
"enUS",
},
[127799] = {
"Dazar'ai Honor Guard",
"Atal'Dazar",
"enUS",
},
[62205] = {
"Wing Leader Ner'onok",
"Siege of Niuzao Temple",
"enUS",
},
[95766] = {
"Crazed Razorbeak",
"Darkheart Thicket",
"enUS",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
"enUS",
},
[98963] = {
"Blazing Imp",
"Vault of the Wardens",
"enUS",
},
[65402] = {
"Gurthan Swiftblade",
"Mogu'shan Palace",
"enUS",
},
[97173] = {
"Restless Tides",
"Eye of Azshara",
"enUS",
},
[62397] = {
"Wind Lord Mel'jarak",
"Heart of Fear",
"enUS",
},
[59360] = {
"Meat Graft",
"Scholomance",
"enUS",
},
[62980] = {
"Imperial Vizier Zor'lok",
"Heart of Fear",
"enUS",
},
[11622] = {
"Rattlegore",
"Scholomance",
"enUS",
},
[97365] = {
"Seacursed Mistmender",
"Maw of Souls",
"enUS",
},
[56706] = {
"Krik'thik Bombardier",
"Gate of the Setting Sun",
"enUS",
},
[59520] = {
"Fizzy Brew Alemental",
"UNKNOWN",
"enUS",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
"enUS",
},
[64338] = {
"Instructor Kli'thak",
"Heart of Fear",
"enUS",
},
[120191] = {
"Eternal Soulguard",
"Tomb of Sargeras",
"enUS",
},
[73197] = {
"Lesser Sha Puddle",
"Siege of Orgrimmar",
"enUS",
},
[66100] = {
"Apparition of Terror",
"Terrace of Endless Spring",
"enUS",
},
[98900] = {
"Wyrmtongue Trickster",
"Black Rook Hold",
"enUS",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
"enUS",
},
[101074] = {
"Hatespawn Whelpling",
"Darkheart Thicket",
"enUS",
},
[59808] = {
"Shado-Pan Stormbringer",
"Shado-Pan Monastery",
"enUS",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
"enUS",
},
[61216] = {
"Glintrok Hexxer",
"Mogu'shan Palace",
"enUS",
},
[121790] = {
"Fleetlord Dominator",
"Tomb of Sargeras",
"enUS",
},
[56867] = {
"Fiery Trickster",
"Stormstout Brewery",
"enUS",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
"enUS",
},
[115844] = {
"Goroth",
"Tomb of Sargeras",
"enUS",
},
[63049] = {
"Set'thik Swiftblade",
"Heart of Fear",
"enUS",
},
[77134] = {
"Sargerei Cleric",
"Auchindoun",
"enUS",
},
[10504] = {
"Lord Alexei Barov",
"Scholomance",
"enUS",
},
[117123] = {
"Tidescale Legionnaire",
"Tomb of Sargeras",
"enUS",
},
[102584] = {
"Malignant Defiler",
"Vault of the Wardens",
"enUS",
},
[61247] = {
"Glintrok Greenhorn",
"Mogu'shan Palace",
"enUS",
},
[202789] = {
"Morchie",
"Dawn of the Infinite",
"enUS",
},
[98965] = {
"Kur'talos Ravencrest",
"Black Rook Hold",
"enUS",
},
[101075] = {
"Wormspeaker Devout",
"Neltharion's Lair",
"enUS",
},
[90997] = {
"Mightstone Breaker",
"Neltharion's Lair",
"enUS",
},
[11582] = {
"Scholomance Dark Summoner",
"Scholomance",
"enUS",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
"enUS",
},
[99192] = {
"Shade of Xavius",
"Darkheart Thicket",
"enUS",
},
[59873] = {
"Corrupt Living Water",
"Temple of the Jade Serpent",
"enUS",
},
[98177] = {
"Glayvianna Soulrender",
"Vault of the Wardens",
"enUS",
},
[131847] = {
"Waycrest Reveler",
"Waycrest Manor",
"enUS",
},
[61567] = {
"Vizier Jin'bak",
"Siege of Niuzao Temple",
"enUS",
},
[59553] = {
"The Songbird Queen",
"Temple of the Jade Serpent",
"enUS",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
"enUS",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
"enUS",
},
[120449] = {
"Defensive Countermeasure",
"Tomb of Sargeras",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[95833] = {
"Hyrja",
"Halls of Valor",
"enUS",
},
[58722] = {
"Lilian Voss",
"Scholomance",
"enUS",
},
[100991] = {
"Strangling Roots",
"Darkheart Thicket",
"enUS",
},
[59521] = {
"Bubbling Brew Alemental",
"UNKNOWN",
"enUS",
},
[210150] = {
"Flametouched Enforcer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
"enUS",
},
[59705] = {
"Scarlet Flamethrower",
"Scarlet Monastery",
"enUS",
},
[59726] = {
"Peril",
"Temple of the Jade Serpent",
"enUS",
},
[81638] = {
"Aqueous Globule",
"The Everbloom",
"enUS",
},
[95832] = {
"Valarjar Shieldmaiden",
"Halls of Valor",
"enUS",
},
[60033] = {
"Frenzied Spirit",
"Scarlet Monastery",
"enUS",
},
[100539] = {
"Taintheart Deadeye",
"Darkheart Thicket",
"enUS",
},
[214608] = {
"Screaming Soul",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[120194] = {
"Ghostly Acolyte",
"Tomb of Sargeras",
"enUS",
},
[135052] = {
"Blight Toad",
"Waycrest Manor",
"enUS",
},
[203688] = {
"Horde Grunt",
"Dawn of the Infinite",
"enUS",
},
[40788] = {
"Mindbender Ghur'sha",
"Throne of the Tides",
"enUS",
},
[121473] = {
"Coercitor Nixa",
"Tomb of Sargeras",
"enUS",
},
[58812] = {
"Hateful Essence",
"Shado-Pan Monastery",
"enUS",
},
[62837] = {
"Grand Empress Shek'zeer",
"Heart of Fear",
"enUS",
},
[61387] = {
"Quilen Guardian",
"Mogu'shan Palace",
"enUS",
},
[131823] = {
"Sister Malady",
"Waycrest Manor",
"enUS",
},
[111563] = {
"Duskwatch Guard",
"Court of Stars",
"enUS",
},
[59426] = {
"Bopper",
"Stormstout Brewery",
"enUS",
},
[59458] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[105617] = {
"Eredar Chaosbringer",
"The Arcway",
"enUS",
},
[59522] = {
"Sudsy Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[81737] = {
"Unchecked Growth",
"The Everbloom",
"enUS",
},
[86372] = {
"Melded Berserker",
"The Everbloom",
"enUS",
},
[131824] = {
"Sister Solena",
"Waycrest Manor",
"enUS",
},
[111052] = {
"Silver Serpent",
"The Arcway",
"enUS",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[59359] = {
"Flesh Horror",
"Scholomance",
"enUS",
},
[59746] = {
"Scarlet Centurion",
"Scarlet Monastery",
"enUS",
},
[56658] = {
"Corrupt Droplet",
"Temple of the Jade Serpent",
"enUS",
},
[36272] = {
"Apothecary Frye",
"Shadowfang Keep",
"enUS",
},
[10485] = {
"Risen Aberration",
"Eastern Kingdoms",
"enUS",
},
[131825] = {
"Sister Briar",
"Waycrest Manor",
"enUS",
},
[98696] = {
"Illysanna Ravencrest",
"Black Rook Hold",
"enUS",
},
[61239] = {
"Glintrok Oracle",
"Mogu'shan Palace",
"enUS",
},
[114712] = {
"Runecarver Slave",
"Maw of Souls",
"enUS",
},
[83846] = {
"Yalnu",
"The Everbloom",
"enUS",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
"enUS",
},
[118022] = {
"Infernal Chaosbringer",
"Tomb of Sargeras",
"enUS",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[91001] = {
"Tarspitter Lurker",
"Neltharion's Lair",
"enUS",
},
[56732] = {
"Liu Flameheart",
"Temple of the Jade Serpent",
"enUS",
},
[95772] = {
"Frenzied Nightclaw",
"Darkheart Thicket",
"enUS",
},
[10469] = {
"Scholomance Adept",
"Scholomance",
"enUS",
},
[133361] = {
"Wasting Servant",
"Waycrest Manor",
"enUS",
},
[120516] = {
"Razorjaw Swiftfin",
"Tomb of Sargeras",
"enUS",
},
[207177] = {
"Infinite Watchkeeper",
"Dawn of the Infinite",
"enUS",
},
[63053] = {
"Garalon's Leg",
"Heart of Fear",
"enUS",
},
[91787] = {
"Cove Seagull",
"Eye of Azshara",
"enUS",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
"enUS",
},
[109016] = {
"Invisible Man",
"Vault of the Wardens",
"enUS",
},
[59459] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[10499] = {
"Spectral Researcher",
"Scholomance",
"enUS",
},
[96512] = {
"Archdruid Glaidalis",
"Darkheart Thicket",
"enUS",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
"enUS",
},
[82682] = {
"Archmage Sol",
"The Everbloom",
"enUS",
},
[102400] = {
"Eredar Shadow Mender",
"Assault on Violet Hold",
"enUS",
},
[99801] = {
"Destructor Tentacle",
"Maw of Souls",
"enUS",
},
[105921] = {
"Nightborne Spellsword",
"The Arcway",
"enUS",
},
[100216] = {
"Hatecoil Wrangler",
"Eye of Azshara",
"enUS",
},
[98970] = {
"Latosius",
"Black Rook Hold",
"enUS",
},
[56764] = {
"Consuming Sha",
"Shado-Pan Monastery",
"enUS",
},
[204206] = {
"Horde Farseer",
"Dawn of the Infinite",
"enUS",
},
[104277] = {
"Legion Hound",
"Court of Stars",
"enUS",
},
[98203] = {
"Ivanyr",
"The Arcway",
"enUS",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
"enUS",
},
[61485] = {
"General Pa'valak",
"Siege of Niuzao Temple",
"enUS",
},
[77935] = {
"Sargerei Warden",
"Auchindoun",
"enUS",
},
[56395] = {
"Shado-Pan Novice",
"Shado-Pan Monastery",
"enUS",
},
[128455] = {
"T'lonja",
"Atal'Dazar",
"enUS",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
"enUS",
},
[94960] = {
"Hymdall",
"Halls of Valor",
"enUS",
},
[105876] = {
"Enchanted Broodling",
"The Arcway",
"enUS",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
"enUS",
},
[56766] = {
"Volatile Energy",
"Shado-Pan Monastery",
"enUS",
},
[101976] = {
"Millificent Manastorm",
"Assault on Violet Hold",
"enUS",
},
[122965] = {
"Vol'kaal",
"Atal'Dazar",
"enUS",
},
[75506] = {
"Shadowmoon Loyalist",
"Shadowmoon Burial Grounds",
"enUS",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[59100] = {
"Expired Test Subject",
"Scholomance",
"enUS",
},
[213219] = {
"Congealed Ooze",
"Throne of the Tides",
"enUS",
},
[118728] = {
"Ghastly Bonewarden",
"Tomb of Sargeras",
"enUS",
},
[117769] = {
"Felborne Spellbreaker",
"Tomb of Sargeras",
"enUS",
},
[59460] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[95885] = {
"Tirathon Saltheril",
"Vault of the Wardens",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[73342] = {
"Fallen Pool Tender",
"Siege of Orgrimmar",
"enUS",
},
[61634] = {
"Commander Vo'jak",
"Siege of Niuzao Temple",
"enUS",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
"enUS",
},
[104918] = {
"Vigilant Duskwatch",
"Court of Stars",
"enUS",
},
[59684] = {
"Hozen Party Animal",
"Stormstout Brewery",
"enUS",
},
[63808] = {
"Faintly Glowing Gem",
"Mogu'shan Palace",
"enUS",
},
[118518] = {
"Priestess Lunaspyre",
"Tomb of Sargeras",
"enUS",
},
[58757] = {
"Scholomance Acolyte",
"Scholomance",
"enUS",
},
[104215] = {
"Patrol Captain Gerdo",
"Court of Stars",
"enUS",
},
[71543] = {
"Immerseus",
"Siege of Orgrimmar",
"enUS",
},
[97182] = {
"Night Watch Mariner",
"Maw of Souls",
"enUS",
},
[212778] = {
"Minion of Ghur'sha",
"Throne of the Tides",
"enUS",
},
[105703] = {
"Mana Wyrm",
"Court of Stars",
"enUS",
},
[205790] = {
"Time-Lost Smack-o-Tron",
"Dawn of the Infinite",
"enUS",
},
[208440] = {
"Infinite Slayer",
"Dawn of the Infinite",
"enUS",
},
[92387] = {
"Drums of War",
"Neltharion's Lair",
"enUS",
},
[135234] = {
"Diseased Mastiff",
"Waycrest Manor",
"enUS",
},
[113998] = {
"Mightstone Breaker",
"Neltharion's Lair",
"enUS",
},
[110993] = {
"General Tel'arn",
"Black Rook Hold",
"enUS",
},
[212779] = {
"Umbraclaw",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[99868] = {
"Fenryr",
"Halls of Valor",
"enUS",
},
[102269] = {
"Felstalker Ravener",
"Assault on Violet Hold",
"enUS",
},
[98973] = {
"Skeletal Warrior",
"Maw of Souls",
"enUS",
},
[40765] = {
"Commander Ulthok",
"Throne of the Tides",
"enUS",
},
[76595] = {
"Sargerei Soulpriest",
"Auchindoun",
"enUS",
},
[62402] = {
"Kor'thik Elite Blademaster",
"Heart of Fear",
"enUS",
},
[98206] = {
"General Xakal",
"The Arcway",
"enUS",
},
[39960] = {
"Deep Murloc Drudge",
"Throne of the Tides",
"enUS",
},
[40825] = {
"Erunak Stonespeaker",
"Throne of the Tides",
"enUS",
},
[59461] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[115795] = {
"Abyss Stalker",
"Tomb of Sargeras",
"enUS",
},
[96480] = {
"Viletongue Belcher",
"Vault of the Wardens",
"enUS",
},
[44566] = {
"Ozumat",
"Throne of the Tides",
"enUS",
},
[96608] = {
"Ebonclaw Worg",
"Halls of Valor",
"enUS",
},
[120201] = {
"Spectral Guardian",
"Tomb of Sargeras",
"enUS",
},
[120721] = {
"Lunar Archer",
"Tomb of Sargeras",
"enUS",
},
[120720] = {
"Lunar Guard",
"Tomb of Sargeras",
"enUS",
},
[120851] = {
"Hippogryph Lord Varah",
"Tomb of Sargeras",
"enUS",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
"enUS",
},
[75509] = {
"Sadana Bloodfury",
"Shadowmoon Burial Grounds",
"enUS",
},
[98919] = {
"Seacursed Swiftblade",
"Maw of Souls",
"enUS",
},
[58822] = {
"Risen Guard",
"Eastern Kingdoms",
"enUS",
},
[125828] = {
"Mysticallx",
"Atal'Dazar",
"enUS",
},
[102273] = {
"Doomguard Infiltrator",
"Assault on Violet Hold",
"enUS",
},
},
["indicator_scale"] = 2.490000009536743,
["extra_icon_timer_decimals"] = true,
["aura_grow_direction"] = 3,
["focus_color"] = {
nil,
nil,
nil,
0,
},
["indicator_anchor"] = {
["x"] = 0.09999847412109375,
},
["ignore_softinteract_objects"] = true,
["aggro_modifies"] = {
["health_bar_color"] = false,
},
["minor_height_scale"] = 0.949999988079071,
["aura_padding"] = 2.059999942779541,
["indicator_worldboss"] = false,
["hook_data"] = {
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["Time"] = 1597097268,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\castbar_icon",
["Enabled"] = false,
["Revision"] = 348,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast Bar Icon Settings [P]",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Icon Settings",
["Value"] = "Icon Settings:",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Icon",
["Value"] = true,
["Key"] = "showIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the castbar icon when enabled",
},
{
["Type"] = 4,
["Name"] = "Icon on Left Side",
["Value"] = true,
["Key"] = "iconOnLeftSide",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled it anchor the icon on the left side, right otherwise",
},
{
["Type"] = 4,
["Name"] = "Use Big Icon",
["Value"] = false,
["Key"] = "useFullSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled the icon has the size of the cast bar plus the healthbar",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Fine tune the icon size",
["Min"] = 0,
["Name"] = "Icon Size Offset",
["Value"] = 0,
["Key"] = "iconSizeOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Space between the icon and the cast bar",
["Min"] = -5,
["Name"] = "Icon Padding",
["Value"] = 0,
["Key"] = "iconPadding",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Interrupt Texture",
["Value"] = "Can't Interrupt Texture:",
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Texture",
["Value"] = true,
["Key"] = "showTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled show a texture to tell the cast can't be interrupted",
},
{
["Type"] = 3,
["Name"] = "Texture Path",
["Value"] = "Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON",
["Key"] = "iconTexturePath",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Insert the path for the texture",
},
{
["Type"] = 4,
["Name"] = "Texture Desaturated",
["Value"] = true,
["Key"] = "desaturatedTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enbaled, texture is shown in black & white",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
0.30567157268524,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Select the color of the texture",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture width",
["Min"] = 1,
["Name"] = "Texture Width",
["Value"] = 10,
["Key"] = "textureWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "The texture is set to be the same size as the cast bar, fine tune the height as wanted",
["Min"] = -16,
["Name"] = "Texture Height Mod",
["Value"] = 0,
["Key"] = "textureHeightMod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture position",
["Min"] = -32,
["Name"] = "Texture Position",
["Value"] = 0,
["Key"] = "texturePosition",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust the texture transparency",
["Min"] = 0,
["Name"] = "Texture Alpha",
["Value"] = 1,
["Key"] = "textureAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1547392935,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["Enabled"] = false,
["Revision"] = 50,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Color Automation [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = false\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"green\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * envTable.ExecutePercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        if (healthBar.CurrentHealth / healthBar.CurrentHealthMax <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end        \n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1547406548,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 135358,
["Enabled"] = false,
["Revision"] = 84,
["semver"] = "",
["Author"] = "Ahwa-Azralon",
["Desc"] = "Add extra effects to execute range. See the constructor script for options.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Execute Range [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["Time"] = 1620377377,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_attacking_unit",
["Enabled"] = false,
["Revision"] = 363,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Attacking Specific Unit [Plater]",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 1,
["Name"] = "Color",
["Value"] = {
0.50196078431373,
0.50196078431373,
0,
1,
},
["Key"] = "color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Bar Color",
["Value"] = true,
["Key"] = "changeBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Border Color",
["Value"] = false,
["Key"] = "changeBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Reset Colors",
["Value"] = true,
["Key"] = "resetColors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        --check the unit reaction\n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n            \n        else\n            envTable.HideNameplate (unitFrame)\n            \n        end    \n    end\n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when plater finishes an update on the nameplate\n    --check within the envTable if the healthBar of this nameplate should be hidden\n    if (envTable.IsHidden) then\n        if (unitFrame.healthBar:IsShown()) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.ShowNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.OnlyInOpenWorld = true;\n    envTable.ShowInCombat = true;\n    \n    --consts\n    envTable.REACTION_NEUTRAL = 4;\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        envTable.IsHidden = true\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        envTable.IsHidden = false\n    end\n    \nend\n\n\n\n\n",
},
["Time"] = 1541606242,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 1990989,
["Enabled"] = false,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Hide neutral units, show when selected, see the constructor script for options.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Hide Neutral Units [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["Time"] = 1621935143,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
},
["url"] = "",
["Icon"] = 135426,
["Enabled"] = false,
["Revision"] = 284,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Combo Points [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.IsEnabled) then\n        if (unitFrame.IsSelf) then\n            if (envTable.ShowOnPersonalBar) then\n                envTable.BorderFrame:Show()\n            else\n                envTable.BorderFrame:Hide() \n            end\n        else\n            envTable.BorderFrame:Show()\n        end   \n    end\n    \nend   \n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border color\n    local borderColor = \"yellow\"\n    \n    --size of the border\n    local borderSize = 1\n    \n    --transparency\n    local borderAlpha = 1\n    \n    --enabled (set to false it you only want to use the extra border in other scripts)\n    local isEnabled = true\n    \n    --export border (allow the border to be used by other scripts)\n    --other scripts can use:\n    --unitFrame.healthBar.extraBorder:Show()\n    --unitFrame.healthBar.extraBorder:SetVertexColor (r, g, b)\n    --unitFrame.healthBar.extraBorder:SetBorderSizes (borderSize)\n    local canExportBorder = true\n    \n    --do not add the border to personal bar\n    local noPersonalBar = true\n    \n    --private\n    do\n        \n        local newBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        envTable.BorderFrame = newBorder\n        \n        newBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n        newBorder:UpdateSizes()\n        \n        local r, g, b = DetailsFramework:ParseColors (borderColor)\n        newBorder:SetVertexColor (r, g, b, borderAlpha)\n        \n        envTable.ShowOnPersonalBar = not noPersonalBar\n        \n        if (canExportBorder) then\n            unitFrame.healthBar.extraBorder = newBorder\n        end\n        \n        if (not isEnabled) then\n            envTable.IsEnabled = false\n        else\n            envTable.IsEnabled = true\n        end\n    end\n    \nend\n\n\n",
},
["Time"] = 1622195123,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 133689,
["Enabled"] = false,
["Revision"] = 179,
["semver"] = "",
["Author"] = "Tecno-Azralon",
["Desc"] = "Add another border with more customizations. This border can also be manipulated by other scripts.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Extra Border [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "\n\n-- exported function Plater.UpdatePlateSize() from Plater.lua\n--this is for advanced users which wants to reorder the nameplate frame at their desire\n\n\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --check if there's a type of unit on this nameplate\n    local plateFrame = unitFrame:GetParent()\n    if (not plateFrame.actorType) then\n        return\n    end\n    \n    --get all the frames and cache some variables\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local profile = Plater.db.profile\n    local DB_PLATE_CONFIG = profile.plate_config\n    local isInCombat = Plater.IsInCombat()\n    local actorType = plateFrame.actorType\n    \n    local unitFrame = plateFrame.unitFrame\n    local healthBar = unitFrame.healthBar\n    local castBar = unitFrame.castBar\n    local powerBar = unitFrame.powerBar\n    local buffFrame1 = unitFrame.BuffFrame\n    local buffFrame2 = unitFrame.BuffFrame2\n    \n    --use in combat bars when in pvp\n    if (plateFrame.actorType == ACTORTYPE_ENEMY_PLAYER) then\n        if ((Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") and DB_PLATE_CONFIG.player.pvp_always_incombat) then\n            isInCombat = true\n        end\n    end\n    \n    --get the config for this actor type\n    local plateConfigs = DB_PLATE_CONFIG [actorType]\n    --get the config key based if the player is in combat\n    local castBarConfigKey, healthBarConfigKey, manaConfigKey = Plater.GetHashKey (isInCombat)\n    \n    --get the width and height from what the user set in the options panel\n    local healthBarWidth, healthBarHeight = unitFrame.customHealthBarWidth or plateConfigs [healthBarConfigKey][1], unitFrame.customHealthBarHeight or plateConfigs [healthBarConfigKey][2]\n    local castBarWidth, castBarHeight = unitFrame.customCastBarWidth or plateConfigs [castBarConfigKey][1], unitFrame.customCastBarHeight or plateConfigs [castBarConfigKey][2]\n    local powerBarWidth, powerBarHeight = unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][1], unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][2]\n    \n    --calculate the offset for the cast bar, this is done due to the cast bar be anchored to topleft and topright\n    local castBarOffSetX = (healthBarWidth - castBarWidth) / 2\n    local castBarOffSetY = plateConfigs.castbar_offset\n    \n    --calculate offsets for the power bar\n    local powerBarOffSetX = (healthBarWidth - powerBarWidth) / 2\n    local powerBarOffSetY = 0\n    \n    --calculate the size deviation for pets\n    local unitType = Plater.GetUnitType (plateFrame)\n    if (unitType == \"pet\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.pet_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.pet_width_scale\n        \n    elseif (unitType == \"minus\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.minor_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.minor_width_scale\n    end\n    \n    --unit frame - is set to be the same size as the plateFrame\n    unitFrame:ClearAllPoints()\n    unitFrame:SetAllPoints()\n    \n    --calculates the health bar anchor points\n    --it will always be placed in the center of the nameplate area (where it accepts mouse clicks) \n    local xOffSet = (plateFrame:GetWidth() - healthBarWidth) / 2\n    local yOffSet = (plateFrame:GetHeight() - healthBarHeight) / 2\n    \n    --set the health bar point\n    healthBar:ClearAllPoints()\n    PixelUtil.SetPoint (healthBar, \"topleft\", unitFrame, \"topleft\", xOffSet + profile.global_offset_x, -yOffSet + profile.global_offset_y)\n    PixelUtil.SetPoint (healthBar, \"bottomright\", unitFrame, \"bottomright\", -xOffSet + profile.global_offset_x, yOffSet + profile.global_offset_y)\n    \n    --set the cast bar point and size\n    castBar:ClearAllPoints()\n    PixelUtil.SetPoint (castBar, \"topleft\", healthBar, \"bottomleft\", castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetPoint (castBar, \"topright\", healthBar, \"bottomright\", -castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetHeight (castBar, castBarHeight)\n    PixelUtil.SetSize (castBar.Icon, castBarHeight, castBarHeight)\n    PixelUtil.SetSize (castBar.BorderShield, castBarHeight * 1.4, castBarHeight * 1.4)\n    \n    --set the power bar point and size\n    powerBar:ClearAllPoints()\n    PixelUtil.SetPoint (powerBar, \"topleft\", healthBar, \"bottomleft\", powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetPoint (powerBar, \"topright\", healthBar, \"bottomright\", -powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetHeight (powerBar, powerBarHeight)\n    \n    --power bar are hidden by default, show it if there's a custom size for it\n    if (unitFrame.customPowerBarWidth and unitFrame.customPowerBarHeight) then\n        powerBar:SetUnit (unitFrame.unit)\n    end\n    \n    --aura frames\n    local bf1Anchor = Plater.db.profile.aura_frame1_anchor\n    Plater.SetAnchor (buffFrame1, {side = bf1Anchor.side, x = bf1Anchor.x, y = bf1Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura_grow_direction or 2) == 2)\n    \n    local bf2Anchor = Plater.db.profile.aura_frame2_anchor\n    Plater.SetAnchor (buffFrame2, {side = bf2Anchor.side, x = bf2Anchor.x, y = bf2Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura2_grow_direction or 2) == 2)\n    \nend\n\n\n",
},
["Time"] = 1596791840,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 574574,
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Function Plater.UpdatePlateSize from Plater.lua exported to scritps.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Reorder Nameplate [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --set this to true if you are not using threat colors in the health bar\n    envTable.ForceRefreshNameplateColor = true\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --do nothing if the unit is the player it self\n    if (unitFrame.IsSelf) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    else\n        if (envTable.ForceRefreshNameplateColor) then\n            Plater.RefreshNameplateColor (unitFrame) \n        end\n    end    \n    \nend",
},
["Time"] = 1554138845,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 136207,
["Enabled"] = false,
["Revision"] = 59,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Change the nameplate color when a nameplate does not have the auras set in the constructor script.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Don't Have Aura [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShow = false;\n    envTable.TargetAmount:SetText (\"\")\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when a nameplate is added to the screen check if the player is in combat\n    if (InCombatLockdown()) then\n        --player is in combat, check if can check amount of targets\n        envTable.CanShow = envTable.CanShowTargetAmount();\n        \n    else\n        envTable.CanShow = false; \n    end\n    \n    envTable.TargetAmount:SetText (\"\");\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TargetAmount:SetText (\"\");\n    envTable.CanShow = false;\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --if the script is allowed to show the amount of targets\n    --also check if the unit is in combat\n    if (envTable.CanShow and UnitAffectingCombat (unitId)) then\n        \n        --check if can update the amount of targets following the cooldown set in the constructor script\n        --by default Plater updates the nameplate every 250ms, by default the cooldown is 2, so it'll update the amuont of target every 1/2 of a second\n        envTable.UpdateCooldown = envTable.UpdateCooldown + 1\n        if (envTable.UpdateCooldown < envTable.UpdateInterval) then\n            return\n        else\n            \n            --reset the cooldown interval to check the amount of target again\n            envTable.UpdateCooldown = 0\n            \n            --get the amount of targets\n            local amount;\n            if (envTable.InRaid) then\n                amount = envTable.NumTargetsInRaid (unitFrame)      \n                \n            elseif (envTable.InParty) then\n                amount = envTable.NumTargetsInParty (unitFrame)   \n                \n            else\n                envTable.TargetAmount:SetText (\"\")\n                return\n            end\n            \n            --update the amount text\n            if (amount == 0) then\n                envTable.TargetAmount:SetText (\"\")\n            else\n                envTable.TargetAmount:SetText (amount)\n            end\n            \n        end\n    end\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can show the amount of targets\n    envTable.CanShow = envTable.CanShowTargetAmount();\n    \n    if (not envTable.CanShow) then\n        envTable.TargetAmount:SetText (\"\") \n    end\nend\n\n\n\n\n",
["Constructor"] = "--all gray text like this are comments and do not run as code\n--build the settings and basic functions for the hook\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --declare setting variables:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    local showInRaid = true;\n    local showInDungeon = true;\n    local showInArena = false;\n    local showInBattleground = false;\n    local showInOpenWorld = true;\n    \n    envTable.UpdateInterval = 2; --each 2 updates in the nameplate it'll update the amount of targets\n    \n    local anchor = {\n        side = 6, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 4, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    \n    --frames:\n    \n    --create the text that will show the amount of people targeting the unit\n    if (not  unitFrame.healthBar.TargetAmount) then\n        envTable.TargetAmount = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.TargetAmount, anchor);\n        unitFrame.healthBar.TargetAmount = envTable.TargetAmount\n    end\n    \n    --in case Plater wipes the envTable\n    envTable.TargetAmount = unitFrame.healthBar.TargetAmount\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --private variables (they will be used in the other scripts within this hook)\n    envTable.CanShow = false;\n    envTable.UpdateCooldown = 0;\n    envTable.InRaid = false;\n    envTable.InParty = false;\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    --update the InRaid or InParty proprieties\n    function envTable.UpdateGroupType()\n        if (IsInRaid()) then\n            envTable.InRaid = true;\n            envTable.InParty = false;     \n            \n        elseif (IsInGroup()) then\n            envTable.InRaid = false;\n            envTable.InParty = true;   \n            \n        else\n            envTable.InRaid = false;            \n            envTable.InParty = false;\n        end\n    end\n    \n    --this function controls if the amount of targets can show following the settings in the top of this script\n    function envTable.CanShowTargetAmount()\n        \n        local _, instanceType, difficultyID, _, _, _, _, instanceMapID, instanceGroupSize = GetInstanceInfo()\n        \n        if (showInRaid and instanceType == \"raid\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInDungeon and instanceType == \"party\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInArena and instanceType == \"arena\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInBattleground and instanceType == \"pvp\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInOpenWorld and instanceType == \"none\") then\n            envTable.UpdateGroupType()\n            if (envTable.InRaid or envTable.InParty) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    --get the amount of player targetting the unit in raid or party\n    function envTable.NumTargetsInRaid (unitFrame)\n        local amount = 0\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        return amount\n    end\n    \n    function envTable.NumTargetsInParty()\n        local amount = 0\n        for i = 1, GetNumGroupMembers() - 1 do\n            local unit = \"party\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        local unit = \"playertarget\"\n        if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n            amount = amount + 1\n        end        \n        \n        return amount\n    end\n    \nend",
},
["Time"] = 1548278227,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 1966587,
["Enabled"] = false,
["Revision"] = 182,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show how many raid members are targeting the unit",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Players Targeting a Target [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1608663128,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = false,
["Revision"] = 356,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura Reorder [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["Time"] = 1552354619,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 878211,
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Changes the target color to the color set in the constructor script.",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Current Target Color [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
["enableClassification"] = true,
["targetBorder"] = {
1,
1,
1,
1,
},
["enableBorder"] = true,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateBorder(self, unitFrame)\n    modTable.UpdateClassificationIndicator(self, unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateBorder(self, unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateClassificationIndicator(self, unitFrame)\nend\n\n\n",
["Initialization"] = "function(modTable)\n    local UNITREACTION_HOSTILE = 3\n    local UNITREACTION_NEUTRAL = 4\n    local UNITREACTION_FRIENDLY = 5\n    \n    local ACTORTYPE_FRIENDLY_PLAYER = \"friendlyplayer\"\n    local ACTORTYPE_FRIENDLY_NPC = \"friendlynpc\"\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local ACTORTYPE_ENEMY_NPC = \"enemynpc\"\n    local ACTORTYPE_PLAYER = \"player\"\n    \n    function modTable.UpdateBorder(self, unitFrame)\n        if modTable.config.enableBorder then\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetBorderColor(self, modTable.config.targetBorder)\n            else\n                Plater.SetBorderColor(self, modTable.config.notargetBorder)\n            end\n        end\n    end\n    \n    function modTable.UpdateClassificationIndicator(self, unitFrame)\n        if modTable.config.enableClassification then\n            if self.actorType == ACTORTYPE_ENEMY_NPC then\n                local unitClassification = UnitClassification (self.namePlateUnitToken)\n                if (unitClassification == \"worldboss\") then\n                    modTable.SetClassificationIndicator(unitFrame, \"elite\")\n                elseif (unitClassification == \"rareelite\") then\n                    modTable.SetClassificationIndicator(unitFrame, \"rare\")\n                elseif (unitClassification == \"elite\") then\n                    modTable.SetClassificationIndicator(unitFrame, \"elite\")\n                elseif (unitClassification == \"rare\") then\n                    modTable.SetClassificationIndicator(unitFrame, \"rare\")\n                else\n                    modTable.SetClassificationIndicator(unitFrame, \"none\")\n                end\n            else\n                modTable.SetClassificationIndicator(unitFrame, \"none\")\n            end\n        end\n    end\n    \n    function modTable.SetClassificationIndicator(unitFrame, type)\n        if unitFrame.ClassificationIndicatorType == type then return end\n        unitFrame.ClassificationIndicatorType = type\n        local indicator = unitFrame.ClassificationIndicator\n        if indicator then\n            if type == \"elite\" then\n                indicator:SetTexCoord(0, 0.15, 0.343, 0.609)\n                indicator:Show()\n            elseif type == \"rare\" then\n                indicator:SetTexCoord(0, 0.15, 0.5, 0.78)\n                indicator:Show()\n            elseif type == \"none\" then\n                indicator:Hide()\n            end\n        end\n    end\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    unitFrame.ClassificationIndicator = unitFrame.ClassificationIndicator or \n    Plater:CreateImage(unitFrame.healthBar, \n        [[Interface\\TargetingFrame\\Nameplates]], 14, 13, \"overlay\", {0, 0.15, 0.24, 0.48})\n    Plater.SetAnchor(unitFrame.ClassificationIndicator, {\n            side = 2,\n            x = 0, --x offset\n            y = 0, --y offset\n    })\n    \n    unitFrame.ClassificationIndicator:Hide()\n    unitFrame.ClassificationIndicatorType = \"none\"\nend",
},
["Time"] = 1696420160,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/8nX2H6c7V/1",
["Icon"] = 298586,
["Enabled"] = true,
["Revision"] = 319,
["semver"] = "1.0.0",
["Author"] = "Sanlulpriest-熊猫酒仙",
["Desc"] = "",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Name"] = "Blizz-Style Border&Indicator",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Blizzlike Classification Indicator",
["Value"] = "Blizzlike Classification Indicator",
["Key"] = "CLASSIFICATION",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Enable",
["Value"] = true,
["Key"] = "enableClassification",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank1",
["Value"] = 0,
["Key"] = "BLANK1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Border Color",
["Value"] = "Border Color",
["Key"] = "BORDER_COLOR",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Enable",
["Value"] = true,
["Key"] = "enableBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Target Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "targetBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Notarget Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "notargetBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateShield(unitFrame)\nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateShield(unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    function envTable.updateShield(frame) \n        local castBar = frame.castBar\n        local shield = castBar.BorderShield\n        \n        if not castBar.canInterrupt then\n            shield:Hide()\n        end \n    end\nend\n\n\n",
},
["Time"] = 1622242504,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/JLVY55vqV/1",
["Icon"] = 133504,
["Enabled"] = true,
["Revision"] = 14,
["semver"] = "1.0.0",
["Author"] = "Egraowdh-Illidan",
["Desc"] = "Removes the shield border on uninterruptible casts",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Name"] = "No Castbar Shield",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Player Logon"] = "function ()\n    local DF = _G [\"DetailsFramework\"]\n    Plater.CreateShowAuraIconAnimation =  function (iconFrame)\n        local iconShowInAnimation = DF:CreateAnimationHub (iconFrame)\n        iconFrame.ShowAnimation = iconShowInAnimation\n    end\nend",
},
["Time"] = 1622995996,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/gSQ9tPyO7/1",
["Icon"] = 519384,
["Enabled"] = true,
["Revision"] = 11,
["semver"] = "1.0.0",
["Author"] = "Ariani-Antonidas",
["Desc"] = "",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Name"] = "Disable Aura Show Animation",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --options\n    --custom indicator is a custom icon added by this script\n    envTable.ShowCustomIndicator = true\n    --regular indicator is the indicator row within Plater default indicators\n    envTable.ShowRegularIndicator = false\n    \n    --custom indicator options\n    envTable.Texture = [[Interface\\AddOns\\Plater\\media\\cross_64]]\n    envTable.Width = 16\n    envTable.Height = 16\n    \n    envTable.Anchor = {\n        side = 7, --topright\n        x = envTable.Width / 2, --x offset\n        y = -envTable.Width / 2, --y offset\n    }\n    \n    envTable.UseClassColor = false\n    envTable.Color = \"white\" --only use this color when use class color is false\n    \n    --private\n    envTable.HealerSpecs = {\n        [105] = true, -->  druid resto\n        [270] = true, --> monk mw\n        [65] = true, --> paladin holy\n        [256] = true,  --> priest disc\n        [257] = true,  --> priest holy\n        [264] = true, --> shaman resto\n    }\n    \n    unitFrame.HealerTexture = unitFrame.HealerTexture or Plater:CreateImage (unitFrame.healthBar.FrameOverlay, texture, envTable.Width, envTable.Height, \"overlay\")\n    \n    unitFrame.HealerTexture.width = envTable.Width\n    unitFrame.HealerTexture.height = envTable.Height\n    unitFrame.HealerTexture.texture = envTable.Texture\n    Plater.SetAnchor (unitFrame.HealerTexture, envTable.Anchor)\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    local Details = Details\n    unitFrame.HealerTexture:Hide()\n    \n    if (Details and Details.realversion >= 134) then\n        local spec = Details:GetSpecByGUID (unitFrame.namePlateUnitGUID)\n        if (spec and envTable.HealerSpecs [spec]) then\n            \n            --custom icon indicator\n            if (envTable.ShowCustomIndicator) then\n                unitFrame.HealerTexture:Show()                \n                if (envTable.UseClassColor) then\n                    unitFrame.HealerTexture.vertexcolor = select (2, UnitClass (unitId))\n                else\n                    unitFrame.HealerTexture.vertexcolor = envTable.Color\n                end\n            end\n            \n            --regular indicator from plater\n            if (envTable.ShowRegularIndicator) then\n                Plater.ShowIndicator (unitFrame, envTable.Texture, envTable.Width, envTable.Height) \n            end\n            \n        end\n    end\n    \nend",
},
["Time"] = 1659734036,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/aIlB_UgaU/1",
["Icon"] = "Interface\\AddOns\\Plater\\media\\cross_64",
["Enabled"] = true,
["Revision"] = 106,
["semver"] = "1.0.0",
["Author"] = "Izimode-Azralon",
["Desc"] = "Add a cross icon into the nameplate of healers. Must have Details! Damage Meter installed.",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Name"] = "Healer Indicator",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ActorType == \"enemyplayer\") then\n        Plater:SetFontSize (unitFrame.unitName, Plater.GetConfig (unitFrame).actorname_text_size)\n    end\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    if (IsActiveBattlefieldArena()) then\n        if (unitFrame.ActorType == \"enemyplayer\") then\n            for i = 1, 5 do\n                local unitGUID = UnitGUID (\"arena\" .. i)\n                if (unitGUID == unitFrame.namePlateUnitGUID) then\n                    unitFrame.unitName:SetText (i)\n                    Plater:SetFontSize (unitFrame.unitName, envTable.FontSize)\n                end\n            end\n        end\n    end\nend\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FontSize = 14\n    \nend\n\n\n",
},
["Time"] = 1682251959,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/U9UuVxS2K/1",
["Icon"] = "Interface\\AddOns\\Plater\\media\\x_64",
["Enabled"] = true,
["Revision"] = 35,
["semver"] = "1.0.0",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show the arena enemy number instead of the player name.",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Name"] = "Arena Enemy Number",
["LastHookEdited"] = "Nameplate Removed",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    local classIcon = unitFrame.classIcon\n    if (classIcon) then\n        classIcon:Hide()\n    end\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    local parent = unitFrame\n    local classIcon = parent.classIcon\n    if (not unitFrame.IsSelf and not unitFrame.namePlateNpcId and unitFrame.namePlateUnitReaction >= 5) then\n        local _,class = UnitClass(unitFrame.unit)\n        classIcon.icon:SetTexCoord(unpack(CLASS_ICON_TCOORDS[class]))\n        classIcon:Show()\n        \n        local icon = parent.classIcon.icon\n        if (parent.healthBar:IsVisible()) then\n            icon:ClearAllPoints()\n            icon:SetPoint ('bottom', parent.healthBar, 'top', 0, 0)\n        else\n            icon:ClearAllPoints()\n            icon:SetPoint ('bottom', parent.ActorNameSpecial, 'top', 0, 0)\n        end\n    else\n        classIcon:Hide()\n    end\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    local parent = unitFrame\n    if (not parent.classIcon) then\n        local classIcon = CreateFrame (\"frame\", nil, unitFrame)\n        classIcon:SetFrameLevel (parent:GetFrameLevel() + 5)\n        classIcon:SetPoint ('topleft', parent, 'topleft', 0, 0)\n        parent.classIcon = classIcon\n        \n        local icon = Plater:CreateImage (classIcon, [[Interface\\TargetingFrame\\UI-Classes-Circles]], 25, 25)\n        classIcon.icon = icon\n    end\nend",
},
["Time"] = 1696420182,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/9DJAuod-L/1",
["Icon"] = 2188585,
["Enabled"] = true,
["Revision"] = 362,
["semver"] = "1.0.0",
["Author"] = "Daisukidesu-Moon Guard",
["Desc"] = "Adds class icons to the top of friendly players nameplates.",
["Prio"] = 99,
["Name"] = "Class Icons Friendly Players",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["version"] = 1,
},
{
["OptionsValues"] = {
["y"] = 4,
["hideauras"] = true,
["hidehp"] = true,
["hidename"] = true,
["test"] = false,
["size"] = 32,
},
["HooksTemp"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if modTable.units[unitFrame.namePlateNpcId] or modTable.config.test then\n        if modTable.config.changecolor then\n            Plater.SetNameplateColor (unitFrame, modTable.config.color)\n        end\n        if modTable.config.hidename then\n            unitFrame.healthBar.unitName:Hide()\n        end\n        if modTable.config.hidehp then\n            unitFrame.healthBar.lifePercent:Hide()\n        end\n        if modTable.config.hideauras then\n            unitFrame.BuffFrame:Hide()\n            unitFrame.BuffFrame2:Hide()\n        end\n    end\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    unitFrame.TIF:Hide()\n    \n    local texture\n    \n    if modTable.config.test then\n        texture = modTable.RandomTexture()\n    else\n        texture = modTable.units[unitFrame.namePlateNpcId]\n    end\n    \n    if not texture then return end\n    \n    unitFrame.TIF.t:SetTexture(texture)\n    unitFrame.TIF:Show()\n    \nend\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    \n    modTable.units = {\n        -- war\n        [119052] = GetSpellTexture(236320), -- War Banner\n        -- sham\n        [3527] = GetSpellTexture(5394), -- Healing Stream Totem\n        [5913] = GetSpellTexture(8143), -- Tremor Totem\n        [61245] = GetSpellTexture(192058), -- Capacitor Totem\n        [2630] = GetSpellTexture(2484), -- Earthbind Totem\n        [53006] = GetSpellTexture(98008), -- Spirit Link Totem\n        [59764] = GetSpellTexture(108280), -- Healing Tide Totem\n        [10467] = GetSpellTexture(16191), -- Mana Tide Totem\n        [6112] = GetSpellTexture(8512), -- Windfury Totem\n        [97369] = GetSpellTexture(192222), -- Liquid Magma Totem\n        [100943] = GetSpellTexture(198838), -- Earthen Wall Totem\n        [78001] = GetSpellTexture(157153), -- Cloudburst Totem\n        [104818] = GetSpellTexture(207399), -- Ancestral Protection Totem\n        [60561] = GetSpellTexture(51485), -- Earthgrab Totem\n        [105427] = GetSpellTexture(204330), -- Skyfury Totem\n        [5925] = GetSpellTexture(204336), -- Grounding Totem\n        [105451] = GetSpellTexture(204331), -- Counterstrike Totem\n        [97285] = GetSpellTexture(192077), -- Wind Rush Totem\n        [166523] = GetSpellTexture(324386), -- Vesper Totem\n        -- tazavesh\n        [179733] = GetSpellTexture(355132),  -- Invigorating Fish Stick\n    }\n    \n    modTable.RandomTexture = function()\n        local random = random(19)\n        local i = 0\n        for k, v in pairs(modTable.units) do\n            i = i+1\n            if i == random then\n                return v\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if not unitFrame.TIF then\n        -- create frame\n        local f = CreateFrame(\"Frame\", nil, unitFrame.healthBar.FrameOverlay)\n        f:SetFrameStrata(\"BACKGROUND\")\n        f:SetWidth(modTable.config.size)\n        f:SetHeight(modTable.config.size)\n        local t = f:CreateTexture(nil, \"BACKGROUND\")\n        t:SetAllPoints(f)\n        f.t = t\n        t:SetTexCoord(.08, .92, .08, .92)\n        f:SetPoint(\"BOTTOM\", unitFrame.healthBar.FrameOverlay, \"TOP\", 0, modTable.config.y)\n        f:Show() \n        unitFrame.TIF = f\n        -- create border\n        unitFrame.TIF.Border = CreateFrame(\n            \"Frame\", \n            nil, \n            f, \n            \"NamePlateFullBorderTemplate\"\n        )\n        unitFrame.TIF.Border:SetVertexColor(0, 0, 0)\n        unitFrame.TIF.Border:SetBorderSizes (0.5, 0.5, 0.5, 0.5)\n        unitFrame.TIF.Border:UpdateSizes()\n    end\n    \nend\n\n\n",
},
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    unitFrame.TIF:Hide()\n    \n    local texture\n    \n    if modTable.config.test then\n        texture = modTable.RandomTexture()\n    else\n        texture = modTable.units[unitFrame.namePlateNpcId]\n    end\n    \n    if not texture then return end\n    \n    unitFrame.TIF.t:SetTexture(texture)\n    unitFrame.TIF:Show()\n    \nend\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if modTable.units[unitFrame.namePlateNpcId] or modTable.config.test then\n        if modTable.config.changecolor then\n            Plater.SetNameplateColor (unitFrame, modTable.config.color)\n        end\n        if modTable.config.hidename then\n            unitFrame.healthBar.unitName:Hide()\n        end\n        if modTable.config.hidehp then\n            unitFrame.healthBar.lifePercent:Hide()\n        end\n        if modTable.config.hideauras then\n            unitFrame.BuffFrame:Hide()\n            unitFrame.BuffFrame2:Hide()\n        end\n    end\n    \nend\n\n\n",
["Initialization"] = "function (modTable)\n    \n    modTable.units = {\n        -- war\n        [119052] = GetSpellTexture(236320), -- War Banner\n        -- sham\n        [3527] = GetSpellTexture(5394), -- Healing Stream Totem\n        [5913] = GetSpellTexture(8143), -- Tremor Totem\n        [61245] = GetSpellTexture(192058), -- Capacitor Totem\n        [2630] = GetSpellTexture(2484), -- Earthbind Totem\n        [53006] = GetSpellTexture(98008), -- Spirit Link Totem\n        [59764] = GetSpellTexture(108280), -- Healing Tide Totem\n        [10467] = GetSpellTexture(16191), -- Mana Tide Totem\n        [6112] = GetSpellTexture(8512), -- Windfury Totem\n        [97369] = GetSpellTexture(192222), -- Liquid Magma Totem\n        [100943] = GetSpellTexture(198838), -- Earthen Wall Totem\n        [78001] = GetSpellTexture(157153), -- Cloudburst Totem\n        [104818] = GetSpellTexture(207399), -- Ancestral Protection Totem\n        [60561] = GetSpellTexture(51485), -- Earthgrab Totem\n        [105427] = GetSpellTexture(204330), -- Skyfury Totem\n        [5925] = GetSpellTexture(204336), -- Grounding Totem\n        [105451] = GetSpellTexture(204331), -- Counterstrike Totem\n        [97285] = GetSpellTexture(192077), -- Wind Rush Totem\n        [166523] = GetSpellTexture(324386), -- Vesper Totem\n        -- tazavesh\n        [179733] = GetSpellTexture(355132),  -- Invigorating Fish Stick\n    }\n    \n    modTable.RandomTexture = function()\n        local random = random(19)\n        local i = 0\n        for k, v in pairs(modTable.units) do\n            i = i+1\n            if i == random then\n                return v\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if not unitFrame.TIF then\n        -- create frame\n        local f = CreateFrame(\"Frame\", nil, unitFrame.healthBar.FrameOverlay)\n        f:SetFrameStrata(\"BACKGROUND\")\n        f:SetWidth(modTable.config.size)\n        f:SetHeight(modTable.config.size)\n        local t = f:CreateTexture(nil, \"BACKGROUND\")\n        t:SetAllPoints(f)\n        f.t = t\n        t:SetTexCoord(.08, .92, .08, .92)\n        f:SetPoint(\"BOTTOM\", unitFrame.healthBar.FrameOverlay, \"TOP\", 0, modTable.config.y)\n        f:Show() \n        unitFrame.TIF = f\n        -- create border\n        unitFrame.TIF.Border = CreateFrame(\n            \"Frame\", \n            nil, \n            f, \n            \"NamePlateFullBorderTemplate\"\n        )\n        unitFrame.TIF.Border:SetVertexColor(0, 0, 0)\n        unitFrame.TIF.Border:SetBorderSizes (0.5, 0.5, 0.5, 0.5)\n        unitFrame.TIF.Border:UpdateSizes()\n    end\n    \nend\n\n\n",
},
["Time"] = 1707611904,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/LBLLVTl9f/6",
["Enabled"] = true,
["Revision"] = 822,
["semver"] = "1.0.5",
["Author"] = "Ретцер-Ревущий фьорд",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "PVP Totem Plates",
["PlaterCore"] = 1,
["version"] = 6,
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 4,
["Key"] = "test",
["Value"] = false,
["Name"] = "test mode",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "delim",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "size & positioning",
["Name"] = "size and positioning",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 256,
["Desc"] = "",
["Min"] = 32,
["Name"] = "icon size",
["Value"] = 50,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "size",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "anchor = topcenter",
["Min"] = 0,
["Name"] = "y offset",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "y",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "delim",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "plate color",
["Name"] = "color options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changecolor",
["Value"] = true,
["Name"] = "change color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "plate color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "delim",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "other",
["Name"] = "other options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "hidename",
["Value"] = true,
["Name"] = "hide name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "hidehp",
["Value"] = true,
["Name"] = "hide health text",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Max"] = 256,
["Desc"] = "",
["Min"] = 32,
["Name"] = "hide auras",
["Value"] = 50,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Key"] = "hideauras",
},
},
},
{
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    envTable.ShowHealthBar(unitFrame, unitId)\n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    envTable.ShowHealthBar(unitFrame, unitId)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --Use this to change if the names should always show or hide all names except for target\n    envTable.showName = true\n    \n    function envTable.ShowHealthBar(unitFrame, unitId)\n        \n        if((unitFrame.PlayerCannotAttack and unitFrame.namePlateIsTarget) or unitFrame.PlayerCannotAttack \n        == false) then\n            \n            local name = UnitName(unitId) \n            unitFrame.healthBar.unitName: SetText(name)               \n            \n            Plater.ShowHealthBar(unitFrame)\n            \n            --These hide the special names and titles\n            unitFrame.ActorNameSpecial: Hide()\n            unitFrame.ActorTitleSpecial: Hide()\n            \n            unitFrame: Show()    \n            \n        elseif(envTable.showName == false) then\n            \n            unitFrame.ActorNameSpecial: Hide()\n            unitFrame: Hide()\n            \n            \n        else\n            \n            unitFrame.ActorNameSpecial: Show()\n            unitFrame.healthBar: Hide()\n            unitFrame:Show()                \n        end\n    end\nend",
},
["Time"] = 1696733275,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/KbXj85CEz/5",
["Icon"] = 878211,
["Enabled"] = false,
["Revision"] = 748,
["Options"] = {
},
["Author"] = "Fntp-Argent Dawn",
["Desc"] = "Hides plate of a friendly unless you target it",
["Prio"] = 99,
["Name"] = "HidePlayerName",
["PlaterCore"] = 1,
["LastHookEdited"] = "Constructor",
["semver"] = "1.0.4",
["version"] = 5,
},
{
["OptionsValues"] = {
["ignoreFriendly"] = true,
},
["HooksTemp"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local kicks = modTable.data[unitFrame.namePlateUnitGUID] or {}\n    for _, kick in pairs(kicks) do\n        kick:Show(unitFrame.ExtraIconFrame)\n    end\n    \nend",
["Initialization"] = "function (modTable)\n    modTable.lockoutDurations = {\n        [1766] = 5,        -- Kick (Rogue)\n        [2139] = 6,     -- Counterspell (Mage)\n        [6552] = 4,     -- Pummel (Warrior)\n        [19647] = 6,     -- Spell Lock (Warlock)\n        [47528] = 3,     -- Mind Freeze (Death Knight)\n        [57994] = 3,     -- Wind Shear (Shaman)\n        [91802] = 2,     -- Shambling Rush (Death Knight)\n        [93985] = 4,    -- Skull Bash (feral+bear, tested)\n        [96231] = 4,     -- Rebuke (Paladin)\n        [106839] = 4,     -- Skull Bash (Feral)\n        [115781] = 6,     -- Optical Blast (Warlock)\n        [116705] = 4,     -- Spear Hand Strike (Monk)\n        [132409] = 6,     -- Spell Lock (Warlock)\n        [147362] = 3,     -- Countershot (Hunter)\n        [171138] = 6,     -- Shadow Lock (Warlock)\n        [183752] = 3,     -- Consume Magic (Demon Hunter)\n        [187707] = 3,    -- Muzzle (Hunter)\n        [212619] = 6,    -- Call Felhunter (Warlock)\n        [231665] = 3,    -- Avengers Shield (Paladin)\n        [351338] = 4,    -- Quell (Dracthyr)\n        [15487] = 4,\n    }\n    \n    modTable.data = {}\n    \n    local function isFriendly(flags)\n        return bit.band(flags, COMBATLOG_OBJECT_REACTION_FRIENDLY)  > 0\n    end\n    \n    local function getSchoolColor(school)\n        return COMBATLOG_DEFAULT_COLORS.schoolColoring[school] or COMBATLOG_DEFAULT_COLORS.schoolColoring[Enum.Damageclass.MaskNone]\n    end\n    \n    local function getBorderColor(spellSchool) \n        local borderColor \n        if modTable.config.schoolBorders then\n            borderColor = getSchoolColor(spellSchool)\n        elseif Plater.db.profile.extra_icon_use_blizzard_border_color then\n            local color = DebuffTypeColor[\"none\"] or {r=0, b=0, g=0, a=0}\n            borderColor = {color.r, color.g, color.b, color.a or 1}\n        else\n            borderColor = Plater.db.profile.extra_icon_border_color\n        end\n        return borderColor\n    end\n    \n    local basekick = {\n        Show = function(self, frame)\n            local borderColor = getBorderColor(self.spellSchool)\n            frame:AddSpecificIcon(\n                self.id, \n                self.spellId, \n                borderColor, \n                self.startTime, \n                self.duration, \n                nil, \n                self.casterName and {text = self.casterName, text_color = self.casterClass} or false,\n                1, \n                nil, \n                self.caster, \n                false, \n                self.spellName, \n                nil\n            )\n            self.frame = frame\n        end,\n        Hide = function(self)\n            if self.frame then\n                self.frame:RemoveSpecificIcon(self.id)\n            end\n        end\n    }\n    \n    local function OnEvent(self, event)\n        local details = { CombatLogGetCurrentEventInfo() }\n        \n        if details[2] ~= \"SPELL_INTERRUPT\" then return end\n        if modTable.config.ignoreFriendly and isFriendly(details[10]) then return end\n        \n        local guid = details[8]\n        local spellId = details[12]\n        local texure = GetSpellTexture(spellId)\n        local spellName = details[13]\n        local school = details[17]\n        local caster = details[5]\n        local casterClass = select(2, UnitClass(caster or \"\"))\n        local casterName\n        if (casterClass and UnitPlayerControlled(caster)) then\n            casterName = UnitName(caster)\n        end\n        local startTime = GetTime()\n        local duration = modTable.lockoutDurations[spellId] or 4\n        local expirationTime = (startTime + duration)\n        local id = caster..startTime\n        \n        modTable.data[guid] = modTable.data[guid] or {}\n        \n        local kick = {\n            id = id,\n            spellId = spellId,\n            spellName = spellName,\n            texture = texure,\n            startTime = startTime,\n            duration = duration,\n            expirationTime = expirationTime,\n            caster = caster,\n            casterName = casterName,\n            casterClass = casterClass,\n            spellSchool = school,\n            Show = basekick.Show,\n            Hide = basekick.Hide\n        }\n        \n        modTable.data[guid][id] = kick\n        \n        C_Timer.NewTimer(duration, function()\n                kick:Hide()\n                modTable.data[guid][id] = nil\n                if next(modTable.data[guid]) == nil then\n                    modTable.data[guid] = nil\n                end\n        end)\n        \n    end\n    \n    modTable.eventFrame = modTable.eventFrame or GlobalPlaterInterruptEventFrame\n    if not modTable.eventFrame then\n        modTable.eventFrame = CreateFrame(\"Frame\", \"GlobalPlaterInterruptEventFrame\")\n        modTable.eventFrame:RegisterEvent(\"COMBAT_LOG_EVENT_UNFILTERED\")\n    end\n    \n    modTable.eventFrame:SetScript(\"OnEvent\",  OnEvent)\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "		function (self, unitId, unitFrame, envTable, modTable)\n			--insert code here\n			\n		end\n	",
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    modTable.lockoutDurations = {\n        [1766] = 5,        -- Kick (Rogue)\n        [2139] = 6,     -- Counterspell (Mage)\n        [6552] = 4,     -- Pummel (Warrior)\n        [19647] = 6,     -- Spell Lock (Warlock)\n        [47528] = 3,     -- Mind Freeze (Death Knight)\n        [57994] = 3,     -- Wind Shear (Shaman)\n        [91802] = 2,     -- Shambling Rush (Death Knight)\n        [93985] = 4,    -- Skull Bash (feral+bear, tested)\n        [96231] = 4,     -- Rebuke (Paladin)\n        [106839] = 4,     -- Skull Bash (Feral)\n        [115781] = 6,     -- Optical Blast (Warlock)\n        [116705] = 4,     -- Spear Hand Strike (Monk)\n        [132409] = 6,     -- Spell Lock (Warlock)\n        [147362] = 3,     -- Countershot (Hunter)\n        [171138] = 6,     -- Shadow Lock (Warlock)\n        [183752] = 3,     -- Consume Magic (Demon Hunter)\n        [187707] = 3,    -- Muzzle (Hunter)\n        [212619] = 6,    -- Call Felhunter (Warlock)\n        [231665] = 3,    -- Avengers Shield (Paladin)\n        [351338] = 4,    -- Quell (Dracthyr)\n        [15487] = 4,\n    }\n    \n    modTable.data = {}\n    \n    local function isFriendly(flags)\n        return bit.band(flags, COMBATLOG_OBJECT_REACTION_FRIENDLY)  > 0\n    end\n    \n    local function getSchoolColor(school)\n        return COMBATLOG_DEFAULT_COLORS.schoolColoring[school] or COMBATLOG_DEFAULT_COLORS.schoolColoring[Enum.Damageclass.MaskNone]\n    end\n    \n    local function getBorderColor(spellSchool) \n        local borderColor \n        if modTable.config.schoolBorders then\n            borderColor = getSchoolColor(spellSchool)\n        elseif Plater.db.profile.extra_icon_use_blizzard_border_color then\n            local color = DebuffTypeColor[\"none\"] or {r=0, b=0, g=0, a=0}\n            borderColor = {color.r, color.g, color.b, color.a or 1}\n        else\n            borderColor = Plater.db.profile.extra_icon_border_color\n        end\n        return borderColor\n    end\n    \n    local basekick = {\n        Show = function(self, frame)\n            local borderColor = getBorderColor(self.spellSchool)\n            frame:AddSpecificIcon(\n                self.id, \n                self.spellId, \n                borderColor, \n                self.startTime, \n                self.duration, \n                nil, \n                self.casterName and {text = self.casterName, text_color = self.casterClass} or false,\n                1, \n                nil, \n                self.caster, \n                false, \n                self.spellName, \n                nil\n            )\n            self.frame = frame\n        end,\n        Hide = function(self)\n            if self.frame then\n                self.frame:RemoveSpecificIcon(self.id)\n            end\n        end\n    }\n    \n    local function OnEvent(self, event)\n        local details = { CombatLogGetCurrentEventInfo() }\n        \n        if details[2] ~= \"SPELL_INTERRUPT\" then return end\n        if modTable.config.ignoreFriendly and isFriendly(details[10]) then return end\n        \n        local guid = details[8]\n        local spellId = details[12]\n        local texure = GetSpellTexture(spellId)\n        local spellName = details[13]\n        local school = details[17]\n        local caster = details[5]\n        local casterClass = select(2, UnitClass(caster or \"\"))\n        local casterName\n        if (casterClass and UnitPlayerControlled(caster)) then\n            casterName = UnitName(caster)\n        end\n        local startTime = GetTime()\n        local duration = modTable.lockoutDurations[spellId] or 4\n        local expirationTime = (startTime + duration)\n        local id = caster..startTime\n        \n        modTable.data[guid] = modTable.data[guid] or {}\n        \n        local kick = {\n            id = id,\n            spellId = spellId,\n            spellName = spellName,\n            texture = texure,\n            startTime = startTime,\n            duration = duration,\n            expirationTime = expirationTime,\n            caster = caster,\n            casterName = casterName,\n            casterClass = casterClass,\n            spellSchool = school,\n            Show = basekick.Show,\n            Hide = basekick.Hide\n        }\n        \n        modTable.data[guid][id] = kick\n        \n        C_Timer.NewTimer(duration, function()\n                kick:Hide()\n                modTable.data[guid][id] = nil\n                if next(modTable.data[guid]) == nil then\n                    modTable.data[guid] = nil\n                end\n        end)\n        \n    end\n    \n    modTable.eventFrame = modTable.eventFrame or GlobalPlaterInterruptEventFrame\n    if not modTable.eventFrame then\n        modTable.eventFrame = CreateFrame(\"Frame\", \"GlobalPlaterInterruptEventFrame\")\n        modTable.eventFrame:RegisterEvent(\"COMBAT_LOG_EVENT_UNFILTERED\")\n    end\n    \n    modTable.eventFrame:SetScript(\"OnEvent\",  OnEvent)\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local kicks = modTable.data[unitFrame.namePlateUnitGUID] or {}\n    for _, kick in pairs(kicks) do\n        kick:Show(unitFrame.ExtraIconFrame)\n    end\n    \nend",
},
["Time"] = 1707622332,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/mA-zQQEsD/4",
["Enabled"] = true,
["Revision"] = 929,
["Options"] = {
{
["Type"] = 4,
["Name"] = "School based border color",
["Value"] = false,
["Key"] = "schoolBorders",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change color of icon border depending on locked school",
},
{
["Type"] = 4,
["Name"] = "Ignore friendly nameplates",
["Value"] = false,
["Key"] = "ignoreFriendly",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore interrupts for friendly nameplates",
},
},
["Author"] = "Ретцер-Ревущий фьорд",
["Desc"] = "",
["Prio"] = 99,
["version"] = 4,
["PlaterCore"] = 1,
["semver"] = "1.0.3",
["LastHookEdited"] = "Initialization",
["Name"] = "PVP/PVE School Lock Buff Special",
},
},
["auras_per_row_auto"] = false,
["aura_width2"] = 21,
["aura_stack_size"] = 11,
["aura_timer_decimals"] = true,
["aura_width"] = 35.35836029052734,
["aura_show_offensive_cd"] = true,
["bossmod_support_enabled"] = false,
["ghost_auras"] = {
["enabled"] = true,
["height"] = 29.40205955505371,
["desaturated"] = false,
["alpha"] = 0.7449636459350586,
["width"] = 29.86515998840332,
},
["aura_show_crowdcontrol"] = true,
["script_data_trash"] = {
{
["ConstructorCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["UID"] = "0x65c81439245c4360",
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1707611193,
["Temp_ConstructorCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 1,
["Options"] = {
},
["__TrashAt"] = 1707611200,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Author"] = "Mysticallx-Sargeras",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "",
["OnShowCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Temp_UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Name"] = "New Script",
["ScriptType"] = 1,
["Icon"] = "",
},
},
["extra_icon_timer_outline"] = "OUTLINE",
["quick_hide"] = true,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
},
["script_auto_imported"] = {
["Relics 9.2 M Dungeons"] = 2,
["Cast - Effect After Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 2,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Unit - Health Markers"] = 12,
["Cast - Tank Interrupt"] = 12,
["Unit - Important"] = 11,
["Cast - Quick Flash"] = 2,
["Cast - Alert + Timer [P]"] = 4,
["Aura is Shield [P]"] = 2,
["Add - Warning [P]"] = 5,
["Fixate On You"] = 11,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Shield Interrupt"] = 2,
["Aura - Buff Alert"] = 15,
["Auto Set Skull"] = 11,
["Fixate"] = 11,
["Spiteful Affix"] = 3,
["Cast - Important Target [P]"] = 2,
["Add - Non Elite Trash [P]"] = 4,
["Cast - On Going Cast [P]"] = 2,
["Countdown"] = 11,
["Cast - Stop Casting"] = 4,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 15,
["Add - Explode on Die [P]"] = 1,
["Cast - Very Important"] = 15,
["Cast - Circular Swipe"] = 4,
["Cast - Glowing [P]"] = 10,
["Unit - Show Energy"] = 11,
},
["target_highlight_color"] = {
nil,
1,
0.545098066329956,
},
["extra_icon_anchor"] = {
["side"] = 7,
["x"] = -26.22537231445313,
},
["extra_icon_wide_icon"] = false,
["use_playerclass_color"] = false,
["range_check_alpha"] = 1,
["click_space"] = {
180,
36,
},
["castbar_target_font"] = "Friz Quadrata TT",
["semver"] = "1.0.6",
["aura_frame2_anchor"] = {
["y"] = 11,
},
["aura_alpha"] = 1,
["auto_toggle_friendly"] = {
["cities"] = false,
["world"] = false,
},
["indicator_faction"] = false,
["castbar_icon_x_offset"] = 7,
["debuff_show_cc"] = false,
["extra_icon_height"] = 25,
["aura_x_offset"] = 0,
["first_run3"] = true,
["transparency_behavior"] = 4,
["spell_animations"] = false,
["ui_parent_scale_tune"] = 1.559999942779541,
["profile_name"] = "Mythic_plus",
["health_statusbar_bgtexture"] = "Blizzard",
["indicator_raidmark_anchor"] = {
["y"] = 12.63999938964844,
["side"] = 8,
},
["extra_icon_width"] = 25,
["aura_show_enrage"] = true,
["health_statusbar_texture"] = "Blizzard",
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Aura Reorder"] = 3,
["Cast Bar Icon Config"] = 2,
["Execute Range"] = 1,
["Extra Border"] = 2,
["Hide Neutral Units"] = 1,
["Target Color"] = 3,
["Attacking Specific Unit"] = 2,
["Combo Points"] = 6,
},
["cast_statusbar_color"] = {
nil,
0.70588235294118,
nil,
1,
},
["minor_width_scale"] = 0.8999999761581421,
["color_override"] = false,
["castbar_target_text_size"] = 8,
["focus_indicator_enabled"] = false,
["aura_frame1_anchor"] = {
["y"] = 20,
["side"] = 1,
},
["range_check_cast_bar_alpha_friendlies"] = 0,
["indicator_extra_raidmark"] = false,
["aura_show_debuffs_personal"] = false,
["indicator_rare"] = false,
["not_affecting_combat_alpha"] = 0.6499999761581421,
["aura_height"] = 35,
["cast_statusbar_bgtexture"] = "Blizzard",
["aura2_x_offset"] = 0,
["target_indicator"] = "NONE",
["target_shady_alpha"] = 0.949999988079071,
["border_color"] = {
0.96862745098039,
0.95294117647059,
0.9843137254902,
1,
},
["focus_texture"] = "Blizzard",
["extra_icon_show_swipe"] = false,
["cast_statusbar_bgcolor"] = {
0,
0,
0,
0.49000000953674,
},
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "0",
["nameplateOverlapV"] = "0.20000000298023",
["nameplateLargeTopInset"] = "0.079999998211861",
["nameplateShowEnemyMinus"] = "0",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowDebuffsOnFriendly"] = "0",
["nameplatePersonalShowInCombat"] = "0",
["nameplateTargetRadialPosition"] = "1",
["nameplateMinAlpha"] = "0.90135484",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "60",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "1.008597612381",
["nameplateTargetBehindMaxDistance"] = "15",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "0",
["nameplatePersonalShowAlways"] = "0",
["nameplateMotionSpeed"] = "0.024999998509884",
["nameplateShowEnemyMinions"] = "1",
["nameplateShowEnemyPets"] = "0",
["nameplateShowFriendlyNPCs"] = "1",
["nameplateSelectedScale"] = "1.2008646726608",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateMotion"] = "0",
["nameplateMinScale"] = "0.8",
["nameplateShowFriendlyPets"] = "0",
["nameplateOtherTopInset"] = "0.079999998211861",
["nameplateShowEnemyGuardians"] = "0",
["NamePlateHorizontalScale"] = "1",
["nameplateShowEnemyTotems"] = "1",
["nameplateShowFriendlyGuardians"] = "0",
["nameplateOccludedAlphaMult"] = "1",
["nameplateShowFriends"] = "0",
["ShowNamePlateLoseAggroFlash"] = "0",
["ShowClassColorInNameplate"] = "1",
["nameplateOverlapH"] = "0.8",
},
["tank"] = {
["colors"] = {
["aggro"] = {
1,
0.003921568627451,
0,
},
},
},
["npc_colors"] = {
[3296] = {
true,
false,
"white",
},
},
["login_counter"] = 31293,
["extra_icon_caster_name"] = false,
["click_space_friendly"] = {
111,
27,
},
["aura_show_magic"] = true,
["pet_width_scale"] = 0.5,
["indicator_raidmark_scale"] = 0.2000000029802322,
["aura_show_aura_by_other_players"] = true,
["health_cutoff_upper"] = false,
["color_override_colors"] = {
[3] = {
0.91764705882353,
0,
0.035294117647059,
},
},
["health_cutoff"] = false,
["health_selection_overlay"] = "Blizzard",
["patch_version"] = 35,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 632,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura - Buff Alert [Plater]",
["SpellIds"] = {
398151,
377738,
378149,
},
["Desc"] = "Add the buff name in the trigger box.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.40392156862745,
0.003921568627451,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
0.32156862745098,
0,
1,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Time"] = 1611844883,
["url"] = "",
["Icon"] = 135945,
["Enabled"] = false,
["Revision"] = 186,
["semver"] = "",
["Author"] = "Symantec-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["NpcNames"] = {
"174773",
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "M+ Spiteful",
["SpellIds"] = {
},
["Desc"] = "Time to die Spiteful affix",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Time to Die",
["Value"] = "Time to Die",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 50,
["Desc"] = "",
["Min"] = 10,
["Name"] = "Width",
["Value"] = 27,
["Key"] = "bgWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0.50588235294118,
0.070588235294118,
1,
1,
},
["Key"] = "bgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "",
["Min"] = 7,
["Name"] = "Text Size",
["Value"] = 8,
["Key"] = "textSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Targeting",
["Value"] = "Targeting",
["Key"] = "option11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Target instead of Name",
["Value"] = true,
["Key"] = "switchTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Color if targeting You",
["Value"] = true,
["Key"] = "useTargetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Color if targeting You",
["Value"] = {
0.070588235294118,
0.61960784313725,
0,
1,
},
["Key"] = "targetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 11",
["Value"] = 0,
["Key"] = "option11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1673994690,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = false,
["Revision"] = 828,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Very Important [Plater]",
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
183263,
3636,
376171,
350687,
372735,
373017,
392488,
257732,
256060,
257899,
384633,
374339,
395694,
391634,
372701,
369328,
265487,
413044,
183526,
88194,
87762,
413385,
411001,
378282,
384161,
259572,
255371,
427460,
429172,
426500,
413607,
412922,
417481,
201399,
411994,
415770,
260907,
260703,
260741,
265876,
263959,
266225,
253517,
},
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.56470588235294,
0.56470588235294,
0.56470588235294,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.41176470588235,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1670201853,
["url"] = "",
["Icon"] = 2175503,
["Enabled"] = false,
["Revision"] = 533,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Explosion Affix M+ [Plater]",
["SpellIds"] = {
240446,
385339,
198077,
210261,
360857,
},
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 3,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Name"] = "Arrow Alpha",
["Value"] = 1,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Name"] = "Arrow Height",
["Value"] = 8,
["Key"] = "arrowHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.6156862745098,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 18",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Nameplate Color",
["Value"] = "Nameplate Color",
["Key"] = "option17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.1843137294054,
0,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 368,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.40392156862745,
0.003921568627451,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
0.32156862745098,
0,
1,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Author"] = "Tercioo-Sylvanas",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura - Debuff Alert [Plater]",
["Desc"] = "Add the debuff name in the trigger box.",
["SpellIds"] = {
},
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670790652,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = false,
["Revision"] = 694,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Ultra Important [P]",
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
209410,
211464,
361180,
156718,
395859,
358320,
374045,
386757,
367500,
370225,
376200,
372107,
388923,
376934,
384899,
373960,
374724,
385551,
259732,
373424,
373084,
87618,
255041,
428926,
76634,
200050,
197546,
198079,
199193,
266181,
253544,
},
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a special animation showing the explosion time.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Name"] = "Health Bar Height Mod",
["Value"] = 3,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = true,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Name"] = "Arrow Alpha",
["Value"] = 0.5,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Name"] = "Arrow Height",
["Value"] = 8,
["Key"] = "arrowHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.6156862745098,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Name"] = "Color List by SpellId",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Key"] = "castColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203603,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1194,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Big Alert [Plater]",
["SpellIds"] = {
396640,
372743,
377389,
396812,
388392,
387955,
386546,
377503,
384808,
386024,
387615,
387606,
225100,
211401,
211470,
215433,
192563,
198959,
152818,
156776,
398206,
153524,
396073,
396018,
345202,
377950,
372223,
384194,
392451,
392924,
397889,
209413,
207980,
257397,
257736,
382787,
374699,
377402,
369602,
369465,
369400,
381593,
265091,
265433,
382791,
376780,
225573,
278444,
164887,
168082,
76813,
227913,
265368,
},
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.43137254901961,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Name"] = "Shake Amplitude",
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1669325410,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["Enabled"] = true,
["Revision"] = 662,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Small Alert [Plater]",
["SpellIds"] = {
376851,
396044,
381517,
373932,
397801,
208165,
392576,
198750,
387843,
387411,
211299,
198595,
198934,
198962,
156722,
281420,
274383,
259092,
367521,
374544,
385039,
382474,
369823,
377500,
260879,
186269,
378818,
371875,
372225,
200658,
266036,
265407,
164965,
429176,
428526,
418200,
407124,
415437,
264050,
267824,
},
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a small animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.6,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Time"] = 1604696441,
["url"] = "",
["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
["Enabled"] = false,
["Revision"] = 63,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Auto Set Skull",
["SpellIds"] = {
},
["Desc"] = "Auto set skull marker",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Only in Combat",
["Value"] = false,
["Key"] = "onlyInCombat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1634089535,
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
["url"] = "",
["NpcNames"] = {
},
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Key"] = "option17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Blink Enabled",
["Value"] = true,
["Key"] = "blinkEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = true,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Name"] = "Change NamePlate Color",
["Value"] = false,
["Key"] = "changeNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Name"] = "Timeleft to Blink",
["Value"] = 3,
["Key"] = "timeleftToBlink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Name"] = "Blink Speed",
["Value"] = 1,
["Key"] = "blinkSpeed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Name"] = "Blink Max Alpha",
["Value"] = 0.6,
["Key"] = "blinkMaxAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Blink Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "blinkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.28627450980392,
0.003921568627451,
0,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Timer Color Enabled",
["Value"] = true,
["Key"] = "timerColorEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Warning",
["Value"] = 8,
["Key"] = "timeLeftWarning",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Critical",
["Value"] = 3,
["Key"] = "timeLeftCritical",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Warning Color",
["Value"] = {
1,
0.87058823529412,
0,
1,
},
["Key"] = "warningColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Name"] = "Critical Color",
["Value"] = {
1,
0.074509803921569,
0,
1,
},
["Key"] = "criticalColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["Revision"] = 376,
["semver"] = "",
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["version"] = -1,
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["Name"] = "Aura - Blink by Time Left [Plater]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Prio"] = 99,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = true,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604354364,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["Enabled"] = false,
["Revision"] = 206,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Countdown",
["SpellIds"] = {
},
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1670202265,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 620,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Frontal Cone [Plater]",
["SpellIds"] = {
375943,
385958,
388623,
377034,
374361,
381525,
386660,
385578,
384699,
153501,
153686,
154442,
192018,
219488,
372087,
391726,
391723,
377383,
388976,
370764,
387067,
391118,
391136,
382233,
209027,
212031,
207261,
207979,
198888,
199805,
199050,
191508,
152792,
153395,
209495,
257426,
255952,
257870,
413147,
383107,
377559,
388060,
376170,
384524,
375351,
390111,
369791,
369573,
369563,
369335,
369061,
375727,
265016,
265019,
260793,
260292,
272457,
272609,
269843,
183465,
226296,
188169,
183088,
410873,
411012,
88308,
382708,
375251,
375439,
372311,
373742,
372201,
374533,
377204,
201226,
204667,
198379,
200768,
253239,
250258,
255567,
194956,
427510,
426645,
412505,
412129,
419351,
401482,
404916,
200345,
200261,
198641,
265372,
271174,
264694,
264923,
},
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Name"] = "Arrow Alpha",
["Value"] = 0.73,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Name"] = "Animation Speed",
["Value"] = 0.2,
["Key"] = "animSpeed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Time"] = 1622197554,
["Icon"] = 1029718,
["url"] = "",
["NpcNames"] = {
},
["Options"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["Revision"] = 270,
["semver"] = "",
["Desc"] = "Show above the nameplate who is the player fixated",
["version"] = -1,
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Name"] = "Fixate [Plater]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Prio"] = 99,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Enabled"] = false,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1604357453,
["url"] = "",
["Icon"] = 136048,
["Enabled"] = false,
["Revision"] = 233,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Unit - Show Energy [Plater]",
["SpellIds"] = {
},
["Desc"] = "Show the energy amount above the nameplate.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "script desc",
["Value"] = "Show the power of the unit above the nameplate.",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "add trigger",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show at 80% of Energy",
["Value"] = true,
["Key"] = "showLater",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 16,
["Key"] = "fontSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Font Color",
["Value"] = {
0.80392156862745,
0.80392156862745,
0.80392156862745,
1,
},
["Key"] = "fontColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Name"] = "Enable Text Outline",
["Value"] = true,
["Key"] = "outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1622197554,
["url"] = "",
["Icon"] = 841383,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["Revision"] = 267,
["semver"] = "",
["NpcNames"] = {
},
["Options"] = {
},
["Author"] = "Tecno-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Fixate On You [Plater]",
["Prio"] = 99,
["Temp_ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["Enabled"] = false,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203758,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1213,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Alert + Timer [P]",
["SpellIds"] = {
},
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Cast start animation settings",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.43137254901961,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Name"] = "Shake Amplitude",
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Value"] = {
},
["Key"] = "timerList",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["Time"] = 1669339628,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["Enabled"] = true,
["Revision"] = 878,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Important Target [P]",
["SpellIds"] = {
},
["Desc"] = "Highlight the target name",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Shows the target name in a separate box",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.56470588235294,
0.56470588235294,
0.56470588235294,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.41176470588235,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Name"] = "Option 27",
["Value"] = 0,
["Key"] = "option27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 28",
["Value"] = "Target Options",
["Key"] = "option28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 14,
["Key"] = "targetNameSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Name"] = "Use Class Color",
["Value"] = true,
["Key"] = "colorByClass",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0,
0,
0,
0.98467203229666,
},
["Key"] = "targetBgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "targetBgBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Name"] = "Frame Width",
["Value"] = 90,
["Key"] = "targetFrameWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Name"] = "Frame Height",
["Value"] = 20,
["Key"] = "targetFrameHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1669327146,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 65,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura is Shield [P]",
["SpellIds"] = {
},
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1668886509,
["url"] = "",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
["Enabled"] = true,
["Revision"] = 33,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Fixate by Unit Buff [P]",
["SpellIds"] = {
426662,
426663,
},
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["Options"] = {
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0,
0.55686274509804,
0.035294117647059,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514190,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 547,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Glowing [P]",
["SpellIds"] = {
376644,
373017,
386781,
384823,
372735,
385536,
392398,
375596,
387135,
360850,
212784,
199033,
199034,
200969,
394512,
397881,
396020,
374430,
384353,
265376,
193941,
411002,
169445,
},
["Desc"] = "Show a different animation for the cast bar.",
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Name"] = "Amount of Segments",
["Value"] = 7,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.95686274509804,
1,
0.98823529411765,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.85882352941176,
0.43137254901961,
1,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Name"] = "Cast Color by SpellID",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Key"] = "castColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1671066705,
["url"] = "",
["Icon"] = 134229,
["Enabled"] = true,
["Revision"] = 37,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Effect After Cast [P]",
["SpellIds"] = {
191284,
},
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1670428019,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Circle AoE [P]",
["SpellIds"] = {
385916,
386063,
388822,
373087,
397785,
106864,
193660,
198263,
387910,
370766,
375591,
384336,
209404,
209378,
210875,
396001,
397899,
386559,
382555,
258672,
258777,
257756,
257784,
256405,
256589,
393793,
388046,
375079,
390290,
369811,
369703,
226287,
410999,
372561,
256882,
172578,
412063,
},
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Name"] = "Rotation Duration",
["Value"] = 0.15,
["Key"] = "rotationDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Name"] = "Animation Start Duration",
["Value"] = 0.3,
["Key"] = "animStartDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 1,
["Key"] = "textureStartAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Name"] = "Texture Scale",
["Value"] = 0.8,
["Key"] = "textureScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Name"] = "Texture Alpha",
["Value"] = 1,
["Key"] = "textureAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        [186227] = {20}, --Monstrous Decay\n        [184020] = {40}, -- Hulking Berserker\n        [91005] = {20}, --Naraxas\n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1683596223,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 146,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["NpcNames"] = {
"197697",
"59544",
"186227",
"184020",
"91005",
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Add - Health Markers [P]",
["SpellIds"] = {
},
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Key"] = "indicatorAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Name"] = "Fill Alpha",
["Value"] = 0.2,
["Key"] = "fillAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670423785,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 572,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
["NpcNames"] = {
"196548",
"195580",
"195820",
"195821",
"189886",
"75966",
"102019",
"187159",
"194897",
"104251",
"101326",
"189669",
"192464",
190381,
92538,
192464,
131009,
127315,
133361,
136330,
214117,
212483,
101008,
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Add - Important [P]",
["SpellIds"] = {
},
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = true,
["Key"] = "changeNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0,
0.52549019607843,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Name"] = "Nameplate Size Offset",
["Value"] = 3,
["Key"] = "nameplateSizeOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.71372550725937,
0,
0.56313106417656,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Extra Texture",
["Value"] = "Extra Texture",
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Name"] = "Show Extra Texture",
["Value"] = false,
["Key"] = "showExtraTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
0.46274509803922,
0,
1,
},
["Key"] = "skullColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Name"] = "Alpha",
["Value"] = 0.2,
["Key"] = "skullAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Name"] = "Scale",
["Value"] = 0.6,
["Key"] = "skullScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 7,
["Name"] = "Npc Color By NpcID",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = false,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
["NpcNames"] = {
"195138",
"192955",
"190294",
"76518",
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Add - Tag Number [P]",
["SpellIds"] = {
},
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669324381,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = true,
["Revision"] = 887,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Quick Flash [P]",
["SpellIds"] = {
392640,
397888,
209033,
385029,
374563,
377341,
369675,
369365,
369411,
278961,
202108,
88186,
200630,
255824,
252781,
250096,
200248,
197797,
264520,
418202,
201839,
412012,
411958,
},
["Desc"] = "Play a very fast flash when the cast start",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.43137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.2,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 0,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.1,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["Time"] = 1670427654,
["url"] = "",
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
"190187",
"189893",
"99922",
"104822",
129758,
190426,
186696,
101075,
100818,
98081,
52019,
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Add - Warning [P]",
["SpellIds"] = {
},
["Desc"] = "Change the color of  add",
["Options"] = {
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = true,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.43921571969986,
0.4588235616684,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Flash Nameplate",
["Value"] = true,
["Key"] = "useFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Name"] = "NpcID to Color",
["Value"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Time"] = 1670427838,
["url"] = "",
["Icon"] = "interface/addons/plater/media/duck_64",
["Enabled"] = true,
["Revision"] = 111,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["NpcNames"] = {
"194622",
"190205",
"197398",
"77006",
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Add - Non Elite Trash [P]",
["SpellIds"] = {
},
["Desc"] = "",
["Options"] = {
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.094117656350136,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Scale",
["Value"] = true,
["Key"] = "useNameplateScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Name"] = "Nameplate Scale",
["Value"] = 0.8,
["Key"] = "scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669325411,
["url"] = "",
["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
["Enabled"] = true,
["Revision"] = 101,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Shield Interrupt [P]",
["SpellIds"] = {
373688,
391050,
},
["Desc"] = "When the caster has a shield and only when the shield is removed the cast can be interrupted",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514185,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 506,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Stop Casting [P]",
["SpellIds"] = {
377004,
381516,
196543,
199726,
200291,
268202,
},
["Desc"] = "Just stop casting",
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Name"] = "Amount of Segments",
["Value"] = 20,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.95686274509804,
1,
0.98823529411765,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.85882352941176,
0.43137254901961,
1,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669340350,
["url"] = "",
["Icon"] = "interface/addons/plater/media/radio_64",
["Enabled"] = true,
["Revision"] = 106,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["NpcNames"] = {
"194895",
"105703",
"59598",
"58319",
200388,
189299,
131402,
135052,
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Add - Explode on Die [P]",
["SpellIds"] = {
},
["Desc"] = "",
["Options"] = {
{
["Type"] = 4,
["Name"] = "Reverse Health Bar",
["Value"] = false,
["Key"] = "useReverse",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 6",
["Value"] = 0,
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Enable Shake",
["Value"] = false,
["Key"] = "useShake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Name"] = "Shake Amplitude",
["Value"] = 0.2,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 70,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Red Background",
["Value"] = true,
["Key"] = "useBackground",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1673726734,
["url"] = "",
["Icon"] = 236209,
["Enabled"] = true,
["Revision"] = 18,
["semver"] = "",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura While Casting [P]",
["SpellIds"] = {
372743,
372749,
384933,
},
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1676905232,
["url"] = "",
["Icon"] = 4038101,
["Enabled"] = true,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
["NpcNames"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - On Going Cast [P]",
["SpellIds"] = {
388886,
209676,
377912,
},
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.41662168502808,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Name"] = "Dots X Offset",
["Value"] = 0,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Name"] = "Dots Y Offset",
["Value"] = 0,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Key"] = "speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Key"] = "minAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Max Alpha",
["Value"] = 0.5,
["Key"] = "maxAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Blink Color",
["Value"] = {
1,
0.019607843831182,
0,
1,
},
["Key"] = "blinkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.healthBar:SetScale(unitFrame._origScale)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.SetNameplateColor (unitFrame,scriptTable.config.plateColor)\n    unitFrame._origScale =  unitFrame.healthBar:GetScale()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.SetNameplateColor (unitFrame,scriptTable.config.plateColor)\n    local isDebuffed =  scriptTable.isDebuffed(unitId)\n    local targeted = UnitIsUnit(\"target\", unitFrame.unit)\n    \n    if isDebuffed then\n        if scriptTable.config.showTargeted and targeted then\n            Plater.ShowHealthBar (unitFrame)\n            Plater.EnableHighlight (unitFrame)\n            unitFrame.healthBar:SetScale(unitFrame._origScale)\n        else\n            Plater.HideHealthBar (unitFrame)\n            Plater.DisableHighlight (unitFrame)\n            unitFrame.castBar:Hide ()\n        end\n    else\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        unitFrame.healthBar:SetScale(scriptTable.config.activeScale)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1703620562,
["Temp_Initialization"] = "function (scriptTable)\n    local spells = {\n        [2637] = true,   -- hibernate\n        [2094] = true,   -- Blind\n        [51514] = true,  -- hex\n        [118] = true,    -- polymorph\n        [217832] = true, -- imprison\n        [9484] = true,   -- shackle undead\n        [360806] = true, -- sleep walk\n        [20668] = true,  -- sleep walk\n        [3355] = true,   -- freezing trap\n        [1513] = true,   -- Scare Beast\n        [115078] = true, -- paralysis\n        [20066] = true,  -- repentance\n        [10326] = true,  -- turn evil\n        [710] = true,    -- banish\n        [5782] = true,   -- fear\n        [118699] = true, -- fear\n        [210873] = true, -- Compy\n        [211004] = true, -- Spider\n        [211010] = true, -- Snake\n        [211015] = true, -- Cockroach\n        [269352] = true, -- Skeletal Hatchling\n        [277778] = true, -- Tendonripper\n        [277784] = true, -- Mongrel\n        [309328] = true, -- Honey\n        [61780] = true,  -- Turkey\n        [126819] = true, -- Porcupine\n        [161353] = true, -- Polar Bear Cub\n        [161354] = true, -- Monkey\n        [161355] = true, -- Penguin\n        [28271] = true,  -- Turtle\n        [28272] = true,  -- Pig\n        [61305] = true,  -- Cat\n        [61721] = true,  -- Rabbit\n        [161372] = true, -- Peacock\n        [277787] = true, -- Direhorn\n        [277792] = true, -- Bumblee\n        [321395] = true, -- Mawrat\n        [391622] = true, -- Duck\n    }\n    \n    scriptTable.isDebuffed = function(unit)\n        for i=0,10 do\n            local _, _, _, _, _, _, _, _, _, spellId  = UnitAura(unit,i,'HARMFUL')\n            \n            if spells[spellId] then \n                return true \n            end\n        end\n    end\nend\n\n\n",
["url"] = "https://wago.io/isxROxhKO/3",
["Icon"] = 136057,
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.healthBar:SetScale(unitFrame._origScale)\nend\n\n\n",
["Revision"] = 303,
["semver"] = "1.0.2",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.SetNameplateColor (unitFrame,scriptTable.config.plateColor)\n    local isDebuffed =  scriptTable.isDebuffed(unitId)\n    local targeted = UnitIsUnit(\"target\", unitFrame.unit)\n    \n    if isDebuffed then\n        if scriptTable.config.showTargeted and targeted then\n            Plater.ShowHealthBar (unitFrame)\n            Plater.EnableHighlight (unitFrame)\n            unitFrame.healthBar:SetScale(unitFrame._origScale)\n        else\n            Plater.HideHealthBar (unitFrame)\n            Plater.DisableHighlight (unitFrame)\n            unitFrame.castBar:Hide ()\n        end\n    else\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        unitFrame.healthBar:SetScale(scriptTable.config.activeScale)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["Author"] = "Boldaro-Ravencrest",
["Initialization"] = "function (scriptTable)\n    local spells = {\n        [2637] = true,   -- hibernate\n        [2094] = true,   -- Blind\n        [51514] = true,  -- hex\n        [118] = true,    -- polymorph\n        [217832] = true, -- imprison\n        [9484] = true,   -- shackle undead\n        [360806] = true, -- sleep walk\n        [20668] = true,  -- sleep walk\n        [3355] = true,   -- freezing trap\n        [1513] = true,   -- Scare Beast\n        [115078] = true, -- paralysis\n        [20066] = true,  -- repentance\n        [10326] = true,  -- turn evil\n        [710] = true,    -- banish\n        [5782] = true,   -- fear\n        [118699] = true, -- fear\n        [210873] = true, -- Compy\n        [211004] = true, -- Spider\n        [211010] = true, -- Snake\n        [211015] = true, -- Cockroach\n        [269352] = true, -- Skeletal Hatchling\n        [277778] = true, -- Tendonripper\n        [277784] = true, -- Mongrel\n        [309328] = true, -- Honey\n        [61780] = true,  -- Turkey\n        [126819] = true, -- Porcupine\n        [161353] = true, -- Polar Bear Cub\n        [161354] = true, -- Monkey\n        [161355] = true, -- Penguin\n        [28271] = true,  -- Turtle\n        [28272] = true,  -- Pig\n        [61305] = true,  -- Cat\n        [61721] = true,  -- Rabbit\n        [161372] = true, -- Peacock\n        [277787] = true, -- Direhorn\n        [277792] = true, -- Bumblee\n        [321395] = true, -- Mawrat\n        [391622] = true, -- Duck\n    }\n    \n    scriptTable.isDebuffed = function(unit)\n        for i=0,10 do\n            local _, _, _, _, _, _, _, _, _, spellId  = UnitAura(unit,i,'HARMFUL')\n            \n            if spells[spellId] then \n                return true \n            end\n        end\n    end\nend\n\n\n",
["Desc"] = "Hide Incorporeal Nameplate when CC (from Merlinou-hyjal)",
["SpellIds"] = {
},
["Prio"] = 99,
["version"] = 3,
["PlaterCore"] = 1,
["Name"] = "M+ Incorporeal",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.SetNameplateColor (unitFrame,scriptTable.config.plateColor)\n    unitFrame._origScale =  unitFrame.healthBar:GetScale()\nend\n\n\n",
["Options"] = {
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 1.5,
["Key"] = "activeScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Active Scale",
},
{
["Type"] = 1,
["Name"] = "Plate Color",
["Value"] = {
0.65098041296005,
0.52156865596771,
1,
1,
},
["Key"] = "plateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Incorporeal CC when targeted",
["Value"] = true,
["Key"] = "showTargeted",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["NpcNames"] = {
"204560",
},
},
},
["range_check_in_range_or_target_alpha"] = 1,
["aura_timer_text_size"] = 10,
["aura_tracker"] = {
["debuff"] = {
411038,
397899,
198909,
419865,
295459,
418561,
107570,
132651,
383005,
346992,
175940,
389270,
211015,
178072,
221527,
316595,
415001,
305485,
214429,
190481,
171153,
346736,
107079,
360958,
355336,
356723,
15487,
360806,
76577,
356727,
47476,
233759,
408,
3355,
321177,
396392,
5211,
99,
22570,
78675,
102359,
360806,
213691,
187650,
31661,
389794,
390171,
113724,
198898,
20066,
853,
115750,
8122,
15487,
64044,
1776,
408,
357768,
406896,
88010,
410870,
65859,
33786,
160209,
261521,
285266,
108194,
221562,
119914,
89766,
347008,
6940,
199448,
200327,
34694,
21060,
427773,
43433,
214299,
178058,
65960,
34654,
42972,
175276,
257748,
127886,
2094,
105421,
215260,
363523,
115750,
216692,
207167,
317898,
199828,
179057,
222826,
292224,
190246,
344867,
425573,
211881,
197579,
225084,
},
["buff_tracked"] = {
["227931"] = true,
["297133"] = true,
["163689"] = true,
["233210"] = true,
["209859"] = true,
},
["buff"] = {
360827,
144302,
329977,
388917,
289626,
418647,
198144,
292152,
54792,
81098,
394013,
394786,
173565,
102342,
53271,
212295,
196555,
383618,
363916,
129035,
316849,
122860,
278454,
279043,
236157,
125174,
740,
173189,
413004,
31519,
383269,
51271,
48792,
51052,
191427,
196718,
196555,
29166,
194223,
102543,
102560,
102558,
102342,
378464,
370960,
360827,
288613,
264735,
360952,
53271,
53480,
45438,
365350,
365362,
342245,
115203,
122278,
115078,
119381,
122783,
31884,
204018,
210256,
1022,
184662,
498,
642,
200183,
33206,
10060,
197268,
47788,
47536,
47585,
62618,
213610,
31224,
5277,
377362,
13750,
273607,
202033,
186286,
110909,
342246,
108978,
342245,
321739,
12042,
343208,
189949,
186265,
203272,
410358,
171465,
48707,
311975,
292150,
173097,
31662,
218977,
218988,
53766,
181425,
292158,
108271,
263786,
317929,
31821,
412629,
316438,
163249,
129020,
107574,
389748,
401150,
283433,
368364,
182872,
22812,
173558,
1022,
41450,
6940,
199448,
200327,
210256,
292222,
212800,
198589,
202819,
409304,
411370,
409293,
390381,
173562,
383410,
194223,
395022,
35729,
248773,
283106,
31224,
65961,
333920,
283108,
81549,
196518,
39666,
178055,
123715,
175395,
122278,
232006,
232007,
196718,
347403,
320420,
209426,
118038,
236385,
315948,
122783,
120044,
156868,
164444,
65544,
47585,
79811,
165766,
375087,
375088,
418049,
101400,
20672,
},
["track_method"] = 2,
["debuff_tracked"] = {
[411038] = true,
[198909] = true,
[313030] = true,
[419865] = true,
[397899] = true,
[357768] = true,
},
["buff_banned"] = {
["11649"] = true,
["333553"] = true,
["61574"] = true,
["5697"] = true,
["206150"] = true,
["61573"] = true,
},
},
["transparency_behavior_on_enemies"] = false,
["number_region_first_run"] = true,
["hover_highlight_alpha"] = 0.2999999821186066,
["tocversion"] = 100205,
["target_highlight_alpha"] = 1,
["target_highlight_height"] = 10,
["version"] = 7,
["hide_friendly_castbars"] = true,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 0.9000000357627869,
},
},
["health_selection_overlay_alpha"] = 0,
["target_shady_enabled"] = false,
["health_statusbar_bgcolor"] = {
0.11372549831867,
0.11372549831867,
0.11372549831867,
0.89000000059605,
},
["dps"] = {
["colors"] = {
["notontank"] = {
1,
0.043137254901961,
0,
},
["solo"] = {
1,
0,
0.003921568627451,
},
["noaggro"] = {
1,
0.003921568627451,
0,
},
},
},
["hook_data_trash"] = {
{
["OptionsValues"] = {
["ignoreFriendly"] = true,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    modTable.lockoutDurations = {\n        [1766] = 5, -- Kick\n        [2139] = 6, -- Counterspell\n        [6552] = 4, -- Pummel\n        [19647] = 6, -- Spell Lock\n        [132409] = 6, -- Spell Lock\n        [115781] = 6, -- Optical Blast\n        [47528] = 3, -- Mind Freeze\n        [57994] = 3, -- Wind Shear\n        [91807] = 2, -- Shambling Rush\n        [96231] = 4, -- Rebuke\n        [93985] = 4, -- Skull Bash\n        [116705] = 4, -- Spear Hand Strike\n        [147362] = 3, -- Counter Shot\n        [183752] = 3, -- Disrupt\n        [187707] = 3, -- Muzzle\n        [212619] = 6, -- Call Felhunter\n        [31935] = 3, -- Avenger's Shield\n        [217824] = 4, -- Shield of Virtue\n        [347008] = 4, -- Axe Toss\n        [97547] = 5, -- Solar Beam\n        [220543] = 3, -- Silence\n    }\n    \n    modTable.data = {}\n    \n    local function isFriendly(flags)\n        return bit.band(flags, COMBATLOG_OBJECT_REACTION_FRIENDLY)  > 0\n    end\n    \n    local function getSchoolColor(school)\n        return COMBATLOG_DEFAULT_COLORS.schoolColoring[school] or COMBATLOG_DEFAULT_COLORS.schoolColoring[Enum.Damageclass.MaskNone]\n    end\n    \n    local function getBorderColor(spellSchool) \n        local borderColor \n        if modTable.config.schoolBorders then\n            borderColor = getSchoolColor(spellSchool)\n        elseif Plater.db.profile.extra_icon_use_blizzard_border_color then\n            local color = DebuffTypeColor[\"none\"] or {r=0, b=0, g=0, a=0}\n            borderColor = {color.r, color.g, color.b, color.a or 1}\n        else\n            borderColor = Plater.db.profile.extra_icon_border_color\n        end\n        return borderColor\n    end\n    \n    local basekick = {\n        Show = function(self, frame)\n            local borderColor = getBorderColor(self.spellSchool)\n            frame:AddSpecificIcon(\n                self.id, \n                self.spellId, \n                borderColor, \n                self.startTime, \n                self.duration, \n                nil, \n                self.casterName and {text = self.casterName, text_color = self.casterClass} or false,\n                1, \n                nil, \n                self.caster, \n                false, \n                self.spellName, \n                nil\n            )\n            self.frame = frame\n        end,\n        Hide = function(self)\n            if self.frame then\n                self.frame:RemoveSpecificIcon(self.id)\n            end\n        end\n    }\n    \n    local function OnEvent(self, event)\n        local details = { CombatLogGetCurrentEventInfo() }\n        \n        if details[2] ~= \"SPELL_INTERRUPT\" then return end\n        if modTable.config.ignoreFriendly and isFriendly(details[10]) then return end\n        \n        local guid = details[8]\n        local spellId = details[12]\n        local texure = GetSpellTexture(spellId)\n        local spellName = details[13]\n        local school = details[17]\n        local caster = details[5]\n        local casterClass = select(2, UnitClass(caster or \"\"))\n        local casterName\n        if (casterClass and UnitPlayerControlled(caster)) then\n            casterName = UnitName(caster)\n        end\n        local startTime = GetTime()\n        local duration = modTable.lockoutDurations[spellId] or 4\n        local expirationTime = (startTime + duration)\n        local id = caster..startTime\n        \n        modTable.data[guid] = modTable.data[guid] or {}\n        \n        local kick = {\n            id = id,\n            spellId = spellId,\n            spellName = spellName,\n            texture = texure,\n            startTime = startTime,\n            duration = duration,\n            expirationTime = expirationTime,\n            caster = caster,\n            casterName = casterName,\n            casterClass = casterClass,\n            spellSchool = school,\n            Show = basekick.Show,\n            Hide = basekick.Hide\n        }\n        \n        modTable.data[guid][id] = kick\n        \n        C_Timer.NewTimer(duration, function()\n                kick:Hide()\n                modTable.data[guid][id] = nil\n                if next(modTable.data[guid]) == nil then\n                    modTable.data[guid] = nil\n                end\n        end)\n        \n    end\n    \n    modTable.eventFrame = modTable.eventFrame or GlobalPlaterInterruptEventFrame\n    if not modTable.eventFrame then\n        modTable.eventFrame = CreateFrame(\"Frame\", \"GlobalPlaterInterruptEventFrame\")\n        modTable.eventFrame:RegisterEvent(\"COMBAT_LOG_EVENT_UNFILTERED\")\n    end\n    \n    modTable.eventFrame:SetScript(\"OnEvent\",  OnEvent)\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local kicks = modTable.data[unitFrame.namePlateUnitGUID] or {}\n    for _, kick in pairs(kicks) do\n        kick:Show(unitFrame.ExtraIconFrame)\n    end\n    \nend",
},
["__TrashAt"] = 1707611238,
["Time"] = 1698185255,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/mA-zQQEsD/4",
["Enabled"] = false,
["Revision"] = 924,
["semver"] = "1.0.3",
["Author"] = "Ретцер-Ревущий фьорд",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "PVP/PVE School Lock Buff Special",
["PlaterCore"] = 1,
["version"] = 4,
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 4,
["Key"] = "schoolBorders",
["Value"] = false,
["Name"] = "School based border color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change color of icon border depending on locked school",
},
{
["Type"] = 4,
["Key"] = "ignoreFriendly",
["Value"] = false,
["Name"] = "Ignore friendly nameplates",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore interrupts for friendly nameplates",
},
},
},
},
["cast_statusbar_texture"] = "Blizzard",
["show_healthbars_on_not_attackable"] = true,
["range_check_alpha_friendlies"] = 1,
["pet_height_scale"] = 0.449999988079071,
["range_check_enabled"] = false,
["auto_toggle_stacking"] = {
["party"] = false,
["raid"] = false,
["arena"] = false,
["world"] = false,
},
["indicator_elite"] = false,
["aura_timer_text_font"] = "Friz Quadrata TT",
["target_highlight_texture"] = "Interface\\AddOns\\Plater\\images\\selection_indicator6",
},
["chan"] = {
["target_highlight"] = false,
["extra_icon_use_blizzard_border_color"] = false,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 632,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Add the buff name in the trigger box.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
398151,
377738,
378149,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Aura - Buff Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Time"] = 1611844883,
["url"] = "",
["NpcNames"] = {
"174773",
},
["Enabled"] = false,
["Revision"] = 186,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Time to Die",
["Value"] = "Time to Die",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 50,
["Desc"] = "",
["Min"] = 10,
["Fraction"] = false,
["Value"] = 27,
["Key"] = "bgWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Width",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0.5058823529411764,
0.07058823529411765,
1,
1,
},
["Key"] = "bgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "",
["Min"] = 7,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "textSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Targeting",
["Value"] = "Targeting",
["Key"] = "option11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "switchTargetName",
["Value"] = true,
["Name"] = "Show Target instead of Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useTargetingColor",
["Value"] = true,
["Name"] = "Change Color if targeting You",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "targetingColor",
["Value"] = {
0.07058823529411765,
0.6196078431372549,
0,
1,
},
["Name"] = "Color if targeting You",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 11",
["Value"] = 0,
["Key"] = "option11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["Author"] = "Symantec-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Icon"] = 135945,
["Name"] = "M+ Spiteful",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Time to die Spiteful affix",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1673994690,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = false,
["Revision"] = 828,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
183263,
3636,
376171,
350687,
372735,
373017,
392488,
257732,
256060,
257899,
384633,
374339,
395694,
391634,
372701,
369328,
265487,
413044,
183526,
88194,
87762,
413385,
411001,
378282,
384161,
259572,
255371,
427460,
429172,
426500,
413607,
412922,
417481,
201399,
411994,
415770,
260907,
260703,
260741,
265876,
263959,
266225,
253517,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Very Important [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1670201853,
["url"] = "",
["Icon"] = 2175503,
["Enabled"] = false,
["Revision"] = 533,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
240446,
385339,
198077,
210261,
360857,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Explosion Affix M+ [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 368,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Desc"] = "Add the debuff name in the trigger box.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Aura - Debuff Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670790652,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = false,
["Revision"] = 694,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
209410,
211464,
361180,
156718,
395859,
358320,
374045,
386757,
367500,
370225,
376200,
372107,
388923,
376934,
384899,
373960,
374724,
385551,
259732,
373424,
373084,
87618,
255041,
428926,
76634,
200050,
197546,
198079,
199193,
266181,
253544,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["version"] = -1,
["Name"] = "Cast - Ultra Important [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203603,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1194,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
396640,
372743,
377389,
396812,
388392,
387955,
386546,
377503,
384808,
386024,
387615,
387606,
225100,
211401,
211470,
215433,
192563,
198959,
152818,
156776,
398206,
153524,
396073,
396018,
345202,
377950,
372223,
384194,
392451,
392924,
397889,
209413,
207980,
257397,
257736,
382787,
374699,
377402,
369602,
369465,
369400,
381593,
265091,
265433,
382791,
376780,
225573,
278444,
164887,
168082,
76813,
227913,
265368,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["version"] = -1,
["Name"] = "Cast - Big Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1669325410,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["Enabled"] = true,
["Revision"] = 662,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["SpellIds"] = {
376851,
396044,
381517,
373932,
397801,
208165,
392576,
198750,
387843,
387411,
211299,
198595,
198934,
198962,
156722,
281420,
274383,
259092,
367521,
374544,
385039,
382474,
369823,
377500,
260879,
186269,
378818,
371875,
372225,
200658,
266036,
265407,
164965,
429176,
428526,
418200,
407124,
200630,
415437,
264050,
267824,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a small animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.6,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
["version"] = -1,
["Name"] = "Cast - Small Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Time"] = 1604696441,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 63,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Only in Combat",
["Value"] = false,
["Key"] = "onlyInCombat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
["Name"] = "Auto Set Skull",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Auto set skull marker",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1654448083,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["Enabled"] = true,
["Revision"] = 378,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Key"] = "option17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Blink Enabled",
["Value"] = true,
["Key"] = "blinkEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = true,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Name"] = "Change NamePlate Color",
["Value"] = false,
["Key"] = "changeNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Key"] = "timeleftToBlink",
["Value"] = 3,
["Name"] = "Timeleft to Blink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Key"] = "blinkSpeed",
["Value"] = 1,
["Name"] = "Blink Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Key"] = "blinkMaxAlpha",
["Value"] = 0.6,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Blink Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "blinkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.2862745098039216,
0.00392156862745098,
0,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Timer Color Enabled",
["Value"] = true,
["Key"] = "timerColorEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Key"] = "timeLeftWarning",
["Value"] = 8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Time Left Warning",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Key"] = "timeLeftCritical",
["Value"] = 3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Time Left Critical",
},
{
["Type"] = 1,
["Name"] = "Warning Color",
["Value"] = {
1,
0.8705882352941177,
0,
1,
},
["Key"] = "warningColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Name"] = "Critical Color",
["Value"] = {
1,
0.07450980392156863,
0,
1,
},
["Key"] = "criticalColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Prio"] = 99,
["Name"] = "Aura - Blink by Time Left [Plater]",
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604354364,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 206,
["Options"] = {
},
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["Name"] = "Countdown",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1670202265,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 620,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["SpellIds"] = {
375943,
385958,
388623,
377034,
374361,
381525,
386660,
385578,
384699,
153501,
153686,
154442,
192018,
219488,
372087,
391726,
391723,
377383,
388976,
370764,
387067,
391118,
391136,
382233,
209027,
212031,
207261,
207979,
198888,
199805,
199050,
191508,
152792,
153395,
209495,
257426,
255952,
257870,
413147,
383107,
377559,
388060,
376170,
384524,
375351,
390111,
369791,
369573,
369563,
369335,
369061,
375727,
265016,
265019,
260793,
260292,
272457,
272609,
269843,
183465,
226296,
188169,
183088,
410873,
411012,
88308,
382708,
375251,
375439,
372311,
373742,
372201,
374533,
377204,
201226,
204667,
198379,
200768,
253239,
250258,
255567,
194956,
427510,
426645,
412505,
412129,
419351,
401482,
404916,
200345,
200261,
198641,
265372,
271174,
264694,
264923,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animSpeed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["version"] = -1,
["Name"] = "Cast - Frontal Cone [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Time"] = 1622197554,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["Icon"] = 1029718,
["url"] = "",
["Enabled"] = false,
["Revision"] = 270,
["Options"] = {
},
["NpcNames"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Desc"] = "Show above the nameplate who is the player fixated",
["SpellIds"] = {
},
["Prio"] = 99,
["Name"] = "Fixate [Plater]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1604357453,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 233,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "script desc",
["Value"] = "Show the power of the unit above the nameplate.",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Name"] = "add trigger",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show at 80% of Energy",
["Value"] = true,
["Key"] = "showLater",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Key"] = "fontSize",
["Value"] = 16,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Font Color",
["Value"] = {
0.803921568627451,
0.803921568627451,
0.803921568627451,
1,
},
["Key"] = "fontColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Name"] = "Enable Text Outline",
["Value"] = true,
["Key"] = "outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["Icon"] = 136048,
["Name"] = "Unit - Show Energy [Plater]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Show the energy amount above the nameplate.",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1622197554,
["url"] = "",
["Icon"] = 841383,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["Revision"] = 267,
["semver"] = "",
["Temp_ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["NpcNames"] = {
},
["Author"] = "Tecno-Azralon",
["Enabled"] = false,
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["Options"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["PlaterCore"] = 1,
["Name"] = "Fixate On You [Plater]",
["Prio"] = 99,
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["timerList"] = {
{
"350421",
"5",
},
{
"355787",
"15",
},
{
"348513",
"14",
},
{
"348513",
"14",
},
},
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203758,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1213,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Cast start animation settings",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Key"] = "timerList",
["Value"] = {
},
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["version"] = -1,
["Name"] = "Cast - Alert + Timer [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["Time"] = 1669339628,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["Enabled"] = true,
["Revision"] = 878,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight the target name",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shows the target name in a separate box",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Name"] = "Option 27",
["Value"] = 0,
["Key"] = "option27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 28",
["Value"] = "Target Options",
["Key"] = "option28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 14,
["Key"] = "targetNameSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Name"] = "Use Class Color",
["Value"] = true,
["Key"] = "colorByClass",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0,
0,
0,
0.9846720322966576,
},
["Key"] = "targetBgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "targetBgBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Name"] = "Frame Width",
["Value"] = 90,
["Key"] = "targetFrameWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Key"] = "targetFrameHeight",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Frame Height",
},
},
["version"] = -1,
["Name"] = "Cast - Important Target [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (you may need /reload if some configs isn't applied immediately)    \n    --change the nameplate color to this if allowed\n    envTable.CanChangeNameplateColor = scriptTable.config.changeNameplateColor --\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset --\n    \nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n22945 - Shadowmoon Blood Mage - Black Temple\n22979 - Shadowmoon Reaver - Black Temple\n22894 - Cyclone Totem - Black Temple\n23235 - Bonewrencher Blade Fury - Black Temple\n25486 - Shadowsword Vanquisher - Sunwell Plataeu\n25483 - Shadowsword Manafiend - Sunwell Plataeu\n25799 - Shadowsword Fury Mage - Sunwell Plataeu\n25369 - Sunblade Vindicator - Sunwell Plataeu\n25367 - Sunblade Arch Mage - Sunwell Plataeu\n25502 - Shield Orb - Sunwell Plataeu\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \nend\n\n\n",
["OptionsValues"] = {
["skullAlpha"] = 1,
["nameplateSizeOffset"] = 5,
["dotsColor"] = {
0.9411764705882353,
1,
0.9921568627450981,
1,
},
["nameplateColor"] = {
0.3529411764705882,
1,
0.8823529411764706,
1,
},
["skullScale"] = 1,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can change the nameplate color\n    if (envTable.CanChangeNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1671548898,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (you may need /reload if some configs isn't applied immediately)    \n    --change the nameplate color to this if allowed\n    envTable.CanChangeNameplateColor = scriptTable.config.changeNameplateColor --\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset --\n    \nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n22945 - Shadowmoon Blood Mage - Black Temple\n22979 - Shadowmoon Reaver - Black Temple\n22894 - Cyclone Totem - Black Temple\n23235 - Bonewrencher Blade Fury - Black Temple\n25486 - Shadowsword Vanquisher - Sunwell Plataeu\n25483 - Shadowsword Manafiend - Sunwell Plataeu\n25799 - Shadowsword Fury Mage - Sunwell Plataeu\n25369 - Sunblade Vindicator - Sunwell Plataeu\n25367 - Sunblade Arch Mage - Sunwell Plataeu\n25502 - Shield Orb - Sunwell Plataeu\n\n--]=]",
["Icon"] = 132212,
["Enabled"] = true,
["Revision"] = 424,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = true,
["Key"] = "changeNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0,
0.52549019607843,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Name"] = "Nameplate Size Offset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "nameplateSizeOffset",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.71372549019608,
0,
1,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "",
["Min"] = 0,
["Name"] = "Alpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "skullAlpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "",
["Min"] = 0.4,
["Name"] = "Scale",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "skullScale",
},
},
["UID"] = "0x62fe7139ab4308",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["NpcNames"] = {
"26101",
"Psyfiend",
"211522",
},
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \nend\n\n\n",
["Name"] = "Unit - Important #2",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can change the nameplate color\n    if (envTable.CanChangeNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    envTable.ShowTargeted = scriptTable.config.ShowTargeted\n    envTable.ShowRaidMarked = scriptTable.config.ShowRaidMarked\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 0.016\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 0.016\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["Time"] = 1666434923,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["Icon"] = 644389,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    envTable.ShowTargeted = scriptTable.config.ShowTargeted\n    envTable.ShowRaidMarked = scriptTable.config.ShowRaidMarked\n    \nend",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend",
["Revision"] = 754,
["semver"] = "",
["NpcNames"] = {
"Healing Stream Totem VIII",
"Strength of Earth Totem VIII",
"Frost Resistance Totem VI",
"Mana Spring Totem VIII",
"Wrath of Air Totem",
"Windfury Totem",
"Cleansing Totem",
"Totem of Wrath IV",
"Stoneskin Totem X",
"Flametongue Totem VIII",
"Flametongue Totem V",
"Treant",
"Mana Spring Totem V",
"Stoneclaw Totem X",
"Healing Stream Totem IX",
"Spirit Wolf",
},
["Enabled"] = false,
["Author"] = "Evolutious",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 0.016\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["SpellIds"] = {
},
["Prio"] = 99,
["Name"] = "Hide Nameplate by UnitID",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 0.016\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["version"] = -1,
["Desc"] = "Hide's nameplates based on the unit's name or npcID. Add the Unit Name or npcID as a trigger.",
["Options"] = {
{
["Type"] = 4,
["Key"] = "ShowTargeted",
["Value"] = true,
["Name"] = "Show if Targeted",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Determines if the nameplate should be shown if you have the unit targeted",
},
{
["Type"] = 4,
["Key"] = "ShowRaidMarked",
["Value"] = true,
["Name"] = "Show if Raid Marked",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Determines if the nameplate should be shown if it has a raid mark applied",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1669327146,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 65,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura is Shield [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1668886509,
["url"] = "",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
["Enabled"] = true,
["Revision"] = 33,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
426662,
426663,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0,
0.5568627450980392,
0.03529411764705882,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
["version"] = -1,
["Name"] = "Fixate by Unit Buff [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514190,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 547,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
376644,
373017,
386781,
384823,
372735,
385536,
392398,
375596,
387135,
360850,
212784,
199033,
199034,
200969,
394512,
397881,
396020,
374430,
384353,
265376,
193941,
411002,
169445,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 7,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["version"] = -1,
["Name"] = "Cast - Glowing [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1671066705,
["url"] = "",
["Icon"] = 134229,
["Enabled"] = true,
["Revision"] = 37,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["SpellIds"] = {
191284,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Cast - Effect After Cast [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1670428019,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["SpellIds"] = {
385916,
386063,
388822,
373087,
397785,
106864,
193660,
198263,
387910,
370766,
375591,
384336,
209404,
209378,
210875,
396001,
397899,
386559,
382555,
258672,
258777,
257756,
257784,
256405,
256589,
393793,
388046,
375079,
390290,
369811,
369703,
226287,
410999,
372561,
256882,
172578,
412063,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.15,
["Key"] = "rotationDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Name"] = "Animation Start Duration",
["Value"] = 0.3,
["Key"] = "animStartDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Key"] = "textureStartAlpha",
["Value"] = 1,
["Name"] = "Texture Start Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "textureScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "textureAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["Name"] = "Cast - Circle AoE [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        [186227] = {20}, --Monstrous Decay\n        [184020] = {40}, -- Hulking Berserker\n        [91005] = {20}, --Naraxas\n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1683596223,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 146,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Key"] = "indicatorAlpha",
["Value"] = 0.79,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Vertical Line Alpha",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Name"] = "Fill Alpha",
["Value"] = 0.2,
["Key"] = "fillAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["version"] = -1,
["Name"] = "Add - Health Markers [P]",
["NpcNames"] = {
"197697",
"59544",
"186227",
"184020",
"91005",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670423785,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 572,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Name"] = "Nameplate Size Offset",
["Value"] = 3,
["Key"] = "nameplateSizeOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.7137255072593689,
0,
0.5631310641765594,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Extra Texture",
["Name"] = "Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Name"] = "Show Extra Texture",
["Value"] = false,
["Key"] = "showExtraTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.4627450980392157,
0,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "skullAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Alpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Name"] = "Scale",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "skullScale",
},
{
["Type"] = 7,
["Name"] = "Npc Color By NpcID",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
["version"] = -1,
["Name"] = "Add - Important [P]",
["NpcNames"] = {
"196548",
"195580",
"195820",
"195821",
"189886",
"75966",
"102019",
"187159",
"194897",
"104251",
"101326",
"189669",
"192464",
190381,
92538,
192464,
131009,
127315,
133361,
136330,
214117,
212483,
101008,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = false,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Add - Tag Number [P]",
["NpcNames"] = {
"195138",
"192955",
"190294",
"76518",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669324381,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = true,
["Revision"] = 887,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Desc"] = "Play a very fast flash when the cast start",
["SpellIds"] = {
392640,
397888,
209033,
385029,
374563,
377341,
369675,
369365,
369411,
278961,
202108,
88186,
255824,
252781,
250096,
200248,
197797,
264520,
418202,
201839,
412012,
411958,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["version"] = -1,
["Name"] = "Cast - Quick Flash [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["Time"] = 1670427654,
["url"] = "",
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["Desc"] = "Change the color of  add",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.4392157196998596,
0.458823561668396,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Flash Nameplate",
["Value"] = true,
["Key"] = "useFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Name"] = "NpcID to Color",
["Value"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Add - Warning [P]",
["NpcNames"] = {
"190187",
"189893",
"99922",
"104822",
129758,
190426,
186696,
101075,
100818,
98081,
52019,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Time"] = 1670427838,
["url"] = "",
["Icon"] = "interface/addons/plater/media/duck_64",
["Enabled"] = true,
["Revision"] = 111,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["Desc"] = "",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.0941176563501358,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Scale",
["Value"] = true,
["Key"] = "useNameplateScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Nameplate Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "scale",
},
},
["version"] = -1,
["Name"] = "Add - Non Elite Trash [P]",
["NpcNames"] = {
"194622",
"190205",
"197398",
"77006",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669325411,
["url"] = "",
["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
["Enabled"] = true,
["Revision"] = 101,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
["Desc"] = "When the caster has a shield and only when the shield is removed the cast can be interrupted",
["SpellIds"] = {
373688,
391050,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Cast - Shield Interrupt [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514185,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 506,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Just stop casting",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
377004,
381516,
196543,
199726,
200291,
268202,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Name"] = "Amount of Segments",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Stop Casting [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669340350,
["url"] = "",
["Icon"] = "interface/addons/plater/media/radio_64",
["Enabled"] = true,
["Revision"] = 106,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["Desc"] = "",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useReverse",
["Value"] = false,
["Name"] = "Reverse Health Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useShake",
["Value"] = false,
["Name"] = "Enable Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Key"] = "shakeAmplitude",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 70,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBackground",
["Value"] = true,
["Name"] = "Show Red Background",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
["version"] = -1,
["Name"] = "Add - Explode on Die [P]",
["NpcNames"] = {
"194895",
"105703",
"59598",
"58319",
200388,
189299,
131402,
135052,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1673726734,
["url"] = "",
["Icon"] = 236209,
["Enabled"] = true,
["Revision"] = 18,
["semver"] = "",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["NpcNames"] = {
},
["SpellIds"] = {
372743,
372749,
384933,
},
["PlaterCore"] = 1,
["Name"] = "Aura While Casting [P]",
["version"] = -1,
["Options"] = {
},
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1676905232,
["url"] = "",
["Icon"] = 4038101,
["Enabled"] = true,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
["SpellIds"] = {
388886,
209676,
377912,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Name"] = "Dots X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots Y Offset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "minAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.01960784383118153,
0,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["version"] = -1,
["Name"] = "Cast - On Going Cast [P]",
["NpcNames"] = {
},
},
},
["aura_timer_text_color"] = {
nil,
0.9333333333333333,
0,
},
["saved_cvars_last_change"] = {
["nameplateShowOnlyNames"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:5925: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:5923>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:811: in function <Interface/AddOns/Details/Libs/DF/slider.lua:762>\n",
["nameplateOverlapV"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateLargeTopInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:5645: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:5637>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/mixins.lua\"]:372: in function `RunHooksForWidget'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:749: in function <Interface/AddOns/Details/Libs/DF/slider.lua:713>\n[string \"=[C]\"]: in function `SetValue'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:75: in function <Interface/AddOns/Details/Libs/DF/slider.lua:44>\n[string \"=(tail call)\"]: ?\n[string \"@Interface/AddOns/Details/Libs/DF/buildmenu.lua\"]:722: in function `RefreshOptions'\n[string \"@Interface/AddOns/Details/Libs/DF/tabcontainer.lua\"]:143: in function `SelectTabByIndex'\n[string \"@Interface/AddOns/Details/Libs/DF/tabcontainer.lua\"]:348: in function <Interface/AddOns/Details/Libs/DF/tabcontainer.lua:348>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowEnemyMinus"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowFriendlyTotems"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplatePersonalHideDelaySeconds"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowFriendlyPets"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:13044: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:13042>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:811: in function <Interface/AddOns/Details/Libs/DF/slider.lua:762>\n",
["nameplatePersonalShowInCombat"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateTargetRadialPosition"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateMinAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["clampTargetNameplateToScreen"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowAll"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateMaxDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowFriendlyMinions"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateSelfScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateTargetBehindMaxDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:5695: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:5693>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/mixins.lua\"]:372: in function `RunHooksForWidget'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:749: in function <Interface/AddOns/Details/Libs/DF/slider.lua:713>\n[string \"=[C]\"]: in function `SetValue'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:75: in function <Interface/AddOns/Details/Libs/DF/slider.lua:44>\n[string \"=(tail call)\"]: ?\n[string \"@Interface/AddOns/Details/Libs/DF/buildmenu.lua\"]:722: in function `RefreshOptions'\n[string \"@Interface/AddOns/Details/Libs/DF/tabcontainer.lua\"]:143: in function `SelectTabByIndex'\n[string \"@Interface/AddOns/Details/Libs/DF/tabcontainer.lua\"]:348: in function <Interface/AddOns/Details/Libs/DF/tabcontainer.lua:348>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowEnemies"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Blizzard_SharedXML/CvarUtil.lua\"]:72: in function `SetValue'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua\"]:187: in function `SetValueInternal'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua\"]:67: in function `SetValue'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Settings.lua\"]:229: in function `SetValue'\n[string \"NAMEPLATES\"]:6: in function <[string \"NAMEPLATES\"]:1>\n",
["NamePlateVerticalScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateSelectedAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowSelf"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateSelfTopInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateMotionSpeed"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateGlobalScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowEnemyMinions"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowEnemyPets"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:12962: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:12960>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:811: in function <Interface/AddOns/Details/Libs/DF/slider.lua:762>\n",
["nameplateShowFriendlyNPCs"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateSelectedScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:5714: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:5712>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/mixins.lua\"]:372: in function `RunHooksForWidget'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:749: in function <Interface/AddOns/Details/Libs/DF/slider.lua:713>\n[string \"=[C]\"]: in function `SetValue'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:75: in function <Interface/AddOns/Details/Libs/DF/slider.lua:44>\n[string \"=(tail call)\"]: ?\n[string \"@Interface/AddOns/Details/Libs/DF/buildmenu.lua\"]:722: in function `RefreshOptions'\n[string \"@Interface/AddOns/Details/Libs/DF/tabcontainer.lua\"]:143: in function `SelectTabByIndex'\n[string \"@Interface/AddOns/Details/Libs/DF/tabcontainer.lua\"]:348: in function <Interface/AddOns/Details/Libs/DF/tabcontainer.lua:348>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateMinAlphaDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateMotion"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateMinScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateOverlapH"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateOtherTopInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:5644: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:5637>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/mixins.lua\"]:372: in function `RunHooksForWidget'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:749: in function <Interface/AddOns/Details/Libs/DF/slider.lua:713>\n[string \"=[C]\"]: in function `SetValue'\n[string \"@Interface/AddOns/Details/Libs/DF/slider.lua\"]:75: in function <Interface/AddOns/Details/Libs/DF/slider.lua:44>\n[string \"=(tail call)\"]: ?\n[string \"@Interface/AddOns/Details/Libs/DF/buildmenu.lua\"]:722: in function `RefreshOptions'\n[string \"@Interface/AddOns/Details/Libs/DF/tabcontainer.lua\"]:143: in function `SelectTabByIndex'\n[string \"@Interface/AddOns/Details/Libs/DF/tabcontainer.lua\"]:348: in function <Interface/AddOns/Details/Libs/DF/tabcontainer.lua:348>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateOccludedAlphaMult"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateSelfBottomInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowEnemyTotems"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowFriendlyGuardians"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowEnemyGuardians"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowFriends"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:8469: in function `RefreshAutoToggle'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2220: in function `func'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:3909: in function <Interface/AddOns/Plater/Plater.lua:3905>\n",
["nameplatePersonalShowAlways"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["NamePlateHorizontalScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["ShowClassColorInNameplate"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
},
["aura_cache_by_name"] = {
},
["hover_highlight"] = false,
["aura_stack_anchor"] = {
["y"] = -17.5,
["x"] = 7.5,
},
["health_cutoff_upper"] = false,
["stacking_nameplates_enabled"] = false,
["aura2_y_offset"] = 32.6219482421875,
["indicator_spec_always"] = true,
["buffs_on_aura2"] = true,
["plate_config"] = {
["player"] = {
["spellpercent_text_enabled"] = false,
["percent_text_show_decimals"] = false,
["castbar_enabled"] = false,
["power_percent_text_enabled"] = false,
["healthbar_enabled"] = false,
["healthbar_color"] = {
0,
1,
0.07058823853731155,
},
["level_text_alpha"] = 0.3,
["click_through"] = true,
["power_enabled"] = false,
["health"] = {
nil,
10,
},
["health_incombat"] = {
nil,
10,
},
["percent_text_size"] = 8,
["percent_text_anchor"] = {
["side"] = 10,
["x"] = -1.64000129699707,
},
["percent_show_health"] = false,
["module_enabled"] = false,
},
["friendlyplayer"] = {
["actorname_use_friends_color"] = false,
["actorname_friend_color"] = {
0.7098039388656616,
nil,
nil,
0,
},
["level_text_size"] = 8,
["actorname_use_class_color"] = true,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
nil,
15,
},
["big_actortitle_text_size"] = 14,
["fixed_class_color"] = {
0.09803921568627451,
[3] = 0.03529411764705882,
},
["actorname_text_color"] = {
0.5058823823928833,
0.5411764979362488,
nil,
0,
},
["percent_text_show_decimals"] = false,
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["cast_incombat"] = {
nil,
15,
},
["click_through"] = false,
["big_actorname_text_shadow_color"] = {
0,
0,
0,
1,
},
["spellpercent_text_outline"] = "NONE",
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
1,
},
["actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["mana_incombat"] = {
nil,
4,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["actorname_use_guild_color"] = false,
["all_names"] = true,
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["only_thename"] = true,
["castbar_offset"] = -0.5,
["actorname_text_outline"] = "NONE",
["actorname_text_anchor"] = {
["y"] = 3,
},
["spellpercent_text_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["only_damaged"] = false,
["buff_frame_y_offset"] = 0,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_enabled"] = true,
["mana"] = {
nil,
4,
},
["percent_text_font"] = "Friz Quadrata TT",
["quest_color_enabled"] = true,
["health_incombat"] = {
80,
11,
},
["health"] = {
80,
11,
},
["big_actorname_text_size"] = 14,
["percent_show_percent"] = false,
["big_actortitle_text_outline"] = "OUTLINE",
["level_text_alpha"] = 0.2999999821186066,
["spellname_text_font"] = "Friz Quadrata TT",
},
["friendlynpc"] = {
["big_actorname_text_size"] = 10,
["show_guild_name"] = false,
["level_text_size"] = 8,
["actorname_use_class_color"] = false,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
80,
15,
},
["big_actortitle_text_size"] = 10,
["fixed_class_color"] = {
0,
1,
0,
1,
},
["big_actorname_text_color"] = {
0.5019607843137255,
nil,
0.5019607843137255,
1,
},
["enabled"] = false,
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
80,
15,
},
["click_through"] = false,
["spellpercent_text_outline"] = "NONE",
["actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_outline"] = "NONE",
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["actorname_use_guild_color"] = false,
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["only_thename"] = false,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["actorname_use_friends_color"] = true,
["level_text_alpha"] = 0.2999999821186066,
["spellpercent_text_color"] = {
nil,
nil,
nil,
0,
},
["big_actortitle_text_outline"] = "NONE",
["actorname_text_spacing"] = 9,
["only_damaged"] = false,
["percent_text_size"] = 10,
["actorname_guild_color"] = {
0.498039,
1,
0.2,
1,
},
["percent_show_percent"] = false,
["actorname_text_color"] = {
0.5058823529411764,
0.5411764705882353,
},
["relevance_state"] = 2,
["percent_text_font"] = "Friz Quadrata TT",
["health_incombat"] = {
80,
11,
},
["health"] = {
80,
11,
},
["actorname_friend_color"] = {
0.71,
1,
1,
1,
},
["actorname_text_anchor"] = {
["y"] = 3,
},
["castbar_offset"] = -0.5,
["only_names"] = false,
["spellname_text_font"] = "Friz Quadrata TT",
},
["enemynpc"] = {
["castbar_offset"] = -0.5,
["level_text_size"] = 10,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
140,
15,
},
["spellpercent_text_size"] = 10,
["level_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 12,
["actorname_text_color"] = {
nil,
0.00392156862745098,
0,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
140,
15,
},
["spellname_text_outline"] = "NONE",
["spellpercent_text_outline"] = "NONE",
["percent_text_anchor"] = {
["x"] = 53,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_size"] = 10,
["big_actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_anchor"] = {
["y"] = 3,
["side"] = 8,
},
["spellpercent_text_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_enabled"] = false,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Friz Quadrata TT",
["level_text_anchor"] = {
["y"] = 0,
["side"] = 2,
},
["spellname_text_font"] = "Friz Quadrata TT",
["quest_enabled"] = false,
["big_actorname_text_size"] = 12,
["percent_show_health"] = false,
["spellname_text_size"] = 10,
["health_incombat"] = {
140,
11,
},
["health"] = {
140,
11,
},
["percent_text_size"] = 10,
["level_text_alpha"] = 1,
["percent_show_percent"] = false,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_enabled"] = false,
},
["global_health_width"] = 140,
["enemyplayer"] = {
["big_actorname_text_size"] = 14,
["level_text_size"] = 8,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
140,
15,
},
["big_actortitle_text_size"] = 14,
["actorname_text_color"] = {
nil,
0.00784313725490196,
0,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
140,
15,
},
["spellpercent_text_outline"] = "NONE",
["percent_text_anchor"] = {
["x"] = 53,
},
["actorname_text_font"] = "Friz Quadrata TT",
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["actorname_text_size"] = 10,
["big_actorname_text_font"] = "Friz Quadrata TT",
["all_names"] = true,
["percent_show_health"] = false,
["spellpercent_text_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Friz Quadrata TT",
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_enabled"] = true,
["castbar_offset"] = -0.5,
["level_text_alpha"] = 0.2999999821186066,
["quest_color_enabled"] = true,
["health_incombat"] = {
140,
11,
},
["health"] = {
140,
11,
},
["spellpercent_text_enabled"] = false,
["spellname_text_font"] = "Friz Quadrata TT",
["percent_show_percent"] = false,
["actorname_text_anchor"] = {
["y"] = 3,
["side"] = 8,
},
["level_text_enabled"] = false,
},
["global_health_height"] = 11,
},
["health_selection_overlay"] = "Asuri",
["aura_y_offset"] = 44.75,
["aura_show_defensive_cd"] = true,
["expansion_triggerwipe"] = {
[9] = true,
},
["show_aggro_glow"] = false,
["cast_statusbar_color_nointerrupt"] = {
0.4196078777313232,
0.4392157196998596,
0.3843137621879578,
1,
},
["bossmod_aura_width"] = 24,
["indicator_spec"] = false,
["color_override_colors"] = {
[3] = {
1,
0.3568627450980392,
0.3450980392156863,
},
[4] = {
0.9254901960784314,
0.9058823529411765,
0.09019607843137255,
},
[5] = {
0.02352941176470588,
0.807843137254902,
0.02352941176470588,
},
},
["resources_settings"] = {
["chr"] = {
["Player-4408-045ACB17"] = "Runes",
["Player-1329-09EAD9B7"] = "SoulShards",
["Player-4618-00223F1D"] = "Runes",
["Player-3091-006D0F40"] = "SoulShards",
["Player-5596-00020FB0"] = "SoulShards",
["Player-4476-0387E1FA"] = "SoulShards",
["Player-4408-034B9E13"] = "ComboPoints",
["Player-3091-006D0F33"] = "SoulShards",
["Player-4619-002510AC"] = "SoulShards",
["Player-4618-00206F9E"] = "SoulShards",
["Player-76-0B986AD7"] = "Chi",
["Player-76-0BD55532"] = "Chi",
["Player-76-0B98EAF1"] = "SoulShards",
["Player-4467-02F839C2"] = "SoulShards",
["Player-4619-0022E12D"] = "SoulShards",
["Player-1329-09F222B7"] = "Runes",
["Player-4408-02DAF1FB"] = "SoulShards",
["Player-4408-049ACEF2"] = "ArcaneCharges",
},
},
["health_animation_time_dilatation"] = 2.619999885559082,
["npc_cache"] = {
[74091] = {
"Kor'kron Iron Sentinel",
"Siege of Orgrimmar",
"enUS",
},
[61398] = {
"Xin the Weaponmaster",
"Mogu'shan Palace",
"enUS",
},
[73197] = {
"Lesser Sha Puddle",
"Siege of Orgrimmar",
"enUS",
},
[56863] = {
"Sleepy Hozen Brawler",
"Stormstout Brewery",
"enUS",
},
[61989] = {
"Cursed Mogu Sculpture",
"Mogu'shan Vaults",
"enUS",
},
[56895] = {
"Weak Spot",
"Gate of the Setting Sun",
"enUS",
},
[56927] = {
"Hozen Party Animal",
"Stormstout Brewery",
"enUS",
},
[60009] = {
"Feng the Accursed",
"Mogu'shan Vaults",
"enUS",
},
[67417] = {
"Gaja's War-Wolf",
"Lion's Landing",
"enUS",
},
[61670] = {
"Sik'thik Demolisher",
"Siege of Niuzao Temple",
"enUS",
},
[72655] = {
"Fragment of Pride",
"Siege of Orgrimmar",
"enUS",
},
[71154] = {
"Ka'roz the Locust",
"Siege of Orgrimmar",
"enUS",
},
[61239] = {
"Glintrok Oracle",
"Mogu'shan Palace",
"enUS",
},
[61766] = {
"Crypt Guardian",
"Crypt of Forgotten Kings",
"enUS",
},
[61814] = {
"Jin Ironfist",
"Crypt of Forgotten Kings",
"enUS",
},
[71474] = {
"Embodied Despair",
"Siege of Orgrimmar",
"enUS",
},
[58812] = {
"Hateful Essence",
"Shado-Pan Monastery",
"enUS",
},
[61910] = {
"Resin Flake",
"Siege of Niuzao Temple",
"enUS",
},
[71155] = {
"Korven the Prime",
"Siege of Orgrimmar",
"enUS",
},
[66652] = {
"Lesser Volatile Energy",
"Shado-Pan Monastery",
"enUS",
},
[56912] = {
"Krik'thik Engulfer",
"Gate of the Setting Sun",
"enUS",
},
[71475] = {
"Rook Stonetoe",
"Siege of Orgrimmar",
"enUS",
},
[59100] = {
"Expired Test Subject",
"Scholomance",
"enUS",
},
[71603] = {
"Sha Puddle",
"Siege of Orgrimmar",
"enUS",
},
[71156] = {
"Kaz'tik the Manipulator",
"Siege of Orgrimmar",
"enUS",
},
[61240] = {
"Glintrok Skulker",
"Mogu'shan Palace",
"enUS",
},
[61783] = {
"Crypt Guardian",
"Crypt of Forgotten Kings",
"enUS",
},
[71476] = {
"Embodied Misery",
"Siege of Orgrimmar",
"enUS",
},
[69017] = {
"Primordius",
"Throne of Thunder",
"enUS",
},
[67548] = {
"Sunwalker Chagon",
"Lion's Landing",
"enUS",
},
[59915] = {
"Jasper Guardian",
"Mogu'shan Vaults",
"enUS",
},
[56865] = {
"Aqua Dancer",
"The Secrets of Ragefire",
"enUS",
},
[56929] = {
"Krik'thik Protectorate",
"Gate of the Setting Sun",
"enUS",
},
[70327] = {
"Stone Watcher",
"Mogu Island Loot Room",
"enUS",
},
[71477] = {
"Embodied Gloom",
"Siege of Orgrimmar",
"enUS",
},
[71030] = {
"Overseer Elaglo",
"The Secrets of Ragefire",
"enUS",
},
[71158] = {
"Rik'kal the Dissector",
"Siege of Orgrimmar",
"enUS",
},
[59213] = {
"Woven Boneguard",
"Scholomance",
"enUS",
},
[70328] = {
"Zandalari Venomblade",
"Mogu Island Loot Room",
"enUS",
},
[56706] = {
"Krik'thik Bombardier",
"Gate of the Setting Sun",
"enUS",
},
[59804] = {
"Gripping Hatred",
"Shado-Pan Monastery",
"enUS",
},
[59820] = {
"Pandaren Cannoneer",
"Gate of the Setting Sun",
"enUS",
},
[71542] = {
"Blood",
"Siege of Orgrimmar",
"enUS",
},
[68508] = {
"Bloodhilt Earth-Singer",
"Lion's Landing",
"enUS",
},
[61928] = {
"Sik'thik Guardian",
"Siege of Niuzao Temple",
"enUS",
},
[59980] = {
"Meat Graft",
"Scholomance",
"enUS",
},
[59501] = {
"Reanimated Corpse",
"Scholomance",
"enUS",
},
[71479] = {
"He Softfoot",
"Siege of Orgrimmar",
"enUS",
},
[71543] = {
"Immerseus",
"Siege of Orgrimmar",
"enUS",
},
[59613] = {
"Professor Slate",
"Scholomance",
"enUS",
},
[72661] = {
"Zeal",
"Siege of Orgrimmar",
"enUS",
},
[71160] = {
"Iyyokuk the Lucid",
"Siege of Orgrimmar",
"enUS",
},
[68669] = {
"S.H.A.R.K. Rocketeer",
"Lion's Landing",
"enUS",
},
[2630] = {
"Earthbind Totem",
"Lion's Landing",
"enUS",
},
[61338] = {
"Glintrok Skulker",
"Mogu'shan Palace",
"enUS",
},
[71480] = {
"Sun Tenderheart",
"Siege of Orgrimmar",
"enUS",
},
[61929] = {
"Sik'thik Amber-Weaver",
"Siege of Niuzao Temple",
"enUS",
},
[65522] = {
"Bubble Shield",
"Stormstout Brewery",
"enUS",
},
[71161] = {
"Kil'ruk the Wind-Reaver",
"Siege of Orgrimmar",
"enUS",
},
[56867] = {
"Fiery Trickster",
"Stormstout Brewery",
"enUS",
},
[63526] = {
"Bataari Flamecaller",
"Brewmoon Festival",
"enUS",
},
[62009] = {
"Shadows of Anger",
"Crypt of Forgotten Kings",
"enUS",
},
[71481] = {
"Embodied Sorrow",
"Siege of Orgrimmar",
"enUS",
},
[59614] = {
"Bored Student",
"Scholomance",
"enUS",
},
[68639] = {
"Bloodhilt Battlemage",
"Lion's Landing",
"enUS",
},
[61243] = {
"Gekkan",
"Mogu'shan Palace",
"enUS",
},
[71865] = {
"Garrosh Hellscream",
"Siege of Orgrimmar",
"enUS",
},
[61339] = {
"Glintrok Oracle",
"Mogu'shan Palace",
"enUS",
},
[71993] = {
"Desperation Spawn",
"Siege of Orgrimmar",
"enUS",
},
[59359] = {
"Flesh Horror",
"Scholomance",
"enUS",
},
[61946] = {
"Harthak Stormcaller",
"Mogu'shan Palace",
"enUS",
},
[68640] = {
"Bloodhilt Lightsworn",
"Lion's Landing",
"enUS",
},
[63527] = {
"Bataari Yaungol",
"Brewmoon Festival",
"enUS",
},
[59982] = {
"Meat Graft",
"Scholomance",
"enUS",
},
[59487] = {
"Bubble Shield",
"Stormstout Brewery",
"enUS",
},
[59503] = {
"Brittle Skeleton",
"Scholomance",
"enUS",
},
[59519] = {
"Stout Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[69375] = {
"Hidden Fog",
"Throne of Thunder",
"enUS",
},
[67874] = {
"Bloodhilt Wolf-Sister",
"Lion's Landing",
"enUS",
},
[62633] = {
"Sik'thik Builder",
"Siege of Niuzao Temple",
"enUS",
},
[72154] = {
"Desecrated Weapon",
"Siege of Orgrimmar",
"enUS",
},
[61707] = {
"Abomination of Anger",
"Crypt of Forgotten Kings",
"enUS",
},
[59184] = {
"Jandice Barov",
"Scholomance",
"enUS",
},
[30654] = {
"Totem of Wrath IV",
"Naxxramas",
},
[61340] = {
"Glintrok Hexxer",
"Mogu'shan Palace",
"enUS",
},
[59360] = {
"Meat Graft",
"Scholomance",
"enUS",
},
[5913] = {
"Tremor Totem",
"Naxxramas",
},
[61947] = {
"Kargesh Ribcrusher",
"Mogu'shan Palace",
"enUS",
},
[63528] = {
"Warbringer Qobi",
"Brewmoon Festival",
"enUS",
},
[5925] = {
"Grounding Totem",
"Northrend",
},
[60047] = {
"Amethyst Guardian",
"Mogu'shan Vaults",
"enUS",
},
[72986] = {
"Shanna Sparkfizz",
"Siege of Orgrimmar",
"enUS",
},
[60143] = {
"Gara'jal the Spiritbinder",
"Mogu'shan Vaults",
"enUS",
},
[59153] = {
"Rattlegore",
"Scholomance",
"enUS",
},
[58722] = {
"Lilian Voss",
"Scholomance",
"enUS",
},
[59808] = {
"Shado-Pan Stormbringer",
"Shado-Pan Monastery",
"enUS",
},
[61389] = {
"Kargesh Highguard",
"Mogu'shan Palace",
"enUS",
},
[61453] = {
"Mu'Shiba",
"Mogu'shan Palace",
"enUS",
},
[60447] = {
"Krik'thik Saboteur",
"Gate of the Setting Sun",
"enUS",
},
[61485] = {
"General Pa'valak",
"Siege of Niuzao Temple",
"enUS",
},
[61565] = {
"Quilen Statue",
"Crypt of Forgotten Kings",
"enUS",
},
[70401] = {
"Zandalari Arcweaver",
"Mogu Island Loot Room",
"enUS",
},
[69699] = {
"Massive Anima Golem",
"Throne of Thunder",
"enUS",
},
[62795] = {
"Sik'thik Warden",
"Siege of Niuzao Temple",
"enUS",
},
[68294] = {
"S.H.A.R.K. Sapper",
"Lion's Landing",
"enUS",
},
[65414] = {
"Ethereal Sha",
"Shado-Pan Monastery",
"enUS",
},
[58803] = {
"Residual Hatred",
"Shado-Pan Monastery",
"enUS",
},
[67081] = {
"Forgotten King",
"Crypt of Forgotten Kings",
"enUS",
},
[71712] = {
"Despair Spawn",
"Siege of Orgrimmar",
"enUS",
},
[69700] = {
"Large Anima Golem",
"Throne of Thunder",
"enUS",
},
[59522] = {
"Sudsy Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[56472] = {
"Fragrant Lotus",
"Shado-Pan Monastery",
"enUS",
},
[60576] = {
"Stone Quilen",
"Mogu'shan Vaults",
"enUS",
},
[64185] = {
"Bataari War Yeti",
"Brewmoon Festival",
"enUS",
},
[62205] = {
"Wing Leader Ner'onok",
"Siege of Niuzao Temple",
"enUS",
},
[69701] = {
"Anima Golem",
"Throne of Thunder",
"enUS",
},
[61247] = {
"Glintrok Greenhorn",
"Mogu'shan Palace",
"enUS",
},
[72927] = {
"Kovok",
"Siege of Orgrimmar",
"enUS",
},
[59794] = {
"Krik'thik Disruptor",
"Gate of the Setting Sun",
"enUS",
},
[69702] = {
"Ritualist Thal",
"Throne of Thunder",
"enUS",
},
[59459] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[61567] = {
"Vizier Jin'bak",
"Siege of Niuzao Temple",
"enUS",
},
[56473] = {
"Flying Snow",
"Shado-Pan Monastery",
"enUS",
},
[71491] = {
"Guardian of Sacrifice",
"Crypt of Forgotten Kings",
"enUS",
},
[65304] = {
"Hateful Monstrosity",
"Crypt of Forgotten Kings",
"enUS",
},
[62254] = {
"Quilen Watcher",
"Crypt of Forgotten Kings",
"enUS",
},
[59220] = {
"Jandice Barov",
"Scholomance",
"enUS",
},
[56713] = {
"Master Snowdrift",
"UNKNOWN",
"enUS",
},
[71492] = {
"Maragor",
"Crypt of Forgotten Kings",
"enUS",
},
[61392] = {
"Harthak Flameseeker",
"Mogu'shan Palace",
"enUS",
},
[60386] = {
"Zandalari Terror Rider",
"Mogu'shan Vaults",
"enUS",
},
[60402] = {
"Zandalari Fire-Dancer",
"Mogu'shan Vaults",
"enUS",
},
[73696] = {
"Grand Master Alchemist Ki'xen",
"Siege of Orgrimmar",
"enUS",
},
[59460] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[60051] = {
"Cobalt Guardian",
"Mogu'shan Vaults",
"enUS",
},
[70663] = {
"Embercore",
"The Secrets of Ragefire",
"enUS",
},
[59684] = {
"Hozen Party Animal",
"Stormstout Brewery",
"enUS",
},
[71334] = {
"Poison Bolt Totem",
"The Secrets of Ragefire",
"enUS",
},
[58758] = {
"Soul Fragment",
"Scholomance",
"enUS",
},
[58822] = {
"Risen Guard",
"Scholomance",
"enUS",
},
[73091] = {
"Blackfuse Sellsword",
"Siege of Orgrimmar",
"enUS",
},
[56890] = {
"Krik'thik Infiltrator",
"Gate of the Setting Sun",
"enUS",
},
[56906] = {
"Saboteur Kip'tilak",
"Gate of the Setting Sun",
"enUS",
},
[72964] = {
"Goro'dan",
"Siege of Orgrimmar",
"enUS",
},
[67407] = {
"Bloodhilt Raider",
"Lion's Landing",
"enUS",
},
[59078] = {
"Failed Student",
"Scholomance",
"enUS",
},
[59605] = {
"Sodden Hozen Brawler",
"The Secrets of Ragefire",
"enUS",
},
[71591] = {
"Automated Shredder",
"Siege of Orgrimmar",
"enUS",
},
[73667] = {
"Windreaver Tar'rath",
"Siege of Orgrimmar",
"enUS",
},
[70665] = {
"Kor'kron Dire Soldier",
"The Secrets of Ragefire",
"enUS",
},
[65402] = {
"Gurthan Swiftblade",
"Mogu'shan Palace",
"enUS",
},
[56731] = {
"Habanero Brew",
"Stormstout Brewery",
"enUS",
},
[58791] = {
"Lilian's Soul",
"Scholomance",
"enUS",
},
[58807] = {
"Vestige of Hatred",
"Shado-Pan Monastery",
"enUS",
},
[58823] = {
"Scholomance Neophyte",
"Scholomance",
"enUS",
},
[69069] = {
"Living Fluid",
"Throne of Thunder",
"enUS",
},
[61442] = {
"Kuai the Brute",
"Mogu'shan Palace",
"enUS",
},
[56875] = {
"Krik'thik Demolisher",
"Gate of the Setting Sun",
"enUS",
},
[73349] = {
"Tormented Initiate",
"Siege of Orgrimmar",
"enUS",
},
[71401] = {
"Proto-Drake Whelp",
"The Secrets of Ragefire",
"enUS",
},
[72966] = {
"Resonating Amber",
"Siege of Orgrimmar",
"enUS",
},
[61634] = {
"Commander Vo'jak",
"Siege of Niuzao Temple",
"enUS",
},
[58664] = {
"Instructor Chillheart's Phylactery",
"Scholomance",
"enUS",
},
[56636] = {
"Commander Ri'mok",
"Gate of the Setting Sun",
"enUS",
},
[72981] = {
"Aggron",
"Siege of Orgrimmar",
"enUS",
},
[67416] = {
"Bloodhilt Wolf",
"Lion's Landing",
"enUS",
},
[73414] = {
"Kor'kron Reaper",
"Siege of Orgrimmar",
"enUS",
},
[70179] = {
"Ritual Guard",
"Throne of Thunder",
"enUS",
},
[59801] = {
"Krik'thik Wind Shaper",
"Gate of the Setting Sun",
"enUS",
},
[73452] = {
"Harbinger of Y'Shaarj",
"Siege of Orgrimmar",
"enUS",
},
[56764] = {
"Consuming Sha",
"UNKNOWN",
"enUS",
},
[65415] = {
"Void Sha",
"Shado-Pan Monastery",
"enUS",
},
[73095] = {
"Blackfuse Engineer",
"Siege of Orgrimmar",
"enUS",
},
[71478] = {
"Embodied Anguish",
"Siege of Orgrimmar",
"enUS",
},
[73670] = {
"Gate-Crasher Sav'ah",
"Siege of Orgrimmar",
"enUS",
},
[73191] = {
"Aqueous Defender",
"Siege of Orgrimmar",
"enUS",
},
[61610] = {
"Seething Sha",
"Crypt of Forgotten Kings",
"enUS",
},
[63519] = {
"Water Spirit",
"Brewmoon Festival",
"enUS",
},
[68036] = {
"Durumu the Forgotten",
"Throne of Thunder",
"enUS",
},
[72658] = {
"Amalgamated Hubris",
"Siege of Orgrimmar",
"enUS",
},
[56924] = {
"Inflamed Hozen Brawler",
"Stormstout Brewery",
"enUS",
},
[61216] = {
"Glintrok Hexxer",
"Mogu'shan Palace",
"enUS",
},
[73415] = {
"Ichor of Y'Shaarj",
"Siege of Orgrimmar",
"enUS",
},
[31190] = {
"Mana Spring Totem VIII",
"Naxxramas",
},
[71152] = {
"Skeer the Bloodseeker",
"Siege of Orgrimmar",
"enUS",
},
[72929] = {
"Sra'thik Amber-Master",
"Siege of Orgrimmar",
"enUS",
},
[67814] = {
"Bloodhilt Grunt",
"Lion's Landing",
"enUS",
},
[59080] = {
"Darkmaster Gandling",
"Scholomance",
"enUS",
},
[56541] = {
"Master Snowdrift",
"Shado-Pan Monastery",
"enUS",
},
[70683] = {
"Dark Shaman Xorenth",
"The Secrets of Ragefire",
"enUS",
},
[64165] = {
"Bataari Outrunner",
"Brewmoon Festival",
"enUS",
},
[61699] = {
"Sik'thik Amberwing",
"Siege of Niuzao Temple",
"enUS",
},
[71157] = {
"Xaril the Poisoned Mind",
"Siege of Orgrimmar",
"enUS",
},
[72954] = {
"Kor'thik Honor Guard",
"Siege of Orgrimmar",
"enUS",
},
[56637] = {
"Ook-Ook",
"Stormstout Brewery",
"enUS",
},
[59751] = {
"Shado-Pan Warden",
"Shado-Pan Monastery",
"enUS",
},
[71407] = {
"Amber",
"UNKNOWN",
"enUS",
},
[31185] = {
"Healing Stream Totem IX",
"Naxxramas",
},
[73012] = {
"Klaxxi Skirmisher",
"Siege of Orgrimmar",
"enUS",
},
[56717] = {
"Hoptallus",
"Stormstout Brewery",
"enUS",
},
[63106] = {
"Sik'thik Swarmer",
"Siege of Niuzao Temple",
"enUS",
},
[71979] = {
"Kor'kron Warbringer",
"Siege of Orgrimmar",
"enUS",
},
[56765] = {
"Destroying Sha",
"UNKNOWN",
"enUS",
},
[59819] = {
"Artillery",
"Gate of the Setting Sun",
"enUS",
},
[61448] = {
"Sik'thik Soldier",
"Siege of Niuzao Temple",
"enUS",
},
[59368] = {
"Krastinovian Carver",
"Scholomance",
"enUS",
},
[56877] = {
"Raigonn",
"Gate of the Setting Sun",
"enUS",
},
[61444] = {
"Ming the Cunning",
"Mogu'shan Palace",
"enUS",
},
[67093] = {
"Sik'thik Battle-Mender",
"Siege of Niuzao Temple",
"enUS",
},
[63520] = {
"Li Te",
"Brewmoon Festival",
"enUS",
},
[71245] = {
"Kor'kron Dark Shaman",
"The Secrets of Ragefire",
"enUS",
},
[59464] = {
"Hopper",
"Stormstout Brewery",
"enUS",
},
[59480] = {
"Brittle Skeleton",
"Scholomance",
"enUS",
},
[67764] = {
"Felhand Demon-Speaker",
"Lion's Landing",
"enUS",
},
[71482] = {
"Embodied Desperation",
"Siege of Orgrimmar",
"enUS",
},
[56747] = {
"Gu Cloudstrike",
"Shado-Pan Monastery",
"enUS",
},
[56763] = {
"Regenerating Sha",
"Shado-Pan Monastery",
"enUS",
},
[74009] = {
"Crawler Mine",
"Siege of Orgrimmar",
"enUS",
},
[67413] = {
"Wolf-Rider Gaja",
"Lion's Landing",
"enUS",
},
[59521] = {
"Bubbling Brew Alemental",
"Stormstout Brewery",
"enUS",
},
[73098] = {
"Kor'kron Overseer",
"Siege of Orgrimmar",
"enUS",
},
[60381] = {
"Zandalari Infiltrator",
"Mogu'shan Vaults",
"enUS",
},
[73904] = {
"Kor'kron Iron Sentinel",
"Siege of Orgrimmar",
"enUS",
},
[56766] = {
"Volatile Energy",
"Shado-Pan Monastery",
"enUS",
},
[73226] = {
"Lesser Sha Puddle",
"Siege of Orgrimmar",
"enUS",
},
[70703] = {
"Core Spider",
"The Secrets of Ragefire",
"enUS",
},
[59193] = {
"Boneweaver",
"Scholomance",
"enUS",
},
[72662] = {
"Vanity",
"Siege of Orgrimmar",
"enUS",
},
[72236] = {
"Embodied Doubt",
"Siege of Orgrimmar",
"enUS",
},
[59752] = {
"Shado-Pan Ambusher",
"Shado-Pan Monastery",
"enUS",
},
[71244] = {
"Kor'kron Shadowblade",
"The Secrets of Ragefire",
"enUS",
},
[58198] = {
"Shado-Pan Disciple",
"Shado-Pan Monastery",
"enUS",
},
[59800] = {
"Krik'thik Rager",
"Gate of the Setting Sun",
"enUS",
},
[70798] = {
"Kor'kron Emberguard",
"The Secrets of Ragefire",
"enUS",
},
[58810] = {
"Fragment of Hatred",
"Shado-Pan Monastery",
"enUS",
},
[70702] = {
"Flame Hound",
"The Secrets of Ragefire",
"enUS",
},
[60375] = {
"Zandalari Skullcharger",
"Mogu'shan Vaults",
"enUS",
},
[61434] = {
"Sik'thik Vanguard",
"Siege of Niuzao Temple",
"enUS",
},
[61337] = {
"Glintrok Ironhide",
"Mogu'shan Palace",
"enUS",
},
[61445] = {
"Haiyan the Unstoppable",
"Mogu'shan Palace",
"enUS",
},
[56862] = {
"Drunken Hozen Brawler",
"Stormstout Brewery",
"enUS",
},
[72237] = {
"Embodied Fear",
"Siege of Orgrimmar",
"enUS",
},
[61242] = {
"Glintrok Ironhide",
"Mogu'shan Palace",
"enUS",
},
[56589] = {
"Striker Ga'dok",
"Gate of the Setting Sun",
"enUS",
},
[56876] = {
"Krik'thik Sapper",
"Gate of the Setting Sun",
"enUS",
},
[56884] = {
"Corrupted Taran Zhu",
"Shado-Pan Monastery",
"enUS",
},
[61945] = {
"Gurthan Iron Maw",
"Mogu'shan Palace",
"enUS",
},
[68341] = {
"Eye Sentry",
"Throne of Thunder",
"enUS",
},
[58757] = {
"Scholomance Acolyte",
"Scholomance",
"enUS",
},
[69427] = {
"Dark Animus",
"Throne of Thunder",
"enUS",
},
[59461] = {
"Hopling",
"Stormstout Brewery",
"enUS",
},
[58633] = {
"Instructor Chillheart",
"Scholomance",
"enUS",
},
[69382] = {
"Malignant Ooze",
"Throne of Thunder",
"enUS",
},
[59426] = {
"Bopper",
"Stormstout Brewery",
"enUS",
},
[58108] = {
"Krik'thik Infiltrator",
"Gate of the Setting Sun",
"enUS",
},
[61701] = {
"Sik'thik Warrior",
"Siege of Niuzao Temple",
"enUS",
},
[56754] = {
"Azure Serpent",
"Shado-Pan Monastery",
"enUS",
},
[59467] = {
"Candlestick Mage",
"Scholomance",
"enUS",
},
[69383] = {
"Quivering Blob",
"Throne of Thunder",
"enUS",
},
[59778] = {
"Krik'thik Striker",
"Gate of the Setting Sun",
"enUS",
},
[71153] = {
"Hisek the Swarmkeeper",
"Siege of Orgrimmar",
"enUS",
},
[59242] = {
"Woven Boneguard",
"Scholomance",
"enUS",
},
[56395] = {
"Shado-Pan Novice",
"Shado-Pan Monastery",
"enUS",
},
[56719] = {
"Sha of Violence",
"Shado-Pan Monastery",
"enUS",
},
[61334] = {
"Cursed Mogu Sculpture",
"Mogu'shan Vaults",
"enUS",
},
[61436] = {
"Sik'thik Bladedancer",
"Siege of Niuzao Temple",
"enUS",
},
[71504] = {
"Siegecrafter Blackfuse",
"Siege of Orgrimmar",
"enUS",
},
[62632] = {
"Sik'thik Engineer",
"Siege of Niuzao Temple",
"enUS",
},
},
["indicator_scale"] = 0.9999999403953552,
["aura_cooldown_reverse"] = false,
["focus_color"] = {
nil,
nil,
nil,
0,
},
["ignore_softinteract_objects"] = true,
["aggro_modifies"] = {
["health_bar_color"] = false,
},
["minor_height_scale"] = 0.699999988079071,
["transparency_behavior_on_friendlies"] = true,
["aura_padding"] = 4,
["indicator_worldboss"] = false,
["hook_data"] = {
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["Time"] = 1597097268,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\castbar_icon",
["Enabled"] = false,
["Revision"] = 348,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["Name"] = "Cast Bar Icon Settings [P]",
["PlaterCore"] = 1,
["version"] = -1,
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Icon Settings:",
["Name"] = "Icon Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showIcon",
["Value"] = true,
["Name"] = "Show Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the castbar icon when enabled",
},
{
["Type"] = 4,
["Key"] = "iconOnLeftSide",
["Value"] = true,
["Name"] = "Icon on Left Side",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled it anchor the icon on the left side, right otherwise",
},
{
["Type"] = 4,
["Name"] = "Use Big Icon",
["Value"] = false,
["Key"] = "useFullSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled the icon has the size of the cast bar plus the healthbar",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Fine tune the icon size",
["Min"] = 0,
["Name"] = "Icon Size Offset",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "iconSizeOffset",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Space between the icon and the cast bar",
["Min"] = -5,
["Key"] = "iconPadding",
["Value"] = 0,
["Name"] = "Icon Padding",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option5",
["Value"] = "Can't Interrupt Texture:",
["Name"] = "Interrupt Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showTexture",
["Value"] = true,
["Name"] = "Show Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled show a texture to tell the cast can't be interrupted",
},
{
["Type"] = 3,
["Key"] = "iconTexturePath",
["Value"] = "Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON",
["Name"] = "Texture Path",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Insert the path for the texture",
},
{
["Type"] = 4,
["Key"] = "desaturatedTexture",
["Value"] = true,
["Name"] = "Texture Desaturated",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enbaled, texture is shown in black & white",
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
1,
1,
1,
0.3056715726852417,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Select the color of the texture",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture width",
["Min"] = 1,
["Name"] = "Texture Width",
["Value"] = 10,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureWidth",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "The texture is set to be the same size as the cast bar, fine tune the height as wanted",
["Min"] = -16,
["Key"] = "textureHeightMod",
["Value"] = 0,
["Name"] = "Texture Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture position",
["Min"] = -32,
["Name"] = "Texture Position",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "texturePosition",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust the texture transparency",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "textureAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1547392935,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["Enabled"] = false,
["Revision"] = 50,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["Name"] = "Color Automation [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = false\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"green\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * envTable.ExecutePercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        if (healthBar.CurrentHealth / healthBar.CurrentHealthMax <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end        \n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1547406548,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 135358,
["Enabled"] = false,
["Revision"] = 84,
["semver"] = "",
["Author"] = "Ahwa-Azralon",
["Desc"] = "Add extra effects to execute range. See the constructor script for options.",
["Name"] = "Execute Range [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["Time"] = 1663815982,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = -3564,
["Enabled"] = false,
["Revision"] = 366,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["Prio"] = 99,
["Name"] = "Attacking Specific Unit [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 1,
["Name"] = "Color",
["Value"] = {
0.5019607843137255,
0.5019607843137255,
0,
1,
},
["Key"] = "color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Bar Color",
["Value"] = true,
["Key"] = "changeBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Border Color",
["Value"] = false,
["Key"] = "changeBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Reset Colors",
["Value"] = true,
["Key"] = "resetColors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        --check the unit reaction\n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n            \n        else\n            envTable.HideNameplate (unitFrame)\n            \n        end    \n    end\n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when plater finishes an update on the nameplate\n    --check within the envTable if the healthBar of this nameplate should be hidden\n    if (envTable.IsHidden) then\n        if (unitFrame.healthBar:IsShown()) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.ShowNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.OnlyInOpenWorld = true;\n    envTable.ShowInCombat = true;\n    \n    --consts\n    envTable.REACTION_NEUTRAL = 4;\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        envTable.IsHidden = true\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        envTable.IsHidden = false\n    end\n    \nend\n\n\n\n\n",
},
["Time"] = 1633858192,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Icon"] = 1990989,
["Enabled"] = false,
["Revision"] = 76,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Hide neutral units, show when selected, see the constructor script for options.",
["Prio"] = 99,
["Name"] = "Hide Neutral Units [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["Time"] = 1621935143,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
},
["url"] = "",
["Icon"] = 135426,
["Enabled"] = false,
["Revision"] = 284,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["Name"] = "Combo Points [Plater]",
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["version"] = -1,
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.IsEnabled) then\n        if (unitFrame.IsSelf) then\n            if (envTable.ShowOnPersonalBar) then\n                envTable.BorderFrame:Show()\n            else\n                envTable.BorderFrame:Hide() \n            end\n        else\n            envTable.BorderFrame:Show()\n        end   \n    end\n    \nend   \n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border color\n    local borderColor = \"yellow\"\n    \n    --size of the border\n    local borderSize = 1\n    \n    --transparency\n    local borderAlpha = 1\n    \n    --enabled (set to false it you only want to use the extra border in other scripts)\n    local isEnabled = true\n    \n    --export border (allow the border to be used by other scripts)\n    --other scripts can use:\n    --unitFrame.healthBar.extraBorder:Show()\n    --unitFrame.healthBar.extraBorder:SetVertexColor (r, g, b)\n    --unitFrame.healthBar.extraBorder:SetBorderSizes (borderSize)\n    local canExportBorder = true\n    \n    --do not add the border to personal bar\n    local noPersonalBar = true\n    \n    --private\n    do\n        \n        local newBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        envTable.BorderFrame = newBorder\n        \n        newBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n        newBorder:UpdateSizes()\n        \n        local r, g, b = DetailsFramework:ParseColors (borderColor)\n        newBorder:SetVertexColor (r, g, b, borderAlpha)\n        \n        envTable.ShowOnPersonalBar = not noPersonalBar\n        \n        if (canExportBorder) then\n            unitFrame.healthBar.extraBorder = newBorder\n        end\n        \n        if (not isEnabled) then\n            envTable.IsEnabled = false\n        else\n            envTable.IsEnabled = true\n        end\n    end\n    \nend\n\n\n",
},
["Time"] = 1622195123,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 133689,
["Enabled"] = false,
["Revision"] = 179,
["Options"] = {
},
["Author"] = "Tecno-Azralon",
["Desc"] = "Add another border with more customizations. This border can also be manipulated by other scripts.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["LastHookEdited"] = "",
["Name"] = "Extra Border [Plater]",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "\n\n-- exported function Plater.UpdatePlateSize() from Plater.lua\n--this is for advanced users which wants to reorder the nameplate frame at their desire\n\n\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --check if there's a type of unit on this nameplate\n    local plateFrame = unitFrame:GetParent()\n    if (not plateFrame.actorType) then\n        return\n    end\n    \n    --get all the frames and cache some variables\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local profile = Plater.db.profile\n    local DB_PLATE_CONFIG = profile.plate_config\n    local isInCombat = Plater.IsInCombat()\n    local actorType = plateFrame.actorType\n    \n    local unitFrame = plateFrame.unitFrame\n    local healthBar = unitFrame.healthBar\n    local castBar = unitFrame.castBar\n    local powerBar = unitFrame.powerBar\n    local buffFrame1 = unitFrame.BuffFrame\n    local buffFrame2 = unitFrame.BuffFrame2\n    \n    --use in combat bars when in pvp\n    if (plateFrame.actorType == ACTORTYPE_ENEMY_PLAYER) then\n        if ((Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") and DB_PLATE_CONFIG.player.pvp_always_incombat) then\n            isInCombat = true\n        end\n    end\n    \n    --get the config for this actor type\n    local plateConfigs = DB_PLATE_CONFIG [actorType]\n    --get the config key based if the player is in combat\n    local castBarConfigKey, healthBarConfigKey, manaConfigKey = Plater.GetHashKey (isInCombat)\n    \n    --get the width and height from what the user set in the options panel\n    local healthBarWidth, healthBarHeight = unitFrame.customHealthBarWidth or plateConfigs [healthBarConfigKey][1], unitFrame.customHealthBarHeight or plateConfigs [healthBarConfigKey][2]\n    local castBarWidth, castBarHeight = unitFrame.customCastBarWidth or plateConfigs [castBarConfigKey][1], unitFrame.customCastBarHeight or plateConfigs [castBarConfigKey][2]\n    local powerBarWidth, powerBarHeight = unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][1], unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][2]\n    \n    --calculate the offset for the cast bar, this is done due to the cast bar be anchored to topleft and topright\n    local castBarOffSetX = (healthBarWidth - castBarWidth) / 2\n    local castBarOffSetY = plateConfigs.castbar_offset\n    \n    --calculate offsets for the power bar\n    local powerBarOffSetX = (healthBarWidth - powerBarWidth) / 2\n    local powerBarOffSetY = 0\n    \n    --calculate the size deviation for pets\n    local unitType = Plater.GetUnitType (plateFrame)\n    if (unitType == \"pet\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.pet_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.pet_width_scale\n        \n    elseif (unitType == \"minus\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.minor_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.minor_width_scale\n    end\n    \n    --unit frame - is set to be the same size as the plateFrame\n    unitFrame:ClearAllPoints()\n    unitFrame:SetAllPoints()\n    \n    --calculates the health bar anchor points\n    --it will always be placed in the center of the nameplate area (where it accepts mouse clicks) \n    local xOffSet = (plateFrame:GetWidth() - healthBarWidth) / 2\n    local yOffSet = (plateFrame:GetHeight() - healthBarHeight) / 2\n    \n    --set the health bar point\n    healthBar:ClearAllPoints()\n    PixelUtil.SetPoint (healthBar, \"topleft\", unitFrame, \"topleft\", xOffSet + profile.global_offset_x, -yOffSet + profile.global_offset_y)\n    PixelUtil.SetPoint (healthBar, \"bottomright\", unitFrame, \"bottomright\", -xOffSet + profile.global_offset_x, yOffSet + profile.global_offset_y)\n    \n    --set the cast bar point and size\n    castBar:ClearAllPoints()\n    PixelUtil.SetPoint (castBar, \"topleft\", healthBar, \"bottomleft\", castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetPoint (castBar, \"topright\", healthBar, \"bottomright\", -castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetHeight (castBar, castBarHeight)\n    PixelUtil.SetSize (castBar.Icon, castBarHeight, castBarHeight)\n    PixelUtil.SetSize (castBar.BorderShield, castBarHeight * 1.4, castBarHeight * 1.4)\n    \n    --set the power bar point and size\n    powerBar:ClearAllPoints()\n    PixelUtil.SetPoint (powerBar, \"topleft\", healthBar, \"bottomleft\", powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetPoint (powerBar, \"topright\", healthBar, \"bottomright\", -powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetHeight (powerBar, powerBarHeight)\n    \n    --power bar are hidden by default, show it if there's a custom size for it\n    if (unitFrame.customPowerBarWidth and unitFrame.customPowerBarHeight) then\n        powerBar:SetUnit (unitFrame.unit)\n    end\n    \n    --aura frames\n    local bf1Anchor = Plater.db.profile.aura_frame1_anchor\n    Plater.SetAnchor (buffFrame1, {side = bf1Anchor.side, x = bf1Anchor.x, y = bf1Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura_grow_direction or 2) == 2)\n    \n    local bf2Anchor = Plater.db.profile.aura_frame2_anchor\n    Plater.SetAnchor (buffFrame2, {side = bf2Anchor.side, x = bf2Anchor.x, y = bf2Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura2_grow_direction or 2) == 2)\n    \nend\n\n\n",
},
["Time"] = 1596791840,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 574574,
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Function Plater.UpdatePlateSize from Plater.lua exported to scritps.",
["Name"] = "Reorder Nameplate [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --set this to true if you are not using threat colors in the health bar\n    envTable.ForceRefreshNameplateColor = true\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --do nothing if the unit is the player it self\n    if (unitFrame.IsSelf) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    else\n        if (envTable.ForceRefreshNameplateColor) then\n            Plater.RefreshNameplateColor (unitFrame) \n        end\n    end    \n    \nend",
},
["Time"] = 1554138845,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 136207,
["Enabled"] = false,
["Revision"] = 59,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Change the nameplate color when a nameplate does not have the auras set in the constructor script.",
["Name"] = "Don't Have Aura [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShow = false;\n    envTable.TargetAmount:SetText (\"\")\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when a nameplate is added to the screen check if the player is in combat\n    if (InCombatLockdown()) then\n        --player is in combat, check if can check amount of targets\n        envTable.CanShow = envTable.CanShowTargetAmount();\n        \n    else\n        envTable.CanShow = false; \n    end\n    \n    envTable.TargetAmount:SetText (\"\");\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TargetAmount:SetText (\"\");\n    envTable.CanShow = false;\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --if the script is allowed to show the amount of targets\n    --also check if the unit is in combat\n    if (envTable.CanShow and UnitAffectingCombat (unitId)) then\n        \n        --check if can update the amount of targets following the cooldown set in the constructor script\n        --by default Plater updates the nameplate every 250ms, by default the cooldown is 2, so it'll update the amuont of target every 1/2 of a second\n        envTable.UpdateCooldown = envTable.UpdateCooldown + 1\n        if (envTable.UpdateCooldown < envTable.UpdateInterval) then\n            return\n        else\n            \n            --reset the cooldown interval to check the amount of target again\n            envTable.UpdateCooldown = 0\n            \n            --get the amount of targets\n            local amount;\n            if (envTable.InRaid) then\n                amount = envTable.NumTargetsInRaid (unitFrame)      \n                \n            elseif (envTable.InParty) then\n                amount = envTable.NumTargetsInParty (unitFrame)   \n                \n            else\n                envTable.TargetAmount:SetText (\"\")\n                return\n            end\n            \n            --update the amount text\n            if (amount == 0) then\n                envTable.TargetAmount:SetText (\"\")\n            else\n                envTable.TargetAmount:SetText (amount)\n            end\n            \n        end\n    end\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can show the amount of targets\n    envTable.CanShow = envTable.CanShowTargetAmount();\n    \n    if (not envTable.CanShow) then\n        envTable.TargetAmount:SetText (\"\") \n    end\nend\n\n\n\n\n",
["Constructor"] = "--all gray text like this are comments and do not run as code\n--build the settings and basic functions for the hook\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --declare setting variables:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    local showInRaid = true;\n    local showInDungeon = true;\n    local showInArena = false;\n    local showInBattleground = false;\n    local showInOpenWorld = true;\n    \n    envTable.UpdateInterval = 2; --each 2 updates in the nameplate it'll update the amount of targets\n    \n    local anchor = {\n        side = 6, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 4, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    \n    --frames:\n    \n    --create the text that will show the amount of people targeting the unit\n    if (not  unitFrame.healthBar.TargetAmount) then\n        envTable.TargetAmount = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.TargetAmount, anchor);\n        unitFrame.healthBar.TargetAmount = envTable.TargetAmount\n    end\n    \n    --in case Plater wipes the envTable\n    envTable.TargetAmount = unitFrame.healthBar.TargetAmount\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --private variables (they will be used in the other scripts within this hook)\n    envTable.CanShow = false;\n    envTable.UpdateCooldown = 0;\n    envTable.InRaid = false;\n    envTable.InParty = false;\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    --update the InRaid or InParty proprieties\n    function envTable.UpdateGroupType()\n        if (IsInRaid()) then\n            envTable.InRaid = true;\n            envTable.InParty = false;     \n            \n        elseif (IsInGroup()) then\n            envTable.InRaid = false;\n            envTable.InParty = true;   \n            \n        else\n            envTable.InRaid = false;            \n            envTable.InParty = false;\n        end\n    end\n    \n    --this function controls if the amount of targets can show following the settings in the top of this script\n    function envTable.CanShowTargetAmount()\n        \n        local _, instanceType, difficultyID, _, _, _, _, instanceMapID, instanceGroupSize = GetInstanceInfo()\n        \n        if (showInRaid and instanceType == \"raid\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInDungeon and instanceType == \"party\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInArena and instanceType == \"arena\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInBattleground and instanceType == \"pvp\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInOpenWorld and instanceType == \"none\") then\n            envTable.UpdateGroupType()\n            if (envTable.InRaid or envTable.InParty) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    --get the amount of player targetting the unit in raid or party\n    function envTable.NumTargetsInRaid (unitFrame)\n        local amount = 0\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        return amount\n    end\n    \n    function envTable.NumTargetsInParty()\n        local amount = 0\n        for i = 1, GetNumGroupMembers() - 1 do\n            local unit = \"party\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        local unit = \"playertarget\"\n        if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n            amount = amount + 1\n        end        \n        \n        return amount\n    end\n    \nend",
},
["Time"] = 1548278227,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 1966587,
["Enabled"] = false,
["Revision"] = 182,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show how many raid members are targeting the unit",
["Name"] = "Players Targeting a Target [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1608663128,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = false,
["Revision"] = 356,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Name"] = "Aura Reorder [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["Time"] = 1552354619,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 878211,
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Changes the target color to the color set in the constructor script.",
["Name"] = "Current Target Color [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
["enableClassification"] = true,
["targetBorder"] = {
1,
1,
1,
1,
},
["enableBorder"] = true,
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateBorder(self, unitFrame)\n    modTable.UpdateClassificationIndicator(self, unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateBorder(self, unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateClassificationIndicator(self, unitFrame)\nend\n\n\n",
["Initialization"] = "function(modTable)\n    local UNITREACTION_HOSTILE = 3\n    local UNITREACTION_NEUTRAL = 4\n    local UNITREACTION_FRIENDLY = 5\n    \n    local ACTORTYPE_FRIENDLY_PLAYER = \"friendlyplayer\"\n    local ACTORTYPE_FRIENDLY_NPC = \"friendlynpc\"\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local ACTORTYPE_ENEMY_NPC = \"enemynpc\"\n    local ACTORTYPE_PLAYER = \"player\"\n    \n    function modTable.UpdateBorder(self, unitFrame)\n        if modTable.config.enableBorder then\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetBorderColor(self, modTable.config.targetBorder)\n            else\n                Plater.SetBorderColor(self, modTable.config.notargetBorder)\n            end\n        end\n    end\n    \n    function modTable.UpdateClassificationIndicator(self, unitFrame)\n        if modTable.config.enableClassification then\n            if self.actorType == ACTORTYPE_ENEMY_NPC then\n                local unitClassification = UnitClassification (self.namePlateUnitToken)\n                if (unitClassification == \"worldboss\") then\n                    modTable.SetClassificationIndicator(unitFrame, \"elite\")\n                elseif (unitClassification == \"rareelite\") then\n                    modTable.SetClassificationIndicator(unitFrame, \"rare\")\n                elseif (unitClassification == \"elite\") then\n                    modTable.SetClassificationIndicator(unitFrame, \"elite\")\n                elseif (unitClassification == \"rare\") then\n                    modTable.SetClassificationIndicator(unitFrame, \"rare\")\n                else\n                    modTable.SetClassificationIndicator(unitFrame, \"none\")\n                end\n            else\n                modTable.SetClassificationIndicator(unitFrame, \"none\")\n            end\n        end\n    end\n    \n    function modTable.SetClassificationIndicator(unitFrame, type)\n        if unitFrame.ClassificationIndicatorType == type then return end\n        unitFrame.ClassificationIndicatorType = type\n        local indicator = unitFrame.ClassificationIndicator\n        if indicator then\n            if type == \"elite\" then\n                indicator:SetTexCoord(0, 0.15, 0.343, 0.609)\n                indicator:Show()\n            elseif type == \"rare\" then\n                indicator:SetTexCoord(0, 0.15, 0.5, 0.78)\n                indicator:Show()\n            elseif type == \"none\" then\n                indicator:Hide()\n            end\n        end\n    end\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    unitFrame.ClassificationIndicator = unitFrame.ClassificationIndicator or \n    Plater:CreateImage(unitFrame.healthBar, \n        [[Interface\\TargetingFrame\\Nameplates]], 14, 13, \"overlay\", {0, 0.15, 0.24, 0.48})\n    Plater.SetAnchor(unitFrame.ClassificationIndicator, {\n            side = 2,\n            x = 0, --x offset\n            y = 0, --y offset\n    })\n    \n    unitFrame.ClassificationIndicator:Hide()\n    unitFrame.ClassificationIndicatorType = \"none\"\nend",
},
["Time"] = 1666434995,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/8nX2H6c7V/1",
["Icon"] = 298586,
["Enabled"] = true,
["Revision"] = 330,
["semver"] = "1.0.0",
["Author"] = "Sanlulpriest-熊猫酒仙",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Blizz-Style Border&Indicator",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "CLASSIFICATION",
["Value"] = "Blizzlike Classification Indicator",
["Name"] = "Blizzlike Classification Indicator",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "enableClassification",
["Value"] = true,
["Name"] = "Enable",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "BLANK1",
["Value"] = 0,
["Name"] = "Blank1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "BORDER_COLOR",
["Value"] = "Border Color",
["Name"] = "Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "enableBorder",
["Value"] = true,
["Name"] = "Enable",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "targetBorder",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Target Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "notargetBorder",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Notarget Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["HooksTemp"] = {
},
["version"] = 1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateShield(unitFrame)\nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateShield(unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    function envTable.updateShield(frame) \n        local castBar = frame.castBar\n        local shield = castBar.BorderShield\n        \n        if not castBar.canInterrupt then\n            shield:Hide()\n        end \n    end\nend\n\n\n",
},
["Time"] = 1666434939,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/JLVY55vqV/1",
["Icon"] = 133504,
["Enabled"] = false,
["Revision"] = 19,
["semver"] = "1.0.0",
["Author"] = "Egraowdh-Illidan",
["Desc"] = " on uninterruptible casts",
["Prio"] = 99,
["Name"] = "No Castbar Shield",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["version"] = 1,
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Player Logon"] = "function ()\n    local DF = _G [\"DetailsFramework\"]\n    Plater.CreateShowAuraIconAnimation =  function (iconFrame)\n        local iconShowInAnimation = DF:CreateAnimationHub (iconFrame)\n        iconFrame.ShowAnimation = iconShowInAnimation\n    end\nend",
},
["Time"] = 1673040507,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/gSQ9tPyO7/1",
["Icon"] = 519384,
["Enabled"] = true,
["Revision"] = 17,
["semver"] = "1.0.0",
["Author"] = "Ariani-Antonidas",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Disable Aura Show Animation",
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["version"] = 1,
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    function Plater.UpdateSpellNameSize (nameString, actorType, cutOff, inCombat)\n        local spellName = nameString:GetText()\n        \n        if not spellName or spellName == \"\" then\n            return\n        end\n        \n        -- The \"70\" (default) is the maximum length, in pixels, that spell names will be allowed to be. If the next letter would go beyond the length you chose, it will be truncated. Edit anything else at your own risk.\n        local maxLength = Plater.MaxCastBarTextLength or 120\n        cutOff = cutOff or 10\n        actorType = actorType or \"enemynpc\"\n        \n        if (not Plater.db.profile.no_spellname_length_limit) then\n            local castKey = Plater.GetHashKey(inCombat)\n            if Plater.db.profile.plate_config[actorType][castKey] then\n                maxLength = Plater.db.profile.plate_config[actorType][castKey][1] - cutOff\n            end\n        end\n        \n        while (nameString:GetStringWidth() > maxLength) do\n            spellName = strsub (spellName, 1, #spellName - 1)\n            nameString:SetText (spellName)\n            if (string.len (spellName) <= 1) then\n                break\n            end\n        end\n    end \nend\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1666434939,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 135933,
["Enabled"] = true,
["Revision"] = 82,
["Options"] = {
},
["Author"] = "Chrissinger-Mal'Ganis",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Shorten Cast Name Length",
["PlaterCore"] = 1,
["version"] = -1,
["semver"] = "",
["LastHookEdited"] = "",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitGUID, unitFrame, envTable)\n    \n    if UnitExists(\"pet\") then\n        \n        local a = UnitGUID(\"pet\")\n        \n        \n        \n        envTable.NpcColors = {\n            \n            \n            \n            \n            [a] = \"green\", --using regular mob name and color it as red\n            \n        } --close custom color bracket\n        \n        --attempt to get the color from the unit color list\n        local color = envTable.NpcColors [unitFrame.namePlateUnitGUID]\n        \n        --if the color exists, set the health bar color\n        if (color) then\n            Plater.SetNameplateColor (unitFrame, color)\n        end\n    else\n        return\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitGUID, unitFrame, envTable)\n    \n    if UnitExists(\"pet\") then\n        \n        local a = UnitGUID(\"pet\")\n        \n        \n        \n        envTable.NpcColors = {\n            \n            \n            \n            \n            [a] = \"green\", --using regular mob name and color it as red\n            \n        } --close custom color bracket\n        \n        --attempt to get the color from the unit color list\n        local color = envTable.NpcColors [unitFrame.namePlateUnitGUID]\n        \n        --if the color exists, set the health bar color\n        if (color) then\n            Plater.SetNameplateColor (unitFrame, color)\n        end\n    else\n        return\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1663815984,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 132193,
["Enabled"] = true,
["Revision"] = 167,
["semver"] = "",
["Author"] = "Drookun-Gehennas",
["Desc"] = "pet color",
["Prio"] = 99,
["Name"] = "color own pet",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Option 1",
["Value"] = {
0.5254901960784314,
1,
0.9921568627450981,
1,
},
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["HooksTemp"] = {
},
["version"] = -1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local name = unitFrame.healthBar.unitName:GetText()\n    \n    if name and IsActiveBattlefieldArena() then\n        for i=1,5 do\n            if UnitIsUnit(unitId, \"arena\"..i) then\n                unitFrame.healthBar.unitName:SetText(i) \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1672459632,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/BbZj1LI7t/1",
["Enabled"] = true,
["Revision"] = 40,
["Options"] = {
},
["Author"] = "Orangechikin-Skullcrusher",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Arena 1 2 3",
["PlaterCore"] = 1,
["semver"] = "1.0.0",
["HooksTemp"] = {
},
["version"] = 1,
},
},
["auras_per_row_auto"] = false,
["aura_width2"] = 25,
["aura_stack_size"] = 11,
["extra_icon_caster_outline"] = "OUTLINE",
["aura_width"] = 30,
["aura_show_offensive_cd"] = true,
["bossmod_support_enabled"] = false,
["health_statusbar_bgcolor"] = {
0.1137254901960784,
0.1137254901960784,
0.1137254901960784,
0.8900000005960464,
},
["aura_show_crowdcontrol"] = true,
["script_data_trash"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1669340967,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 137,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["__TrashAt"] = 1716487327,
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Key"] = "indicatorAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Fill Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
["version"] = -1,
["Name"] = "Add - Health Markers [P]",
["NpcNames"] = {
"197697",
"59544",
},
},
},
["extra_icon_timer_outline"] = "OUTLINE",
["aura_border_colors"] = {
["crowdcontrol"] = {
0,
0,
0,
},
["steal_or_purge"] = {
nil,
0,
0,
},
["is_buff"] = {
nil,
0,
0,
},
},
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
},
["script_auto_imported"] = {
["Relics 9.2 M Dungeons"] = 2,
["Cast - Effect After Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 2,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Unit - Health Markers"] = 12,
["Cast - Tank Interrupt"] = 12,
["Cast - Important Target [P]"] = 2,
["Cast - Very Important"] = 15,
["Cast - Alert + Timer [P]"] = 4,
["Aura is Shield [P]"] = 2,
["Add - Warning [P]"] = 5,
["Unit - Show Energy"] = 11,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Quick Flash"] = 2,
["Aura - Buff Alert"] = 15,
["Auto Set Skull"] = 11,
["Add - Explode on Die [P]"] = 1,
["Spiteful Affix"] = 3,
["Unit - Important"] = 11,
["Add - Non Elite Trash [P]"] = 4,
["Cast - On Going Cast [P]"] = 2,
["Countdown"] = 11,
["Cast - Stop Casting"] = 4,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 15,
["Fixate"] = 11,
["Cast - Shield Interrupt"] = 2,
["Cast - Circular Swipe"] = 4,
["Cast - Glowing [P]"] = 10,
["Fixate On You"] = 11,
},
["target_highlight_color"] = {
0.9411764705882353,
1,
0.9607843137254902,
},
["extra_icon_wide_icon"] = false,
["extra_icon_stack_outline"] = "OUTLINE",
["range_check_alpha"] = 1,
["click_space"] = {
175,
35,
},
["aura2_grow_direction"] = 3,
["range_check_in_range_or_target_alpha_friendlies"] = 0.7999999523162842,
["aura_frame2_anchor"] = {
["y"] = 32.6219482421875,
["side"] = 2,
},
["cast_statusbar_texture"] = "Blizzard",
["auto_toggle_friendly"] = {
["cities"] = false,
["world"] = false,
},
["indicator_faction"] = false,
["castbar_icon_x_offset"] = 7,
["debuff_show_cc"] = false,
["pet_height_scale"] = 0.8999999761581421,
["aura_x_offset"] = 0,
["first_run3"] = true,
["transparency_behavior"] = 4,
["spell_animations"] = false,
["aura_consolidate"] = true,
["health_statusbar_bgtexture"] = "Blizzard",
["ui_parent_target_strata"] = "BACKGROUND",
["extra_icon_width"] = 24.46985626220703,
["aura_show_enrage"] = true,
["health_statusbar_texture"] = "Blizzard",
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Execute Range"] = 1,
["Cast Bar Icon Config"] = 2,
["Attacking Specific Unit"] = 2,
["Combo Points"] = 6,
["Extra Border"] = 2,
["Target Color"] = 3,
["Aura Reorder"] = 3,
["Hide Neutral Units"] = 1,
},
["cast_statusbar_color"] = {
nil,
0.7058823529411764,
nil,
1,
},
["update_throttle"] = 0.1200000047683716,
["minor_width_scale"] = 0.8999999761581421,
["castbar_target_text_size"] = 8,
["focus_indicator_enabled"] = false,
["aura_frame1_anchor"] = {
["y"] = 44.75,
["side"] = 1,
},
["indicator_extra_raidmark"] = false,
["honor_blizzard_plate_alpha"] = true,
["indicator_rare"] = false,
["not_affecting_combat_alpha"] = 0.6499999761581421,
["cast_statusbar_bgcolor"] = {
0,
0,
0,
0.4900000095367432,
},
["aura_height"] = 30,
["usePlaterWidget"] = false,
["focus_texture"] = "Blizzard",
["cast_statusbar_bgtexture"] = "Blizzard",
["aura2_x_offset"] = 0,
["target_indicator"] = "NONE",
["indicator_pet"] = false,
["border_thickness"] = 1.100000023841858,
["auto_toggle_stacking_enabled"] = true,
["indicator_raidmark_anchor"] = {
["x"] = 6,
},
["extra_icon_stack_size"] = 11.77707099914551,
["border_color"] = {
nil,
nil,
nil,
1,
},
["npc_colors"] = {
[31185] = {
true,
false,
"mediumturquoise",
},
[3296] = {
true,
false,
"white",
},
[5925] = {
false,
false,
"red",
},
[5913] = {
true,
false,
"olivedrab",
},
[30654] = {
true,
false,
"lemonchiffon",
},
[31190] = {
true,
false,
"mediumturquoise",
},
},
["target_shady_alpha"] = 0,
["aura_show_magic"] = true,
["aura_height_personal"] = 6,
["pet_width_scale"] = 0.949999988079071,
["castbar_target_font"] = "Friz Quadrata TT",
["aura_sort"] = true,
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "1",
["nameplateOverlapV"] = "1.1000000238419",
["nameplateLargeTopInset"] = "0.070000000298023",
["nameplateShowEnemyMinus"] = "0",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplatePersonalShowInCombat"] = "0",
["nameplateTargetRadialPosition"] = "1",
["nameplateMinAlpha"] = "0.90135484",
["nameplateNotSelectedAlpha"] = "1",
["clampTargetNameplateToScreen"] = "1",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "41",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "1",
["nameplateTargetBehindMaxDistance"] = "30",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "0",
["nameplatePersonalShowAlways"] = "1",
["nameplateMotionSpeed"] = "0.049999997019768",
["nameplateGlobalScale"] = "0.75",
["nameplateShowEnemyMinions"] = "1",
["nameplateShowEnemyPets"] = "1",
["nameplateShowFriendlyNPCs"] = "0",
["nameplateSelectedScale"] = "1.1499999761581",
["nameplateShowFriends"] = "1",
["nameplateMotion"] = "0",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateMinScale"] = "1",
["nameplateSelfTopInset"] = "0.62",
["nameplateOtherTopInset"] = "0.070000000298023",
["nameplateOccludedAlphaMult"] = "1",
["nameplateSelfBottomInset"] = "0.37",
["nameplateShowEnemyTotems"] = "1",
["nameplateShowFriendlyGuardians"] = "0",
["NamePlateHorizontalScale"] = "1",
["nameplateRemovalAnimation"] = "1",
["nameplateShowEnemyGuardians"] = "1",
["ShowClassColorInNameplate"] = "1",
["nameplateOverlapH"] = "0.79999995231628",
},
["aura_width_personal"] = 10,
["target_highlight_alpha"] = 1,
["login_counter"] = 35727,
["extra_icon_caster_name"] = false,
["aura_cooldown_show_swipe"] = false,
["aura_height2"] = 18,
["aura_show_only_short_dispellable_on_players"] = true,
["indicator_quest"] = false,
["aura_show_aura_by_other_players"] = true,
["tank"] = {
["colors"] = {
["pulling_from_tank"] = {
nil,
0.7019607843137254,
},
["aggro"] = {
0,
1,
0.8862745098039215,
},
["nocombat"] = {
1,
0.3568627450980392,
0.3450980392156863,
},
["noaggro"] = {
nil,
0.3372549019607843,
0.3176470588235294,
},
["pulling"] = {
nil,
0.3882352941176471,
0.3725490196078432,
},
},
},
["bossmod_aura_height"] = 18,
["aura_tracker"] = {
["debuff"] = {
418561,
429619,
419097,
331653,
188389,
259277,
8647,
},
["buff_tracked"] = {
[6346] = true,
},
["buff"] = {
273607,
397323,
},
["track_method"] = 2,
["debuff_tracked"] = {
[27226] = true,
[17800] = true,
},
["debuff_banned"] = {
[390255] = true,
[371911] = true,
[391821] = true,
[377445] = true,
[392566] = true,
[320003] = true,
[396380] = true,
[391568] = true,
[57723] = true,
[57724] = true,
[341565] = true,
[55593] = true,
[305621] = true,
[115994] = true,
[326868] = true,
[390271] = true,
[357610] = true,
[295875] = true,
[6788] = true,
},
["buff_banned"] = {
[57623] = true,
[436466] = true,
[386865] = true,
[377014] = true,
[387601] = true,
[266030] = true,
[228974] = true,
[11649] = true,
[386861] = true,
[5697] = true,
[387496] = true,
},
},
["aura_show_debuffs_personal"] = false,
["patch_version"] = 35,
["click_space_friendly"] = {
96,
},
["range_check_in_range_or_target_alpha"] = 0.7999999523162842,
["aura_timer_text_size"] = 10,
["extra_icon_show_timer"] = false,
["range_check_enabled"] = false,
["number_region_first_run"] = true,
["aura_grow_direction"] = 3,
["health_selection_overlay_alpha"] = 0,
["extra_icon_auras_mine"] = {
["Prayer of Mending"] = false,
},
["indicator_raidmark_scale"] = 0.9999999403953552,
["hover_highlight_alpha"] = 0.25,
["target_highlight_height"] = 50,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["bossmod_cooldown_text_enabled"] = false,
["ghost_auras"] = {
["auras"] = {
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
},
["health_cutoff"] = false,
["dps"] = {
["colors"] = {
["notontank"] = {
1,
0.8,
0,
},
["aggro"] = {
0,
1,
0.8862745098039215,
},
["solo"] = {
1,
0.3568627450980392,
0.3450980392156863,
},
["noaggro"] = {
1,
0.3568627450980392,
0.3450980392156863,
},
},
["use_aggro_solo"] = true,
},
["aura_alpha"] = 1,
["target_shady_enabled"] = false,
["range_check_alpha_friendlies"] = 1,
["target_shady_combat_only"] = false,
["cast_color_settings"] = {
["enabled"] = true,
["width"] = 12,
},
["extra_icon_timer_size"] = 10.43019485473633,
["auto_toggle_stacking"] = {
["arena"] = false,
["world"] = false,
},
["aura_timer_text_font"] = "Friz Quadrata TT",
["indicator_elite"] = false,
["target_highlight_texture"] = "Interface\\AddOns\\Plater\\images\\selection_indicator6",
},
["testing"] = {
["plater_resources_show_depleted"] = true,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
["healthBarColor"] = {
1,
0.69411766529083,
0.22352942824364,
1,
},
["dotColor"] = {
1,
0.69411766529083,
0.21960785984993,
1,
},
["castBarColor"] = {
1,
0.69411766529083,
0.21960785984993,
1,
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1675985738,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["Icon"] = 2175503,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["Enabled"] = true,
["Revision"] = 540,
["semver"] = "",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
240446,
},
["Prio"] = 8,
["Name"] = "Explosion Affix M+ [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showArrow",
["Value"] = true,
["Name"] = "Show Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.6156862745098,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
["castBarHeight"] = 4,
["dotColor"] = {
1,
0.21960784313725,
0.45490196078431,
1,
},
["castColor"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["healthBarColor"] = {
1,
0.1921568627451,
0.50588235294118,
1,
},
["useCastbarColor"] = false,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1713557208,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["Enabled"] = true,
["Revision"] = 757,
["semver"] = "",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["SpellIds"] = {
388537,
372851,
200682,
192307,
193827,
194043,
209410,
361180,
358320,
367500,
370225,
164224,
356460,
228026,
367561,
357284,
356138,
228554,
228974,
347775,
166336,
396721,
385311,
375384,
383648,
385831,
396275,
386025,
349929,
389467,
301184,
345306,
114650,
374623,
384933,
372749,
372743,
370765,
250169,
207981,
152964,
397888,
372107,
388923,
376934,
373960,
374724,
385551,
259732,
373084,
87618,
257739,
356407,
183088,
384899,
200154,
374544,
381663,
396073,
374699,
369675,
225100,
384194,
192563,
372683,
373803,
374020,
372730,
369365,
265089,
398206,
387411,
391634,
397914,
408805,
207980,
198959,
372696,
374045,
211464,
224374,
396018,
392451,
384663,
209033,
397048,
382670,
265091,
87779,
377950,
373424,
386757,
377500,
114646,
395859,
257397,
381470,
397801,
371984,
377488,
384823,
411001,
384633,
372223,
383651,
388392,
396812,
156718,
413385,
257899,
193826,
87761,
383823,
373017,
392640,
373939,
198934,
196838,
192288,
329975,
265487,
152818,
198962,
397726,
266106,
384014,
373943,
186269,
202181,
385553,
265523,
338406,
198750,
397878,
372735,
386024,
392576,
257736,
198595,
381593,
411002,
199726,
386546,
375687,
265433,
409492,
377402,
372561,
376200,
215433,
258672,
374533,
373942,
375439,
409271,
397386,
397383,
400777,
405812,
406678,
406358,
404472,
407733,
400430,
404713,
405391,
406333,
406227,
408576,
405042,
405375,
404896,
406783,
405437,
406918,
404732,
258777,
256551,
200580,
413044,
198073,
265741,
265407,
252781,
263943,
198379,
204667,
264694,
250096,
255577,
201399,
264734,
265368,
200642,
198904,
194956,
200630,
255371,
225573,
196587,
381834,
412922,
413607,
412129,
400641,
413622,
260666,
259531,
259187,
164887,
164965,
168082,
427459,
263961,
278444,
169839,
169445,
412063,
376171,
227913,
200345,
193633,
76813,
271174,
429037,
428374,
427672,
427668,
429172,
255041,
428926,
76634,
200050,
197546,
198079,
199193,
266181,
253544,
374563,
257784,
370764,
260894,
377844,
257426,
226304,
256405,
226296,
395427,
408975,
387955,
272609,
257732,
300414,
166335,
},
["Prio"] = 3,
["Name"] = "Cast - Ultra Important [P]",
["PlaterCore"] = 1,
["version"] = -1,
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.431372,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showArrow",
["Value"] = true,
["Name"] = "Show Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.6156862745098,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
["onlyInCombat"] = true,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Time"] = 1696878799,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = false,
["Revision"] = 111,
["semver"] = "",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["Prio"] = 2,
["Name"] = "Auto Set Skull",
["PlaterCore"] = 1,
["version"] = -1,
["Desc"] = "Auto set skull marker",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "onlyInCombat",
["Value"] = false,
["Name"] = "Only in Combat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
["NpcNames"] = {
"Crystal Thrasher",
"Blazebound Destroyer",
"Rune Seal Keeper",
},
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1685644366,
["url"] = "",
["Temp_ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["Icon"] = 841383,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["Enabled"] = true,
["Revision"] = 292,
["semver"] = "",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Author"] = "Tecno-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["Prio"] = 6,
["Name"] = "Fixate On You [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["Options"] = {
},
["NpcNames"] = {
"War Ohuna",
"Blacktooth Scrapper",
"Molten Charskin",
"Understone Demolisher",
"Rashok",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["OptionsValues"] = {
["targetingColor"] = {
0.87843143939972,
0.047058828175068,
0.04313725605607,
1,
},
["bgColor"] = {
0.50588238239288,
0.070588238537312,
1,
1,
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Time"] = 1699917360,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["Icon"] = 135945,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["Enabled"] = true,
["Revision"] = 208,
["semver"] = "",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Author"] = "Symantec-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["Prio"] = 5,
["Name"] = "M+ Spiteful",
["PlaterCore"] = 1,
["version"] = -1,
["Desc"] = "Time to die Spiteful affix",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Time to Die",
["Name"] = "Time to Die",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 50,
["Desc"] = "",
["Min"] = 10,
["Key"] = "bgWidth",
["Value"] = 27,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Width",
},
{
["Type"] = 1,
["Key"] = "bgColor",
["Value"] = {
0.50588235294118,
0.070588235294118,
1,
1,
},
["Name"] = "Background Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "",
["Min"] = 7,
["Key"] = "textSize",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 1,
["Key"] = "textColor",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Name"] = "Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option11",
["Value"] = "Targeting",
["Name"] = "Targeting",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "switchTargetName",
["Value"] = true,
["Name"] = "Show Target instead of Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useTargetingColor",
["Value"] = true,
["Name"] = "Change Color if targeting You",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "targetingColor",
["Value"] = {
0.070588235294118,
0.61960784313725,
0,
1,
},
["Name"] = "Color if targeting You",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option11",
["Value"] = 0,
["Name"] = "Option 11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["NpcNames"] = {
"174773",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1696878873,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["Icon"] = "interface/addons/plater/media/radio_64",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["Enabled"] = true,
["Revision"] = 115,
["semver"] = "",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["Prio"] = 99,
["Name"] = "Add - Explode on Die [P]",
["PlaterCore"] = 1,
["version"] = -1,
["Desc"] = "",
["Options"] = {
{
["Type"] = 4,
["Key"] = "useReverse",
["Value"] = false,
["Name"] = "Reverse Health Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useShake",
["Value"] = false,
["Name"] = "Enable Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Key"] = "shakeAmplitude",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 70,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBackground",
["Value"] = true,
["Name"] = "Show Red Background",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
["NpcNames"] = {
"194895",
"105703",
"59598",
"58319",
200388,
189299,
131402,
135052,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    envTable.ShowTargeted = scriptTable.config.ShowTargeted\n    envTable.ShowRaidMarked = scriptTable.config.ShowRaidMarked\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 0.016\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 0.016\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["Time"] = 1685562546,
["url"] = "https://wago.io/eDUdpOkg2/9",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    envTable.ShowTargeted = scriptTable.config.ShowTargeted\n    envTable.ShowRaidMarked = scriptTable.config.ShowRaidMarked\n    \nend",
["Icon"] = 644389,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend",
["Enabled"] = false,
["Revision"] = 727,
["semver"] = "1.0.8",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 0.016\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["Author"] = "Evolutious",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 0.016\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["SpellIds"] = {
},
["Prio"] = 99,
["Name"] = "Hide Nameplate by UnitID",
["PlaterCore"] = 1,
["version"] = 9,
["Desc"] = "Hide's nameplates based on the unit's name or npcID. Add the Unit Name or npcID as a trigger.",
["Options"] = {
{
["Type"] = 4,
["Key"] = "ShowTargeted",
["Value"] = true,
["Name"] = "Show if Targeted",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Determines if the nameplate should be shown if you have the unit targeted",
},
{
["Type"] = 4,
["Key"] = "ShowRaidMarked",
["Value"] = true,
["Name"] = "Show if Raid Marked",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Determines if the nameplate should be shown if it has a raid mark applied",
},
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
["castColor"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    if (scriptTable.config.useCastbarColor) then\n        if (envTable._CanInterrupt) then\n            self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n        else\n            self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarNoInterruptColor))\n        end\n    end\n    \n    -- Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1696878998,
["url"] = "https://wago.io/JgozGbm1a/16",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["Enabled"] = false,
["Revision"] = 791,
["semver"] = "1.1.13",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    if (scriptTable.config.useCastbarColor) then\n        if (envTable._CanInterrupt) then\n            self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n        else\n            self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarNoInterruptColor))\n        end\n    end\n    \n    -- Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["SpellIds"] = {
87618,
87761,
87762,
183526,
188114,
193803,
198963,
200404,
201983,
256060,
257736,
265091,
265433,
266106,
278755,
367500,
368990,
369328,
369703,
370225,
372107,
372701,
372719,
372851,
373939,
374045,
374569,
374594,
374699,
375056,
375596,
376049,
376200,
377348,
377488,
378208,
378229,
378282,
381663,
382578,
382670,
383823,
384662,
384899,
385442,
385536,
386024,
386757,
387411,
387618,
388537,
391634,
392451,
395694,
400777,
403459,
403671,
403978,
404713,
404732,
405375,
405437,
405886,
407775,
408476,
409271,
411001,
413044,
},
["Prio"] = 99,
["Name"] = "Cast - Ultra Important [OPS]",
["PlaterCore"] = 1,
["version"] = 16,
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.43137258291245,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 1,
["Key"] = "castBarNoInterruptColor",
["Value"] = {
1,
1,
0,
1,
},
["Name"] = "Cast Bar Uninterruptible Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Uninterruptible Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showArrow",
["Value"] = true,
["Name"] = "Show Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.6156862745098,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local npcID = envTable._NpcID\n        if not npcID then \n            if (unitFrame.healthMarker) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n            return \n        end\n        \n        local _, zoneType, diff = GetInstanceInfo()\n        local markersTable = zoneType == \"raid\" and scriptTable.Difficulty[diff][npcID] or scriptTable.lifePercent[npcID]\n        \n        if (markersTable) then\n            for _, p in ipairs(markersTable) do\n                if (envTable._HealthPercent > p) then\n                    local healthBar = unitFrame.healthBar\n                    local overlaySize = healthBar:GetWidth() * p/100\n                    \n                    if (not unitFrame.healthMarker) then\n                        unitFrame.healthMarker = healthBar:CreateTexture(nil, \"overlay\")\n                        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n                        unitFrame.healthOverlay = healthBar:CreateTexture(nil, \"overlay\")\n                        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    unitFrame.healthMarker:SetSize(1, healthBar:GetHeight())\n                    unitFrame.healthMarker:SetPoint(\"left\", healthBar, \"left\", overlaySize, 0)\n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    \n                    unitFrame.healthOverlay:Show()\n                    unitFrame.healthOverlay:SetSize(overlaySize, healthBar:GetHeight())\n                    unitFrame.healthOverlay:SetPoint(\"right\", unitFrame.healthMarker, \"left\", 0, 0)\n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end\n            \n            if (unitFrame.healthMarker) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if unitFrame.IsSelf or (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then return end\n    \n    envTable.UpdateMarkers(unitFrame)    \nend    \n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if unitFrame.IsSelf or (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then return end\n    \n    envTable.UpdateMarkers(unitFrame)    \nend    \n\n\n",
["Time"] = 1714419439,
["url"] = "https://wago.io/7DvxkttTL/32",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local npcID = envTable._NpcID\n        if not npcID then \n            if (unitFrame.healthMarker) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n            return \n        end\n        \n        local _, zoneType, diff = GetInstanceInfo()\n        local markersTable = zoneType == \"raid\" and scriptTable.Difficulty[diff][npcID] or scriptTable.lifePercent[npcID]\n        \n        if (markersTable) then\n            for _, p in ipairs(markersTable) do\n                if (envTable._HealthPercent > p) then\n                    local healthBar = unitFrame.healthBar\n                    local overlaySize = healthBar:GetWidth() * p/100\n                    \n                    if (not unitFrame.healthMarker) then\n                        unitFrame.healthMarker = healthBar:CreateTexture(nil, \"overlay\")\n                        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n                        unitFrame.healthOverlay = healthBar:CreateTexture(nil, \"overlay\")\n                        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    unitFrame.healthMarker:SetSize(1, healthBar:GetHeight())\n                    unitFrame.healthMarker:SetPoint(\"left\", healthBar, \"left\", overlaySize, 0)\n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    \n                    unitFrame.healthOverlay:Show()\n                    unitFrame.healthOverlay:SetSize(overlaySize, healthBar:GetHeight())\n                    unitFrame.healthOverlay:SetPoint(\"right\", unitFrame.healthMarker, \"left\", 0, 0)\n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end\n            \n            if (unitFrame.healthMarker) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend",
["Icon"] = "Interface\\Addons\\Plater\\images\\health_indicator",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n",
["Enabled"] = true,
["Revision"] = 1557,
["semver"] = "1.4.4",
["Temp_Initialization"] = "function (scriptTable)\n    \n    scriptTable.lifePercent = {\n        -------- DF Dungeons --------\n        \n        -- Azure Vault\n        [186738] = {75, 50, 25}, -- Umbrelskul\n        \n        -- Brackenhide Hollow\n        [185508] = {15}, -- Claw Fighter\n        [185528] = {15}, -- Trickclaw Mystic\n        [185534] = {15}, -- Bonebolt Hunter\n        [186121] = {4}, -- Decatriarch Wratheye\n        [186122] = {15}, -- Rira Hackclaw\n        [186124] = {15}, -- Gashtooth\n        [186125] = {15}, -- Tricktotem\n        [186206] = {15}, -- Cruel Bonecrusher\n        [186227] = {20}, -- Monstrous Decay\n        \n        -- Dawn of the Infinite\n        [198933] = {90, 85}, -- Iridikron\n        [198997] = {80}, -- Blight of Galakrond\n        [199000] = {20}, -- Deios\n        [201792] = {50}, -- Ahnzon\n        [207638] = {80}, -- Blight of Galakrond\n        [207639] = {80}, -- Blight of Galakrond\n        \n        -- Halls of Infusion\n        [189719] = {15}, -- Watcher Irideus\n        [190368] = {40}, -- Flamecaller Aymi\n        [190407] = {20}, -- Aqua Rager\n        \n        -- Neltharus\n        [194816] = {10}, -- Forgewrought Monstrosity\n        \n        -- Nokhud Offensive\n        [186151] = {60}, -- Balakar Khan\n        \n        -- Ruby Life Pools\n        [188252] = {75, 45}, -- Melidrussa\n        [190484] = {50}, -- Kyrakka\n        [197697] = {50}, -- Flamegullet\n        \n        -- Uldaman\n        [184020] = {40}, -- Hulking Berserker\n        [184422] = {70, 30}, -- Emberon\n        [184580] = {10}, -- Olaf\n        [184581] = {10}, -- Baelog\n        [184582] = {10}, -- Eric \"The Swift\"\n        \n        -------- SL Dungeons --------\n        \n        -- De Other Side\n        [164558] = {80, 60, 40, 20}, -- Hakkar the Soulflayer\n        \n        -- Halls of Atonement\n        [164218] = {70, 40}, -- Lord Chamberlain\n        \n        -- Mists of Tirna Scithe\n        [164501] = {70, 40, 10}, -- Mistcaller\n        [164804] = {22}, -- Droman Oulfarran\n        [164926] = {50}, -- Drust Boughbreaker\n        \n        -- Necrotic Wake\n        [163121] = {70}, -- Stitched Vanguard\n        \n        -- Plaguefall\n        [164267] = {66, 33}, -- Magrave Stradama\n        [164967] = {66, 33}, -- Doctor Ickus\n        [169861] = {66, 33}, -- Ickor Bileflesh\n        \n        -- Sanguine Depths\n        [162099] = {50}, -- General Kaal\n        \n        -- Spires of Ascension\n        [162061] = {70, 30}, --Devos\n        \n        -- Tazavesh\n        [177269] = {40}, -- So'leah\n        [175806] = {66, 33}, -- So'azmi\n        \n        -- Theater of Pain\n        [164451] = {40}, -- Dessia the Decapirator\n        [164461] = {40}, -- Sathel the Accursed\n        [164463] = {40}, -- Paceran the Virulent\n        [165946] = {50}, -- Mordretha\n        \n        -------- BFA Dungeons --------\n        \n        -- Freehold\n        [126832] = {75}, -- Skycap'n Kragg\n        [126983] = {60, 30}, -- Harlan Sweete\n        [129699] = {90, 70, 50, 30}, -- Ludwig von Tortollan\n        \n        -- Waycrest Manor\n        [131527] = {30}, -- Lord Waycrest\n        [131823] = {50}, -- Sister Malady\n        [131824] = {50}, -- Sister Solena\n        [131825] = {50}, -- Sister Briar\n        \n        -------- WoD Dungeons --------\n        \n        -- Grimrail Depot\n        [77803] = {20}, -- Railmaster Rocketspark\n        [79545] = {60}, -- Nitrogg Thundertower\n        [81236] = {50}, -- Grimrail Technician\n        \n        -- Iron Docks\n        [81297] = {50}, -- Dreadfang\n        \n        -- Shadowmoon Burial Grounds\n        [76057] = {20}, -- Carrion Worm\n        \n        -------- Legion Dungeons --------\n        \n        -- Blackrook Hold\n        [98542] = {50}, -- Amalgam of Souls\n        [98965] = {20}, -- Kur'talos Ravencrest\n        \n        -- Court of Stars\n        [104215] = {25}, -- Patrol Captain Gerdo\n        \n        -- Darkheart Thicket\n        [99192] = {50}, -- Shade of Xavius\n        \n        -- Halls of Valor\n        [94960] = {10}, -- Hymdall\n        [95674] = {60}, -- Fenryr\n        [95676] = {80}, -- Odyn\n        [96574] = {30}, -- Stormforged Sentinel\n        [97087] = {30}, -- Valarjar Champion\n        \n        -- Neltharion's Lair\n        [91005] = {20}, -- Naraxas\n        [113537] = {15}, -- Emberhusk Dominator\n        \n        -------- MoP Dungeons --------\n        \n        -- Temple of the Jade Serpent\n        [56732] = {70, 30}, -- Liu Flameheart\n        [59544] = {50}, -- The Nodding Tiger\n        \n        -------- Cata Dungeons --------\n        \n        -- Throne of the Tides\n        [40586] = {60, 30}, -- Lady Naz'jar\n        [40825] = {25}, -- Erunak Stonespeaker\n        \n        \n        -------- DF Raids --------\n        \n        -- Vault of the Incarnates\n        [187967] = {5}, -- Sennarth\n        [189492] = {65}, -- Raszageth\n        [194990] = {50}, -- Stormseeker Acolyte\n        \n        -- Aberrus, the Shadowed Crucible\n        [199659] = {25}, -- Warlord Kagni\n        [200912] = {50}, -- Neldris\n        [200913] = {50}, -- Thadrion\n        [201261] = {80, 60, 40}, -- Kazzara\n        [201668] = {60, 35}, -- Neltharion\n        [201773] = {50}, -- Eternal Blaze\n        [201774] = {50}, -- Essence of Shadow\n        [203230] = {50}, -- Dragonfire Golem\n        \n        -- Amirdrassil\n        [204931] = {70, 25}, -- Fyrakk\n        [208445] = {35}, -- Larodar\n    }\n    \n    scriptTable.Difficulty = {\n        [16] = { -- Mythic\n        },\n        [15] = { -- Heroic\n        },\n        [14] = { -- Normal\n        },\n        [17] = { -- LFR\n        },\n    }\nend",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if unitFrame.IsSelf or (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then return end\n    \n    envTable.UpdateMarkers(unitFrame)    \nend    \n\n\n",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.lifePercent = {\n        -------- DF Dungeons --------\n        \n        -- Azure Vault\n        [186738] = {75, 50, 25}, -- Umbrelskul\n        \n        -- Brackenhide Hollow\n        [185508] = {15}, -- Claw Fighter\n        [185528] = {15}, -- Trickclaw Mystic\n        [185534] = {15}, -- Bonebolt Hunter\n        [186121] = {4}, -- Decatriarch Wratheye\n        [186122] = {15}, -- Rira Hackclaw\n        [186124] = {15}, -- Gashtooth\n        [186125] = {15}, -- Tricktotem\n        [186206] = {15}, -- Cruel Bonecrusher\n        [186227] = {20}, -- Monstrous Decay\n        \n        -- Dawn of the Infinite\n        [198933] = {90, 85}, -- Iridikron\n        [198997] = {80}, -- Blight of Galakrond\n        [199000] = {20}, -- Deios\n        [201792] = {50}, -- Ahnzon\n        [207638] = {80}, -- Blight of Galakrond\n        [207639] = {80}, -- Blight of Galakrond\n        \n        -- Halls of Infusion\n        [189719] = {15}, -- Watcher Irideus\n        [190368] = {40}, -- Flamecaller Aymi\n        [190407] = {20}, -- Aqua Rager\n        \n        -- Neltharus\n        [194816] = {10}, -- Forgewrought Monstrosity\n        \n        -- Nokhud Offensive\n        [186151] = {60}, -- Balakar Khan\n        \n        -- Ruby Life Pools\n        [188252] = {75, 45}, -- Melidrussa\n        [190484] = {50}, -- Kyrakka\n        [197697] = {50}, -- Flamegullet\n        \n        -- Uldaman\n        [184020] = {40}, -- Hulking Berserker\n        [184422] = {70, 30}, -- Emberon\n        [184580] = {10}, -- Olaf\n        [184581] = {10}, -- Baelog\n        [184582] = {10}, -- Eric \"The Swift\"\n        \n        -------- SL Dungeons --------\n        \n        -- De Other Side\n        [164558] = {80, 60, 40, 20}, -- Hakkar the Soulflayer\n        \n        -- Halls of Atonement\n        [164218] = {70, 40}, -- Lord Chamberlain\n        \n        -- Mists of Tirna Scithe\n        [164501] = {70, 40, 10}, -- Mistcaller\n        [164804] = {22}, -- Droman Oulfarran\n        [164926] = {50}, -- Drust Boughbreaker\n        \n        -- Necrotic Wake\n        [163121] = {70}, -- Stitched Vanguard\n        \n        -- Plaguefall\n        [164267] = {66, 33}, -- Magrave Stradama\n        [164967] = {66, 33}, -- Doctor Ickus\n        [169861] = {66, 33}, -- Ickor Bileflesh\n        \n        -- Sanguine Depths\n        [162099] = {50}, -- General Kaal\n        \n        -- Spires of Ascension\n        [162061] = {70, 30}, --Devos\n        \n        -- Tazavesh\n        [177269] = {40}, -- So'leah\n        [175806] = {66, 33}, -- So'azmi\n        \n        -- Theater of Pain\n        [164451] = {40}, -- Dessia the Decapirator\n        [164461] = {40}, -- Sathel the Accursed\n        [164463] = {40}, -- Paceran the Virulent\n        [165946] = {50}, -- Mordretha\n        \n        -------- BFA Dungeons --------\n        \n        -- Freehold\n        [126832] = {75}, -- Skycap'n Kragg\n        [126983] = {60, 30}, -- Harlan Sweete\n        [129699] = {90, 70, 50, 30}, -- Ludwig von Tortollan\n        \n        -- Waycrest Manor\n        [131527] = {30}, -- Lord Waycrest\n        [131823] = {50}, -- Sister Malady\n        [131824] = {50}, -- Sister Solena\n        [131825] = {50}, -- Sister Briar\n        \n        -------- WoD Dungeons --------\n        \n        -- Grimrail Depot\n        [77803] = {20}, -- Railmaster Rocketspark\n        [79545] = {60}, -- Nitrogg Thundertower\n        [81236] = {50}, -- Grimrail Technician\n        \n        -- Iron Docks\n        [81297] = {50}, -- Dreadfang\n        \n        -- Shadowmoon Burial Grounds\n        [76057] = {20}, -- Carrion Worm\n        \n        -------- Legion Dungeons --------\n        \n        -- Blackrook Hold\n        [98542] = {50}, -- Amalgam of Souls\n        [98965] = {20}, -- Kur'talos Ravencrest\n        \n        -- Court of Stars\n        [104215] = {25}, -- Patrol Captain Gerdo\n        \n        -- Darkheart Thicket\n        [99192] = {50}, -- Shade of Xavius\n        \n        -- Halls of Valor\n        [94960] = {10}, -- Hymdall\n        [95674] = {60}, -- Fenryr\n        [95676] = {80}, -- Odyn\n        [96574] = {30}, -- Stormforged Sentinel\n        [97087] = {30}, -- Valarjar Champion\n        \n        -- Neltharion's Lair\n        [91005] = {20}, -- Naraxas\n        [113537] = {15}, -- Emberhusk Dominator\n        \n        -------- MoP Dungeons --------\n        \n        -- Temple of the Jade Serpent\n        [56732] = {70, 30}, -- Liu Flameheart\n        [59544] = {50}, -- The Nodding Tiger\n        \n        -------- Cata Dungeons --------\n        \n        -- Throne of the Tides\n        [40586] = {60, 30}, -- Lady Naz'jar\n        [40825] = {25}, -- Erunak Stonespeaker\n        \n        \n        -------- DF Raids --------\n        \n        -- Vault of the Incarnates\n        [187967] = {5}, -- Sennarth\n        [189492] = {65}, -- Raszageth\n        [194990] = {50}, -- Stormseeker Acolyte\n        \n        -- Aberrus, the Shadowed Crucible\n        [199659] = {25}, -- Warlord Kagni\n        [200912] = {50}, -- Neldris\n        [200913] = {50}, -- Thadrion\n        [201261] = {80, 60, 40}, -- Kazzara\n        [201668] = {60, 35}, -- Neltharion\n        [201773] = {50}, -- Eternal Blaze\n        [201774] = {50}, -- Essence of Shadow\n        [203230] = {50}, -- Dragonfire Golem\n        \n        -- Amirdrassil\n        [204931] = {70, 25}, -- Fyrakk\n        [208445] = {35}, -- Larodar\n    }\n    \n    scriptTable.Difficulty = {\n        [16] = { -- Mythic\n        },\n        [15] = { -- Heroic\n        },\n        [14] = { -- Normal\n        },\n        [17] = { -- LFR\n        },\n    }\nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if unitFrame.IsSelf or (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then return end\n    \n    envTable.UpdateMarkers(unitFrame)    \nend    \n\n\n",
["SpellIds"] = {
},
["Prio"] = 99,
["Name"] = "Add - Health Markers [OPS]",
["PlaterCore"] = 1,
["version"] = 32,
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Key"] = "indicatorAlpha",
["Value"] = 0.85,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Vertical Line Alpha",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Key"] = "fillAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fill Alpha",
},
},
["NpcNames"] = {
"40586",
"40825",
"56732",
"59544",
"76057",
"77803",
"79545",
"81236",
"81297",
"91005",
"94960",
"95674",
"95676",
"96574",
"97087",
"98542",
"98965",
"99192",
"104215",
"113537",
"126832",
"126983",
"129699",
"131527",
"131823",
"131824",
"131825",
"162061",
"162099",
"163121",
"164218",
"164267",
"164451",
"164461",
"164463",
"164501",
"164558",
"164804",
"164926",
"164967",
"165946",
"169861",
"175806",
"177269",
"184020",
"184422",
"184580",
"184581",
"184582",
"185508",
"185528",
"185534",
"186121",
"186122",
"186124",
"186125",
"186151",
"186206",
"186227",
"186738",
"187967",
"188252",
"189492",
"189719",
"190368",
"190407",
"190484",
"194816",
"194990",
"197697",
"198933",
"198997",
"199000",
"199659",
"200912",
"200913",
"201261",
"201668",
"201773",
"201774",
"201792",
"203230",
"204931",
"207638",
"207639",
"208445",
},
},
},
["blizzard_nameplate_large_font"] = "Expressway",
["saved_cvars_last_change"] = {
["nameplateShowOnlyNames"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateOverlapV"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["ShowNamePlateLoseAggroFlash"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowEnemyMinus"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["NamePlateClassificationScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowFriendlyTotems"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplatePersonalHideDelaySeconds"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowDebuffsOnFriendly"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplatePersonalShowInCombat"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateTargetRadialPosition"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateMinAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4140: in function `ForceCVars'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4138: in function <Interface/AddOns/Plater/Plater.lua:4138>\n",
["nameplateResourceOnTarget"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["clampTargetNameplateToScreen"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowAll"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateMaxDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowFriendlyMinions"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateTargetBehindMaxDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowEnemies"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["NamePlateVerticalScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateSelectedAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4142: in function `ForceCVars'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4138: in function <Interface/AddOns/Plater/Plater.lua:4138>\n",
["nameplateShowSelf"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateSelfTopInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateMotionSpeed"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowEnemyMinions"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowFriendlyNPCs"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateSelectedScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateMinAlphaDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4141: in function `ForceCVars'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:4138: in function <Interface/AddOns/Plater/Plater.lua:4138>\n",
["nameplateMotion"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateOverlapH"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateMinScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplatePersonalShowAlways"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateOtherTopInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateOtherAtBase"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateSelfBottomInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["NamePlateHorizontalScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowFriendlyGuardians"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateOccludedAlphaMult"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateLargeTopInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["nameplateShowFriends"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Blizzard_SharedXML/CvarUtil.lua\"]:72: in function `SetValue'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua\"]:187: in function `SetValueInternal'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua\"]:67: in function `SetValue'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Settings.lua\"]:229: in function `SetValue'\n[string \"FRIENDNAMEPLATES\"]:6: in function <[string \"FRIENDNAMEPLATES\"]:1>\n",
["nameplateShowFriendlyPets"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
["ShowClassColorInNameplate"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1568: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1027: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:847: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1279: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1279>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4591: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:733: in function <Interface/AddOns/Details/Libs/DF/button.lua:669>\n",
},
["url"] = "https://wago.io/pSbKkBurg/84",
["hover_highlight_alpha"] = 0.449999988079071,
["indicator_raidmark_scale"] = 0.8999999761581421,
["aura2_y_offset"] = 4.077285766601563,
["extra_icon_caster_size"] = 7.1167268753052,
["buffs_on_aura2"] = true,
["plate_config"] = {
["player"] = {
["spellname_text_font"] = "Expressway",
["castbar_offset"] = -6.5,
["percent_text_font"] = "Expressway",
["spellpercent_text_font"] = "Expressway",
["healthbar_enabled"] = false,
["power_percent_text_font"] = "Expressway",
["percent_text_size"] = 12,
["module_enabled"] = false,
},
["friendlyplayer"] = {
["spellpercent_text_font"] = "2002 Bold",
["power_percent_text_color"] = {
0.9,
0.9,
0.9,
1,
},
["actorname_use_class_color"] = true,
["cast"] = {
50,
1,
},
["percent_text_ooc"] = true,
["percent_text_alpha"] = 0,
["castbar_enabled"] = true,
["power_percent_text_enabled"] = true,
["healthbar_enabled"] = false,
["cast_incombat"] = {
50,
1,
},
["spellname_text_outline"] = "OUTLINE",
["power_percent_text_alpha"] = 1,
["level_text_font"] = "2002 Bold",
["actorname_text_font"] = "2002 Bold",
["power_percent_text_size"] = 9,
["power_percent_text_font"] = "2002 Bold",
["power_enabled"] = true,
["power_percent_text_anchor"] = {
["y"] = 0,
["x"] = 0,
["side"] = 9,
},
["only_thename"] = true,
["healthbar_color"] = {
0.564706,
0.933333,
0.564706,
1,
},
["power_percent_text_outline"] = "OUTLINE",
["percent_show_health"] = true,
["mana"] = {
150,
10,
},
["percent_text_size"] = 12,
["actorname_text_spacing"] = 6,
["percent_text_font"] = "2002 Bold",
["buff_frame_y_offset"] = 0,
["pvp_always_incombat"] = true,
["health_incombat"] = {
50,
1,
},
["y_position_offset"] = -50,
["power_percent_text_shadow_color_offset"] = {
1,
-1,
},
["healthbar_color_by_hp"] = false,
["spellname_text_size"] = 6,
["health"] = {
50,
1,
},
["power_percent_text_shadow_color"] = {
0,
0,
0,
1,
},
["only_damaged"] = false,
["actorname_text_size"] = 7,
["spellname_text_font"] = "2002 Bold",
["mana_incombat"] = {
150,
10,
},
},
["friendlynpc"] = {
["big_actorname_text_size"] = 7,
["spellpercent_text_font"] = "Expressway",
["show_guild_name"] = false,
["power_percent_text_color"] = {
0.9,
0.9,
0.9,
1,
},
["actorname_use_class_color"] = false,
["big_actortitle_text_font"] = "2002 Bold",
["cast"] = {
100,
},
["percent_text_ooc"] = true,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0.54000002145767,
},
["fixed_class_color"] = {
1,
0.4,
0.1,
1,
},
["level_text_shadow_color"] = {
nil,
nil,
nil,
0.54000002145767,
},
["castbar_enabled"] = true,
["power_percent_text_enabled"] = true,
["healthbar_enabled"] = false,
["cast_incombat"] = {
100,
10,
},
["power_percent_text_alpha"] = 1,
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0.54000002145767,
},
["level_text_font"] = "Expressway",
["actorname_text_font"] = "Expressway",
["power_percent_text_anchor"] = {
["y"] = 0,
["x"] = 0,
["side"] = 9,
},
["healthbar_color"] = {
0.564706,
0.933333,
0.564706,
1,
},
["power_percent_text_outline"] = "OUTLINE",
["power_percent_text_size"] = 9,
["big_actortitle_text_size"] = 6,
["percent_text_enabled"] = true,
["level_text_size"] = 6,
["power_enabled"] = true,
["use_playerclass_color"] = true,
["percent_show_health"] = true,
["spellname_text_size"] = 8,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["side"] = 4,
},
["power_percent_text_shadow_color_offset"] = {
1,
-1,
},
["spellpercent_text_enabled"] = true,
["actorname_text_spacing"] = 8,
["percent_text_font"] = "Expressway",
["power_percent_text_shadow_color"] = {
0,
0,
0,
1,
},
["pvp_always_incombat"] = true,
["click_through"] = false,
["y_position_offset"] = -50,
["big_actorname_text_font"] = "2002 Bold",
["healthbar_color_by_hp"] = false,
["health_incombat"] = {
100,
10,
},
["health"] = {
100,
10,
},
["actorname_text_size"] = 9,
["power_percent_text_font"] = "2002 Bold",
["spellname_text_font"] = "Expressway",
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0.54000002145767,
},
["level_text_enabled"] = true,
},
["enemynpc"] = {
["actorname_text_font"] = "Expressway",
["quest_color_enemy"] = {
nil,
0.43529411764706,
},
["spellpercent_text_font"] = "Expressway",
["quest_color_neutral"] = {
nil,
0.43529411764706,
},
["level_text_size"] = 6,
["big_actortitle_text_font"] = "Expressway",
["cast"] = {
100,
},
["spellpercent_text_size"] = 9,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0.45870500802994,
},
["actorname_text_outline"] = "OUTLINE",
["percent_text_size"] = 8,
["actorname_text_spacing"] = 6,
["percent_text_font"] = "Expressway",
["cast_incombat"] = {
100,
9,
},
["spellname_text_font"] = "Expressway",
["actorname_text_size"] = 7,
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0.54192608594894,
},
["health_incombat"] = {
100,
10,
},
["health"] = {
100,
},
["big_actorname_text_font"] = "Expressway",
["spellname_text_size"] = 7,
["percent_text_anchor"] = {
["y"] = 0.1999969482421875,
},
["level_text_font"] = "Expressway",
["level_text_enabled"] = false,
},
["global_health_width"] = 105,
["enemyplayer"] = {
["actorname_text_font"] = "Expressway",
["spellpercent_text_font"] = "Expressway",
["level_text_size"] = 6,
["cast"] = {
100,
},
["spellpercent_text_size"] = 9,
["level_text_outline"] = "MONOCHROME",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0.54136657714844,
},
["percent_text_size"] = 8,
["actorname_text_spacing"] = 6,
["percent_text_font"] = "Expressway",
["cast_incombat"] = {
100,
9,
},
["spellname_text_outline"] = "OUTLINE",
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0.54000002145767,
},
["health_incombat"] = {
100,
10,
},
["health"] = {
100,
11,
},
["spellname_text_size"] = 7,
["spellname_text_font"] = "Expressway",
["actorname_text_size"] = 7,
["level_text_font"] = "Expressway",
["level_text_enabled"] = false,
},
["global_health_height"] = 12,
},
["aura_y_offset"] = 24.46479797363281,
["use_ui_parent"] = true,
["aura_show_defensive_cd"] = true,
["expansion_triggerwipe"] = {
[9] = true,
},
["indicator_elite"] = false,
["color_override_colors"] = {
[3] = {
0.91764712333679,
0.070588238537312,
0.24313727021217,
},
[4] = {
0.8666667342186,
0.73725491762161,
0.26666668057442,
},
[5] = {
0.066666670143604,
0.82352948188782,
0.32156863808632,
},
},
["plater_resources_grow_direction"] = "center",
["resources_settings"] = {
["chr"] = {
["Player-1168-0AADD914"] = "Essence",
["Player-1168-09F920B5"] = "ArcaneCharges",
["Player-76-0BD55532"] = "Chi",
["Player-1168-09F88BD9"] = "SoulShards",
},
},
["npc_cache"] = {
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
"enUS",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
"enUS",
},
[184335] = {
"Infinite Agent",
"Uldaman: Legacy of Tyr",
"enUS",
},
[201773] = {
"Eternal Blaze",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[71153] = {
"Hisek the Swarmkeeper",
"Siege of Orgrimmar",
"enUS",
},
[186124] = {
"Gashtooth",
"Brackenhide Hollow",
"enUS",
},
[189893] = {
"Infused Whelp",
"Ruby Life Pools",
"enUS",
},
[72367] = {
"Dragonmaw Tidal Shaman",
"Siege of Orgrimmar",
"enUS",
},
[72942] = {
"Dragonmaw Flagbearer",
"Siege of Orgrimmar",
"enUS",
},
[96512] = {
"Archdruid Glaidalis",
"Darkheart Thicket",
"enUS",
},
[190405] = {
"Infuser Sariya",
"Halls of Infusion",
"enUS",
},
[71154] = {
"Ka'roz the Locust",
"Siege of Orgrimmar",
"enUS",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
"enUS",
},
[72847] = {
"Hellscream Annihilator",
"Siege of Orgrimmar",
"enUS",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
"enUS",
},
[71378] = {
"Quilen Guardian",
"Siege of Orgrimmar",
"enUS",
},
[72943] = {
"Dragonmaw Proto-Drake",
"Siege of Orgrimmar",
"enUS",
},
[72496] = {
"Overseer Thathung",
"Siege of Orgrimmar",
"enUS",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
"enUS",
},
[190407] = {
"Aqua Rager",
"Halls of Infusion",
"enUS",
},
[71155] = {
"Korven the Prime",
"Siege of Orgrimmar",
"enUS",
},
[73742] = {
"Thresher Turret",
"Siege of Orgrimmar",
"enUS",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
"enUS",
},
[95779] = {
"Festerhide Grizzly",
"Darkheart Thicket",
"enUS",
},
[71858] = {
"Wavebinder Kardris",
"Siege of Orgrimmar",
"enUS",
},
[72433] = {
"Mokvar the Treasurer",
"Siege of Orgrimmar",
"enUS",
},
[194816] = {
"Forgewrought Monstrosity",
"Neltharus",
"enUS",
},
[190345] = {
"Primalist Geomancer",
"Halls of Infusion",
"enUS",
},
[74158] = {
"Kor'kron Gunner",
"Siege of Orgrimmar",
"enUS",
},
[71156] = {
"Kaz'tik the Manipulator",
"Siege of Orgrimmar",
"enUS",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
"enUS",
},
[205804] = {
"Risen Dragon",
"Dawn of the Infinite",
"enUS",
},
[71380] = {
"Animated Stone Mogu",
"Siege of Orgrimmar",
"enUS",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
"enUS",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
"enUS",
},
[72498] = {
"Theramore Citizen",
"Siege of Orgrimmar",
"enUS",
},
[72562] = {
"Poison Bolt Totem",
"Siege of Orgrimmar",
"enUS",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
"enUS",
},
[71157] = {
"Xaril the Poisoned Mind",
"Siege of Orgrimmar",
"enUS",
},
[99358] = {
"Rotheart Dryad",
"Darkheart Thicket",
"enUS",
},
[73904] = {
"Kor'kron Iron Sentinel",
"Siege of Orgrimmar",
"enUS",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
"enUS",
},
[71158] = {
"Rik'kal the Dissector",
"Siege of Orgrimmar",
"enUS",
},
[131009] = {
"Spirit of Gold",
"Atal'Dazar",
"enUS",
},
[99359] = {
"Rotheart Keeper",
"Darkheart Thicket",
"enUS",
},
[71382] = {
"Burial Urn",
"Siege of Orgrimmar",
"enUS",
},
[72947] = {
"Kor'kron Demolisher",
"Siege of Orgrimmar",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
"enUS",
},
[71734] = {
"Sha of Pride",
"Siege of Orgrimmar",
"enUS",
},
[188244] = {
"Primal Juggernaut",
"Ruby Life Pools",
"enUS",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
"enUS",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
"enUS",
},
[45704] = {
"Lurking Tempest",
"The Vortex Pinnacle",
"enUS",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
"enUS",
},
[187159] = {
"Shrieking Whelp",
"The Azure Vault",
"enUS",
},
[195399] = {
"Curious Swoglet",
"Halls of Infusion",
"enUS",
},
[72150] = {
"Kor'kron Shadowmage",
"Siege of Orgrimmar",
"enUS",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
"enUS",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
"enUS",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
"enUS",
},
[187224] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[45928] = {
"Executor of the Caliph",
"The Vortex Pinnacle",
"enUS",
},
[122963] = {
"Rezan",
"Atal'Dazar",
"enUS",
},
[72981] = {
"Aggron",
"Siege of Orgrimmar",
"enUS",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
"enUS",
},
[64947] = {
"Mogu'shan Warden",
"Mogu'shan Vaults",
"enUS",
},
[60396] = {
"Emperor's Rage",
"Mogu'shan Vaults",
"enUS",
},
[214117] = {
"Stormflurry Totem",
"Throne of the Tides",
"enUS",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
"enUS",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
"enUS",
},
[190484] = {
"Kyrakka",
"Ruby Life Pools",
"enUS",
},
[181861] = {
"Magmatusk",
"Neltharus",
"enUS",
},
[84767] = {
"Twisted Abomination",
"The Everbloom",
"enUS",
},
[72535] = {
"Stone Statue",
"Siege of Orgrimmar",
"enUS",
},
[61131] = {
"Mogu'shan Secret-Keeper",
"Mogu'shan Vaults",
"enUS",
},
[195851] = {
"Ukhel Deathspeaker",
"The Nokhud Offensive",
"enUS",
},
[72791] = {
"Lingering Corruption",
"Siege of Orgrimmar",
"enUS",
},
[196043] = {
"Primalist Infuser",
"Halls of Infusion",
"enUS",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
"enUS",
},
[174773] = {
"Spiteful Shade",
"Black Rook Hold",
"enUS",
},
[72983] = {
"Corrupted Skullsplitter",
"Siege of Orgrimmar",
"enUS",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
"enUS",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
"enUS",
},
[60397] = {
"Emperor's Strength",
"Mogu'shan Vaults",
"enUS",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
"enUS",
},
[72728] = {
"Kor'kron Blood Axe",
"Siege of Orgrimmar",
"enUS",
},
[72249] = {
"Galakras",
"Siege of Orgrimmar",
"enUS",
},
[186208] = {
"Rotbow Stalker",
"Brackenhide Hollow",
"enUS",
},
[98949] = {
"Smashspite the Hateful",
"Black Rook Hold",
"enUS",
},
[205435] = {
"Epoch Ripper",
"Dawn of the Infinite",
"enUS",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[71515] = {
"General Nazgrim",
"Siege of Orgrimmar",
"enUS",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
"enUS",
},
[134024] = {
"Devouring Maggot",
"Waycrest Manor",
"enUS",
},
[194897] = {
"Stormsurge Totem",
"The Nokhud Offensive",
"enUS",
},
[189340] = {
"Chargath, Bane of Scales",
"Neltharus",
"enUS",
},
[190426] = {
"Decay Totem",
"Brackenhide Hollow",
"enUS",
},
[122967] = {
"Priestess Alun'za",
"Atal'Dazar",
"enUS",
},
[71388] = {
"Amber-Encased Kunchong",
"Siege of Orgrimmar",
"enUS",
},
[185508] = {
"Claw Fighter",
"Brackenhide Hollow",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
"enUS",
},
[201222] = {
"Valow, Timesworn Keeper",
"Dawn of the Infinite",
"enUS",
},
[72155] = {
"Cazul",
"Siege of Orgrimmar",
"enUS",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[71772] = {
"Kor'kron Assassin",
"Siege of Orgrimmar",
"enUS",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
"enUS",
},
[133835] = {
"Feral Bloodswarmer",
"UNKNOWN",
"enUS",
},
[72954] = {
"Kor'thik Honor Guard",
"Siege of Orgrimmar",
"enUS",
},
[72986] = {
"Shanna Sparkfizz",
"Siege of Orgrimmar",
"enUS",
},
[64183] = {
"Enormous Stone Quilen",
"Mogu'shan Vaults",
"enUS",
},
[189471] = {
"Qalashi Blacksmith",
"Neltharus",
"enUS",
},
[142587] = {
"Devouring Maggot",
"Waycrest Manor",
"enUS",
},
[189727] = {
"Khajin the Unyielding",
"Halls of Infusion",
"enUS",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
"enUS",
},
[190366] = {
"Curious Swoglet",
"Halls of Infusion",
"enUS",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
"enUS",
},
[72412] = {
"Kor'kron Grunt",
"Siege of Orgrimmar",
"enUS",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
"enUS",
},
[71454] = {
"Malkorok",
"Siege of Orgrimmar",
"enUS",
},
[72434] = {
"Treasury Guard",
"Siege of Orgrimmar",
"enUS",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
"enUS",
},
[196116] = {
"Crystal Fury",
"The Azure Vault",
"enUS",
},
[72157] = {
"Hagrus",
"Siege of Orgrimmar",
"enUS",
},
[60399] = {
"Qin-xi",
"Mogu'shan Vaults",
"enUS",
},
[60398] = {
"Emperor's Courage",
"Mogu'shan Vaults",
"enUS",
},
[60793] = {
"Celestial Protector",
"Mogu'shan Vaults",
"enUS",
},
[73452] = {
"Harbinger of Y'Shaarj",
"Siege of Orgrimmar",
"enUS",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
"enUS",
},
[184300] = {
"Ebonstone Golem",
"Uldaman: Legacy of Tyr",
"enUS",
},
[100486] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[64068] = {
"Mogu'shan Engine Keeper",
"Mogu'shan Vaults",
"enUS",
},
[60731] = {
"Undying Shadows",
"Mogu'shan Vaults",
"enUS",
},
[72411] = {
"Kor'kron Provisioner",
"Siege of Orgrimmar",
"enUS",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
"enUS",
},
[60701] = {
"Zian of the Endless Shadow",
"Mogu'shan Vaults",
"enUS",
},
[61341] = {
"Mounted Mogu",
"Mogu'shan Vaults",
"enUS",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[60009] = {
"Feng the Accursed",
"Mogu'shan Vaults",
"enUS",
},
[71385] = {
"Sri'thik Bombardier",
"Siege of Orgrimmar",
"enUS",
},
[61989] = {
"Cursed Mogu Sculpture",
"Mogu'shan Vaults",
"enUS",
},
[71773] = {
"Kor'kron Warshaman",
"Siege of Orgrimmar",
"enUS",
},
[71420] = {
"Hungry Kunchong",
"Siege of Orgrimmar",
"enUS",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
"enUS",
},
[190370] = {
"Squallbringer Cyraz",
"Halls of Infusion",
"enUS",
},
[72350] = {
"Dragonmaw Elite Grunt",
"Siege of Orgrimmar",
"enUS",
},
[72893] = {
"Orgrimmar Peon",
"Siege of Orgrimmar",
"enUS",
},
[71392] = {
"Shadow Ritualist Phylactery",
"Siege of Orgrimmar",
"enUS",
},
[72828] = {
"Claw of Burning Anger",
"Siege of Orgrimmar",
"enUS",
},
[71160] = {
"Iyyokuk the Lucid",
"Siege of Orgrimmar",
"enUS",
},
[71578] = {
"Amber Parasite",
"Siege of Orgrimmar",
"enUS",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
"enUS",
},
[190371] = {
"Primalist Earthshaker",
"Halls of Infusion",
"enUS",
},
[186121] = {
"Decatriarch Wratheye",
"Brackenhide Hollow",
"enUS",
},
[60400] = {
"Jan-xi",
"Mogu'shan Vaults",
"enUS",
},
[73724] = {
"Zu Yin",
"Siege of Orgrimmar",
"enUS",
},
[72191] = {
"Overlord Runthak",
"Siege of Orgrimmar",
"enUS",
},
[71407] = {
"Amber",
"Siege of Orgrimmar",
"enUS",
},
[71393] = {
"Mogu Shadow Ritualist",
"Siege of Orgrimmar",
"enUS",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
"enUS",
},
[200912] = {
"Neldris",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[72351] = {
"Dragonmaw Flagbearer",
"Siege of Orgrimmar",
"enUS",
},
[189478] = {
"Forgemaster Gorek",
"Neltharus",
"enUS",
},
[73948] = {
"Commander Ik'tal",
"Siege of Orgrimmar",
"enUS",
},
[72958] = {
"Dragonmaw Tidal Shaman",
"Siege of Orgrimmar",
"enUS",
},
[60576] = {
"Stone Quilen",
"Mogu'shan Vaults",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
"enUS",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
"enUS",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
"enUS",
},
[113998] = {
"Mightstone Breaker",
"Neltharion's Lair",
"enUS",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[60410] = {
"Elegon",
"Mogu'shan Vaults",
"enUS",
},
[73012] = {
"Klaxxi Skirmisher",
"Siege of Orgrimmar",
"enUS",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
"enUS",
},
[73073] = {
"Corrupted Boil",
"Siege of Orgrimmar",
"enUS",
},
[73310] = {
"Dragonmaw War Banner",
"Siege of Orgrimmar",
"enUS",
},
[71542] = {
"Blood",
"Siege of Orgrimmar",
"enUS",
},
[72352] = {
"Dragonmaw Ebon Stalker",
"Siege of Orgrimmar",
"enUS",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
"enUS",
},
[72927] = {
"Kovok",
"Siege of Orgrimmar",
"enUS",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
"enUS",
},
[60047] = {
"Amethyst Guardian",
"Mogu'shan Vaults",
"enUS",
},
[122968] = {
"Yazma",
"Atal'Dazar",
"enUS",
},
[198998] = {
"Tyr, the Infinite Keeper",
"Dawn of the Infinite",
"enUS",
},
[60375] = {
"Zandalari Skullcharger",
"Mogu'shan Vaults",
"enUS",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[202256] = {
"Djaradin Lavamancer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
"enUS",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
"enUS",
},
[131863] = {
"Raal the Gluttonous",
"Waycrest Manor",
"enUS",
},
[72768] = {
"Kor'kron War Wolf",
"Siege of Orgrimmar",
"enUS",
},
[189466] = {
"Irontorch Commander",
"Neltharus",
"enUS",
},
[74091] = {
"Kor'kron Iron Sentinel",
"Siege of Orgrimmar",
"enUS",
},
[72353] = {
"Dragonmaw Flameslinger",
"Siege of Orgrimmar",
"enUS",
},
[73152] = {
"Storeroom Guard",
"Siege of Orgrimmar",
"enUS",
},
[71395] = {
"Modified Anima Golem",
"Siege of Orgrimmar",
"enUS",
},
[199703] = {
"Magma Mystic",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[98542] = {
"Amalgam of Souls",
"Black Rook Hold",
"enUS",
},
[189227] = {
"Qalashi Hunter",
"Neltharus",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
"enUS",
},
[73088] = {
"Dragonmaw War Banner",
"Siege of Orgrimmar",
"enUS",
},
[73951] = {
"Commander Tik",
"Siege of Orgrimmar",
"enUS",
},
[72130] = {
"Kor'jus",
"Siege of Orgrimmar",
"enUS",
},
[73184] = {
"Starved Yeti",
"Siege of Orgrimmar",
"enUS",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
"enUS",
},
[198873] = {
"Sundered Edgelord",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[60710] = {
"Subetai the Swift",
"Mogu'shan Vaults",
"enUS",
},
[207177] = {
"Infinite Watchkeeper",
"Dawn of the Infinite",
"enUS",
},
[125977] = {
"Reanimation Totem",
"Atal'Dazar",
"enUS",
},
[72354] = {
"Dragonmaw Bonecrusher",
"Siege of Orgrimmar",
"enUS",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[72929] = {
"Sra'thik Amber-Master",
"Siege of Orgrimmar",
"enUS",
},
[201320] = {
"Rashok",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[190187] = {
"Draconic Image",
"The Azure Vault",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
"enUS",
},
[40936] = {
"Faceless Watcher",
"Throne of the Tides",
"enUS",
},
[73696] = {
"Grand Master Alchemist Ki'xen",
"Siege of Orgrimmar",
"enUS",
},
[60386] = {
"Zandalari Terror Rider",
"Mogu'shan Vaults",
"enUS",
},
[73153] = {
"Arcweaver Reinforcements",
"Siege of Orgrimmar",
"enUS",
},
[73185] = {
"Enraged Mushan Beast",
"Siege of Orgrimmar",
"enUS",
},
[189886] = {
"Blazebound Firestorm",
"Ruby Life Pools",
"enUS",
},
[72770] = {
"Kor'kron Dark Farseer",
"Siege of Orgrimmar",
"enUS",
},
[204560] = {
"Incorporeal Being",
"The Underrot",
"enUS",
},
[72564] = {
"Doomlord",
"Siege of Orgrimmar",
"enUS",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
"enUS",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
"enUS",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[71397] = {
"Zar'thik Amber Priest",
"Siege of Orgrimmar",
"enUS",
},
[60051] = {
"Cobalt Guardian",
"Mogu'shan Vaults",
"enUS",
},
[72483] = {
"Sarok",
"Siege of Orgrimmar",
"enUS",
},
[72945] = {
"Dragonmaw Bonecrusher",
"Siege of Orgrimmar",
"enUS",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
"enUS",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
"enUS",
},
[71405] = {
"Set'thik Wind Wielder",
"Siege of Orgrimmar",
"enUS",
},
[72132] = {
"Craven Drok",
"Siege of Orgrimmar",
"enUS",
},
[72427] = {
"Orgrimmar Peon",
"Siege of Orgrimmar",
"enUS",
},
[186339] = {
"Teera",
"The Nokhud Offensive",
"enUS",
},
[73250] = {
"Kor'kron Wild Gun",
"Siege of Orgrimmar",
"enUS",
},
[126969] = {
"Trothak",
"Freehold",
"enUS",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
"enUS",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
"enUS",
},
[61345] = {
"Mogu Archer",
"Mogu'shan Vaults",
"enUS",
},
[190510] = {
"Vault Guard",
"The Azure Vault",
"enUS",
},
[71398] = {
"Zar'thik Swarmer",
"Siege of Orgrimmar",
"enUS",
},
[72452] = {
"Kor'kron Dire Wolf",
"Siege of Orgrimmar",
"enUS",
},
[72484] = {
"Zazo",
"Siege of Orgrimmar",
"enUS",
},
[73538] = {
"Kor'kron War Wolf",
"Siege of Orgrimmar",
"enUS",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
"enUS",
},
[73091] = {
"Blackfuse Sellsword",
"Siege of Orgrimmar",
"enUS",
},
[71770] = {
"Kor'kron Ironblade",
"Siege of Orgrimmar",
"enUS",
},
[73155] = {
"Brute Reinforcements",
"Siege of Orgrimmar",
"enUS",
},
[14498] = {
"Tosamina",
"Siege of Orgrimmar",
"enUS",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
"enUS",
},
[193352] = {
"Hextrick Totem",
"Brackenhide Hollow",
"enUS",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
"enUS",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
"enUS",
},
[200918] = {
"Rionthus",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[40586] = {
"Lady Naz'jar",
"Throne of the Tides",
"enUS",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
"enUS",
},
[197219] = {
"Vile Lasher",
"Algeth'ar Academy",
"enUS",
},
[72964] = {
"Goro'dan",
"Siege of Orgrimmar",
"enUS",
},
[72485] = {
"Goma",
"Siege of Orgrimmar",
"enUS",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
"enUS",
},
[71771] = {
"Kor'kron Arcweaver",
"Siege of Orgrimmar",
"enUS",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
"enUS",
},
[187894] = {
"Infused Whelp",
"Ruby Life Pools",
"enUS",
},
[73667] = {
"Windreaver Tar'rath",
"Siege of Orgrimmar",
"enUS",
},
[73188] = {
"Captive Cave Bat",
"Siege of Orgrimmar",
"enUS",
},
[72198] = {
"Empowered Desecrated Weapon",
"Siege of Orgrimmar",
"enUS",
},
[138281] = {
"Faceless Corruptor",
"The Underrot",
"enUS",
},
[63853] = {
"Zar'thik Supplicant",
"UNKNOWN",
"enUS",
},
[61250] = {
"Sorcerer Mogu",
"Mogu'shan Vaults",
"enUS",
},
[71979] = {
"Kor'kron Warbringer",
"Siege of Orgrimmar",
"enUS",
},
[72358] = {
"Kor'kron Cannon",
"Siege of Orgrimmar",
"enUS",
},
[201756] = {
"Lostvoker",
"Dawn of the Infinite",
"enUS",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[72486] = {
"Doyo'da",
"Siege of Orgrimmar",
"enUS",
},
[186107] = {
"Vault Keeper",
"Uldaman: Legacy of Tyr",
"enUS",
},
[113398] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
"enUS",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
"enUS",
},
[72451] = {
"Kor'kron Dark Shaman",
"Siege of Orgrimmar",
"enUS",
},
[72941] = {
"Dragonmaw Grunt",
"Siege of Orgrimmar",
"enUS",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
"enUS",
},
[72421] = {
"Kor'kron Overseer",
"Siege of Orgrimmar",
"enUS",
},
[196712] = {
"Nullification Device",
"Halls of Infusion",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[64061] = {
"Mogu'shan Warden",
"Mogu'shan Vaults",
"enUS",
},
[71433] = {
"Spark of Life",
"Siege of Orgrimmar",
"enUS",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
"enUS",
},
[84400] = {
"Flourishing Ancient",
"The Everbloom",
"enUS",
},
[72423] = {
"Auctioneer Fazdran",
"Siege of Orgrimmar",
"enUS",
},
[185534] = {
"Bonebolt Hunter",
"Brackenhide Hollow",
"enUS",
},
[72487] = {
"Kozish",
"Siege of Orgrimmar",
"enUS",
},
[73541] = {
"Kor'kron Wolf Pup",
"Siege of Orgrimmar",
"enUS",
},
[71529] = {
"Thok the Bloodthirsty",
"Siege of Orgrimmar",
"enUS",
},
[206230] = {
"Infinite Diversionist",
"Dawn of the Infinite",
"enUS",
},
[102253] = {
"Understone Demolisher",
"Neltharion's Lair",
"enUS",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
"enUS",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
"enUS",
},
[72422] = {
"Auctioneer Drezmit",
"Siege of Orgrimmar",
"enUS",
},
[60708] = {
"Meng the Demented",
"Mogu'shan Vaults",
"enUS",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
"enUS",
},
[197406] = {
"Aggravated Skitterfly",
"Algeth'ar Academy",
"enUS",
},
[193293] = {
"Qalashi Warden",
"Neltharus",
"enUS",
},
[196203] = {
"Ethereal Restorer",
"Algeth'ar Academy",
"enUS",
},
[72903] = {
"Kor'kron Siegemaster",
"Siege of Orgrimmar",
"enUS",
},
[72424] = {
"Auctioneer Ralinza",
"Siege of Orgrimmar",
"enUS",
},
[72456] = {
"Korgra the Snake",
"Siege of Orgrimmar",
"enUS",
},
[71466] = {
"Iron Juggernaut",
"Siege of Orgrimmar",
"enUS",
},
[184131] = {
"Earthen Guardian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
"enUS",
},
[73095] = {
"Blackfuse Engineer",
"Siege of Orgrimmar",
"enUS",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
"enUS",
},
[73670] = {
"Gate-Crasher Sav'ah",
"Siege of Orgrimmar",
"enUS",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[73223] = {
"Pterrordax",
"Siege of Orgrimmar",
"enUS",
},
[72744] = {
"Kor'kron Skullsplitter",
"Siege of Orgrimmar",
"enUS",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
"enUS",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
"enUS",
},
[195119] = {
"Primalist Shockcaster",
"Ruby Life Pools",
"enUS",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
"enUS",
},
[73415] = {
"Ichor of Y'Shaarj",
"Siege of Orgrimmar",
"enUS",
},
[72425] = {
"Auctioneer Xifa",
"Siege of Orgrimmar",
"enUS",
},
[71859] = {
"Earthbreaker Haromm",
"Siege of Orgrimmar",
"enUS",
},
[72455] = {
"Overseer Komak",
"Siege of Orgrimmar",
"enUS",
},
[73414] = {
"Kor'kron Reaper",
"Siege of Orgrimmar",
"enUS",
},
[72194] = {
"Hellscream Demolisher",
"Siege of Orgrimmar",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
"enUS",
},
[202375] = {
"Zskarn",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[71921] = {
"Darkfang",
"Siege of Orgrimmar",
"enUS",
},
[61139] = {
"Shan-xi Watershaper",
"Mogu'shan Vaults",
"enUS",
},
[72966] = {
"Resonating Amber",
"Siege of Orgrimmar",
"enUS",
},
[60709] = {
"Qiang the Merciless",
"Mogu'shan Vaults",
"enUS",
},
[190034] = {
"Blazebound Destroyer",
"Ruby Life Pools",
"enUS",
},
[72430] = {
"Shan'ti",
"Siege of Orgrimmar",
"enUS",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
"enUS",
},
[40825] = {
"Erunak Stonespeaker",
"Throne of the Tides",
"enUS",
},
[45917] = {
"Cloud Prince",
"The Vortex Pinnacle",
"enUS",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[72355] = {
"High Enforcer Thranok",
"Siege of Orgrimmar",
"enUS",
},
[72490] = {
"Overseer Mojka",
"Siege of Orgrimmar",
"enUS",
},
[187240] = {
"Drakonid Breaker",
"The Azure Vault",
"enUS",
},
[72276] = {
"Amalgam of Corruption",
"Siege of Orgrimmar",
"enUS",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
"enUS",
},
[195138] = {
"Detonating Crystal",
"The Azure Vault",
"enUS",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
"enUS",
},
[189719] = {
"Watcher Irideus",
"Halls of Infusion",
"enUS",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
"enUS",
},
[186116] = {
"Gutshot",
"Brackenhide Hollow",
"enUS",
},
[201934] = {
"Shadowflame Amalgamation",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[64063] = {
"Mogu'shan Arcanist",
"Mogu'shan Vaults",
"enUS",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
"enUS",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
"enUS",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
"enUS",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
"enUS",
},
[131318] = {
"Elder Leaxa",
"The Underrot",
"enUS",
},
[196559] = {
"Volatile Sapling",
"The Azure Vault",
"enUS",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
"enUS",
},
[73098] = {
"Kor'kron Overseer",
"Siege of Orgrimmar",
"enUS",
},
[72131] = {
"Blind Blademaster",
"Siege of Orgrimmar",
"enUS",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
"enUS",
},
[73194] = {
"Kor'kron Iron Scorpion",
"Siege of Orgrimmar",
"enUS",
},
[40765] = {
"Commander Ulthok",
"Throne of the Tides",
"enUS",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
"enUS",
},
[60402] = {
"Zandalari Fire-Dancer",
"Mogu'shan Vaults",
"enUS",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
"enUS",
},
[71715] = {
"Orgrimmar Faithful",
"Siege of Orgrimmar",
"enUS",
},
[60913] = {
"Energy Charge",
"Mogu'shan Vaults",
"enUS",
},
[40788] = {
"Mindbender Ghur'sha",
"Throne of the Tides",
"enUS",
},
[72428] = {
"Horthus",
"Siege of Orgrimmar",
"enUS",
},
[72154] = {
"Desecrated Weapon",
"Siege of Orgrimmar",
"enUS",
},
[72492] = {
"Shimra",
"Siege of Orgrimmar",
"enUS",
},
[40925] = {
"Tainted Sentry",
"Throne of the Tides",
"enUS",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
"enUS",
},
[194487] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
"enUS",
},
[200913] = {
"Thadrion",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[103344] = {
"Oakheart",
"Darkheart Thicket",
"enUS",
},
[193291] = {
"Apex Blazewing",
"Neltharus",
"enUS",
},
[72237] = {
"Embodied Fear",
"Siege of Orgrimmar",
"enUS",
},
[130012] = {
"Irontide Ravager",
"Freehold",
"enUS",
},
[73775] = {
"War Master Kragg",
"Siege of Orgrimmar",
"enUS",
},
[192955] = {
"Draconic Illusion",
"The Azure Vault",
"enUS",
},
[72365] = {
"Dragonmaw Cannoneer",
"Siege of Orgrimmar",
"enUS",
},
[60480] = {
"Titan Spark",
"Mogu'shan Vaults",
"enUS",
},
[72429] = {
"Olvia",
"Siege of Orgrimmar",
"enUS",
},
[32666] = {
"Training Dummy",
"Siege of Orgrimmar",
"enUS",
},
[72493] = {
"Trak'gen",
"Siege of Orgrimmar",
"enUS",
},
[186696] = {
"Quaking Totem",
"Uldaman: Legacy of Tyr",
"enUS",
},
[71865] = {
"Garrosh Hellscream",
"Siege of Orgrimmar",
"enUS",
},
[71161] = {
"Kil'ruk the Wind-Reaver",
"Siege of Orgrimmar",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
"enUS",
},
[72784] = {
"Kor'kron Gunner",
"Siege of Orgrimmar",
"enUS",
},
[71152] = {
"Skeer the Bloodseeker",
"Siege of Orgrimmar",
"enUS",
},
[59915] = {
"Jasper Guardian",
"Mogu'shan Vaults",
"enUS",
},
[186122] = {
"Rira Hackclaw",
"Brackenhide Hollow",
"enUS",
},
[74009] = {
"Crawler Mine",
"Siege of Orgrimmar",
"enUS",
},
[60381] = {
"Zandalari Infiltrator",
"Mogu'shan Vaults",
"enUS",
},
[60143] = {
"Gara'jal the Spiritbinder",
"Mogu'shan Vaults",
"enUS",
},
[72787] = {
"Blade of the Hundred Steps",
"Siege of Orgrimmar",
"enUS",
},
[201261] = {
"Kazzara, the Hellforged",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[71408] = {
"Kun-Da",
"Siege of Orgrimmar",
"enUS",
},
[61334] = {
"Cursed Mogu Sculpture",
"Mogu'shan Vaults",
"enUS",
},
[71923] = {
"Bloodclaw",
"Siege of Orgrimmar",
"enUS",
},
[71504] = {
"Siegecrafter Blackfuse",
"Siege of Orgrimmar",
"enUS",
},
[71383] = {
"Kor'thik Warcaller",
"Siege of Orgrimmar",
"enUS",
},
},
["spell_animation_list"] = {
["30451"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 30451,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
},
["31935"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 31935,
["class"] = "PALADIN",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1,
["amplitude"] = 6,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
["31661"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 1,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 31661,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
},
["285452"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 285452,
["class"] = "SHAMAN",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["scaleY"] = -1,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
["222024"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1,
["duration"] = 0.050000000745058,
["scale_downX"] = 1,
["animation_type"] = "scale",
["critical_scale"] = 1,
["scale_upY"] = 1.1000000238419,
["cooldown"] = 0.75,
["scale_downY"] = 0.89999997615814,
},
["info"] = {
["spellid"] = 222024,
["class"] = "DEATHKNIGHT",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.019999999552965,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1,
["amplitude"] = 1.7999999523163,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 11.14999961853,
},
},
["2098"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.1000000238419,
["scale_upY"] = 1.1999999284744,
["scale_downX"] = 0.89999997615814,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 2098,
["class"] = "ROGUE",
["time"] = 1539293610,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.079999998211861,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["scaleY"] = 1,
["amplitude"] = 1.5,
["fade_in"] = 0,
["duration"] = 0.21999999880791,
["cooldown"] = 0.5,
["frequency"] = 2.710000038147,
},
},
["228600"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 10,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 228600,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
},
["203782"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = true,
["scaleY"] = -1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1.05,
["amplitude"] = 1.5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 203782,
["class"] = "DEMONHUNTER",
["time"] = 1539716639,
["desc"] = "",
},
},
["107270"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.1499999910593,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1499999910593,
["cooldown"] = 0.5,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 107270,
["class"] = "MONK",
["time"] = 1539296490,
["desc"] = "",
},
},
["162243"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 1,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.099999994039535,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 162243,
["class"] = "DEMONHUNTER",
["time"] = 1539717356,
["desc"] = "",
},
},
["117418"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.1499999910593,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.1499999910593,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1799999922514,
["cooldown"] = 0.5,
["frequency"] = 116.00999450684,
},
["info"] = {
["spellid"] = 117418,
["class"] = "MONK",
["time"] = 1539296387,
["desc"] = "",
},
},
["204157"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 6,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 204157,
["class"] = "DEMONHUNTER",
["time"] = 1539716637,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
},
["184575"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.05,
["scale_upY"] = 1.05,
["scale_downX"] = 0.95,
["scale_downY"] = 0.95,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 184575,
["class"] = "PALADIN",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 2,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
["324540"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 2,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.89999997615814,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1499999910593,
["cooldown"] = 0.5,
["frequency"] = 25.650197982788,
},
["info"] = {
["spellid"] = 324540,
["class"] = "WARLOCK",
["time"] = 1539292087,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900558,
["scale_downY"] = 0.96999996900558,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
},
["264178"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.08,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 1,
["amplitude"] = 2.5,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.25,
["frequency"] = 20,
},
["info"] = {
["spellid"] = 264178,
["class"] = "WARLOCK",
["time"] = 0,
["desc"] = "",
},
},
["185099"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.18999999761581,
["absolute_sineX"] = false,
["scaleY"] = 0.84999847412109,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0,
["duration"] = 0.19999998807907,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 185099,
["class"] = "MONK",
["time"] = 1539712435,
["desc"] = "",
},
},
["55090"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["scaleY"] = 1,
["amplitude"] = 3.9020702838898,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.7999999523163,
},
["info"] = {
["spellid"] = 55090,
["class"] = "DEATHKNIGHT",
["time"] = 0,
["desc"] = "",
},
},
["198030"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.31999999284744,
["cooldown"] = 0.5,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 198030,
["class"] = "DEMONHUNTER",
["time"] = 1539717136,
["desc"] = "",
},
},
["148135"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 1.75,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 60.874122619629,
},
["info"] = {
["spellid"] = 148135,
["class"] = "MONK",
["time"] = 1539295958,
["desc"] = "",
},
},
["189112"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.34999999403954,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1.05,
["amplitude"] = 1.8799999952316,
["fade_in"] = 0,
["duration"] = 0.40000000596046,
["cooldown"] = 0.5,
["frequency"] = 51.979999542236,
},
["info"] = {
["spellid"] = 189112,
["class"] = "DEMONHUNTER",
["time"] = 1539715467,
["desc"] = "",
},
},
["85948"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.019999999552965,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12000000476837,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 85948,
["class"] = "DEATHKNIGHT",
["time"] = 0,
["desc"] = "",
},
},
["35395"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 35395,
["class"] = "PALADIN",
["time"] = 0,
["desc"] = "",
},
},
["280720"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1.05,
["amplitude"] = 0.89999997615814,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.19999998807907,
["cooldown"] = 0.5,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 280720,
["class"] = "ROGUE",
["time"] = 1539292087,
["desc"] = "",
},
},
["49998"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.019999999552965,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["scaleY"] = 1,
["amplitude"] = 1.0330086946487,
["fade_in"] = 0.01,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 49998,
["class"] = "DEATHKNIGHT",
["time"] = 0,
["desc"] = "",
},
},
["155166"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 0.6,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 155166,
["class"] = "DEATHKNIGHT",
["time"] = 0,
["desc"] = "",
},
},
["228354"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 228354,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
},
["8042"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.05,
["scale_upY"] = 1.05,
["scale_downX"] = 0.95,
["scale_downY"] = 0.95,
["duration"] = 0.060000000745058,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 285452,
["class"] = "SHAMAN",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.05,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["scaleY"] = -1,
["amplitude"] = 7.5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.06,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
["27285"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.1,
["scale_upY"] = 1.1,
["scale_downX"] = 0.9,
["scale_downY"] = 0.9,
["duration"] = 0.075,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 27285,
["class"] = "WARLOCK",
["time"] = 0,
["desc"] = "",
},
},
["53351"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 53351,
["class"] = "HUNTER",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["scaleY"] = -1,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
["228598"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 2,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 228598,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
},
["108853"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 108853,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
},
["205523"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 205523,
["class"] = "MONK",
["time"] = 1539295885,
["desc"] = "",
},
},
["245388"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.1,
["scale_upY"] = 1.1,
["scale_downX"] = 0.9,
["scale_downY"] = 0.9,
["duration"] = 0.03,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 245388,
["class"] = "ROGUE",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["scaleY"] = 1,
["amplitude"] = 5,
["fade_in"] = 0.01,
["duration"] = 0.06,
["cooldown"] = 0.5,
["frequency"] = 2,
},
},
["6343"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 1,
["amplitude"] = 0.95,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.1,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 6343,
["class"] = "WARRIOR",
["time"] = 0,
["desc"] = "",
},
},
["199547"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.59999847412109,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 199547,
["class"] = "DEMONHUNTER",
["time"] = 1539717795,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.039999961853,
["scale_upY"] = 1.039999961853,
["scale_downX"] = 0.96999996900558,
["scale_downY"] = 0.96999996900558,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
},
["17364"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.02,
["scale_upY"] = 1.02,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.10000000745058,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 17364,
["class"] = "SHAMAN",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.11,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["scaleY"] = -1,
["amplitude"] = 2.5,
["fade_in"] = 0,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
["206930"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 222026,
["class"] = "DEATHKNIGHT",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["scaleY"] = -1,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
["86040"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.1,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 2,
["fade_in"] = 0.05,
["duration"] = 0.15,
["cooldown"] = 0.25,
["frequency"] = 20,
},
["info"] = {
["spellid"] = 86040,
["class"] = "WARLOCK",
["time"] = 0,
["desc"] = "",
},
},
["187708"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 0.6,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 187708,
["class"] = "HUNTER",
["time"] = 0,
["desc"] = "",
},
},
["275779"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = -1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 275779,
["class"] = "PALADIN",
["time"] = 0,
["desc"] = "",
},
},
["53595"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 53595,
["class"] = "PALADIN",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 3,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
["197834"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 197834,
["class"] = "ROGUE",
["time"] = 0,
["desc"] = "",
},
},
["5374"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 5374,
["class"] = "ROGUE",
["time"] = 0,
["desc"] = "",
},
},
["11366"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.15,
["scale_upY"] = 1.15,
["scale_downX"] = 0.8,
["scale_downY"] = 0.8,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 11366,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 10,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
["199552"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.099999994039536,
["absolute_sineX"] = true,
["scaleY"] = 0.79999923706055,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.20000076293945,
["critical_scale"] = 1.05,
["amplitude"] = 2.5,
["fade_in"] = 0,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 199552,
["class"] = "DEMONHUNTER",
["time"] = 1539717392,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
},
["265157"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1,
["duration"] = 0.096889182925224,
["scale_downX"] = 1,
["animation_type"] = "scale",
["critical_scale"] = 1,
["scale_upY"] = 1.1000000238419,
["cooldown"] = 0.75,
["scale_downY"] = 0.89999997615814,
},
["info"] = {
["spellid"] = 265157,
["class"] = "HUNTER",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.019999999552965,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1,
["amplitude"] = 0.50999999046326,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 39.995635986328,
},
},
["32645"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.1000000238419,
["scale_upY"] = 1.1999999284744,
["scale_downX"] = 0.89999997615814,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 32645,
["class"] = "ROGUE",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["scaleY"] = 1,
["amplitude"] = 4.0999999046326,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.12000000476837,
["cooldown"] = 0.5,
["frequency"] = 2.6099998950958,
},
},
["222026"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 222026,
["class"] = "DEATHKNIGHT",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["scaleY"] = -1,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
["187874"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 0.6,
["amplitude"] = 0.85,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 100,
},
["info"] = {
["spellid"] = 187874,
["class"] = "SHAMAN",
["time"] = 0,
["desc"] = "",
},
},
["46968"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 0.95,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.1,
["frequency"] = 120,
},
["info"] = {
["spellid"] = 46968,
["class"] = "WARRIOR",
["time"] = 0,
["desc"] = "",
},
},
["100780"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1.05,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 100780,
["class"] = "MONK",
["time"] = 1539295910,
["desc"] = "",
},
},
["188443"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 0.6,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 188443,
["class"] = "SHAMAN",
["time"] = 0,
["desc"] = "",
},
},
["196819"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.1999999284744,
["scale_upY"] = 1.2999999523163,
["scale_downX"] = 0.89999997615814,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 196819,
["class"] = "ROGUE",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["scaleY"] = 1,
["amplitude"] = 5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.21999999880791,
["cooldown"] = 0.5,
["frequency"] = 3.3099999427795,
},
},
["100784"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 100784,
["class"] = "MONK",
["time"] = 1539296312,
["desc"] = "",
},
},
["185763"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.25999999046326,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 3.6583230495453,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.15999999642372,
["cooldown"] = 0.5,
["frequency"] = 23.525663375854,
},
["info"] = {
["spellid"] = 185763,
["class"] = "ROGUE",
["time"] = 1539275610,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
},
["7268"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 1,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 7268,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
},
["228478"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.099999994039536,
["absolute_sineX"] = true,
["scaleY"] = 0.79999923706055,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.20000076293945,
["critical_scale"] = 1.05,
["amplitude"] = 2.5,
["fade_in"] = 0,
["duration"] = 0.099999994039535,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 228478,
["class"] = "DEMONHUNTER",
["time"] = 1539716636,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
},
["257045"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 1,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 257045,
["class"] = "HUNTER",
["time"] = 0,
["desc"] = "",
},
},
["20243"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 20243,
["class"] = "WARRIOR",
["time"] = 0,
["desc"] = "",
},
},
["196278"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 1,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.05,
["cooldown"] = 0,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 196278,
["class"] = "WARLOCK",
["time"] = 0,
["desc"] = "",
},
},
["2643"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 0.6,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 2643,
["class"] = "HUNTER",
["time"] = 0,
["desc"] = "",
},
},
["52174"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.15,
["scale_upY"] = 1.15,
["scale_downX"] = 0.8,
["scale_downY"] = 0.8,
["duration"] = 0.075,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 52174,
["class"] = "WARRIOR",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.2,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.15,
["critical_scale"] = 1,
["amplitude"] = 6,
["fade_in"] = 0.01,
["duration"] = 0.3,
["cooldown"] = 0.5,
["frequency"] = 50,
},
},
["44425"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 44425,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
},
["199804"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 0.88999938964844,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 1.1699999570847,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.19999998807907,
["cooldown"] = 0.5,
["frequency"] = 23.525676727295,
},
["info"] = {
["spellid"] = 199804,
["class"] = "ROGUE",
["time"] = 1539293872,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.0499999523163,
["scale_upY"] = 1.0499999523163,
["scale_downX"] = 1,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
},
["116858"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.0499999523163,
["duration"] = 0.099999994039536,
["scale_downX"] = 0.94999998807907,
["animation_type"] = "scale",
["critical_scale"] = 1,
["scale_upY"] = 1.0499999523163,
["cooldown"] = 0.75,
["scale_downY"] = 0.94999998807907,
},
["info"] = {
["spellid"] = 116858,
["class"] = "WARLOCK",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.099999994039536,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["scaleY"] = 4.9699974060059,
["amplitude"] = 0.59999996423721,
["fade_in"] = 0.049999997019768,
["duration"] = 0.099999994039536,
["cooldown"] = 0.25,
["frequency"] = 2.8999998569489,
},
},
["185438"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.19999998807907,
["absolute_sineX"] = false,
["scaleY"] = -1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 6.460000038147,
["fade_in"] = 0,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 185438,
["class"] = "ROGUE",
["time"] = 1539204014,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
},
},
["indicator_scale"] = 0.9999999403953552,
["extra_icon_timer_decimals"] = true,
["aura_grow_direction"] = 3,
["castbar_icon_size"] = "same as castbar plus healthbar",
["health_selection_overlay_alpha"] = 0.09999999403953552,
["aura_show_magic"] = true,
["indicator_worldboss"] = false,
["hook_data"] = {
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["Time"] = 1696878960,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 135426,
["Enabled"] = true,
["Revision"] = 290,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Combo Points [Plater]",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n        [\"Shadow Embrace\"] = 95,\n        [\"Haunt\"] = 90,\n        [\"Unstable Affliction\"] = 86,\n        [\"Agony\"] = 83,\n        [\"Corruption\"] = 80,\n        [\"Siphon Life\"] = 75,\n        [\"Phantom Singularity\"] = 85,\n        [\"Vile Taint\"] = 85,\n        [\"Soul Rot\"] = 84,\n        [\"Immolation\"] = 99,\n        [\"Éclat solaire\"] = 100,\n        [\"Éclat lunaire\"] = 99,\n        [\"Horion de flammes\"] = 100,\n        [\"Rupture\"] = 100\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    \n    --stack auras of the same name that arent stacked by default from the game\n    envTable.consolidadeRepeatedAuras = true    \n    \nend\n\n\n",
},
["Time"] = 1699900375,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = true,
["Revision"] = 400,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Prio"] = 1,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Aura Reorder [Plater]",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- /RELOAD AFTER IMPORTING OR CHANGING THE SCRIPT\n    -- SELECT THE INDICATOR AT THE TARGET TAB\n    \n    Plater.TargetIndicators    [\"Double Arrows\"] = {\n        path = [[Interface\\AddOns\\Plater\\media\\arrow_double_right_64]],\n        coords = {\n            {0, 1, 0, 1}, \n            {1, 0, 0, 1}\n        },\n        desaturated = false,\n        width = 20,\n        height = 16,\n        x = 20,\n        y = 0,\n        blend = \"ADD\",\n        color = \"white\",\n    }    \n    \nend\n\n\n",
},
["Time"] = 1658249495,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/f5itAXjQq/1",
["Icon"] = "Interface\\AddOns\\Plater\\media\\arrow_double_right_64",
["Enabled"] = false,
["Revision"] = 76,
["semver"] = "1.0.0",
["Author"] = "�r��ne-Kel'thuzad",
["Desc"] = "Adds double arrow as a target indicators option",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Double Arrow Target",
},
{
["OptionsValues"] = {
["specialColors"] = {
},
["noKickReadyColor"] = {
0.41176470588235,
0.41176470588235,
0.41176470588235,
1,
},
["kickReadyInTimeColor"] = {
0.84705882352941,
0.68235294117647,
0.17647058823529,
1,
},
["kickOutOfRangeColor"] = {
1,
0.85882352941176,
0.6,
0.79962487518787,
},
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updateInterruptId(unitFrame)\nend\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    unitFrame.castBar:UpdateCastColor()\nend",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updateInterruptIDs()\n    modTable.updateInterruptId(unitFrame)\nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not envTable.lastUpdateTime or (envTable.lastUpdateTime < modTable.lastUpdateTime) then\n        modTable.setCastColorFunction (unitFrame)\n        envTable.lastUpdateTime = modTable.lastUpdateTime\n    end\nend",
["Initialization"] = "function (modTable)\n    \n    -- settings:\n    local noKickReadyColor = modTable.config.noKickReadyColor or \"blue\"\n    local kickReadyInTimeColor = modTable.config.kickReadyInTimeColor or \"purple\"\n    local kickOutOfRangeColor = modTable.config.kickOutOfRangeColor or \"orange\"\n    local kickOutOfRangeEnabled = modTable.config.kickOutOfRangeEnabled\n    local kickReadyInTimeGraceTime = modTable.config.kickReadyInTimeGraceTime or 0.5 --sec - additional time on the CD to account for reaction, lag, etc\n    local checkCovenant = true\n    local showSpark = modTable.config.showSpark\n    local sparkColor = modTable.config.sparkColor\n    local sparkWidth = modTable.config.sparkWidth\n    local sparkTexture = modTable.config.sparkTexture\n    \n    local specialCastColorsEnabled = modTable.config.specialColorsEnabled\n    local specialColorsData = modTable.config.specialColors\n    local platerCastColorsEnabled = modTable.config.platerCastColorsEnabled\n    local specialColorsForNonInterruptibleEnabled = modTable.config.specialColorsForNonInterruptibleEnabled\n    local specialColors = {}\n    local additionalInterruptColors = {\n        [31935] = {Plater:ParseColors(\"greenyellow\")}, --prot avenger's shield\n        --[375576] = {Plater:ParseColors(\"greenyellow\")}, --paladin kyrian bell\n    }\n    \n    if platerCastColorsEnabled or specialColorsForNonInterruptibleEnabled then\n        for id, colorData in pairs(Plater.db.profile.cast_colors) do\n            if colorData and colorData[1] and colorData[2] then\n                specialColors[tonumber(id) or id] = {Plater:ParseColors(colorData[2])}\n            end\n        end\n    end\n    if specialCastColorsEnabled or specialColorsForNonInterruptibleEnabled then\n        for id, color in pairs(specialColorsData) do\n            specialColors[tonumber(id) or id] = {Plater:ParseColors(color)}\n        end\n    end\n    local useSpecial = specialCastColorsEnabled or platerCastColorsEnabled\n    \n    \n    -- functions:\n    \n    -- determine interrupt spell according to spec\n    function modTable.updateInterruptIDs ()\n        local specId = \"N/A\"\n        if WOW_PROJECT_ID == WOW_PROJECT_MAINLINE then\n            specId = GetSpecializationInfo(GetSpecialization())\n        end\n        modTable.knownSpecID = specId\n        local interruptIDs = {} -- contains: [spellID] = <is player ability>, false meaning pet or weird workarounds needed\n        if WOW_PROJECT_ID == WOW_PROJECT_MAINLINE then\n            if Plater.PlayerClass == \"ROGUE\" then\n                interruptIDs[1766] = true\n            elseif Plater.PlayerClass == \"DEATHKNIGHT\" then\n                interruptIDs[47528] = true\n            elseif Plater.PlayerClass == \"DEMONHUNTER\" then\n                interruptIDs[183752] = true\n            elseif Plater.PlayerClass == \"DRUID\" then\n                if specId == 103 or specId == 104 or specId == 105 then\n                    interruptIDs[106839] = true -- feral/guardian/resto\n                elseif specId == 102 then\n                    interruptIDs[78675] = true -- moonkin\n                end\n            elseif Plater.PlayerClass == \"HUNTER\" then\n                if specId == 255 then\n                    interruptIDs[187707] = true -- SV\n                else\n                    interruptIDs[147362] = true -- BM/MS\n                end\n            elseif Plater.PlayerClass == \"MONK\" then\n                interruptIDs[116705] = true --WW/BM/MW\n            elseif Plater.PlayerClass == \"PALADIN\" then\n                interruptIDs[96231] = true --prot/ret/holy\n                if specId == 66 then\n                    interruptIDs[31935] = true --prot avenger's shield\n                    if IsPlayerSpell(375576) then\n                        interruptIDs[375576] = true --Divine Toll\n                    end\n                end\n            elseif Plater.PlayerClass == \"SHAMAN\" then\n                interruptIDs[57994] = true\n            elseif Plater.PlayerClass == \"WARRIOR\" then\n                interruptIDs[6552] = true\n                if modTable.isTalentLearned(90307) then --Disrupting Shout\n                    interruptIDs[90307] = \"386071\"\n                end\n            elseif Plater.PlayerClass == \"MAGE\" then\n                interruptIDs[2139] = true\n            elseif Plater.PlayerClass == \"PRIEST\" then\n                if specId == 258 then\n                    interruptIDs[15487] = true\n                end\n            elseif Plater.PlayerClass == \"WARLOCK\" then\n                interruptIDs[119910] = 119898 --Spell Lock (command ability)\n                if IsPlayerSpell(108503) then --GoSac\n                    interruptIDs[132409] = 119898 --sacrificed Spell Lock (command ability)\n                end\n                if IsPlayerSpell(212619) then --Call Felhunter (PVP ability)\n                    interruptIDs[212619] = true\n                end\n                if specId == 266 then\n                    interruptIDs[119914] = 119898 --demo/fel guard  Axe Toss (command ability)\n                end\n            elseif Plater.PlayerClass == \"EVOKER\" then\n                interruptIDs[351338] = true --quell talent\n            end\n        else -- classic\n            if Plater.PlayerClass == \"ROGUE\" then\n                interruptIDs[1766] = true\n            elseif Plater.PlayerClass == \"DEATHKNIGHT\" then\n                interruptIDs[47528] = true\n                interruptIDs[47476] = true\n            elseif Plater.PlayerClass == \"DRUID\" then\n                interruptIDs[16979] = true\n                interruptIDs[8983] = true\n            elseif Plater.PlayerClass == \"HUNTER\" then\n                interruptIDs[34490] = true\n            elseif Plater.PlayerClass == \"SHAMAN\" then\n                interruptIDs[57994] = true\n            elseif Plater.PlayerClass == \"WARRIOR\" then\n                interruptIDs[6552] = true\n                interruptIDs[72] = true\n            elseif Plater.PlayerClass == \"MAGE\" then\n                interruptIDs[2139] = true\n            elseif Plater.PlayerClass == \"PRIEST\" then\n                interruptIDs[15487] = true\n            elseif Plater.PlayerClass == \"WARLOCK\" then\n                interruptIDs[24259] = true --Spell Lock\n            end\n        end\n        modTable.interruptSpellIDs = interruptIDs\n    end\n    \n    function modTable.updateInterruptId (unitFrame)\n        local specId = \"N/A\"\n        if WOW_PROJECT_ID == WOW_PROJECT_MAINLINE then\n            specId = GetSpecializationInfo(GetSpecialization())\n        end\n        if not modTable.interruptSpellIDs or modTable.knownSpecID ~= specId then\n            modTable.updateInterruptIDs()\n        end\n        unitFrame.castBar.interruptSpellIDs = modTable.interruptSpellIDs\n    end\n    \n    function modTable.isTalentLearned(nodeID)\n        if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then return false end\n        local talentConfig = C_ClassTalents.GetActiveConfigID()\n        local nodeInfo = talentConfig and nodeID and C_Traits.GetNodeInfo(talentConfig, nodeID)\n        return nodeInfo and nodeInfo.entryIDsWithCommittedRanks and nodeInfo.entryIDsWithCommittedRanks[1] and true or false\n    end\n    \n    local function isSpellOrTalentKnown(spellId)\n        if IsSpellKnown(spellId) then\n            return true\n        elseif modTable.isTalentLearned(spellId) then\n            return true\n        end\n    end\n    \n    function modTable.setCastColorFunction (unitFrame)\n        -- create spark (if needed)\n        local castBar = unitFrame.castBar\n        if not castBar.InterruptSpark then\n            castBar.InterruptSpark = castBar:CreateTexture (nil, \"overlay\")\n            castBar.InterruptSpark:SetDrawLayer (\"overlay\", 4)\n            castBar.InterruptSpark:SetBlendMode (\"ADD\")\n            castBar.InterruptSpark:SetHeight(castBar:GetHeight() + 6)\n        end\n        castBar.InterruptSpark:SetTexture(Plater.SparkTextures[sparkTexture])\n        castBar.InterruptSpark:SetVertexColor(Plater:ParseColors(sparkColor))\n        castBar.InterruptSpark:SetWidth(sparkWidth)\n        \n        -- overwrite the color function:\n        castBar.GetCastColor = function (self)\n            \n            self.InterruptSpark:Hide()\n            \n            local interruptCD, interruptReadyInTime = nil, false\n            local interruptDur, interruptStart = 0, 0\n            local usedInterruptSpellId\n            local spellOutOfRange = false --skip per default\n            if self.interruptSpellIDs and self.unit and UnitCanAttack(\"player\", self.unit) then\n                \n                for interruptSpellId, playerAbility in pairs(self.interruptSpellIDs) do\n                    if playerAbility == true or type(playerAbility) == \"string\"  then\n                        if isSpellOrTalentKnown(interruptSpellId) then\n                            interruptSpellId = tonumber(playerAbility) or interruptSpellId\n                            local cdStart, cdDur =  GetSpellCooldown(interruptSpellId)\n                            local tmpInterruptCD = (cdStart > 0 and  cdDur - (GetTime() - cdStart)) or 0\n                            --print(interruptSpellId, cdStart, cdDur, tmpInterruptCD)\n                            if not interruptCD or (tmpInterruptCD < interruptCD) then\n                                interruptCD = tmpInterruptCD\n                                interruptDur = cdDur\n                                interruptStart = cdStart\n                                spellOutOfRange = IsSpellInRange(GetSpellInfo(interruptSpellId), self.unit) == 0\n                            elseif tmpInterruptCD == 0 then\n                                if additionalInterruptColors[interruptSpellId] or not usedInterruptSpellId then\n                                    usedInterruptSpellId = interruptSpellId\n                                elseif not additionalInterruptColors[interruptSpellId] and additionalInterruptColors[usedInterruptSpellId] then\n                                    usedInterruptSpellId = interruptSpellId\n                                end\n                            end\n                        end\n                    else\n                        if type(playerAbility) == \"number\" then\n                            -- workaround for spell overrides (on WL command ability, etc.)\n                            if FindSpellOverrideByID(playerAbility) == interruptSpellId then\n                                local cdStart, cdDur =  GetSpellCooldown(interruptSpellId)\n                                local tmpInterruptCD = (cdStart > 0 and  cdDur - (GetTime() - cdStart)) or 0\n                                if not interruptCD or  (tmpInterruptCD < interruptCD) then\n                                    interruptCD = tmpInterruptCD\n                                    interruptDur = cdDur\n                                    interruptStart = cdStart\n                                    spellOutOfRange = IsSpellInRange(GetSpellInfo(interruptSpellId), self.unit) == 0\n                                elseif tmpInterruptCD == 0 then\n                                    if additionalInterruptColors[interruptSpellId] or not usedInterruptSpellId then\n                                        usedInterruptSpellId = interruptSpellId\n                                    elseif not additionalInterruptColors[interruptSpellId] and additionalInterruptColors[usedInterruptSpellId] then\n                                        usedInterruptSpellId = interruptSpellId\n                                    end\n                                end \n                            end\n                        end\n                    end\n                end\n                \n                if not interruptCD then\n                    interruptCD = 0\n                end\n                \n                if self.channeling then\n                    interruptReadyInTime = (interruptCD + kickReadyInTimeGraceTime) < self.value\n                else\n                    interruptReadyInTime = (interruptCD + kickReadyInTimeGraceTime) < (self.maxValue - self.value)\n                end\n            end\n            \n            if not interruptCD then\n                interruptCD = 0\n            end\n            \n            if (not self.canInterrupt) then\n                return (specialColorsForNonInterruptibleEnabled and (specialColors[self.spellName] or specialColors[self.spellID])) or self.Colors.NonInterruptible\n                \n            elseif (self.failed) then\n                return self.Colors.Failed\n                \n            elseif (self.interrupted) then\n                return self.Colors.Interrupted\n                \n            elseif (self.finished) then\n                return self.Colors.Finished\n                \n            elseif interruptCD > 0 and interruptReadyInTime then\n                if showSpark then\n                    self.InterruptSpark:Show()\n                    local sparkPosition = (interruptStart + interruptDur - self.spellStartTime + kickReadyInTimeGraceTime)/self.maxValue\n                    if self.channeling then\n                        sparkPosition = 1-sparkPosition\n                    end\n                    self.InterruptSpark:SetPoint (\"center\", self, \"left\", sparkPosition  * self:GetWidth(), 0)\n                end\n                return additionalInterruptColors[usedInterruptSpellId] or kickReadyInTimeColor\n                \n            elseif interruptCD > 0 then\n                return noKickReadyColor\n                \n            elseif kickOutOfRangeEnabled and spellOutOfRange then\n                return kickOutOfRangeColor\n                \n            elseif (self.channeling) then\n                return (useSpecial and (specialColors[self.spellName] or specialColors[self.spellID])) or self.Colors.Channeling\n                \n            else\n                return (useSpecial and (specialColors[self.spellName] or specialColors[self.spellID])) or self.Colors.Casting\n                \n            end\n        end\n    end\n    \n    modTable.lastUpdateTime = time()\n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updateInterruptId(unitFrame)\n    modTable.setCastColorFunction(unitFrame)\nend",
},
["Time"] = 1696878973,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/jHilJiXiY/43",
["Icon"] = 132219,
["Enabled"] = true,
["Revision"] = 911,
["semver"] = "1.3.3",
["Author"] = "Viash-Thrall",
["Desc"] = "Sets the cast bar color to the specified one if your interrupt spell is not ready. Uses other Plater color settings otherwise.",
["Prio"] = 99,
["version"] = 43,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option8",
["Value"] = "General:",
["Name"] = "General:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "noKickReadyColor",
["Value"] = {
0,
0,
1,
1,
},
["Name"] = "Kick not Ready Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "kickReadyInTimeColor",
["Value"] = {
0.50196078431373,
0,
1,
1,
},
["Name"] = "Kick Ready in Time Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "kickOutOfRangeColor",
["Value"] = {
1,
0.54901960784314,
0,
1,
},
["Name"] = "Kick out of Range Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "kickOutOfRangeEnabled",
["Value"] = false,
["Name"] = "Check 'Out Of Range'",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "",
["Min"] = 0,
["Key"] = "kickReadyInTimeGraceTime",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Reaction grace Time",
},
{
["Type"] = 4,
["Key"] = "specialColorsEnabled",
["Value"] = false,
["Name"] = "Enable special Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "platerCastColorsEnabled",
["Value"] = false,
["Name"] = "Enable Plater Cast Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "specialColorsForNonInterruptibleEnabled",
["Value"] = false,
["Name"] = "Use Cast Colors for not-interruptible",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Option 10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option7",
["Value"] = "Spark:",
["Name"] = "Spark:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showSpark",
["Value"] = true,
["Name"] = "Show Spark",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0,
1,
0,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "",
["Min"] = 4,
["Key"] = "sparkWidth",
["Value"] = 12,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Spark Width",
},
{
["Type"] = 2,
["Max"] = 8,
["Desc"] = "",
["Min"] = 1,
["Key"] = "sparkTexture",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Spark Texure",
},
{
["Type"] = 7,
["Key"] = "specialColors",
["Value"] = {
{
"116",
"navy",
},
},
["Name"] = "Special Cast Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "",
},
},
["LastHookEdited"] = "Constructor",
["Name"] = "Interrupt not ready Cast Color",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n",
},
["Time"] = 1696878843,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/id_wRWfKp/2",
["Icon"] = "Interface\\AddOns\\Plater\\media\\checked_64",
["Enabled"] = true,
["Revision"] = 33,
["semver"] = "1.0.1",
["Author"] = "Kastfall-Azralon",
["Desc"] = "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
["Prio"] = 1,
["version"] = 2,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Force Threat Color",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateMobPercentage(unitFrame, true)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateMobPercentage(unitFrame)\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    -- text settings:\n    local textColor = \"#FFFFFF\";\n    local textSize = 6;\n    \n    -- text to show\n    envTable.showPercent = true\n    envTable.showCount = false\n    envTable.showTotal = false\n    \n    -- positioning\n    local anchor = {\n        side = 7, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = -0.5, --x offset\n        y = -6.5, --y offset\n    };\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    --frames:\n    \n    --create the text frame that will show the %\n    if (not  unitFrame.healthBar.mobPercentageTextFrame) then\n        envTable.mobPercentageTextFrame = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.mobPercentageTextFrame, anchor);\n        unitFrame.healthBar.mobPercentageTextFrame = envTable.mobPercentageTextFrame\n        envTable.mobPercentageTextFrame:SetText(\"\")\n    end\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    envTable.isTeeming = function()\n        local _, affixes = C_ChallengeMode.GetActiveKeystoneInfo()\n        for _, affixID in ipairs(affixes) do\n            if affixID == 5 then\n                return true\n            end\n        end\n        return false\n    end\n    \n    --update the target percentage\n    function envTable.UpdateMobPercentage(unitFrame, clearText)\n        if (not unitFrame or not unitFrame.healthBar or not unitFrame.healthBar.mobPercentageTextFrame) then return end\n        \n        -- update the anchor for better configuration\n        Plater.SetAnchor (unitFrame.healthBar.mobPercentageTextFrame, anchor);\n        \n        if (clearText) then\n            unitFrame.healthBar.mobPercentageTextFrame:SetText(\"\")\n            return\n        end\n        \n        local _, _, difficultyID= GetInstanceInfo()\n        local _, _, _, isChallengeMode = GetDifficultyInfo(difficultyID)\n        \n        --isChallengeMode = true\n        if (not isChallengeMode) then\n            unitFrame.healthBar.mobPercentageTextFrame:SetText(\"\")\n            return\n        end\n        \n        local DungeonTools = MDT or MethodDungeonTools\n        if DungeonTools ~= nil and DungeonTools.GetEnemyForces ~= nil then\n            local mobPercentageString = \"\"\n            local weight = nil;\n            local isTeeming = envTable.isTeeming()\n            local npcId = unitFrame.namePlateNpcId\n            local count, max, maxTeeming, teemingCount = DungeonTools:GetEnemyForces(npcId)\n            if (teemingCount and isTeeming) or not count then\n                count = teemingCount\n            end\n            if (count ~= nil and max ~= nil and maxTeeming ~= nil) then\n                if (isTeeming) then\n                    weight = count / maxTeeming\n                else\n                    weight = count / max\n                end\n                weight = weight * 100\n            end\n            \n            if (weight and weight > 0) then\n                if envTable.showPercent then\n                    mobPercentageString = string.format(\"%.2f%%\", weight)\n                end\n                if envTable.showCount then\n                    if  mobPercentageString ~= \"\"  then\n                        mobPercentageString = mobPercentageString .. \" | \"\n                    end\n                    mobPercentageString = mobPercentageString .. count\n                    if envTable.showTotal then\n                        if (isTeeming) then\n                            mobPercentageString = mobPercentageString .. \"/\" ..  maxTeeming\n                        else\n                            mobPercentageString = mobPercentageString .. \"/\" ..  max\n                        end\n                    end\n                end\n                \n                unitFrame.healthBar.mobPercentageTextFrame:SetText(\"(\"..mobPercentageString..\")\")\n            end\n        end\n    end\nend",
},
["Time"] = 1698444353,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/rCryUrVCn/1",
["Icon"] = 254292,
["Enabled"] = true,
["Revision"] = 203,
["semver"] = "1.0.0",
["Author"] = "Viashi-Antonidas",
["Desc"] = "Shows the m+ mob percentage on the nameplate. REQUIRES MDT \"Method Dungeon Tools\" TO WORK!",
["Prio"] = 7,
["version"] = 1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Name"] = "M+ MDT MobPercentage",
},
{
["OptionsValues"] = {
["EXEhbcolor"] = {
1,
0.37254902720451,
0.47058826684952,
1,
},
["EXEhicolor"] = {
1,
0.59215688705444,
0.75294125080109,
0.30512648820877,
},
["EXEbdrcolor"] = {
0.89803928136826,
0.33333334326744,
0.42352944612503,
1,
},
["EXEalert"] = 5,
},
["HooksTemp"] = {
},
["UID"] = "0x6150129e178c7fc5",
["Hooks"] = {
["Player Logon"] = "function (modTable)\n    modTable.UpdateEXETalent()\nend",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateEXETalent()\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if not unitFrame.healthBar:IsShown() or unitFrame.PlayerCannotAttack or UnitIsTapDenied (unitId) or UnitIsPlayer(unitId) or unitFrame.IsSelf then return end\n    \n    if (modTable.EXEenabled) or (modTable.uEXEenabled) then  \n        \n        local percent = unitFrame.healthBar.CurrentHealth / unitFrame.healthBar.CurrentHealthMax\n        local execute = modTable.EXEpercent\n        if (modTable.EXEenabled) and (percent <= execute) then\n            if not unitFrame.coloredByScript then\n                envTable.UnitInExecuteRange(unitFrame)\n            end\n            if not unitFrame.healthBar.healthCutOff:IsShown() then\n                envTable.UnitInExecuteAlertRange (unitFrame, execute)\n            end\n        elseif (modTable.uEXEenabled) and (percent >= modTable.SER and percent < 1) then\n            if not unitFrame.coloredByScript then\n                envTable.UnitInExecuteRange(unitFrame)\n            end\n            if not unitFrame.healthBar.healthCutOff:IsShown() then\n                envTable.UnitInExecuteAlertRange (unitFrame, modTable.SER)\n            end\n        else\n            if unitFrame.executeRangeColored then\n                if modTable.config.EXEhbcon then\n                    Plater.RefreshNameplateColor (unitFrame)\n                end                \n                if modTable.config.EXEbdron then\n                    Plater.SetBorderColor (unitFrame)\n                end                \n                unitFrame.executeRangeColored = false\n            end\n            \n            if (modTable.EXEenabled) and (percent > execute and percent <= execute + modTable.EXEalert) then\n                if not unitFrame.healthBar.healthCutOff:IsShown() then\n                    envTable.UnitInExecuteAlertRange (unitFrame, execute)\n                end\n            else\n                if unitFrame.healthBar.healthCutOff:IsShown() then\n                    unitFrame.healthBar.healthCutOff:Hide() \n                    unitFrame.healthBar.ExecuteGlowUp:Hide()\n                    unitFrame.healthBar.ExecuteGlowDown:Hide()\n                    unitFrame.healthBar.executeRange:Hide()\n                end\n            end\n        end\n    else\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame, 0)\n        end\n    end\nend",
["Initialization"] = "function (modTable)\n    \n    function modTable.UpdateEXETalent()\n        modTable.EXEenabled = false\n        modTable.uEXEenabled = false\n        modTable.EXEpercent = 0\n        modTable.EXEalert = modTable.config.EXEalert/100\n        modTable.SER = 1\n        \n        local _, class = UnitClass (\"player\")\n        local spec = GetSpecialization()\n        local specID = GetSpecializationInfo (spec) or 0\n        if not (spec or class or specID) or specID == 0 then return end\n        --GetSpecializationInfo(GetSpecialization())\n        if (class == \"MAGE\") then\n            if (specID == 62) then \n                if IsPlayerSpell(384581) then -- Arcane pressure\n                    modTable.EXEenabled = true\n                    modTable.EXEpercent = 0.35\n                end\n            elseif (specID == 63) then \n                if IsPlayerSpell(205026) then -- Firestarter\n                    modTable.uEXEenabled = true\n                    modTable.SER = 0.9\n                end\n                if IsPlayerSpell(269644) then -- Touch\n                    modTable.EXEenabled = true\n                    modTable.EXEpercent = 0.3\n                end\n            end\n        elseif (class == \"WARLOCK\") then\n            if (specID == 265) then \n                if IsPlayerSpell(198590) then -- Souldrain\n                    modTable.EXEenabled = true\n                    modTable.EXEpercent = 0.2\n                end\n            elseif (specID == 267) then \n                if IsPlayerSpell(17877) then -- Shadowburn\n                    modTable.EXEenabled = true\n                    modTable.EXEpercent = 0.2\n                end\n            end\n        elseif (class == \"PRIEST\") then\n            if IsPlayerSpell(309072) or IsPlayerSpell(32379) then -- ToF or SW:Death\n                modTable.EXEenabled = true\n                modTable.EXEpercent = IsPlayerSpell(309072) and 0.35 or 0.2\n            end\n        elseif (class == \"WARRIOR\") then\n            -- Since Fury has it's own spellId for execute and massacre\n            local execute_Id = (specID == 72) and 280735 or 163201\n            local massacre_Id = (specID == 72) and 206315 or 281001\n            if IsPlayerSpell(execute_Id) or IsPlayerSpell(massacre_Id) then -- Execute or Massacre\n                modTable.EXEenabled = true\n                modTable.EXEpercent = IsPlayerSpell(massacre_Id) and 0.35 or 0.2\n            end\n        elseif (class == \"HUNTER\") then            \n            if (specID == 254) then\n                if IsPlayerSpell(260228) then -- Careful Aim\n                    modTable.uEXEenabled = true\n                    modTable.SER = 0.7\n                end\n            end            \n            if IsPlayerSpell(273887) or ((specID == 255) and  IsPlayerSpell(385718)) then\n                -- Killer Instinct or Ruthless marauder\n                modTable.EXEenabled = true\n                modTable.EXEpercent = 0.35\n            else\n                -- Since Survival has it's own spellId for kill shot\n                local killShot_Id = (specID == 255) and 320976 or 53351\n                if IsPlayerSpell(killShot_Id) then -- Kill shot\n                    modTable.EXEenabled = true\n                    modTable.EXEpercent = 0.2\n                end   \n            end         \n        elseif (class == \"ROGUE\") then\n            if (specID == 259) then\n                if IsPlayerSpell(328085) or IsPlayerSpell(381798) then -- Blindside or Zoldyck\n                    modTable.EXEenabled = true\n                    modTable.EXEpercent = 0.35\n                end\n            end\n        elseif (class == \"PALADIN\") then\n            if IsPlayerSpell(24275) then -- Hammer of Wrath\n                modTable.EXEenabled = true\n                modTable.EXEpercent = 0.2\n            end\n        elseif (class == \"MONK\") then\n            if IsPlayerSpell(322109) and IsPlayerSpell(322113) then -- ToD\n                modTable.EXEenabled = true\n                modTable.EXEpercent = 0.15\n            end\n        elseif (class == \"DEATHKNIGHT\") then\n            if IsPlayerSpell(343294) then -- Soulreaper\n                modTable.EXEenabled = true\n                modTable.EXEpercent = 0.35\n            end\n        end\n    end\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    do        \n        function envTable.UnitInExecuteRange (unitFrame)\n            if (modTable.config.onlyNPC and UnitIsPlayer(unitFrame.unit)) or\n            (modTable.config.TrackAggro and\n                ((unitFrame.namePlateThreatIsTanking and not Plater.PlayerIsTank) or\n                    (not unitFrame.namePlateThreatIsTanking and Plater.PlayerIsTank))) then\n                if unitFrame.executeRangeColored then\n                    unitFrame.executeRangeColored = false\n                end\n                return \n            end             \n            \n            if (modTable.config.EXEhbcon) then\n                Plater.SetNameplateColor (unitFrame, modTable.config.EXEhbcolor)\n                unitFrame.executeRangeColored = true\n            end\n            \n            if (modTable.config.EXEbdron) then\n                Plater.SetBorderColor (unitFrame, modTable.config.EXEbdrcolor)\n                unitFrame.executeRangeColored = true\n            end\n        end\n        \n        function envTable.UnitInExecuteAlertRange (unitFrame, divisorPercent)\n            if (modTable.config.EXEhdoff) then\n                unitFrame.healthBar.healthCutOff:Hide()          \n                unitFrame.healthBar.ExecuteGlowUp:Hide()\n                unitFrame.healthBar.ExecuteGlowDown:Hide()\n                unitFrame.healthBar.executeRange:Hide()\n            else\n                envTable.UpdateHealthDivisor (unitFrame, divisorPercent)\n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame, divisorPercent)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (modTable.config.EXEhdcolor))\n            healthBar.healthCutOff.ShowAnimation:Play()\n            \n            if (Plater.db.profile.health_cutoff_extra_glow) then\n                healthBar.ExecuteGlowUp.ShowAnimation:Play()\n                healthBar.ExecuteGlowDown.ShowAnimation:Play()\n            end\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (modTable.config.EXEhicolor))\n            \n            if (modTable.EXEenabled) or (modTable.uEXEenabled) then\n                healthBar.healthCutOff:ClearAllPoints()     \n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * divisorPercent, 0)\n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                \n                healthBar.executeRange:ClearAllPoints()\n                if (divisorPercent == modTable.EXEpercent) then\n                    healthBar.executeRange:SetTexCoord (0, modTable.EXEpercent, 0, 1)\n                    healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                    healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n                elseif (divisorPercent == modTable.SER) then\n                    healthBar.executeRange:SetTexCoord (0, modTable.SER, 0, 1)\n                    healthBar.executeRange:SetPoint (\"left\", healthBar.healthCutOff, \"center\")\n                    healthBar.executeRange:SetPoint (\"right\", healthBar, \"right\", 0, 0)\n                end\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n            end\n        end\n    end\nend",
},
["Time"] = 1699900376,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/Jnr-pBixS/51",
["Icon"] = 135358,
["Enabled"] = true,
["Revision"] = 3434,
["semver"] = "1.0.50",
["Author"] = "Ahwa-Azralon",
["Desc"] = "Adds extra effects to execute range and allow to setup two execute ranges for classes with execute when the unit has almost full healh. See the constructor script for options.",
["Prio"] = 99,
["version"] = 51,
["PlaterCore"] = 1,
["Name"] = "Advanced Execute Range [Fixed]",
["Options"] = {
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Execute Color Options",
["Name"] = "Execute Color Options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "EXEhbcon",
["Value"] = true,
["Name"] = "Enable Execute Healthbar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Enable Execute Healthbar Color",
},
{
["Type"] = 1,
["Key"] = "EXEhbcolor",
["Value"] = {
0.3921568627451,
0.15294117647059,
1,
1,
},
["Name"] = "Execute Healthbar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Execute Healthbar Color",
},
{
["Type"] = 4,
["Key"] = "EXEbdron",
["Value"] = false,
["Name"] = "Enable Execute Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Enable Execute Border Color",
},
{
["Type"] = 1,
["Key"] = "EXEbdrcolor",
["Value"] = {
0.3921568627451,
0.15294117647059,
1,
1,
},
["Name"] = "Execute Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Execute Border Color",
},
{
["Type"] = 4,
["Key"] = "onlyNPC",
["Value"] = true,
["Name"] = "Only on NPC",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Apply these features only on NPC",
},
{
["Type"] = 4,
["Key"] = "TrackAggro",
["Value"] = false,
["Name"] = "Track Aggro Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use threat colors if you are tank without aggro or dps with aggro",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Execute Divisor Options",
["Name"] = "Execute Divisor Options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "EXEhdoff",
["Value"] = false,
["Name"] = "Disable Execute Health Divisor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Disable Execute Health Divisor",
},
{
["Type"] = 1,
["Key"] = "EXEhdcolor",
["Value"] = {
1,
1,
1,
0.8500000089407,
},
["Name"] = "Execute Health Divisor Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Execute Health Divisor Color",
},
{
["Type"] = 1,
["Key"] = "EXEhicolor",
["Value"] = {
0.27843137254902,
0,
1,
0.25,
},
["Name"] = "Execute Health Indicator Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Execute Health Indicator Color",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set +% of health to show Execute Divisor before entering execute range.",
["Min"] = 0,
["Key"] = "EXEalert",
["Value"] = 13,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Preview Divisor %",
},
},
["LastHookEdited"] = "",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Initialization",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    modTable.lockoutDurations = {\n        [1766] = 5, -- Kick\n        [2139] = 6, -- Counterspell\n        [6552] = 4, -- Pummel\n        [19647] = 6, -- Spell Lock\n        [132409] = 6, -- Spell Lock\n        [115781] = 6, -- Optical Blast\n        [47528] = 3, -- Mind Freeze\n        [57994] = 3, -- Wind Shear\n        [91807] = 2, -- Shambling Rush\n        [96231] = 4, -- Rebuke\n        [93985] = 4, -- Skull Bash\n        [116705] = 4, -- Spear Hand Strike\n        [147362] = 3, -- Counter Shot\n        [183752] = 3, -- Disrupt\n        [187707] = 3, -- Muzzle\n        [212619] = 6, -- Call Felhunter\n        [31935] = 3, -- Avenger's Shield\n        [217824] = 4, -- Shield of Virtue\n        [347008] = 4, -- Axe Toss\n        [97547] = 5, -- Solar Beam\n        [220543] = 3, -- Silence\n    }\n    \n    modTable.data = {}\n    \n    local function isFriendly(flags)\n        return bit.band(flags, COMBATLOG_OBJECT_REACTION_FRIENDLY)  > 0\n    end\n    \n    local function getSchoolColor(school)\n        return COMBATLOG_DEFAULT_COLORS.schoolColoring[school] or COMBATLOG_DEFAULT_COLORS.schoolColoring[Enum.Damageclass.MaskNone]\n    end\n    \n    local function getBorderColor(spellSchool) \n        local borderColor \n        if modTable.config.schoolBorders then\n            borderColor = getSchoolColor(spellSchool)\n        elseif Plater.db.profile.extra_icon_use_blizzard_border_color then\n            local color = DebuffTypeColor[\"none\"] or {r=0, b=0, g=0, a=0}\n            borderColor = {color.r, color.g, color.b, color.a or 1}\n        else\n            borderColor = Plater.db.profile.extra_icon_border_color\n        end\n        return borderColor\n    end\n    \n    local basekick = {\n        Show = function(self, frame)\n            local borderColor = getBorderColor(self.spellSchool)\n            frame:AddSpecificIcon(\n                self.id, \n                self.spellId, \n                borderColor, \n                self.startTime, \n                self.duration, \n                nil, \n                self.casterName and {text = self.casterName, text_color = self.casterClass} or false,\n                1, \n                nil, \n                self.caster, \n                false, \n                self.spellName, \n                nil\n            )\n            self.frame = frame\n        end,\n        Hide = function(self)\n            if self.frame then\n                self.frame:RemoveSpecificIcon(self.id)\n            end\n        end\n    }\n    \n    local function OnEvent(self, event)\n        local details = { CombatLogGetCurrentEventInfo() }\n        \n        if details[2] ~= \"SPELL_INTERRUPT\" then return end\n        if modTable.config.ignoreFriendly and isFriendly(details[10]) then return end\n        \n        local guid = details[8]\n        local spellId = details[12]\n        local texure = GetSpellTexture(spellId)\n        local spellName = details[13]\n        local school = details[17]\n        local caster = details[5]\n        local casterClass = select(2, UnitClass(caster or \"\"))\n        local casterName\n        if (casterClass and UnitPlayerControlled(caster)) then\n            casterName = UnitName(caster)\n        end\n        local startTime = GetTime()\n        local duration = modTable.lockoutDurations[spellId] or 4\n        local expirationTime = (startTime + duration)\n        local id = caster..startTime\n        \n        modTable.data[guid] = modTable.data[guid] or {}\n        \n        local kick = {\n            id = id,\n            spellId = spellId,\n            spellName = spellName,\n            texture = texure,\n            startTime = startTime,\n            duration = duration,\n            expirationTime = expirationTime,\n            caster = caster,\n            casterName = casterName,\n            casterClass = casterClass,\n            spellSchool = school,\n            Show = basekick.Show,\n            Hide = basekick.Hide\n        }\n        \n        modTable.data[guid][id] = kick\n        \n        C_Timer.NewTimer(duration, function()\n                kick:Hide()\n                modTable.data[guid][id] = nil\n                if next(modTable.data[guid]) == nil then\n                    modTable.data[guid] = nil\n                end\n        end)\n        \n    end\n    \n    modTable.eventFrame = modTable.eventFrame or GlobalPlaterInterruptEventFrame\n    if not modTable.eventFrame then\n        modTable.eventFrame = CreateFrame(\"Frame\", \"GlobalPlaterInterruptEventFrame\")\n        modTable.eventFrame:RegisterEvent(\"COMBAT_LOG_EVENT_UNFILTERED\")\n    end\n    \n    modTable.eventFrame:SetScript(\"OnEvent\",  OnEvent)\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local kicks = modTable.data[unitFrame.namePlateUnitGUID] or {}\n    for _, kick in pairs(kicks) do\n        kick:Show(unitFrame.ExtraIconFrame)\n    end\n    \nend",
},
["Time"] = 1716643273,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/mA-zQQEsD/4",
["Enabled"] = true,
["Revision"] = 922,
["semver"] = "1.0.3",
["Author"] = "Ретцер-Ревущий фьорд",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "PVP/PVE School Lock Buff Special",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Name"] = "School based border color",
["Value"] = false,
["Key"] = "schoolBorders",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change color of icon border depending on locked school",
},
{
["Type"] = 4,
["Name"] = "Ignore friendly nameplates",
["Value"] = false,
["Key"] = "ignoreFriendly",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore interrupts for friendly nameplates",
},
},
["HooksTemp"] = {
["Initialization"] = "function (modTable)\n    modTable.lockoutDurations = {\n        [1766] = 5, -- Kick\n        [2139] = 6, -- Counterspell\n        [6552] = 4, -- Pummel\n        [19647] = 6, -- Spell Lock\n        [132409] = 6, -- Spell Lock\n        [115781] = 6, -- Optical Blast\n        [47528] = 3, -- Mind Freeze\n        [57994] = 3, -- Wind Shear\n        [91807] = 2, -- Shambling Rush\n        [96231] = 4, -- Rebuke\n        [93985] = 4, -- Skull Bash\n        [116705] = 4, -- Spear Hand Strike\n        [147362] = 3, -- Counter Shot\n        [183752] = 3, -- Disrupt\n        [187707] = 3, -- Muzzle\n        [212619] = 6, -- Call Felhunter\n        [31935] = 3, -- Avenger's Shield\n        [217824] = 4, -- Shield of Virtue\n        [347008] = 4, -- Axe Toss\n        [97547] = 5, -- Solar Beam\n        [220543] = 3, -- Silence\n    }\n    \n    modTable.data = {}\n    \n    local function isFriendly(flags)\n        return bit.band(flags, COMBATLOG_OBJECT_REACTION_FRIENDLY)  > 0\n    end\n    \n    local function getSchoolColor(school)\n        return COMBATLOG_DEFAULT_COLORS.schoolColoring[school] or COMBATLOG_DEFAULT_COLORS.schoolColoring[Enum.Damageclass.MaskNone]\n    end\n    \n    local function getBorderColor(spellSchool) \n        local borderColor \n        if modTable.config.schoolBorders then\n            borderColor = getSchoolColor(spellSchool)\n        elseif Plater.db.profile.extra_icon_use_blizzard_border_color then\n            local color = DebuffTypeColor[\"none\"] or {r=0, b=0, g=0, a=0}\n            borderColor = {color.r, color.g, color.b, color.a or 1}\n        else\n            borderColor = Plater.db.profile.extra_icon_border_color\n        end\n        return borderColor\n    end\n    \n    local basekick = {\n        Show = function(self, frame)\n            local borderColor = getBorderColor(self.spellSchool)\n            frame:AddSpecificIcon(\n                self.id, \n                self.spellId, \n                borderColor, \n                self.startTime, \n                self.duration, \n                nil, \n                self.casterName and {text = self.casterName, text_color = self.casterClass} or false,\n                1, \n                nil, \n                self.caster, \n                false, \n                self.spellName, \n                nil\n            )\n            self.frame = frame\n        end,\n        Hide = function(self)\n            if self.frame then\n                self.frame:RemoveSpecificIcon(self.id)\n            end\n        end\n    }\n    \n    local function OnEvent(self, event)\n        local details = { CombatLogGetCurrentEventInfo() }\n        \n        if details[2] ~= \"SPELL_INTERRUPT\" then return end\n        if modTable.config.ignoreFriendly and isFriendly(details[10]) then return end\n        \n        local guid = details[8]\n        local spellId = details[12]\n        local texure = GetSpellTexture(spellId)\n        local spellName = details[13]\n        local school = details[17]\n        local caster = details[5]\n        local casterClass = select(2, UnitClass(caster or \"\"))\n        local casterName\n        if (casterClass and UnitPlayerControlled(caster)) then\n            casterName = UnitName(caster)\n        end\n        local startTime = GetTime()\n        local duration = modTable.lockoutDurations[spellId] or 4\n        local expirationTime = (startTime + duration)\n        local id = caster..startTime\n        \n        modTable.data[guid] = modTable.data[guid] or {}\n        \n        local kick = {\n            id = id,\n            spellId = spellId,\n            spellName = spellName,\n            texture = texure,\n            startTime = startTime,\n            duration = duration,\n            expirationTime = expirationTime,\n            caster = caster,\n            casterName = casterName,\n            casterClass = casterClass,\n            spellSchool = school,\n            Show = basekick.Show,\n            Hide = basekick.Hide\n        }\n        \n        modTable.data[guid][id] = kick\n        \n        C_Timer.NewTimer(duration, function()\n                kick:Hide()\n                modTable.data[guid][id] = nil\n                if next(modTable.data[guid]) == nil then\n                    modTable.data[guid] = nil\n                end\n        end)\n        \n    end\n    \n    modTable.eventFrame = modTable.eventFrame or GlobalPlaterInterruptEventFrame\n    if not modTable.eventFrame then\n        modTable.eventFrame = CreateFrame(\"Frame\", \"GlobalPlaterInterruptEventFrame\")\n        modTable.eventFrame:RegisterEvent(\"COMBAT_LOG_EVENT_UNFILTERED\")\n    end\n    \n    modTable.eventFrame:SetScript(\"OnEvent\",  OnEvent)\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local kicks = modTable.data[unitFrame.namePlateUnitGUID] or {}\n    for _, kick in pairs(kicks) do\n        kick:Show(unitFrame.ExtraIconFrame)\n    end\n    \nend",
},
["version"] = 4,
},
},
["aura_width2"] = 25,
["aura_stack_size"] = 6,
["extra_icon_caster_outline"] = "OUTLINE",
["range_check_power_bar_alpha"] = 0.449999988079071,
["plater_resources_align"] = "horizontal",
["range_check_health_bar_alpha"] = 0.449999988079071,
["plater_resources_scale"] = 0.8,
["ghost_auras"] = {
["auras"] = {
["WARLOCK"] = {
{
[980] = true,
[172] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
},
["aura_show_crowdcontrol"] = true,
["cast_audiocues"] = {
[372730] = "Interface\\Addons\\SharedMedia_Causese\\sound\\AoE.ogg",
[278444] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[193826] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Hide.ogg",
[373942] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Switch.ogg",
[412129] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Dodge.ogg",
[257736] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[386757] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Hide.ogg",
[198959] = "nil",
[372223] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[405437] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Soak.ogg",
[407733] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369675] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[381470] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Switch.ogg",
[260894] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[406333] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Dodge.ogg",
[374586] = "Interface\\Addons\\SharedMedia_Causese\\sound\\AoE.ogg",
[204667] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257739] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Fixate.ogg",
[381663] = "Interface\\Addons\\SharedMedia_Causese\\sound\\AoE.ogg",
[183088] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Move.ogg",
[198962] = "nil",
[225100] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[370764] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[396073] = "nil",
[413607] = "Interface\\Addons\\SharedMedia_Causese\\sound\\AoE.ogg",
[369365] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[377844] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Dodge.ogg",
[198073] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Knock.ogg",
[405641] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Spread.ogg",
[198934] = "nil",
[372683] = "nil",
[256405] = "Interface\\Addons\\SharedMedia_Causese\\sound\\AoE.ogg",
[406918] = "Interface\\Addons\\SharedMedia_Causese\\sound\\AoE.ogg",
[408576] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Dodge.ogg",
[255577] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Hide.ogg",
[371984] = "nil",
[396018] = "nil",
[383651] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Break.ogg",
[392640] = "nil",
[264694] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Dodge.ogg",
[265523] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Dodge.ogg",
[405391] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Spread.ogg",
[259531] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Add.ogg",
[411002] = "Interface\\Addons\\SharedMedia_Causese\\sound\\AoE.ogg",
[372561] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Dodge.ogg",
[168082] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[211464] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Hide.ogg",
[429172] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Hide.ogg",
[192563] = "nil",
[258672] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Dodge.ogg",
[227913] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[376200] = "Interface\\Addons\\SharedMedia_Causese\\sound\\AoE.ogg",
[198079] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Charge.ogg",
[413622] = "Interface\\Addons\\SharedMedia_Causese\\sound\\AoE.ogg",
[374544] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[194956] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412922] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[200630] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[169839] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[397878] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Hide.ogg",
[152818] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[198750] = "nil",
[375439] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[406358] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Charge.ogg",
[265407] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Dodge.ogg",
[428926] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Out.ogg",
[400430] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[265089] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[406678] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Move.ogg",
[200345] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257784] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[169841] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[265091] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[259187] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Stack.ogg",
[404896] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[252781] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[197797] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[201399] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[114646] = "nil",
[398206] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[196587] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Selfcd.ogg",
[397888] = "nil",
[409492] = "Interface\\AddOns\\Prat-3.0\\Sounds\\Heart.ogg",
[387411] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[384014] = "Interface\\Addons\\SharedMedia_Causese\\sound\\AoE.ogg",
[226296] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388392] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[404732] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Soak.ogg",
[258777] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Dodge.ogg",
[391634] = "Interface\\Addons\\SharedMedia_Causese\\sound\\AoE.ogg",
[384823] = "Interface\\Addons\\SharedMedia_Causese\\sound\\AoE.ogg",
[272609] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[87761] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[373017] = "nil",
[429037] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Switch.ogg",
[384633] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[386024] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[386546] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[408975] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Dodge.ogg",
[373939] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Switch.ogg",
[76634] = "Interface\\Addons\\SharedMedia_Causese\\sound\\AoE.ogg",
[164965] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[265741] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[372696] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Dodge.ogg",
[396812] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[374563] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[192288] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[406227] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Dodge.ogg",
[397383] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Switch.ogg",
[76813] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[427668] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Knock.ogg",
[265487] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[200248] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[198595] = "nil",
[226304] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[199726] = "nil",
[266106] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[381834] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Dodge.ogg",
[263961] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Move.ogg",
[395859] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[377500] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[427672] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Stack.ogg",
[400641] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Soak.ogg",
[387955] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[384194] = "nil",
[255371] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Hide.ogg",
[156718] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[405375] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Healcd.ogg",
[198379] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[428374] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Spread.ogg",
[384899] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[405042] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Dot.ogg",
[373424] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Break.ogg",
[408805] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[377488] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[397801] = "nil",
[215433] = "nil",
[375687] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Switch.ogg",
[377950] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Switch.ogg",
[374699] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[265368] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[395427] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Stopcast.ogg",
[200580] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[257732] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Stopcast.ogg",
[87779] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[373803] = "nil",
[404472] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[392451] = "nil",
[406783] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[186269] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[427459] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[405812] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Switch.ogg",
[255041] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[411001] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Hide.ogg",
[264734] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Healcd.ogg",
[260666] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Hide.ogg",
[400777] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Soak.ogg",
[257426] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257397] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[271174] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[392576] = "nil",
[381593] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Hide.ogg",
[376171] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[397914] = "nil",
[169445] = "Interface\\Addons\\SharedMedia_Causese\\sound\\AoE.ogg",
[412063] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Dodge.ogg",
[225573] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
[202181] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[373943] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Dodge.ogg",
},
["blizzard_nameplate_large_font_size"] = 10,
["cast_colors"] = {
[372730] = {
false,
"dark2",
"",
},
[384014] = {
false,
"deeppink",
"",
},
[193826] = {
false,
"deeppink",
},
[373942] = {
false,
"deeppink",
"",
},
[412129] = {
false,
"deeppink",
},
[257736] = {
false,
"deeppink",
"",
},
[386757] = {
false,
"deeppink",
"",
},
[198959] = {
false,
"white",
"",
},
[372223] = {
false,
"deeppink",
"",
},
[405437] = {
false,
"deeppink",
"",
},
[207980] = {
false,
"deeppink",
},
[407733] = {
false,
"blue",
},
[405375] = {
false,
"deeppink",
"",
},
[209033] = {
false,
"deeppink",
"",
},
[397726] = {
false,
"deeppink",
},
[381470] = {
false,
"deeppink",
"",
},
[260894] = {
false,
"deeppink",
"",
},
[199726] = {
false,
"white",
"",
},
[374586] = {
false,
"deeppink",
"",
},
[204667] = {
true,
"deeppink",
"",
},
[257739] = {
false,
"deeppink",
"",
},
[381663] = {
false,
"deeppink",
"",
},
[183088] = {
false,
"deeppink",
"",
},
[198962] = {
false,
"white",
"",
},
[257899] = {
false,
"dark2",
"",
},
[385553] = {
false,
"deeppink",
},
[225100] = {
false,
"deeppink",
"",
},
[370764] = {
false,
"deeppink",
},
[396073] = {
false,
"white",
"",
},
[384663] = {
false,
"deeppink",
"",
},
[409271] = {
false,
"white",
},
[413607] = {
false,
"deeppink",
},
[369365] = {
false,
"deeppink",
},
[377844] = {
false,
"deeppink",
},
[374020] = {
false,
"deeppink",
},
[198073] = {
true,
"deeppink",
"",
},
[198934] = {
false,
"white",
"",
},
[372683] = {
false,
"white",
"",
},
[256405] = {
false,
"deeppink",
"",
},
[374533] = {
false,
"white",
"",
},
[377402] = {
false,
"deeppink",
},
[408576] = {
false,
"deeppink",
},
[255577] = {
true,
"deeppink",
"",
},
[371984] = {
false,
"white",
"",
},
[257426] = {
false,
"white",
"",
},
[293827] = {
false,
"deeppink",
},
[392576] = {
false,
"white",
"",
},
[392640] = {
false,
"white",
"",
},
[264694] = {
true,
"deeppink",
"",
},
[265523] = {
false,
"deeppink",
"",
},
[241808] = {
false,
"deeppink",
},
[405391] = {
false,
"blue",
},
[329975] = {
false,
"deeppink",
},
[250096] = {
true,
"white",
"",
},
[411002] = {
false,
"deeppink",
"",
},
[392451] = {
false,
"white",
"",
},
[168082] = {
true,
"deeppink",
"",
},
[211464] = {
false,
"deeppink",
},
[429172] = {
true,
"deeppink",
"",
},
[413044] = {
false,
"blue",
},
[192563] = {
false,
"white",
"",
},
[258672] = {
false,
"deeppink",
"",
},
[227913] = {
true,
"deeppink",
"",
},
[397914] = {
false,
"white",
"",
},
[372561] = {
false,
"deeppink",
"",
},
[404732] = {
false,
"deeppink",
"",
},
[169445] = {
true,
"deeppink",
"",
},
[278444] = {
true,
"deeppink",
"",
},
[369675] = {
false,
"deeppink",
"",
},
[376200] = {
false,
"deeppink",
"",
},
[198079] = {
true,
"deeppink",
"",
},
[397801] = {
false,
"white",
"",
},
[406227] = {
false,
"deeppink",
},
[259531] = {
true,
"deeppink",
"",
},
[406333] = {
false,
"deeppink",
},
[374544] = {
false,
"deeppink",
"",
},
[397048] = {
false,
"deeppink",
},
[412922] = {
false,
"deeppink",
},
[372696] = {
false,
"deeppink",
"",
},
[373939] = {
false,
"deeppink",
"",
},
[272609] = {
false,
"deeppink",
"",
},
[397878] = {
false,
"deeppink",
"",
},
[152818] = {
false,
"deeppink",
},
[198750] = {
false,
"white",
"",
},
[300087] = {
false,
"deeppink",
},
[375439] = {
false,
"deeppink",
"",
},
[406358] = {
false,
"deeppink",
"",
},
[265407] = {
true,
"deeppink",
"",
},
[428926] = {
true,
"deeppink",
"",
},
[400430] = {
false,
"deeppink",
},
[265089] = {
false,
"deeppink",
"",
},
[406678] = {
false,
"blue",
},
[169839] = {
true,
"deeppink",
"",
},
[200345] = {
true,
"deeppink",
"",
},
[193633] = {
true,
"white",
"",
},
[391634] = {
false,
"deeppink",
"",
},
[263943] = {
true,
"deeppink",
"",
},
[413622] = {
false,
"deeppink",
"",
},
[265091] = {
false,
"deeppink",
"",
},
[347775] = {
false,
"deeppink",
},
[241809] = {
false,
"blue",
},
[257397] = {
false,
"deeppink",
"",
},
[404896] = {
false,
"deeppink",
"",
},
[164965] = {
true,
"deeppink",
"",
},
[76634] = {
true,
"deeppink",
"",
},
[241784] = {
false,
"deeppink",
},
[252781] = {
true,
"deeppink",
"",
},
[427459] = {
true,
"deeppink",
"",
},
[338406] = {
false,
"deeppink",
},
[197797] = {
true,
"deeppink",
"",
},
[201399] = {
true,
"deeppink",
"",
},
[226304] = {
false,
"deeppink",
"",
},
[257784] = {
false,
"deeppink",
"",
},
[114646] = {
false,
"white",
"",
},
[196838] = {
false,
"deeppink",
},
[198595] = {
false,
"white",
"",
},
[196587] = {
true,
"deeppink",
"",
},
[397888] = {
false,
"white",
"",
},
[398206] = {
false,
"deeppink",
},
[374045] = {
false,
"deeppink",
},
[300414] = {
false,
"deeppink",
},
[377488] = {
false,
"deeppink",
},
[373017] = {
false,
"white",
"",
},
[202181] = {
false,
"deeppink",
"",
},
[200154] = {
false,
"white",
"",
},
[373424] = {
false,
"deeppink",
"",
},
[374699] = {
false,
"deeppink",
"",
},
[409492] = {
false,
"deeppink",
"",
},
[377950] = {
false,
"deeppink",
"",
},
[386024] = {
false,
"deeppink",
},
[299588] = {
false,
"deeppink",
},
[226296] = {
false,
"deeppink",
"",
},
[388392] = {
false,
"deeppink",
},
[224374] = {
false,
"deeppink",
},
[258777] = {
false,
"deeppink",
"",
},
[404713] = {
false,
"deeppink",
},
[384823] = {
false,
"deeppink",
},
[228279] = {
false,
"deeppink",
},
[87761] = {
false,
"deeppink",
"",
},
[397383] = {
false,
"deeppink",
},
[357284] = {
false,
"deeppink",
},
[384633] = {
false,
"deeppink",
"",
},
[169841] = {
true,
"deeppink",
"",
},
[386546] = {
false,
"deeppink",
},
[413385] = {
false,
"deeppink",
"",
},
[166335] = {
false,
"deeppink",
},
[198379] = {
true,
"deeppink",
"",
},
[192288] = {
false,
"white",
"",
},
[265741] = {
true,
"deeppink",
"",
},
[87779] = {
false,
"deeppink",
"",
},
[427672] = {
true,
"deeppink",
"",
},
[374563] = {
false,
"deeppink",
},
[265487] = {
false,
"deeppink",
"",
},
[397386] = {
false,
"deeppink",
"",
},
[373803] = {
false,
"white",
"",
},
[76813] = {
true,
"deeppink",
"",
},
[427668] = {
true,
"deeppink",
"",
},
[400641] = {
false,
"deeppink",
"",
},
[387955] = {
false,
"deeppink",
"",
},
[300171] = {
false,
"deeppink",
},
[198904] = {
true,
"white",
"",
},
[164192] = {
false,
"deeppink",
},
[381834] = {
false,
"deeppink",
},
[383651] = {
false,
"deeppink",
"",
},
[396018] = {
false,
"white",
"",
},
[395859] = {
false,
"deeppink",
},
[406918] = {
false,
"deeppink",
"",
},
[194956] = {
true,
"deeppink",
"",
},
[263961] = {
true,
"deeppink",
"",
},
[377500] = {
false,
"deeppink",
"",
},
[384194] = {
false,
"white",
"",
},
[255371] = {
true,
"deeppink",
"",
},
[156718] = {
false,
"deeppink",
"",
},
[396812] = {
false,
"deeppink",
"",
},
[200642] = {
true,
"white",
"",
},
[428374] = {
true,
"deeppink",
"",
},
[375687] = {
false,
"deeppink",
"",
},
[405042] = {
false,
"deeppink",
"",
},
[259187] = {
true,
"deeppink",
"",
},
[266106] = {
false,
"deeppink",
"",
},
[411001] = {
false,
"deeppink",
"",
},
[228254] = {
false,
"deeppink",
},
[215433] = {
false,
"white",
"",
},
[408975] = {
false,
"blue",
},
[408805] = {
false,
"deeppink",
"",
},
[384899] = {
false,
"deeppink",
"",
},
[265368] = {
true,
"deeppink",
"",
},
[255041] = {
true,
"deeppink",
"",
},
[200580] = {
true,
"deeppink",
"",
},
[257732] = {
false,
"deeppink",
"",
},
[228239] = {
false,
"deeppink",
},
[265433] = {
false,
"deeppink",
"",
},
[404472] = {
false,
"blue",
},
[228025] = {
false,
"deeppink",
},
[382670] = {
false,
"deeppink",
},
[186269] = {
false,
"deeppink",
"",
},
[200248] = {
true,
"deeppink",
"",
},
[405812] = {
false,
"deeppink",
"",
},
[383823] = {
false,
"deeppink",
},
[381593] = {
false,
"deeppink",
"",
},
[264734] = {
true,
"deeppink",
"",
},
[260666] = {
true,
"deeppink",
"",
},
[356407] = {
false,
"deeppink",
},
[400777] = {
false,
"deeppink",
"",
},
[372735] = {
false,
"deeppink",
"",
},
[271174] = {
true,
"deeppink",
"",
},
[200630] = {
true,
"deeppink",
"",
},
[387411] = {
false,
"deeppink",
},
[376171] = {
true,
"deeppink",
"",
},
[429037] = {
true,
"deeppink",
"",
},
[373943] = {
false,
"deeppink",
"",
},
[412063] = {
true,
"deeppink",
"",
},
[225573] = {
true,
"deeppink",
"",
},
[227592] = {
false,
"deeppink",
},
[395427] = {
false,
"deeppink",
"",
},
},
["extra_icon_timer_outline"] = "OUTLINE",
["aura_border_colors"] = {
["crowdcontrol"] = {
0,
0.3019607961177826,
0.02352941408753395,
},
},
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
},
["enable_masque_support"] = true,
["target_highlight_color"] = {
1,
0.9764706492424,
0.99607849121094,
},
["extra_icon_stack_outline"] = "OUTLINE",
["range_check_alpha"] = 0.6599999666213989,
["click_space"] = {
112,
16,
},
["castbar_target_font"] = "Expressway",
["semver"] = "1.1.79",
["plater_resources_padding"] = 2,
["aura_frame2_anchor"] = {
["y"] = 4.077285766601563,
},
["use_color_lerp"] = true,
["aura_alpha"] = 1,
["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark3",
["aura_cooldown_edge_texture"] = "Interface\\Cooldown\\edge-LoC",
["debuff_show_cc"] = false,
["extra_icon_height"] = 20,
["plater_resources_show_number"] = false,
["range_check_alpha_friendlies"] = 0.6499999761581421,
["ui_parent_scale_tune"] = 1.562500034924597,
["ui_parent_target_strata"] = "MEDIUM",
["aura_show_enrage"] = true,
["aura_tracker"] = {
["debuff"] = {
331653,
426820,
429619,
292626,
259277,
144467,
390255,
357768,
397899,
119381,
119381,
397899,
164392,
174417,
285270,
292306,
128787,
418561,
427567,
411038,
426589,
},
["buff_tracked"] = {
["227931"] = true,
["297133"] = true,
["163689"] = true,
["233210"] = true,
["209859"] = true,
},
["buff"] = {
443503,
343737,
171982,
260249,
386195,
273607,
397323,
410358,
374736,
210761,
13750,
273607,
202033,
186286,
},
["track_method"] = 2,
["debuff_tracked"] = {
[331653] = true,
[397899] = true,
[357768] = true,
},
["debuff_banned"] = {
[428515] = true,
[419097] = true,
[259277] = true,
[144467] = true,
["321330"] = true,
},
["buff_banned"] = {
[171982] = true,
["333553"] = true,
["206150"] = true,
["61573"] = true,
[343737] = true,
[386601] = true,
[386195] = true,
[260249] = true,
["61574"] = true,
[443503] = true,
[108446] = true,
[386542] = true,
},
},
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Extra Border"] = 2,
["Cast Bar Icon Config"] = 2,
["Attacking Specific Unit"] = 2,
["Combo Points"] = 6,
["Hide Neutral Units"] = 1,
["Target Color"] = 3,
["Execute Range"] = 1,
["Aura Reorder"] = 3,
},
["castbar_target_show"] = true,
["update_throttle"] = 0.5,
["castbar_target_text_size"] = 7,
["aura_frame1_anchor"] = {
["y"] = 24.46479797363281,
["side"] = 1,
},
["tocversion"] = 100206,
["aura_timer_text_font"] = "2002",
["extra_icon_timer_font"] = "Expressway",
["not_affecting_combat_alpha"] = 0.7699999809265137,
["extra_icon_stack_font"] = "Expressway",
["aura_height"] = 25,
["use_health_animation"] = true,
["plater_resources_personal_bar"] = false,
["cvar_default_cache"] = {
["nameplateMinAlpha"] = "0.90135484",
["nameplateOccludedAlphaMult"] = "0.39999997615814",
},
["range_check_cast_bar_alpha"] = 0.449999988079071,
["use_player_combat_state"] = true,
["usePlaterWidget"] = false,
["plater_resources_anchor"] = {
["y"] = 40,
["x"] = 0,
["side"] = 8,
},
["indicator_spec_always"] = true,
["npc_colors"] = {
[187897] = {
true,
false,
"palevioletred",
},
[186208] = {
true,
false,
"palevioletred",
},
[195930] = {
true,
false,
"palevioletred",
},
[100532] = {
true,
false,
"palevioletred",
},
[201222] = {
true,
false,
"palevioletred",
},
[190034] = {
true,
false,
"palevioletred",
},
[185508] = {
false,
false,
"palevioletred",
},
[100485] = {
true,
false,
"palevioletred",
},
[186658] = {
true,
false,
"palevioletred",
},
[100486] = {
true,
false,
"palevioletred",
},
[193352] = {
true,
false,
"palevioletred",
},
[184300] = {
true,
false,
"palevioletred",
},
[190484] = {
true,
false,
"palevioletred",
},
[95769] = {
true,
false,
"palevioletred",
},
[195138] = {
true,
false,
"palevioletred",
},
[184301] = {
true,
false,
"palevioletred",
},
[186246] = {
true,
false,
"palevioletred",
},
[41096] = {
true,
false,
"palevioletred",
},
[189466] = {
true,
false,
"palevioletred",
},
[131677] = {
true,
false,
"palevioletred",
},
[184335] = {
true,
false,
"palevioletred",
},
[127757] = {
true,
false,
"palevioletred",
},
[196671] = {
true,
false,
"palevioletred",
},
[174773] = {
true,
false,
"darkviolet",
},
[196576] = {
true,
false,
"palevioletred",
},
[193293] = {
true,
false,
"palevioletred",
},
[95771] = {
true,
false,
"palevioletred",
},
[113398] = {
true,
false,
"palevioletred",
},
[131009] = {
true,
false,
"palevioletred",
},
[197406] = {
true,
false,
"palevioletred",
},
[206140] = {
true,
false,
"palevioletred",
},
[188067] = {
true,
false,
"palevioletred",
},
[190426] = {
true,
false,
"palevioletred",
},
[194315] = {
true,
false,
"palevioletred",
},
[99358] = {
true,
false,
"palevioletred",
},
[98370] = {
true,
false,
"palevioletred",
},
[197535] = {
true,
false,
"palevioletred",
},
[186124] = {
true,
false,
"palevioletred",
},
[194316] = {
true,
false,
"palevioletred",
},
[187240] = {
true,
false,
"palevioletred",
},
[189886] = {
true,
false,
"palevioletred",
},
[196548] = {
true,
false,
"palevioletred",
},
[194317] = {
true,
false,
"palevioletred",
},
[99359] = {
true,
false,
"palevioletred",
},
[184022] = {
true,
false,
"palevioletred",
},
[190206] = {
true,
false,
"palevioletred",
},
[192788] = {
true,
false,
"palevioletred",
},
[197697] = {
true,
false,
"palevioletred",
},
[197219] = {
true,
false,
"palevioletred",
},
[190366] = {
true,
false,
"palevioletred",
},
[184023] = {
false,
false,
"azure",
},
[190207] = {
true,
false,
"palevioletred",
},
[186191] = {
true,
false,
"palevioletred",
},
[197698] = {
true,
false,
"palevioletred",
},
[197985] = {
true,
false,
"palevioletred",
},
[191164] = {
true,
false,
"palevioletred",
},
[142587] = {
true,
false,
"palevioletred",
},
[194894] = {
true,
false,
"palevioletred",
},
[205158] = {
true,
false,
"palevioletred",
},
[191739] = {
true,
false,
"palevioletred",
},
[195851] = {
true,
false,
"palevioletred",
},
[196712] = {
true,
false,
"palevioletred",
},
[196043] = {
true,
false,
"palevioletred",
},
[102788] = {
true,
false,
"palevioletred",
},
[186226] = {
true,
false,
"palevioletred",
},
[196203] = {
true,
false,
"palevioletred",
},
[190370] = {
true,
false,
"palevioletred",
},
[214117] = {
true,
false,
"palevioletred",
},
[196044] = {
true,
false,
"palevioletred",
},
[194897] = {
true,
false,
"palevioletred",
},
[190371] = {
false,
false,
"palevioletred",
},
[186420] = {
true,
false,
"palevioletred",
},
[195696] = {
true,
false,
"palevioletred",
},
[190373] = {
true,
false,
"palevioletred",
},
[192955] = {
true,
false,
"palevioletred",
},
[192796] = {
true,
false,
"palevioletred",
},
[190342] = {
true,
false,
"palevioletred",
},
[193944] = {
true,
false,
"palevioletred",
},
[98280] = {
true,
false,
"palevioletred",
},
[187155] = {
true,
false,
"palevioletred",
},
[186741] = {
false,
false,
"palevioletred",
},
[190407] = {
false,
false,
"palevioletred",
},
[196559] = {
true,
false,
"palevioletred",
},
[40925] = {
true,
false,
"palevioletred",
},
[84957] = {
true,
false,
"palevioletred",
},
[84989] = {
true,
false,
"palevioletred",
},
[205804] = {
true,
false,
"palevioletred",
},
[201756] = {
true,
false,
"palevioletred",
},
[199748] = {
true,
false,
"palevioletred",
},
[190345] = {
true,
false,
"palevioletred",
},
[190377] = {
true,
false,
"palevioletred",
},
[135329] = {
true,
false,
"palevioletred",
},
[192333] = {
true,
false,
"palevioletred",
},
[84400] = {
true,
false,
"palevioletred",
},
[196115] = {
true,
false,
"palevioletred",
},
[189464] = {
true,
false,
"palevioletred",
},
[199749] = {
true,
false,
"palevioletred",
},
[122969] = {
true,
false,
"palevioletred",
},
[84990] = {
true,
false,
"palevioletred",
},
[196202] = {
true,
false,
"palevioletred",
},
[190187] = {
true,
false,
"palevioletred",
},
[185529] = {
true,
false,
"palevioletred",
},
[184131] = {
true,
false,
"palevioletred",
},
[100527] = {
true,
false,
"palevioletred",
},
[134024] = {
true,
false,
"palevioletred",
},
[190510] = {
false,
false,
"palevioletred",
},
[185534] = {
true,
false,
"palevioletred",
},
[81819] = {
true,
false,
"palevioletred",
},
[199368] = {
true,
false,
"palevioletred",
},
[187160] = {
true,
false,
"palevioletred",
},
[184132] = {
true,
false,
"palevioletred",
},
[187224] = {
true,
false,
"palevioletred",
},
[196116] = {
false,
false,
"palevioletred",
},
[84767] = {
true,
false,
"palevioletred",
},
[192800] = {
true,
false,
"palevioletred",
},
[195119] = {
true,
false,
"palevioletred",
},
[194487] = {
true,
false,
"palevioletred",
},
[190405] = {
true,
false,
"palevioletred",
},
[128434] = {
true,
false,
"palevioletred",
},
[189265] = {
true,
false,
"palevioletred",
},
[195927] = {
true,
false,
"palevioletred",
},
[186107] = {
true,
false,
"palevioletred",
},
[208698] = {
true,
false,
"palevioletred",
},
[193462] = {
true,
false,
"palevioletred",
},
[135365] = {
true,
false,
"palevioletred",
},
[132126] = {
true,
false,
"palevioletred",
},
[195265] = {
true,
false,
"palevioletred",
},
[198047] = {
true,
false,
"palevioletred",
},
[195928] = {
true,
false,
"palevioletred",
},
[100531] = {
true,
false,
"palevioletred",
},
[131587] = {
true,
false,
"palevioletred",
},
[189471] = {
true,
false,
"palevioletred",
},
[195399] = {
true,
false,
"palevioletred",
},
[205152] = {
true,
false,
"palevioletred",
},
[189235] = {
true,
false,
"palevioletred",
},
[186696] = {
true,
false,
"palevioletred",
},
[195929] = {
true,
false,
"palevioletred",
},
[131586] = {
true,
false,
"palevioletred",
},
[190362] = {
true,
false,
"palevioletred",
},
[205435] = {
true,
false,
"palevioletred",
},
[206230] = {
true,
false,
"palevioletred",
},
},
["disable_omnicc_on_auras"] = true,
["show_healthbars_on_not_attackable"] = true,
["castbar_target_notank"] = true,
["saved_cvars"] = {
["ShowClassColorInNameplate"] = "1",
["nameplateOverlapV"] = "0.99999994039536",
["nameplateLargeTopInset"] = "0.10000000149012",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowDebuffsOnFriendly"] = "0",
["nameplatePersonalShowInCombat"] = "1",
["nameplateTargetRadialPosition"] = "1",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["clampTargetNameplateToScreen"] = "1",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "100",
["nameplateShowFriendlyMinions"] = "0",
["nameplateTargetBehindMaxDistance"] = "30",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "0",
["nameplatePersonalShowAlways"] = "0",
["nameplateMotionSpeed"] = "0.019999999552965",
["nameplateShowEnemyMinions"] = "1",
["nameplateShowFriendlyNPCs"] = "1",
["nameplateSelectedScale"] = "1.15",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateMotion"] = "1",
["nameplateOverlapH"] = "0.79999995231628",
["nameplateMinScale"] = "1",
["nameplateShowOnlyNames"] = "1",
["nameplateOtherTopInset"] = "0.10000000149012",
["nameplateOtherAtBase"] = "0",
["nameplateSelfBottomInset"] = "0.054262452125549",
["ShowNamePlateLoseAggroFlash"] = "1",
["nameplateShowFriendlyGuardians"] = "0",
["nameplateOccludedAlphaMult"] = "0.4",
["nameplateSelfTopInset"] = "0.54",
["NamePlateHorizontalScale"] = "1",
["nameplateShowFriendlyPets"] = "0",
["nameplateShowFriends"] = "1",
},
["aura_width"] = 25,
["pet_width_scale"] = 0.949999988079071,
["login_counter"] = 7193,
["version"] = 84,
["click_space_friendly"] = {
69,
10,
},
["show_aggro_flash"] = true,
["extra_icon_timer_size"] = 13,
["blizzard_nameplate_font_size"] = 7,
["aura_show_aura_by_other_players"] = true,
["aura_timer_text_outline"] = "THICKOUTLINE",
["aura2_grow_direction"] = 1,
["aura_stack_font"] = "Expressway",
["plater_resources_show"] = false,
["patch_version"] = 35,
["blizzard_nameplate_font"] = "Expressway",
["range_check_in_range_or_target_alpha"] = 0.8999999761581421,
["range_check_buffs_alpha"] = 0.449999988079071,
["indicator_friendlyfaction"] = true,
["auto_toggle_combat"] = {
["blizz_healthbar_ic"] = true,
["blizz_healthbar_ooc"] = true,
},
["number_region_first_run"] = true,
["pet_height_scale"] = 0.949999988079071,
["aura_x_offset"] = 0,
["target_shady_alpha"] = 0.5999999642372131,
["aura2_x_offset"] = 0,
["extra_icon_caster_font"] = "Expressway",
["hide_friendly_castbars"] = true,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["aura_height2"] = 18,
["aura_sort"] = true,
["aura_timer_text_size"] = 10,
["dps"] = {
["colors"] = {
["aggro"] = {
nil,
0,
0.17254902422428,
},
["notontank"] = {
0.70588237047195,
0.6235294342041,
},
["noaggro"] = {
0.54901963472366,
0.54901963472366,
},
["pulling"] = {
nil,
0.44313728809357,
0.2039215862751,
},
},
},
["aura_timer_decimals"] = true,
["aura_show_offensive_cd"] = true,
["health_statusbar_bgcolor"] = {
0.11372549019608,
0.11372549019608,
0.11372549019608,
0.89000000059605,
},
["script_auto_imported"] = {
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 2,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Unit - Health Markers"] = 12,
["Cast - Tank Interrupt"] = 12,
["Cast - Important Target [P]"] = 2,
["Cast - Shield Interrupt"] = 2,
["Cast - Alert + Timer [P]"] = 4,
["Aura is Shield [P]"] = 2,
["Add - Warning [P]"] = 5,
["Unit - Show Energy"] = 11,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Glowing [P]"] = 10,
["Cast - Circular Swipe"] = 4,
["Cast - Very Important"] = 15,
["Add - Explode on Die [P]"] = 1,
["Spiteful Affix"] = 3,
["Cast - Quick Flash"] = 2,
["Add - Non Elite Trash [P]"] = 4,
["Countdown"] = 11,
["Cast - Stop Casting"] = 4,
["Cast - On Going Cast [P]"] = 2,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 15,
["Fixate"] = 11,
["Auto Set Skull"] = 11,
["Unit - Important"] = 11,
["Relics 9.2 M Dungeons"] = 2,
["Fixate On You"] = 11,
},
["cast_color_settings"] = {
["layer"] = "Overlay",
["width"] = 12,
},
["first_run3"] = true,
["range_check_in_range_or_target_alpha_friendlies"] = 0.89999997615814,
["indicator_raidmark_anchor"] = {
["x"] = 7.5,
},
["tank"] = {
["colors"] = {
["aggro"] = {
0.54901963472366,
0.54901963472366,
},
["noaggro"] = {
[3] = 0.17254902422428,
},
["anothertank"] = {
0.65882354974747,
1,
0.92941182851791,
},
},
},
["indicator_rare"] = false,
},
},
["performance_units"] = {
[176920] = true,
[214441] = true,
[211306] = true,
[196642] = true,
[167999] = true,
[189707] = true,
},
["InterruptableSpells"] = {
[278444] = true,
[367503] = true,
[19647] = true,
[252923] = true,
[168040] = true,
[187707] = true,
[255824] = true,
[260701] = true,
[388862] = true,
[396640] = true,
[31935] = true,
[387843] = true,
[426731] = true,
[253562] = true,
[377389] = true,
[378282] = true,
[426541] = true,
[378155] = true,
[199726] = true,
[164887] = true,
[199663] = true,
[46036] = true,
[415770] = true,
[96231] = true,
[139867] = true,
[37470] = true,
[220543] = true,
[387596] = true,
[256849] = true,
[372743] = true,
[413607] = true,
[686] = true,
[264050] = true,
[395694] = true,
[93985] = true,
[428526] = true,
[374339] = true,
[418200] = true,
[372683] = true,
[386071] = true,
[105174] = true,
[418202] = true,
[387411] = true,
[371984] = true,
[204896] = true,
[373897] = true,
[392576] = true,
[147362] = true,
[382249] = true,
[377341] = true,
[201837] = true,
[404754] = true,
[411958] = true,
[165213] = true,
[392451] = true,
[400165] = true,
[361469] = true,
[47528] = true,
[266036] = true,
[386015] = true,
[201839] = true,
[369823] = true,
[227913] = true,
[267824] = true,
[356995] = true,
[201298] = true,
[429176] = true,
[373395] = true,
[11366] = true,
[351338] = true,
[139869] = true,
[199786] = true,
[369365] = true,
[1766] = true,
[387613] = true,
[412922] = true,
[407121] = true,
[382440] = true,
[169839] = true,
[255041] = true,
[407122] = true,
[376171] = true,
[372223] = true,
[427459] = true,
[201411] = true,
[373017] = true,
[169840] = true,
[384365] = true,
[253544] = true,
[347008] = true,
[428263] = true,
[367500] = true,
[426596] = true,
[386024] = true,
[268278] = true,
[377008] = true,
[265346] = true,
[264390] = true,
[51505] = true,
[387618] = true,
[266225] = true,
[164965] = true,
[91807] = true,
[6552] = true,
[252781] = true,
[377402] = true,
[388863] = true,
[197797] = true,
[2139] = true,
[428103] = true,
[395427] = true,
[384161] = true,
[191837] = true,
[8092] = true,
[116] = true,
[169841] = true,
[374045] = true,
[259572] = true,
[196883] = true,
[377488] = true,
[392398] = true,
[407891] = true,
[225562] = true,
[200630] = true,
[412233] = true,
[168092] = true,
[436841] = true,
[376725] = true,
[132409] = true,
[265368] = true,
[388392] = true,
[200248] = true,
[408805] = true,
[387564] = true,
[33871] = true,
[374544] = true,
[372711] = true,
[391528] = true,
[384633] = true,
[114074] = true,
[201399] = true,
[383231] = true,
[97547] = true,
[32747] = true,
[168082] = true,
[253583] = true,
[426783] = true,
[57994] = true,
[369399] = true,
[374563] = true,
[190984] = true,
[416256] = true,
[369400] = true,
[392924] = true,
[395160] = true,
[76813] = true,
[173563] = true,
[377950] = true,
[263959] = true,
[116705] = true,
[115175] = true,
[387125] = true,
[381770] = true,
[264024] = true,
[204243] = true,
[164973] = true,
[381516] = true,
[377500] = true,
[384194] = true,
[373803] = true,
[426768] = true,
[383651] = true,
[200642] = true,
[382474] = true,
[260700] = true,
[373932] = true,
[265876] = true,
[386546] = true,
[200658] = true,
[377503] = true,
[384197] = true,
[386026] = true,
[415435] = true,
[374699] = true,
[260696] = true,
[407124] = true,
[253517] = true,
[373680] = true,
[411994] = true,
[398388] = true,
[415437] = true,
[386012] = true,
[260697] = true,
[385029] = true,
[412378] = true,
[369602] = true,
[369411] = true,
[385310] = true,
[384808] = true,
[377384] = true,
[260698] = true,
[375596] = true,
[183752] = true,
[271174] = true,
[134091] = true,
[369675] = true,
[417481] = true,
[369674] = true,
[260699] = true,
[372538] = true,
[377338] = true,
[374706] = true,
[143343] = true,
},
["captured_casts"] = {
[294637] = {
["npcID"] = 151956,
},
[80835] = {
["event"] = "SPELL_CAST_START",
["source"] = "Raging Crystal-walker",
["npcID"] = 43373,
},
[265968] = {
["npcID"] = 134990,
},
[323309] = {
["npcID"] = 161890,
},
[311023] = {
["event"] = "SPELL_CAST_START",
["source"] = "Monstrous Behemoth",
["npcID"] = 159303,
},
[372460] = {
["source"] = "Bakra the Bully",
["event"] = "SPELL_CAST_START",
["npcID"] = 186517,
},
[126913] = {
["npcID"] = 58927,
},
[306929] = {
["encounterName"] = "Shad'har the Insatiable",
["source"] = "Shad'har the Insatiable",
["npcID"] = 157231,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2335,
},
[425706] = {
["source"] = "Astromancer's Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 208729,
},
[115650] = {
["source"] = "Sudsy Brew Alemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 59522,
},
[405228] = {
["source"] = "Duzalgor",
["event"] = "SPELL_CAST_START",
["npcID"] = 200610,
},
[294643] = {
["npcID"] = 151956,
},
[120770] = {
["isChanneled"] = true,
["source"] = "Summit Sprite",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 68026,
},
[360176] = {
["encounterName"] = "Vigilant Guardian",
["encounterID"] = 2512,
["npcID"] = 181856,
},
[417517] = {
["source"] = "Ankura Bloodhewer",
["event"] = "SPELL_CAST_START",
["npcID"] = 207589,
},
[405230] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duzalgor",
["npcID"] = 200610,
},
[128962] = {
["source"] = "Krasari Runekeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 65598,
},
[327413] = {
["npcID"] = 168318,
},
["258777"] = {
["source"] = "Irontide Oarsman",
["event"] = "SPELL_CAST_START",
["npcID"] = 127111,
},
[421616] = {
["encounterName"] = "Volcoross",
["source"] = "Volcoross",
["npcID"] = 208478,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2737,
},
[331510] = {
["npcID"] = 170838,
},
[397043] = {
["source"] = "Cyclas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199029,
},
[368373] = {
["npcID"] = 183516,
},
[147333] = {
["isChanneled"] = true,
["source"] = "Tormented Initiate",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 73349,
},
[413427] = {
["source"] = "Pendule",
["event"] = "SPELL_CAST_START",
["npcID"] = 206074,
},
[356088] = {
["npcID"] = 177390,
},
[339706] = {
["encounterName"] = "Mordretha",
["encounterID"] = 2404,
["npcID"] = 173549,
},
[360185] = {
["npcID"] = 181879,
},
[128964] = {
["source"] = "Krasari Runekeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 65598,
},
[356090] = {
["encounterName"] = "Guardian of the First Ones",
["npcID"] = 175731,
["encounterID"] = 2436,
},
[147335] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zesqua",
["npcID"] = 72245,
},
[397048] = {
["source"] = "Frostbreath Arachnid",
["event"] = "SPELL_CAST_START",
["npcID"] = 199333,
},
[384761] = {
["encounterName"] = "The Raging Tempest",
["source"] = "The Raging Tempest",
["encounterID"] = 2636,
["event"] = "SPELL_CAST_START",
["npcID"] = 186615,
},
[388857] = {
["source"] = "Rampaging Forest Giant",
["event"] = "SPELL_CAST_START",
["npcID"] = 194741,
},
[368379] = {
["npcID"] = 183516,
},
[145288] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Modified Anima Golem",
["npcID"] = 71395,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[73672] = {
["npcID"] = 3125,
},
[198533] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Jade Serpent Statue",
["npcID"] = 60849,
},
[167815] = {
["npcID"] = 83390,
},
[397051] = {
["source"] = "Cyclas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199029,
},
[347903] = {
["npcID"] = 176395,
},
[392957] = {
["source"] = "Azure Vorquin",
["event"] = "SPELL_CAST_START",
["npcID"] = 190216,
},
[388862] = {
["source"] = "Corrupted Manafiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 196045,
},
[106439] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fragrant Lotus",
["npcID"] = 56472,
},
[388863] = {
["source"] = "Corrupted Manafiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 196045,
},
[413438] = {
["source"] = "Void Lord Aurvizk",
["event"] = "SPELL_CAST_START",
["npcID"] = 200865,
},
[311045] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Initiate",
["npcID"] = 160182,
},
[356099] = {
["npcID"] = 177395,
},
[311046] = {
["event"] = "SPELL_CAST_START",
["source"] = "Umbral Seer",
["npcID"] = 159219,
},
[356100] = {
["npcID"] = 177395,
},
[178059] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taylor Dewland",
["npcID"] = 80500,
},
[388869] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gorjo the Crab Shackler",
["npcID"] = 193226,
},
[88010] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alune Windmane",
["npcID"] = 80488,
},
[421636] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[311052] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maddened Conscript",
["npcID"] = 159305,
},
[141199] = {
["encounterName"] = "Kor'kron Dark Shaman",
["source"] = "Blind Blademaster",
["npcID"] = 72131,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1606,
},
[409352] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Dreadsquall",
["npcID"] = 202262,
},
[147344] = {
["npcID"] = 72245,
},
[388875] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gorjo the Crab Shackler",
["npcID"] = 193226,
},
[128969] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Crypt Guardian",
["npcID"] = 61783,
},
[147345] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skunky Brew Alemental",
["npcID"] = 71908,
},
[372494] = {
["source"] = "Stormshackler Rynea",
["event"] = "SPELL_CAST_START",
["npcID"] = 189391,
},
[239500] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fiendish Imp",
["npcID"] = 127173,
},
[352016] = {
["npcID"] = 176578,
},
[372495] = {
["source"] = "Ensnaring Current",
["event"] = "SPELL_CAST_START",
["npcID"] = 191328,
},
[323347] = {
["npcID"] = 165137,
},
[128970] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Crypt Guardian",
["npcID"] = 61783,
},
[409359] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["encounterID"] = 2682,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 199659,
},
[388882] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infuser Sariya",
["npcID"] = 190405,
},
[360213] = {
["npcID"] = 181839,
},
[331543] = {
["npcID"] = 170196,
},
[178067] = {
["npcID"] = 88094,
},
[117708] = {
["encounterName"] = "The Spirit Kings",
["source"] = "Meng the Demented",
["encounterID"] = 1436,
["event"] = "SPELL_CAST_START",
["npcID"] = 60708,
},
[388886] = {
["source"] = "Spellbound Scepter",
["event"] = "SPELL_CAST_START",
["npcID"] = 196576,
},
[125900] = {
["isChanneled"] = true,
["source"] = "Kor'thik Warsinger",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 64458,
},
[127948] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Azzix K'tai",
["npcID"] = 62843,
},
[401175] = {
["source"] = "Ebyssian",
["event"] = "SPELL_CAST_START",
["npcID"] = 201707,
},
[147351] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Pool Tender",
["npcID"] = 73342,
},
[331548] = {
["npcID"] = 167964,
},
[151447] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodmaul Enforcer",
["npcID"] = 84978,
},
[356123] = {
["npcID"] = 177395,
},
[178071] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulbrewer Nadagast",
["npcID"] = 80489,
},
[319266] = {
["npcID"] = 173996,
},
[274213] = {
["encounterName"] = "Sporecaller Zancha",
["source"] = "Sporecaller Zancha",
["npcID"] = 131383,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2112,
},
[106447] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shado-Pan Novice",
["npcID"] = 56395,
},
[249748] = {
["event"] = "SPELL_CAST_START",
["source"] = "Antoran Soulshaper",
["npcID"] = 127587,
},
[125902] = {
["isChanneled"] = true,
["source"] = "Kor'thik Warsinger",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 64458,
},
[405279] = {
["encounterName"] = "Morchie",
["source"] = "Morchie",
["encounterID"] = 2671,
["event"] = "SPELL_CAST_START",
["npcID"] = 198999,
},
[66514] = {
["npcID"] = 34925,
},
[388897] = {
["source"] = "Scavenging Hardshell",
["event"] = "SPELL_CAST_START",
["npcID"] = 193605,
},
[327461] = {
["npcID"] = 171814,
},
["241809"] = {
["npcID"] = 183424,
},
[290600] = {
["npcID"] = 151684,
},
[360228] = {
["npcID"] = 181839,
},
[413473] = {
["source"] = "Temporal Deviation",
["event"] = "SPELL_CAST_START",
["npcID"] = 206063,
},
[356133] = {
["npcID"] = 180015,
},
[360229] = {
["encounterName"] = "Lords of Dread",
["encounterID"] = 2543,
["npcID"] = 181399,
},
[405283] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Lady Shaz'ra",
["npcID"] = 200885,
},
[178076] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chani Malflame",
["npcID"] = 85129,
},
[397094] = {
["source"] = "Malsegan",
["event"] = "SPELL_CAST_START",
["npcID"] = 193212,
},
[417573] = {
["source"] = "Gill'dan",
["event"] = "SPELL_CAST_START",
["npcID"] = 204808,
},
[327467] = {
["npcID"] = 153165,
},
[384808] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Teera",
["encounterID"] = 2581,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 186339,
},
[364330] = {
["npcID"] = 184737,
},
[401192] = {
["source"] = "Quicksmack Magk",
["event"] = "SPELL_CAST_START",
["npcID"] = 204651,
},
[356139] = {
["npcID"] = 178043,
},
[401193] = {
["source"] = "Quicksmack Magk",
["event"] = "SPELL_CAST_START",
["npcID"] = 204651,
},
[421672] = {
["encounterName"] = "Volcoross",
["source"] = "Volcoross",
["npcID"] = 208478,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2737,
},
["428926"] = {
["source"] = "Faceless Watcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 40936,
},
[111570] = {
["encounterName"] = "Lilian Voss",
["source"] = "Lilian Voss",
["encounterID"] = 1429,
["event"] = "SPELL_CAST_START",
["npcID"] = 58722,
},
[143265] = {
["encounterName"] = "Siegecrafter Blackfuse",
["source"] = "Siegecrafter Blackfuse",
["encounterID"] = 1601,
["event"] = "SPELL_CAST_START",
["npcID"] = 71504,
},
[266036] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thistle Acolyte",
["npcID"] = 135474,
},
[176032] = {
["npcID"] = 88163,
},
[327474] = {
["npcID"] = 163670,
},
[388911] = {
["source"] = "Spellbound Battleaxe",
["event"] = "SPELL_CAST_START",
["npcID"] = 196577,
},
[372529] = {
["source"] = "Shadepaw Thief",
["event"] = "SPELL_CAST_START",
["npcID"] = 192748,
},
[196512] = {
["encounterName"] = "Fenryr",
["source"] = "Fenryr",
["encounterID"] = 1807,
["event"] = "SPELL_CAST_START",
["npcID"] = 95674,
},
[413487] = {
["source"] = "Temporal Fusion",
["event"] = "SPELL_CAST_START",
["npcID"] = 206068,
},
[331573] = {
["encounterName"] = "Lady Inerva Darkvein",
["npcID"] = 170199,
["encounterID"] = 2406,
},
[319286] = {
["npcID"] = 164084,
},
[331574] = {
["npcID"] = 170217,
},
[186274] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iron Reaver",
["npcID"] = 90284,
},
[397108] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wild Kelp Elemental",
["npcID"] = 196809,
},
[339768] = {
["npcID"] = 166012,
},
[327481] = {
["encounterName"] = "Kin-Tara",
["npcID"] = 162059,
["encounterID"] = 2357,
},
[397109] = {
["npcID"] = 190008,
},
[401205] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepbed Longwalker",
["npcID"] = 203917,
},
[388918] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[397110] = {
["npcID"] = 190008,
},
[384823] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Blazebound Firestorm",
["encounterID"] = 2606,
["event"] = "SPELL_CAST_START",
["npcID"] = 189886,
},
[339770] = {
["npcID"] = 173568,
},
[409398] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crystalline Guardian",
["npcID"] = 203831,
},
[196516] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ritualist Lesha",
["npcID"] = 100248,
},
[397112] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Proto-Dragon",
["npcID"] = 189798,
},
[372538] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lava Flare",
["npcID"] = 189470,
},
[69592] = {
["source"] = "Spitelash Warrior",
["event"] = "SPELL_CAST_START",
["npcID"] = 6190,
},
[401209] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepbed Longwalker",
["npcID"] = 203917,
},
[372539] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["encounterID"] = 2592,
["event"] = "SPELL_CAST_START",
["npcID"] = 187967,
},
[147368] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ironfur Grazer",
["npcID"] = 72843,
},
[133033] = {
["source"] = "Vol'jin",
["event"] = "SPELL_CAST_START",
["npcID"] = 67414,
},
[384827] = {
["encounterName"] = "Gutshot",
["source"] = "Gutshot",
["encounterID"] = 2567,
["event"] = "SPELL_CAST_START",
["npcID"] = 186116,
},
[202661] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Fel Scorcher",
["npcID"] = 102583,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[114646] = {
["event"] = "SPELL_CAST_START",
["source"] = "Haunting Sha",
["npcID"] = 59555,
},
[401212] = {
["source"] = "Stone Infused Rock Snail",
["event"] = "SPELL_CAST_START",
["npcID"] = 203241,
},
[388925] = {
["source"] = "Liskanoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 193533,
},
[139178] = {
["event"] = "SPELL_CAST_START",
["source"] = "Goda",
["npcID"] = 69998,
},
[163753] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grom'kar Man-at-Arms",
["npcID"] = 78832,
},
[401214] = {
["source"] = "Elder Honeypelt",
["event"] = "SPELL_CAST_START",
["npcID"] = 202451,
},
[417598] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drest'Agath the Corrupted",
["npcID"] = 207925,
},
[294726] = {
["npcID"] = 151881,
},
[401216] = {
["source"] = "Festival Challenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 203461,
},
[137132] = {
["source"] = "Itoka",
["event"] = "SPELL_CAST_START",
["npcID"] = 69461,
},
[376644] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[178091] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taylor Dewland",
["npcID"] = 80500,
},
[327497] = {
["encounterName"] = "The Council of Blood",
["encounterID"] = 2412,
["npcID"] = 166970,
},
["226304"] = {
["npcID"] = 91000,
},
[425796] = {
["event"] = "SPELL_CAST_START",
["source"] = "Harbinger of Incineration",
["npcID"] = 210147,
},
[307020] = {
["encounterName"] = "Vexiona",
["source"] = "Vexiona",
["npcID"] = 157354,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2336,
},
[393031] = {
["source"] = "Colossal Causality",
["event"] = "SPELL_CAST_START",
["npcID"] = 186672,
},
[368457] = {
["npcID"] = 180746,
},
[372553] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scavenger Matriarch",
["npcID"] = 192812,
},
[143280] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Skeer the Bloodseeker",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71152,
},
[339789] = {
["npcID"] = 166046,
},
[335694] = {
["npcID"] = 170634,
},
[126937] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sra'thik Ambercaller",
["npcID"] = 64917,
},
[372557] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scavenger Matriarch",
["npcID"] = 192812,
},
[360270] = {
["npcID"] = 181625,
},
[388941] = {
["source"] = "Cascade",
["event"] = "SPELL_CAST_START",
["npcID"] = 186962,
},
[393037] = {
["source"] = "Colossal Causality",
["event"] = "SPELL_CAST_START",
["npcID"] = 186672,
},
[388942] = {
["source"] = "Arcane Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 196671,
},
[397134] = {
["encounterName"] = "The Primal Council",
["source"] = "Opalfang",
["encounterID"] = 2590,
["event"] = "SPELL_CAST_START",
["npcID"] = 187772,
},
[125914] = {
["source"] = "Gatecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 64479,
},
[368465] = {
["npcID"] = 180746,
},
[388944] = {
["npcID"] = 190904,
},
[131034] = {
["source"] = "Vengeful Gurthani Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 65452,
},
[372562] = {
["source"] = "Shadepaw Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 186490,
},
[343893] = {
["npcID"] = 162829,
},
[37361] = {
["npcID"] = 11838,
},
[153524] = {
["source"] = "Plagued Bat",
["event"] = "SPELL_CAST_START",
["npcID"] = 75459,
},
[372565] = {
["isChanneled"] = true,
["source"] = "Flashfrost Earthshaper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188067,
},
[401236] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nidharr",
["npcID"] = 201310,
},
[405332] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gahz'raxes",
["npcID"] = 200537,
},
[393045] = {
["source"] = "Colossal Causality",
["event"] = "SPELL_CAST_START",
["npcID"] = 186672,
},
[347992] = {
["encounterName"] = "Zo'phex the Sentinel",
["npcID"] = 175616,
["encounterID"] = 2425,
},
[339801] = {
["npcID"] = 166046,
},
[298844] = {
["npcID"] = 153885,
},
[135095] = {
["encounterName"] = "Lei Shen",
["source"] = "Lei Shen",
["npcID"] = 68397,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1579,
},
[372568] = {
["isChanneled"] = true,
["source"] = "Flashfrost Chillweaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188067,
},
[15869] = {
["npcID"] = 27555,
},
[434005] = {
["source"] = "Gilnean Alchemist",
["event"] = "SPELL_CAST_START",
["npcID"] = 213995,
},
[388952] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ravenous Riversnapper",
["npcID"] = 192684,
},
[210868] = {
["isChanneled"] = true,
["source"] = "Withered Fiend",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 105921,
},
[360284] = {
["encounterName"] = "Lords of Dread",
["encounterID"] = 2543,
["npcID"] = 181399,
},
[413529] = {
["source"] = "Timestream Anomaly",
["event"] = "SPELL_CAST_START",
["npcID"] = 199749,
},
[298849] = {
["encounterName"] = "Trixie & Naeno",
["npcID"] = 150712,
["encounterID"] = 2312,
},
[147385] = {
["npcID"] = 72844,
},
[368478] = {
["npcID"] = 180746,
},
[335713] = {
["npcID"] = 160770,
},
[388958] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Ravager",
["npcID"] = 196671,
},
[409437] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voracious Magma Worm",
["npcID"] = 203825,
},
[401248] = {
["encounterName"] = "Tyr, the Infinite Keeper",
["source"] = "Tyr, the Infinite Keeper",
["encounterID"] = 2670,
["event"] = "SPELL_CAST_START",
["npcID"] = 198998,
},
[119775] = {
["encounterName"] = "Sha of Fear",
["source"] = "Sha of Fear",
["encounterID"] = 1431,
["event"] = "SPELL_CAST_START",
["npcID"] = 60999,
},
[143292] = {
["encounterName"] = "Fallen Protectors",
["source"] = "He Softfoot",
["encounterID"] = 1598,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 71479,
},
[388962] = {
["source"] = "Matriarch Remalla",
["event"] = "SPELL_CAST_START",
["npcID"] = 193246,
},
[413538] = {
["source"] = "Myrmidon Solek'vosh",
["event"] = "SPELL_CAST_START",
["npcID"] = 200864,
},
[417634] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[335720] = {
["npcID"] = 178191,
},
[360295] = {
["encounterName"] = "Prototype Pantheon",
["encounterID"] = 2544,
["npcID"] = 181549,
},
[348008] = {
["npcID"] = 176394,
},
[409445] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voracious Magma Worm",
["npcID"] = 203825,
},
[221114] = {
["isChanneled"] = true,
["source"] = "Ranger General Feleor",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 110995,
},
[210875] = {
["source"] = "Stormforged Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 96574,
},
[323437] = {
["encounterName"] = "Lord Chamberlain",
["encounterID"] = 2381,
["npcID"] = 164218,
},
[343916] = {
["npcID"] = 169102,
},
[413544] = {
["source"] = "Timestream Anomaly",
["event"] = "SPELL_CAST_START",
["npcID"] = 199749,
},
[417640] = {
["source"] = "Fel-Touched Shu'halo",
["event"] = "SPELL_CAST_START",
["npcID"] = 206182,
},
[323438] = {
["npcID"] = 166073,
},
[376683] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["encounterID"] = 2580,
["event"] = "SPELL_CAST_START",
["npcID"] = 186151,
},
[401258] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["npcID"] = 199659,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[114658] = {
["encounterName"] = "Instructor Chillheart",
["npcID"] = 58633,
["encounterID"] = 1426,
},
[360304] = {
["encounterName"] = "Lords of Dread",
["encounterID"] = 2543,
["npcID"] = 181399,
},
[331634] = {
["encounterName"] = "The Council of Blood",
["encounterID"] = 2412,
["npcID"] = 166970,
},
[388976] = {
["source"] = "Arcane Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 196671,
},
["405375"] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Thadrion",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 200913,
},
[12542] = {
["source"] = "Shadowmoon Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 17694,
},
[274296] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotting Monstrosity",
["npcID"] = 139709,
},
[409456] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 198933,
},
[176066] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jeron Emberfall",
["npcID"] = 88178,
},
[405361] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lady Shaz'ra",
["npcID"] = 200885,
},
[266106] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feral Bloodswarmer",
["npcID"] = 133835,
},
[139205] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zandalari Prophet",
["npcID"] = 70557,
},
[39413] = {
["npcID"] = 17729,
},
[421746] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Stonewarmer",
["npcID"] = 210235,
},
[368502] = {
["npcID"] = 180924,
},
[139206] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zandalari Storm-Caller",
["npcID"] = 69390,
},
[348024] = {
["npcID"] = 176520,
},
[147398] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Pool Tender",
["npcID"] = 73342,
},
[198595] = {
["source"] = "Valarjar Thundercaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 95842,
},
[405366] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lady Shaz'ra",
["npcID"] = 200885,
},
[368506] = {
["npcID"] = 180924,
},
[176070] = {
["npcID"] = 173114,
},
[302976] = {
["npcID"] = 154480,
},
[413562] = {
["encounterName"] = "Grand Vizier Ertan",
["source"] = "Lurking Tempest",
["npcID"] = 204337,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1043,
},
[327552] = {
["npcID"] = 168573,
},
[360320] = {
["npcID"] = 181942,
},
[169929] = {
["encounterName"] = "Yalnu",
["source"] = "Flourishing Ancient",
["npcID"] = 84400,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1756,
},
[405375] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thadrion",
["npcID"] = 200913,
},
[114663] = {
["event"] = "SPELL_CAST_START",
["source"] = "Brewmaster Blanche",
["npcID"] = 58740,
},
[368514] = {
["npcID"] = 183764,
},
[376706] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Stormcaster",
["npcID"] = 190294,
},
[409473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voracious Magma Worm",
["npcID"] = 203825,
},
[384899] = {
["source"] = "Rotbow Stalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 186208,
},
[339846] = {
["npcID"] = 166052,
},
[143309] = {
["encounterName"] = "Immerseus",
["source"] = "Immerseus",
["encounterID"] = 1602,
["event"] = "SPELL_CAST_START",
["npcID"] = 71543,
},
["194956"] = {
["encounterName"] = "Amalgam of Souls",
["encounterID"] = 1832,
["npcID"] = 98542,
},
[372615] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tamed Phoenix",
["npcID"] = 189247,
},
[409477] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadeisethal",
["npcID"] = 203411,
},
[319371] = {
["npcID"] = 163512,
},
[298894] = {
["source"] = "LASS-E x12",
["event"] = "SPELL_CAST_START",
["npcID"] = 148677,
},
[368522] = {
["npcID"] = 183764,
},
[214988] = {
["source"] = "Spirit of Vengeance",
["event"] = "SPELL_CAST_START",
["npcID"] = 100364,
},
[352141] = {
["encounterName"] = "Kel'Thuzad",
["npcID"] = 176974,
["encounterID"] = 2422,
},
[298897] = {
["encounterName"] = "Trixie & Naeno",
["npcID"] = 150712,
["encounterID"] = 2312,
},
[360334] = {
["npcID"] = 181964,
},
[298898] = {
["encounterName"] = "Trixie & Naeno",
["npcID"] = 153755,
["encounterID"] = 2312,
},
[417675] = {
["event"] = "SPELL_CAST_START",
["source"] = "Meantron 7000",
["npcID"] = 206131,
},
[239564] = {
["event"] = "SPELL_CAST_START",
["source"] = "Observant Eye",
["npcID"] = 117741,
},
[372623] = {
["encounterName"] = "Sentinel Talondras",
["source"] = "Sentinel Talondras",
["encounterID"] = 2557,
["event"] = "SPELL_CAST_START",
["npcID"] = 184124,
},
[368528] = {
["npcID"] = 183764,
},
[417678] = {
["event"] = "SPELL_CAST_START",
["source"] = "Meantron 7000",
["npcID"] = 206131,
},
[243661] = {
["npcID"] = 121911,
},
[401297] = {
["event"] = "SPELL_CAST_START",
["source"] = "Haleh",
["npcID"] = 199370,
},
[376723] = {
["encounterName"] = "Balakar Khan",
["source"] = "Nokhud Stormcaster",
["encounterID"] = 2580,
["event"] = "SPELL_CAST_START",
["npcID"] = 190294,
},
[319383] = {
["npcID"] = 165706,
},
[202705] = {
["source"] = "Lightforged Cleric",
["event"] = "SPELL_CAST_START",
["npcID"] = 124778,
},
[425873] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lingering Torment",
["npcID"] = 209564,
},
[157652] = {
["event"] = "SPELL_CAST_START",
["source"] = "Auchenai Magus",
["npcID"] = 77694,
},
[79854] = {
["source"] = "Alyn Black",
["event"] = "SPELL_CAST_START",
["npcID"] = 61834,
},
[376725] = {
["encounterName"] = "Balakar Khan",
["source"] = "Nokhud Stormcaster",
["encounterID"] = 2580,
["event"] = "SPELL_CAST_START",
["npcID"] = 190294,
},
[417683] = {
["source"] = "Fury of N'zoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 205307,
},
[409492] = {
["event"] = "SPELL_CAST_START",
["source"] = "Afflicted Soul",
["npcID"] = 204773,
},
[376727] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["encounterID"] = 2580,
["event"] = "SPELL_CAST_START",
["npcID"] = 186151,
},
[429973] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[149463] = {
["npcID"] = 72895,
},
[233426] = {
["encounterName"] = "Demonic Inquisition",
["source"] = "Atrigan",
["encounterID"] = 2048,
["event"] = "SPELL_CAST_START",
["npcID"] = 116689,
},
[327581] = {
["npcID"] = 168396,
},
[270241] = {
["npcID"] = 154129,
},
[147416] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ordon Candlekeeper",
["npcID"] = 72875,
},
[266146] = {
["event"] = "SPELL_CAST_START",
["source"] = "Disciple of Zul",
["npcID"] = 129504,
},
[417689] = {
["event"] = "SPELL_CAST_START",
["source"] = "Meantron 7000",
["npcID"] = 206131,
},
[352158] = {
["npcID"] = 175727,
},
[327584] = {
["npcID"] = 168393,
},
[417691] = {
["source"] = "Fury of N'zoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 205307,
},
[372638] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2405,
["npcID"] = 189706,
},
[360351] = {
["npcID"] = 179043,
},
[364447] = {
["encounterName"] = "Vigilant Guardian",
["encounterID"] = 2512,
["npcID"] = 184522,
},
[44538] = {
["npcID"] = 24698,
},
[368544] = {
["npcID"] = 184597,
},
[126958] = {
["source"] = "Mogu'shan Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 64061,
},
[111599] = {
["npcID"] = 58757,
},
[368545] = {
["npcID"] = 184599,
},
[163802] = {
["encounterName"] = "Gug'rokk",
["source"] = "Gug'rokk",
["npcID"] = 74790,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1654,
},
[270248] = {
["npcID"] = 154129,
},
[137180] = {
["encounterName"] = "Jin'rokh the Breaker",
["source"] = "Jin'rokh the Breaker",
["npcID"] = 69465,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1577,
},
[139228] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zandalari High Priest",
["npcID"] = 69906,
},
["152818"] = {
["source"] = "Shadowmoon Bone-Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 75713,
},
[356260] = {
["npcID"] = 179388,
},
[368548] = {
["npcID"] = 185145,
},
[111600] = {
["encounterName"] = "Raigonn",
["source"] = "Krik'thik Swarm Bringer",
["npcID"] = 56930,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1419,
},
[335783] = {
["npcID"] = 155812,
},
[323496] = {
["npcID"] = 165872,
},
[348071] = {
["encounterName"] = "Kel'Thuzad",
["npcID"] = 175559,
["encounterID"] = 2422,
},
[384933] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Flashfrost Chillweaver",
["npcID"] = 188067,
},
[278444] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devouring Maggot",
["npcID"] = 134024,
},
[331689] = {
["npcID"] = 165181,
},
[368551] = {
["npcID"] = 184605,
},
[405413] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Rionthus",
["encounterID"] = 2693,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 200918,
},
[147422] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ordon Candlekeeper",
["npcID"] = 72875,
},
[417701] = {
["event"] = "SPELL_CAST_START",
["source"] = "Peeved",
["npcID"] = 205428,
},
[139231] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zandalari Storm-Caller",
["npcID"] = 69390,
},
[348074] = {
["npcID"] = 178041,
},
[401319] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[405415] = {
["source"] = "Lady Shaz'ra",
["event"] = "SPELL_CAST_START",
["npcID"] = 200885,
},
[413607] = {
["source"] = "Infinite Twilight Magus",
["event"] = "SPELL_CAST_START",
["npcID"] = 201223,
},
[417704] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drest'Agath the Corrupted",
["npcID"] = 207925,
},
[79860] = {
["source"] = "Ecilam",
["event"] = "SPELL_CAST_START",
["npcID"] = 155283,
},
[356271] = {
["npcID"] = 180059,
},
[401325] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[200671] = {
["source"] = "Magroth the Defender",
["event"] = "SPELL_CAST_START",
["npcID"] = 93950,
},
[389040] = {
["source"] = "Thondrozus",
["event"] = "SPELL_CAST_START",
["npcID"] = 192769,
},
[270264] = {
["event"] = "SPELL_CAST_START",
["source"] = "Portal Breacher",
["npcID"] = 209821,
},
[360373] = {
["encounterName"] = "The Jailer",
["encounterID"] = 2537,
["npcID"] = 180990,
},
[15232] = {
["npcID"] = 17771,
},
[413621] = {
["source"] = "Infinite Infiltrator",
["event"] = "SPELL_CAST_START",
["npcID"] = 206214,
},
[323515] = {
["encounterName"] = "Gorechop",
["encounterID"] = 2365,
["npcID"] = 162317,
},
[413622] = {
["source"] = "Infinite Infiltrator",
["event"] = "SPELL_CAST_START",
["npcID"] = 206214,
},
[405431] = {
["encounterName"] = "Manifested Timeways",
["source"] = "Manifested Timeways",
["encounterID"] = 2667,
["event"] = "SPELL_CAST_START",
["npcID"] = 198996,
},
[405433] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[401338] = {
["source"] = "Kob'rok",
["event"] = "SPELL_CAST_START",
["npcID"] = 203462,
},
[348094] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[129013] = {
["npcID"] = 58213,
},
[393148] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maneet",
["npcID"] = 188704,
},
[298946] = {
["encounterName"] = "Trixie & Naeno",
["npcID"] = 153755,
["encounterID"] = 2312,
},
[59389] = {
["encounterName"] = "Prince Keleseth",
["source"] = "Prince Keleseth",
["encounterID"] = 2026,
["event"] = "SPELL_CAST_START",
["npcID"] = 23953,
},
[266181] = {
["encounterName"] = "Gorak Tul",
["source"] = "Gorak Tul",
["npcID"] = 131864,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2117,
},
[401341] = {
["source"] = "Kob'rok",
["event"] = "SPELL_CAST_START",
["npcID"] = 203462,
},
[389054] = {
["source"] = "Arcane Forager",
["event"] = "SPELL_CAST_START",
["npcID"] = 196694,
},
[417725] = {
["source"] = "Fury of N'zoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 205307,
},
[143339] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Rik'kal the Dissector",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71158,
},
[389056] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Watcher Irideus",
["npcID"] = 189719,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2615,
},
[344003] = {
["npcID"] = 168580,
},
[384961] = {
["source"] = "Rotbow Stalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 186208,
},
[202728] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadlord Mendacius",
["npcID"] = 99649,
},
[178154] = {
["encounterName"] = "Oshir",
["encounterID"] = 1750,
["npcID"] = 89011,
},
[331718] = {
["npcID"] = 171772,
},
[356295] = {
["npcID"] = 170257,
},
[335817] = {
["encounterName"] = "Devos, Paragon of Loyalty",
["npcID"] = 162061,
["encounterID"] = 2359,
},
[196587] = {
["encounterName"] = "Amalgam of Souls",
["source"] = "Amalgam of Souls",
["encounterID"] = 1832,
["event"] = "SPELL_CAST_START",
["npcID"] = 98542,
},
[364488] = {
["encounterName"] = "The Jailer",
["npcID"] = 180990,
["encounterID"] = 2537,
},
[143343] = {
["encounterName"] = "Thok the Bloodthirsty",
["source"] = "Thok the Bloodthirsty",
["npcID"] = 71529,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1599,
},
[274383] = {
["source"] = "Vermin Trapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 130404,
},
[384970] = {
["isChanneled"] = true,
["source"] = "Vicious Hyena",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 185691,
},
[372683] = {
["source"] = "Infused Whelp",
["event"] = "SPELL_CAST_START",
["npcID"] = 187894,
},
[417737] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aqir Shadowcaster",
["npcID"] = 207893,
},
[405450] = {
["source"] = "Hungry Rock Snail",
["event"] = "SPELL_CAST_START",
["npcID"] = 203260,
},
[376780] = {
["encounterName"] = "Warlord Sargha",
["source"] = "Warlord Sargha",
["npcID"] = 189901,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2611,
},
[111610] = {
["encounterName"] = "Instructor Chillheart",
["encounterID"] = 1426,
["npcID"] = 58633,
},
[129017] = {
["source"] = "Dojani Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 65626,
},
[356303] = {
["npcID"] = 180162,
},
[364495] = {
["npcID"] = 181625,
},
[323538] = {
["encounterName"] = "High Adjudicator Aleez",
["encounterID"] = 2403,
["npcID"] = 165410,
},
[122874] = {
["encounterName"] = "Protectors of the Endless",
["source"] = "Elder Regail",
["npcID"] = 60585,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1409,
},
["427459"] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Earthshaper Telu",
["encounterID"] = 1757,
["event"] = "SPELL_CAST_START",
["npcID"] = 83893,
},
["271174"] = {
["source"] = "Pallid Gorger",
["event"] = "SPELL_CAST_START",
["npcID"] = 137830,
},
[129018] = {
["source"] = "Dojani Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 65626,
},
[356306] = {
["npcID"] = 181800,
},
[114683] = {
["source"] = "Bloodhilt Battlemage",
["event"] = "SPELL_CAST_START",
["npcID"] = 68639,
},
[401361] = {
["event"] = "SPELL_CAST_START",
["source"] = "Colossian",
["npcID"] = 204093,
},
[194545] = {
["source"] = "Scarlet Technician",
["event"] = "SPELL_CAST_START",
["npcID"] = 211884,
},
[198641] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Kur'talos Ravencrest",
["encounterID"] = 1835,
["event"] = "SPELL_CAST_START",
["npcID"] = 98965,
},
[401362] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Heatbinder",
["npcID"] = 200452,
},
[323544] = {
["encounterName"] = "Hakkar, the Soulflayer",
["npcID"] = 165905,
["encounterID"] = 2395,
},
[68607] = {
["encounterName"] = "The Crown Chemical Co.",
["source"] = "Apothecary Hummel",
["encounterID"] = 2879,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 36296,
},
[417748] = {
["source"] = "Klaxxi Blade Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 207922,
},
[147446] = {
["event"] = "SPELL_CAST_START",
["source"] = "Foreboding Flame",
["npcID"] = 73162,
},
[133111] = {
["isChanneled"] = true,
["source"] = "Baxel Brassbombs",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 67504,
},
[75775] = {
["source"] = "Frostmane Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 41146,
},
[372696] = {
["source"] = "Primal Juggernaut",
["event"] = "SPELL_CAST_START",
["npcID"] = 188244,
},
[188404] = {
["encounterName"] = "Hymdall",
["source"] = "Storm Drake",
["encounterID"] = 1805,
["event"] = "SPELL_CAST_START",
["npcID"] = 97788,
},
[147447] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'kron Dark Farseer",
["npcID"] = 72770,
},
[401368] = {
["source"] = "Volcanic Deepstrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 200808,
},
[274400] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cutwater Duelist",
["npcID"] = 129559,
},
[118781] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aiyu the Skillet",
["npcID"] = 56520,
},
[266209] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Deathspeaker",
["npcID"] = 134284,
},
[417752] = {
["source"] = "Overlord Mechagon",
["event"] = "SPELL_CAST_START",
["npcID"] = 205309,
},
[307167] = {
["encounterName"] = "Orgozoa",
["npcID"] = 152128,
["encounterID"] = 2303,
},
[327646] = {
["encounterName"] = "Mueh'zala",
["npcID"] = 166608,
["encounterID"] = 2396,
},
[401370] = {
["event"] = "SPELL_CAST_START",
["source"] = "Raging Owlbeast",
["npcID"] = 205316,
},
[126973] = {
["source"] = "Mogu'shan Arcanist",
["event"] = "SPELL_CAST_START",
["npcID"] = 64063,
},
[331743] = {
["npcID"] = 166276,
},
[79872] = {
["npcID"] = 177586,
},
[323552] = {
["encounterName"] = "High Adjudicator Aleez",
["encounterID"] = 2403,
["npcID"] = 165410,
},
[360414] = {
["encounterName"] = "Vigilant Guardian",
["encounterID"] = 2512,
["npcID"] = 180773,
},
[200694] = {
["source"] = "Echo of Ner'zhul",
["event"] = "SPELL_CAST_START",
["npcID"] = 94982,
},
[69633] = {
["source"] = "Spectral Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 36666,
},
[348128] = {
["encounterName"] = "Zo'phex the Sentinel",
["npcID"] = 175616,
["encounterID"] = 2425,
},
[401373] = {
["event"] = "SPELL_CAST_START",
["source"] = "Raging Owlbeast",
["npcID"] = 205316,
},
[421852] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shoreline Gladehart",
["npcID"] = 210283,
},
[294884] = {
["npcID"] = 152009,
},
[417759] = {
["event"] = "SPELL_CAST_START",
["source"] = "Klaxxi Amber Shaper",
["npcID"] = 207918,
},
[25602] = {
["source"] = "Mana Leech",
["event"] = "SPELL_CAST_START",
["npcID"] = 19306,
},
[143356] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Amber Parasite",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71578,
},
[151548] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodmaul Ogre Mage",
["npcID"] = 75272,
},
[327655] = {
["npcID"] = 168420,
},
[307177] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spellbound Ritualist",
["npcID"] = 162716,
},
[417763] = {
["source"] = "Overlord Mechagon",
["event"] = "SPELL_CAST_START",
["npcID"] = 205309,
},
[430051] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Screaming Soul",
["encounterID"] = 2677,
["event"] = "SPELL_CAST_START",
["npcID"] = 214608,
},
[176124] = {
["npcID"] = 173114,
},
[372711] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Brackenhide Shaper",
["npcID"] = 186220,
},
[147454] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spirit of Jadefire",
["npcID"] = 72769,
},
[401382] = {
["source"] = "Past Self",
["event"] = "SPELL_CAST_START",
["npcID"] = 185800,
},
[401383] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[389096] = {
["source"] = "Alia Sunsoar",
["event"] = "SPELL_CAST_START",
["npcID"] = 196737,
},
[200700] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["encounterID"] = 1793,
["event"] = "SPELL_CAST_START",
["npcID"] = 91007,
},
[266225] = {
["encounterName"] = "Gorak Tul",
["source"] = "Gorak Tul",
["npcID"] = 131864,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2117,
},
[401385] = {
["event"] = "SPELL_CAST_START",
["source"] = "Carcaxas",
["npcID"] = 202836,
},
[389098] = {
["source"] = "Alia Sunsoar",
["event"] = "SPELL_CAST_START",
["npcID"] = 196737,
},
[376811] = {
["encounterName"] = "Treemouth",
["source"] = "Treemouth",
["encounterID"] = 2568,
["event"] = "SPELL_CAST_START",
["npcID"] = 186120,
},
[176127] = {
["npcID"] = 80935,
},
[327664] = {
["encounterName"] = "Stichflesh",
["encounterID"] = 2389,
["npcID"] = 162689,
},
[385005] = {
["source"] = "Rustpine Rager",
["event"] = "SPELL_CAST_START",
["npcID"] = 188803,
},
[59395] = {
["event"] = "SPELL_CAST_START",
["source"] = "Memory of a Torturer",
["npcID"] = 200529,
},
[143362] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Amber Parasite",
["npcID"] = 71578,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1593,
},
[372719] = {
["encounterName"] = "Sentinel Talondras",
["source"] = "Sentinel Talondras",
["encounterID"] = 2557,
["event"] = "SPELL_CAST_START",
["npcID"] = 184124,
},
[360432] = {
["npcID"] = 184395,
},
[405491] = {
["source"] = "Animated Riches",
["event"] = "SPELL_CAST_START",
["npcID"] = 201573,
},
[425970] = {
["event"] = "SPELL_CAST_START",
["source"] = "Verdant Boughwalker",
["npcID"] = 213576,
},
[405492] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Thadrion",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 200913,
},
[141318] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frostmane Headhunter",
["npcID"] = 70473,
},
[417780] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mechanized Mekgineer Hologram",
["npcID"] = 207539,
},
[417781] = {
["source"] = "Overlord Mechagon",
["event"] = "SPELL_CAST_START",
["npcID"] = 205309,
},
[417782] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mechanized Mekgineer Hologram",
["npcID"] = 207539,
},
[135176] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lady Jaina Proudmoore",
["npcID"] = 68609,
},
[372730] = {
["source"] = "Primal Juggernaut",
["event"] = "SPELL_CAST_START",
["npcID"] = 188244,
},
[262145] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taskmaster Burlok",
["npcID"] = 138793,
},
[417784] = {
["source"] = "Mechanized Mekgineer Hologram",
["event"] = "SPELL_CAST_START",
["npcID"] = 207539,
},
[376827] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["encounterID"] = 2580,
["event"] = "SPELL_CAST_START",
["npcID"] = 186151,
},
[339966] = {
["npcID"] = 164861,
},
[376829] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["encounterID"] = 2580,
["event"] = "SPELL_CAST_START",
["npcID"] = 186151,
},
[348159] = {
["encounterName"] = "Doctor Ickus",
["encounterID"] = 2384,
["npcID"] = 164967,
},
[137226] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Dam'ren",
["npcID"] = 68081,
},
[348160] = {
["encounterName"] = "Doctor Ickus",
["encounterID"] = 2384,
["npcID"] = 164967,
},
[372735] = {
["source"] = "Flashfrost Earthshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 187969,
},
[137227] = {
["encounterName"] = "Iron Qon",
["source"] = "Dam'ren",
["npcID"] = 68081,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1559,
},
[139275] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lu-Ban",
["npcID"] = 70002,
},
[385024] = {
["event"] = "SPELL_CAST_START",
["source"] = "Salty Salamander",
["npcID"] = 188027,
},
[352259] = {
["npcID"] = 179433,
},
[393217] = {
["source"] = "Blazing Inferno",
["event"] = "SPELL_CAST_START",
["npcID"] = 189043,
},
[331781] = {
["npcID"] = 170164,
},
[131085] = {
["isChanneled"] = true,
["source"] = "Ik'thik Harvester",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 63206,
},
[137229] = {
["encounterName"] = "Iron Qon",
["source"] = "Dam'ren",
["encounterID"] = 1559,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 68081,
},
[56326] = {
["source"] = "Muckscale Shaman",
["event"] = "SPELL_CAST_START",
["npcID"] = 64008,
},
[339975] = {
["npcID"] = 173609,
},
[385029] = {
["encounterName"] = "Gutshot",
["source"] = "Fleshripper Vulture",
["encounterID"] = 2567,
["event"] = "SPELL_CAST_START",
["npcID"] = 186246,
},
[372743] = {
["isChanneled"] = true,
["source"] = "Flashfrost Chillweaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188067,
},
[151566] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodmaul Magma Binder",
["npcID"] = 74349,
},
[141327] = {
["source"] = "Lieutenant Fizzel",
["event"] = "SPELL_CAST_START",
["npcID"] = 70963,
},
[129032] = {
["event"] = "SPELL_CAST_START",
["source"] = "Snow Blossom",
["npcID"] = 62781,
},
[307213] = {
["encounterName"] = "The Hivemind",
["source"] = "Tek'ris",
["npcID"] = 157254,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2333,
},
[131088] = {
["source"] = "Mistblade Scale-Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 63179,
},
["265487"] = {
["source"] = "Bloodsworn Defiler",
["event"] = "SPELL_CAST_START",
["npcID"] = 133912,
},
[413704] = {
["source"] = "Ducks Devil",
["event"] = "SPELL_CAST_START",
["npcID"] = 200751,
},
[227339] = {
["encounterName"] = "Attumen the Huntsman",
["encounterID"] = 1960,
["npcID"] = 114264,
},
[385036] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Galesinger",
["npcID"] = 190373,
},
[421898] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[352271] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[425995] = {
["event"] = "SPELL_CAST_START",
["source"] = "Keeper of the Dream",
["npcID"] = 210423,
},
[401421] = {
["encounterName"] = "Chronikar",
["source"] = "Chronikar",
["npcID"] = 198995,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2666,
},
[227341] = {
["encounterName"] = "Opera Hall",
["encounterID"] = 1957,
["npcID"] = 114251,
},
[76813] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Oracle",
["npcID"] = 41096,
},
[12675] = {
["npcID"] = 17771,
},
[417808] = {
["source"] = "Haywire Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 205889,
},
[376851] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Dathea, Ascended",
["encounterID"] = 2635,
["event"] = "SPELL_CAST_START",
["npcID"] = 189813,
},
[266266] = {
["encounterName"] = "Gorak Tul",
["source"] = "Gorak Tul",
["npcID"] = 131864,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2117,
},
["377500"] = {
["source"] = "Infinite Agent",
["event"] = "SPELL_CAST_START",
["npcID"] = 184335,
},
[368661] = {
["npcID"] = 179386,
},
[323608] = {
["encounterName"] = "Mordretha",
["encounterID"] = 2404,
["npcID"] = 165946,
},
[368662] = {
["npcID"] = 180015,
},
[339992] = {
["npcID"] = 173609,
},
[385046] = {
["source"] = "Skulking Gutstabber",
["event"] = "SPELL_CAST_START",
["npcID"] = 186242,
},
[360472] = {
["npcID"] = 182362,
},
[45577] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerub'ar Corpse Harvester",
["npcID"] = 25445,
},
[153623] = {
["encounterName"] = "Nhallish",
["source"] = "Nhallish",
["encounterID"] = 1688,
["event"] = "SPELL_CAST_START",
["npcID"] = 75829,
},
["209033"] = {
["npcID"] = 104246,
},
[397338] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Tectonic Crusher",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 190588,
},
[307232] = {
["encounterName"] = "The Hivemind",
["source"] = "Tek'ris",
["npcID"] = 157254,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2333,
},
[143385] = {
["encounterName"] = "Siegecrafter Blackfuse",
["source"] = "Siegecrafter Blackfuse",
["encounterID"] = 1601,
["event"] = "SPELL_CAST_START",
["npcID"] = 71504,
},
[405531] = {
["event"] = "SPELL_CAST_START",
["source"] = "Claim Jumper Mk. 3",
["npcID"] = 202654,
},
[397341] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[356384] = {
["npcID"] = 178907,
},
[123918] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scar-Shell",
["npcID"] = 63311,
},
[111631] = {
["encounterName"] = "Instructor Chillheart",
["npcID"] = 58633,
["encounterID"] = 1426,
},
[356386] = {
["npcID"] = 178907,
},
[376865] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["encounterID"] = 2580,
["event"] = "SPELL_CAST_START",
["npcID"] = 186151,
},
[352293] = {
["encounterName"] = "Kel'Thuzad",
["npcID"] = 175559,
["encounterID"] = 2422,
},
["87761"] = {
["source"] = "Executor of the Caliph",
["event"] = "SPELL_CAST_START",
["npcID"] = 45928,
},
[409635] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 198933,
},
[151581] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodmaul Overseer",
["npcID"] = 75426,
},
[141342] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grit",
["npcID"] = 70605,
},
[385063] = {
["source"] = "Primalist Cinderweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 190207,
},
[389159] = {
["source"] = "Liskanoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 193533,
},
[340011] = {
["npcID"] = 173613,
},
[385065] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["npcID"] = 189492,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2607,
},
[274480] = {
["npcID"] = 139842,
},
[393259] = {
["source"] = "Blazing Inferno",
["event"] = "SPELL_CAST_START",
["npcID"] = 189043,
},
[385068] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Colossal Stormfiend",
["npcID"] = 197145,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2607,
},
[397358] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[124946] = {
["source"] = "Qu'nas",
["event"] = "SPELL_CAST_START",
["npcID"] = 50352,
},
[340018] = {
["npcID"] = 172523,
},
[340019] = {
["npcID"] = 173604,
},
[303158] = {
["source"] = "Zanj'ir Myrmidon",
["event"] = "SPELL_CAST_START",
["npcID"] = 153960,
},
[393265] = {
["source"] = "Tombcaller Arban",
["event"] = "SPELL_CAST_START",
["npcID"] = 190047,
},
[356404] = {
["npcID"] = 180091,
},
[393266] = {
["event"] = "SPELL_CAST_START",
["source"] = "Krolkoth the Mountain",
["npcID"] = 197501,
},
[385075] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["encounterID"] = 2584,
["event"] = "SPELL_CAST_START",
["npcID"] = 186738,
},
[159780] = {
["source"] = "Ironmarch Grunt",
["event"] = "SPELL_CAST_START",
["npcID"] = 76189,
},
[323640] = {
["npcID"] = 165473,
},
[417843] = {
["event"] = "SPELL_CAST_START",
["source"] = "Listless Nae'dra",
["npcID"] = 211164,
},
[356407] = {
["npcID"] = 180091,
},
[121876] = {
["encounterName"] = "Wind Lord Mel'jarak",
["source"] = "Sra'thik Amber-Trapper",
["npcID"] = 62405,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1498,
},
[319547] = {
["npcID"] = 165706,
},
[176165] = {
["npcID"] = 88224,
},
[372793] = {
["isChanneled"] = true,
["source"] = "Primal Juggernaut",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188244,
},
[372794] = {
["isChanneled"] = true,
["source"] = "Defier Draghar",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 187897,
},
[315454] = {
["npcID"] = 157212,
},
[227363] = {
["encounterName"] = "Attumen the Huntsman",
["encounterID"] = 1960,
["npcID"] = 114264,
},
[147496] = {
["npcID"] = 72908,
},
[389179] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Watcher Irideus",
["encounterID"] = 2615,
["event"] = "SPELL_CAST_START",
["npcID"] = 189719,
},
[376892] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[79896] = {
["npcID"] = 184080,
},
[356414] = {
["npcID"] = 179892,
},
[227365] = {
["encounterName"] = "Attumen the Huntsman",
["encounterID"] = 1960,
["npcID"] = 114264,
},
[372800] = {
["event"] = "SPELL_CAST_START",
["source"] = "Expedition Guardian",
["npcID"] = 187125,
},
[176170] = {
["source"] = "Ancient Inferno",
["event"] = "SPELL_CAST_START",
["npcID"] = 84875,
},
[147500] = {
["npcID"] = 72809,
},
[331846] = {
["npcID"] = 167964,
},
[139309] = {
["event"] = "SPELL_CAST_START",
["source"] = "Muckbat",
["npcID"] = 70232,
},
[128023] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dread Remora",
["npcID"] = 63353,
},
[368709] = {
["npcID"] = 185795,
},
[274507] = {
["source"] = "Bilge Rat Swabby",
["event"] = "SPELL_CAST_START",
["npcID"] = 129526,
},
[417860] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feral Umbraclaw",
["npcID"] = 211401,
},
[123928] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scar-Shell",
["npcID"] = 63311,
},
[372808] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Melidrussa Chillworn",
["encounterID"] = 2609,
["event"] = "SPELL_CAST_START",
["npcID"] = 188252,
},
[139311] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotting Scavenger",
["npcID"] = 70224,
},
[364617] = {
["npcID"] = 181057,
},
[260136] = {
["source"] = "Mala'kili",
["event"] = "SPELL_CAST_START",
["npcID"] = 128935,
},
[397386] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Magma Mystic",
["npcID"] = 199703,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[401482] = {
["encounterName"] = "Tyr, the Infinite Keeper",
["source"] = "Tyr, the Infinite Keeper",
["encounterID"] = 2670,
["event"] = "SPELL_CAST_START",
["npcID"] = 198998,
},
[303185] = {
["npcID"] = 155629,
},
[356430] = {
["npcID"] = 178958,
},
[356431] = {
["npcID"] = 180113,
},
[417868] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mossheart Umbraclaw",
["npcID"] = 211163,
},
[46608] = {
["source"] = "Captain Balinda Stonehearth",
["event"] = "SPELL_CAST_START",
["npcID"] = 11949,
},
[128026] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dread Lurker",
["npcID"] = 62751,
},
[113691] = {
["encounterName"] = "Flameweaver Koegler",
["source"] = "Flameweaver Koegler",
["encounterID"] = 1420,
["event"] = "SPELL_CAST_START",
["npcID"] = 59150,
},
[417872] = {
["event"] = "SPELL_CAST_START",
["source"] = "Freya",
["npcID"] = 205304,
},
[393298] = {
["source"] = "Smoldering Colossus",
["event"] = "SPELL_CAST_START",
["npcID"] = 188673,
},
[397394] = {
["source"] = "Nokhud Thunderfist",
["event"] = "SPELL_CAST_START",
["npcID"] = 193373,
},
[124955] = {
["event"] = "SPELL_CAST_START",
["source"] = "Adjunct Ek'vem",
["npcID"] = 62073,
},
[295001] = {
["npcID"] = 151128,
},
[385108] = {
["source"] = "Restless Podling",
["event"] = "SPELL_CAST_START",
["npcID"] = 187317,
},
[194610] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seacursed Mistmender",
["npcID"] = 97365,
},
[421971] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[192563] = {
["source"] = "Valarjar Purifier",
["event"] = "SPELL_CAST_START",
["npcID"] = 97197,
},
[340057] = {
["npcID"] = 174336,
},
[147510] = {
["npcID"] = 72809,
},
[352345] = {
["encounterName"] = "Timecap'n Hooktail",
["npcID"] = 176178,
["encounterID"] = 2419,
},
[125980] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quid",
["npcID"] = 58771,
},
[139319] = {
["source"] = "Zandalari Storm-Caller",
["event"] = "SPELL_CAST_START",
["npcID"] = 70236,
},
[360538] = {
["npcID"] = 182120,
},
[299102] = {
["source"] = "Arachnoid Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 151934,
},
[352347] = {
["encounterName"] = "Hylbrande",
["npcID"] = 176551,
["encounterID"] = 2426,
},
[17162] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Conjuror",
["npcID"] = 10419,
},
[204852] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nightmare Dweller",
["npcID"] = 101991,
},
[352348] = {
["encounterName"] = "Kel'Thuzad",
["npcID"] = 175559,
},
[147512] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eroded Cliffdweller",
["npcID"] = 72809,
},
[372828] = {
["source"] = "Mudfin Shaman",
["event"] = "SPELL_CAST_START",
["npcID"] = 186679,
},
[393307] = {
["event"] = "SPELL_CAST_START",
["source"] = "Living Flame",
["npcID"] = 184693,
},
[393308] = {
["source"] = "Primalist Flamecaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 201560,
},
[413787] = {
["event"] = "SPELL_CAST_START",
["source"] = "Entropic Hatred",
["npcID"] = 203809,
},
[401500] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[389213] = {
["source"] = "Flame Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 192764,
},
[323682] = {
["npcID"] = 163501,
},
[229429] = {
["npcID"] = 115388,
},
[123934] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jol'Grum",
["npcID"] = 63312,
},
[323683] = {
["encounterName"] = "Mordretha",
["encounterID"] = 2404,
["npcID"] = 165946,
},
[303205] = {
["npcID"] = 155628,
},
[352355] = {
["encounterName"] = "Kel'Thuzad",
["npcID"] = 176929,
["encounterID"] = 2422,
},
[364643] = {
["npcID"] = 181057,
},
[143420] = {
["encounterName"] = "General Nazgrim",
["source"] = "Kor'kron Ironblade",
["encounterID"] = 1603,
["event"] = "SPELL_CAST_START",
["npcID"] = 71516,
},
[307303] = {
["npcID"] = 156323,
},
[147516] = {
["npcID"] = 72809,
},
[340070] = {
["npcID"] = 166503,
},
[55314] = {
["source"] = "Death Knight Cavalier",
["event"] = "SPELL_CAST_START",
["npcID"] = 16163,
},
[176187] = {
["source"] = "Ashmaul Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 84876,
},
[376933] = {
["encounterName"] = "Treemouth",
["source"] = "Treemouth",
["npcID"] = 186120,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2568,
},
[323689] = {
["npcID"] = 158642,
},
[376934] = {
["encounterName"] = "Treemouth",
["source"] = "Treemouth",
["encounterID"] = 2568,
["event"] = "SPELL_CAST_START",
["npcID"] = 186120,
},
[364647] = {
["npcID"] = 181057,
},
[372839] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Mystic-Hunter",
["npcID"] = 186295,
},
[198715] = {
["npcID"] = 100876,
},
[417893] = {
["event"] = "SPELL_CAST_START",
["source"] = "Walking Nightmare",
["npcID"] = 206627,
},
[139327] = {
["source"] = "Unblinking Eye",
["event"] = "SPELL_CAST_START",
["npcID"] = 70238,
},
[303213] = {
["source"] = "Krugg the Smart",
["event"] = "SPELL_CAST_START",
["npcID"] = 148028,
},
[182333] = {
["npcID"] = 88087,
},
[184381] = {
["npcID"] = 159190,
},
[409704] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kretchenwrath",
["npcID"] = 201673,
},
[241722] = {
["npcID"] = 121200,
},
[364652] = {
["encounterName"] = "Lihuvim, Principal Architect",
["encounterID"] = 2539,
["npcID"] = 182169,
},
[393323] = {
["source"] = "Iskaaran Apprentice",
["event"] = "SPELL_CAST_START",
["npcID"] = 198298,
},
[413803] = {
["source"] = "Cenrrrn Cirrgl Mooncaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 205851,
},
[417899] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Adventurer",
["npcID"] = 205992,
},
[413804] = {
["source"] = "Cenrrrn Cirrgl Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 205852,
},
[376943] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Dathea, Ascended",
["encounterID"] = 2635,
["event"] = "SPELL_CAST_START",
["npcID"] = 189813,
},
[413805] = {
["source"] = "Cenrrrn Cirrgl Tideshifter",
["event"] = "SPELL_CAST_START",
["npcID"] = 204516,
},
[393327] = {
["source"] = "Keen Skywatcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 190778,
},
[157762] = {
["event"] = "SPELL_CAST_START",
["source"] = "Auchenai Soulpriest",
["npcID"] = 77696,
},
[303221] = {
["source"] = "Krugg the Smart",
["event"] = "SPELL_CAST_START",
["npcID"] = 148028,
},
[211007] = {
["source"] = "Nightborne Reclaimer",
["event"] = "SPELL_CAST_START",
["npcID"] = 105915,
},
[360562] = {
["encounterName"] = "The Jailer",
["encounterID"] = 2537,
["npcID"] = 180990,
},
[385137] = {
["source"] = "Basrikron",
["event"] = "SPELL_CAST_START",
["npcID"] = 193535,
},
[118819] = {
["event"] = "SPELL_CAST_START",
["source"] = "Belligerent Blossom",
["npcID"] = 61183,
},
[413808] = {
["source"] = "Cenrrrn Cirrgl Tideshifter",
["event"] = "SPELL_CAST_START",
["npcID"] = 204516,
},
[372851] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Melidrussa Chillworn",
["encounterID"] = 2609,
["event"] = "SPELL_CAST_START",
["npcID"] = 188252,
},
[434288] = {
["event"] = "SPELL_CAST_START",
["source"] = "Daetan Swiftplume",
["npcID"] = 213665,
},
[249919] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["npcID"] = 122968,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2087,
},
[204866] = {
["source"] = "Kraxa",
["event"] = "SPELL_CAST_START",
["npcID"] = 103271,
},
[198723] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotheart Dryad",
["npcID"] = 99358,
},
[125988] = {
["npcID"] = 58771,
},
[360569] = {
["npcID"] = 178558,
},
[397431] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Volatile Infuser",
["encounterID"] = 2635,
["event"] = "SPELL_CAST_START",
["npcID"] = 192934,
},
[143431] = {
["encounterName"] = "General Nazgrim",
["source"] = "Kor'kron Arcweaver",
["encounterID"] = 1603,
["event"] = "SPELL_CAST_START",
["npcID"] = 71517,
},
[393336] = {
["event"] = "SPELL_CAST_START",
["source"] = "Penumbrus",
["npcID"] = 189289,
},
[364666] = {
["npcID"] = 178563,
},
[135240] = {
["event"] = "SPELL_CAST_START",
["source"] = "S.H.A.R.K. Rocketeer",
["npcID"] = 68669,
},
[372858] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Kokia Blazehoof",
["encounterID"] = 2606,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 189232,
},
[139336] = {
["source"] = "Unblinking Eye",
["event"] = "SPELL_CAST_START",
["npcID"] = 70238,
},
[143432] = {
["encounterName"] = "General Nazgrim",
["source"] = "Kor'kron Arcweaver",
["encounterID"] = 1603,
["event"] = "SPELL_CAST_START",
["npcID"] = 71517,
},
[389242] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormed Blackpaw",
["npcID"] = 193827,
},
[409721] = {
["event"] = "SPELL_CAST_START",
["source"] = "Winglord Dezran",
["npcID"] = 202610,
},
[188486] = {
["source"] = "Blacksail Gunner",
["event"] = "SPELL_CAST_START",
["npcID"] = 108146,
},
[147529] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursed Hozen Swabby",
["npcID"] = 71920,
},
[372862] = {
["source"] = "Churning Splash",
["event"] = "SPELL_CAST_START",
["npcID"] = 187318,
},
[409724] = {
["event"] = "SPELL_CAST_START",
["source"] = "Neltharion",
["npcID"] = 201668,
},
[372863] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Kokia Blazehoof",
["encounterID"] = 2606,
["event"] = "SPELL_CAST_START",
["npcID"] = 189232,
},
[331906] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Muck",
["npcID"] = 157847,
},
[389247] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blacktalon Avenger",
["npcID"] = 187187,
},
[360577] = {
["npcID"] = 180930,
},
[79913] = {
["npcID"] = 39351,
},
[143436] = {
["encounterName"] = "Immerseus",
["source"] = "Immerseus",
["npcID"] = 71543,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1602,
},
[389250] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blacktalon Slayer",
["npcID"] = 201831,
},
[124967] = {
["encounterName"] = "Elegon",
["source"] = "Elegon",
["encounterID"] = 1500,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 60410,
},
[389251] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invasive Deathblossom",
["npcID"] = 187316,
},
[352390] = {
["npcID"] = 179334,
},
[323720] = {
["npcID"] = 184465,
},
[393348] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stalwart Broodwarden",
["npcID"] = 198263,
},
[385157] = {
["event"] = "SPELL_CAST_START",
["source"] = "Clearwater Riverbeast",
["npcID"] = 192651,
},
[121896] = {
["encounterName"] = "Wind Lord Mel'jarak",
["source"] = "Wind Lord Mel'jarak",
["npcID"] = 62397,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1498,
},
[413829] = {
["source"] = "Myrmidon Solek'vosh",
["event"] = "SPELL_CAST_START",
["npcID"] = 200864,
},
[417926] = {
["event"] = "SPELL_CAST_START",
["source"] = "Freya",
["npcID"] = 205304,
},
[147535] = {
["npcID"] = 72909,
},
[422023] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["encounterID"] = 2820,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 209333,
},
[417928] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invading Flameclaw",
["npcID"] = 206805,
},
[405641] = {
["source"] = "Shadowflame Amalgamation",
["event"] = "SPELL_CAST_START",
["npcID"] = 201934,
},
[153680] = {
["encounterName"] = "Bonemaw",
["source"] = "Bonemaw",
["encounterID"] = 1679,
["event"] = "SPELL_CAST_START",
["npcID"] = 75452,
},
[360589] = {
["npcID"] = 182114,
},
[299153] = {
["encounterName"] = "Trixie & Naeno",
["npcID"] = 150712,
["encounterID"] = 2312,
},
[422026] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[360590] = {
["npcID"] = 182114,
},
[422027] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Spirit of the Kaldorei",
["encounterID"] = 2677,
["event"] = "SPELL_CAST_START",
["npcID"] = 207800,
},
[360591] = {
["encounterName"] = "Prototype Pantheon",
["encounterID"] = 2544,
["npcID"] = 182045,
},
[176208] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rubyspike Goren",
["npcID"] = 78935,
},
[163921] = {
["npcID"] = 86767,
},
[135251] = {
["encounterName"] = "Tortos",
["source"] = "Tortos",
["npcID"] = 67977,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1565,
},
[235597] = {
["encounterName"] = "Fallen Avatar",
["source"] = "Fallen Avatar",
["encounterID"] = 2038,
["event"] = "SPELL_CAST_START",
["npcID"] = 116939,
},
[200784] = {
["source"] = "Wyrmtongue Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 98792,
},
[186449] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iron Reaver",
["npcID"] = 90284,
},
[409744] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kretchenwrath",
["npcID"] = 201673,
},
[385170] = {
["source"] = "Wind Serpent",
["event"] = "SPELL_CAST_START",
["npcID"] = 191645,
},
[409745] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kretchenwrath",
["npcID"] = 201673,
},
[417937] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotted Gladiator",
["npcID"] = 207808,
},
[389267] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invasive Clearwater Snapper",
["npcID"] = 195506,
},
[331927] = {
["npcID"] = 167962,
},
[385172] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wind Serpent",
["npcID"] = 191645,
},
[389268] = {
["event"] = "SPELL_CAST_START",
["source"] = "Expedition Guardian",
["npcID"] = 187135,
},
[389269] = {
["event"] = "SPELL_CAST_START",
["source"] = "Expedition Guarantor",
["npcID"] = 187061,
},
[143446] = {
["encounterName"] = "Fallen Protectors",
["source"] = "Sun Tenderheart",
["npcID"] = 71480,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1598,
},
[389270] = {
["event"] = "SPELL_CAST_START",
["source"] = "Expedition Guarantor",
["npcID"] = 187061,
},
[299164] = {
["encounterName"] = "Trixie & Naeno",
["npcID"] = 153756,
["encounterID"] = 2312,
},
[417941] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotted Gladiator",
["npcID"] = 207808,
},
[389271] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invasive Clearwater Snapper",
["npcID"] = 195506,
},
[147543] = {
["npcID"] = 72970,
},
["373424"] = {
["encounterName"] = "Chargath, Bane of Scales",
["source"] = "Chargath, Bane of Scales",
["encounterID"] = 2613,
["event"] = "SPELL_CAST_START",
["npcID"] = 189340,
},
[422039] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[417944] = {
["event"] = "SPELL_CAST_START",
["source"] = "Freya",
["npcID"] = 205304,
},
[389274] = {
["npcID"] = 190070,
},
[125997] = {
["npcID"] = 63764,
},
[182359] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Gargantuan",
["npcID"] = 109154,
},
[233556] = {
["encounterName"] = "Fallen Avatar",
["source"] = "Containment Pylon",
["encounterID"] = 2038,
["event"] = "SPELL_CAST_START",
["npcID"] = 117279,
},
[409756] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Commander",
["npcID"] = 202109,
},
[319650] = {
["encounterName"] = "Kryxis the Voracious",
["encounterID"] = 2360,
["npcID"] = 162100,
},
[409757] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Commander",
["npcID"] = 202109,
},
[340130] = {
["npcID"] = 165663,
},
[389280] = {
["source"] = "Shiverweb Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 185814,
},
[68658] = {
["source"] = "Netgun Gnome",
["event"] = "SPELL_CAST_START",
["npcID"] = 36385,
},
[336037] = {
["npcID"] = 181186,
},
[417953] = {
["event"] = "SPELL_CAST_START",
["source"] = "Galok Wingslicer",
["npcID"] = 206460,
},
[340134] = {
["npcID"] = 171009,
},
[344230] = {
["encounterName"] = "Stone Legion Generals",
["npcID"] = 168112,
["encounterID"] = 2417,
},
[176219] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gronn Pulverizer",
["npcID"] = 82295,
},
[376997] = {
["encounterName"] = "Crawth",
["source"] = "Crawth",
["encounterID"] = 2564,
["event"] = "SPELL_CAST_START",
["npcID"] = 191736,
},
[299178] = {
["encounterName"] = "Queen Azshara",
["npcID"] = 152910,
["encounterID"] = 2299,
},
[417955] = {
["isChanneled"] = true,
["source"] = "Freya",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205304,
},
[405668] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Destroyer",
["npcID"] = 201753,
},
[426147] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["npcID"] = 206172,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2708,
},
[413860] = {
["source"] = "Chromie",
["event"] = "SPELL_CAST_START",
["npcID"] = 205707,
},
[303276] = {
["npcID"] = 155634,
},
[422053] = {
["encounterName"] = "Gnarlroot",
["source"] = "Tainted Lasher",
["npcID"] = 210231,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[393385] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chalsec of the Earth",
["npcID"] = 193847,
},
[405673] = {
["source"] = "Overflowing Magma",
["event"] = "SPELL_CAST_START",
["npcID"] = 203277,
},
[147552] = {
["encounterName"] = "Galakras",
["source"] = "Dragonmaw Flameslinger",
["encounterID"] = 1622,
["event"] = "SPELL_CAST_START",
["npcID"] = 72353,
},
[377004] = {
["encounterName"] = "Crawth",
["source"] = "Crawth",
["encounterID"] = 2564,
["event"] = "SPELL_CAST_START",
["npcID"] = 191736,
},
[128049] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spectral Pirate",
["npcID"] = 71987,
},
[270515] = {
["event"] = "SPELL_CAST_START",
["source"] = "Azerite-Infused Elemental",
["npcID"] = 137905,
},
[405675] = {
["source"] = "Volcanakk",
["event"] = "SPELL_CAST_START",
["npcID"] = 200911,
},
[147553] = {
["source"] = "Harbinger of Y'Shaarj",
["event"] = "SPELL_CAST_START",
["npcID"] = 73452,
},
[198750] = {
["encounterName"] = "Odyn",
["source"] = "Stormforged Obliterator",
["encounterID"] = 1809,
["event"] = "SPELL_CAST_START",
["npcID"] = 102019,
},
[336048] = {
["npcID"] = 176262,
},
[106547] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shado-Pan Novice",
["npcID"] = 56395,
},
[303284] = {
["npcID"] = 155634,
},
[340146] = {
["npcID"] = 171009,
},
[157794] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Magus",
["npcID"] = 76263,
},
[198752] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seacursed Slaver",
["npcID"] = 97043,
},
[319669] = {
["encounterName"] = "Kul'tharok",
["npcID"] = 162309,
["encounterID"] = 2364,
},
[204896] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Bloodscent Felhound",
["npcID"] = 98813,
},
[111668] = {
["npcID"] = 56877,
},
[157797] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Arbiter",
["npcID"] = 77080,
},
[135271] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chief Ingoo Ingoo XVII",
["npcID"] = 68545,
},
[356537] = {
["npcID"] = 179334,
},
[128052] = {
["event"] = "SPELL_CAST_START",
["source"] = "Adjunct Pivvika",
["npcID"] = 63104,
},
[377017] = {
["encounterName"] = "Warlord Sargha",
["source"] = "Warlord Sargha",
["npcID"] = 189901,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2611,
},
[299198] = {
["source"] = "Aerial Enforcer XZ-9",
["event"] = "SPELL_CAST_START",
["npcID"] = 154700,
},
[68664] = {
["source"] = "Zapper Gnome",
["event"] = "SPELL_CAST_START",
["npcID"] = 36384,
},
[360636] = {
["encounterName"] = "Prototype Pantheon",
["encounterID"] = 2544,
["npcID"] = 181549,
},
[303296] = {
["npcID"] = 155618,
},
[348350] = {
["encounterName"] = "Zo'phex the Sentinel",
["npcID"] = 175616,
["encounterID"] = 2425,
},
[405691] = {
["source"] = "Volcanakk",
["event"] = "SPELL_CAST_START",
["npcID"] = 200911,
},
[180327] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felspawn Imp",
["npcID"] = 126073,
},
[168040] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Earthshaper Telu",
["npcID"] = 83893,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1757,
},
[340160] = {
["npcID"] = 173655,
},
[119862] = {
["encounterName"] = "Sha of Fear",
["source"] = "Yang Guoshi",
["encounterID"] = 1431,
["event"] = "SPELL_CAST_START",
["npcID"] = 61038,
},
[303299] = {
["source"] = "Azsh'ari Siegemistress",
["event"] = "SPELL_CAST_START",
["npcID"] = 174235,
},
[147562] = {
["npcID"] = 72877,
},
[123958] = {
["event"] = "SPELL_CAST_START",
["source"] = "Little Liuyang",
["npcID"] = 63313,
},
[336066] = {
["npcID"] = 179911,
},
[422078] = {
["event"] = "SPELL_CAST_START",
["source"] = "Emerald Wingguard",
["npcID"] = 210278,
},
[147563] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ashleaf Sprite",
["npcID"] = 72877,
},
[336068] = {
["npcID"] = 182686,
},
[405696] = {
["encounterName"] = "Manifested Timeways",
["source"] = "Manifested Timeways",
["encounterID"] = 2667,
["event"] = "SPELL_CAST_START",
["npcID"] = 198996,
},
[360643] = {
["npcID"] = 182155,
},
[192617] = {
["encounterName"] = "Wrath of Azshara",
["source"] = "Wrath of Azshara",
["npcID"] = 96028,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1814,
},
[356548] = {
["npcID"] = 178392,
},
[360644] = {
["npcID"] = 180917,
},
[124983] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Adjunct Suruz",
["npcID"] = 62075,
},
[405698] = {
["event"] = "SPELL_CAST_START",
["source"] = "Baine Bloodhoof",
["npcID"] = 201362,
},
[393411] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gethrel the South Wind",
["npcID"] = 193848,
},
[141421] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthborn Hatred",
["npcID"] = 70822,
},
[405699] = {
["event"] = "SPELL_CAST_START",
["source"] = "Baine Bloodhoof",
["npcID"] = 201362,
},
[377029] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scythid Gloomhunter",
["npcID"] = 197665,
},
[360647] = {
["npcID"] = 182155,
},
[323786] = {
["npcID"] = 163524,
},
[327882] = {
["npcID"] = 168153,
},
[123960] = {
["event"] = "SPELL_CAST_START",
["source"] = "Little Liuyang",
["npcID"] = 63313,
},
[303308] = {
["source"] = "Primalist Infuser",
["event"] = "SPELL_CAST_START",
["npcID"] = 186112,
},
[141423] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frostmane Witch Doctor",
["npcID"] = 70464,
},
[270543] = {
["npcID"] = 164515,
},
[377033] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ripsaw the Stalker",
["npcID"] = 193153,
},
[377034] = {
["encounterName"] = "Crawth",
["source"] = "Crawth",
["encounterID"] = 2564,
["event"] = "SPELL_CAST_START",
["npcID"] = 191736,
},
[192621] = {
["encounterName"] = "Ash'Golm",
["source"] = "Ash'Golm",
["encounterID"] = 1816,
["event"] = "SPELL_CAST_START",
["npcID"] = 95886,
},
[147568] = {
["event"] = "SPELL_CAST_START",
["source"] = "Great Turtle Hatchling",
["npcID"] = 72763,
},
[397514] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["npcID"] = 199659,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[393419] = {
["event"] = "SPELL_CAST_START",
["source"] = "Penumbrus",
["npcID"] = 189289,
},
[256106] = {
["encounterName"] = "Skycap'n Kragg",
["source"] = "Skycap'n Kragg",
["encounterID"] = 2093,
["event"] = "SPELL_CAST_START",
["npcID"] = 126832,
},
[79932] = {
["source"] = "Marketa",
["event"] = "SPELL_CAST_START",
["npcID"] = 155282,
},
[422090] = {
["event"] = "SPELL_CAST_START",
["source"] = "Treant",
["npcID"] = 54983,
},
[231532] = {
["source"] = "Pyrestar Demolisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 114845,
},
[182384] = {
["encounterName"] = "The Crown Chemical Co.",
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Spitespeaker",
["npcID"] = 89025,
},
[389327] = {
["event"] = "SPELL_CAST_START",
["source"] = "Malsiran",
["npcID"] = 188141,
},
[327891] = {
["encounterName"] = "Mueh'zala",
["npcID"] = 169506,
["encounterID"] = 2396,
},
[141427] = {
["npcID"] = 183257,
},
[145523] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Stone Statue",
["npcID"] = 72535,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[147571] = {
["event"] = "SPELL_CAST_START",
["source"] = "Great Turtle",
["npcID"] = 72764,
},
[141428] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bonechiller Barafu",
["npcID"] = 70468,
},
[241774] = {
["npcID"] = 114636,
},
[13321] = {
["source"] = "Felhound Manastalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 17401,
},
[135285] = {
["event"] = "SPELL_CAST_START",
["source"] = "Summoned Water Elemental",
["npcID"] = 68678,
},
[194674] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seacursed Slaver",
["npcID"] = 97043,
},
[57376] = {
["encounterName"] = "The Four Horsemen",
["source"] = "Sir Zeliek",
["npcID"] = 16063,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1121,
},
[194675] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Imp",
["npcID"] = 98963,
},
[393430] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge-Keep Custodian",
["npcID"] = 192703,
},
[385239] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flare Elemental",
["npcID"] = 202683,
},
[323804] = {
["npcID"] = 163524,
},
[393432] = {
["event"] = "SPELL_CAST_START",
["source"] = "Refti Defender",
["npcID"] = 190340,
},
[340189] = {
["npcID"] = 173655,
},
[393434] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dracthyr Freshscale",
["npcID"] = 192857,
},
[418009] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Alliance Archer",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 206352,
},
[258162] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lago the Drowned",
["npcID"] = 193025,
},
[278755] = {
["event"] = "SPELL_CAST_START",
["source"] = "Befouled Spirit",
["npcID"] = 133685,
},
[319713] = {
["encounterName"] = "Kryxis the Voracious",
["encounterID"] = 2360,
["npcID"] = 162100,
},
[192631] = {
["encounterName"] = "Ash'Golm",
["source"] = "Ash'Golm",
["encounterID"] = 1816,
["event"] = "SPELL_CAST_START",
["npcID"] = 95886,
},
[323810] = {
["encounterName"] = "General Kaal",
["encounterID"] = 2363,
["npcID"] = 166085,
},
[332002] = {
["npcID"] = 170417,
},
[303332] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rijz'x the Devourer",
["npcID"] = 154490,
},
[393439] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dracthyr Freshscale",
["npcID"] = 192857,
},
[364769] = {
["npcID"] = 181360,
},
[79937] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cabalist Doombrow",
["npcID"] = 70708,
},
[426206] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[235638] = {
["event"] = "SPELL_CAST_START",
["source"] = "Roottender Treant",
["npcID"] = 209280,
},
[418016] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hand of the Lich King",
["npcID"] = 207386,
},
[227447] = {
["encounterName"] = "Opera Hall",
["encounterID"] = 1957,
["npcID"] = 114284,
},
[368868] = {
["npcID"] = 184738,
},
[393443] = {
["event"] = "SPELL_CAST_START",
["source"] = "Veshrak of the North",
["npcID"] = 188713,
},
[79938] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cabalist Doombrow",
["npcID"] = 70708,
},
[194682] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Imp",
["npcID"] = 98963,
},
[418020] = {
["event"] = "SPELL_CAST_START",
["source"] = "Freya",
["npcID"] = 205304,
},
[79939] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anruin",
["npcID"] = 81998,
},
[364778] = {
["encounterName"] = "Skolex, the Insatiable Ravener",
["encounterID"] = 2542,
["npcID"] = 181395,
},
[323821] = {
["encounterName"] = "General Kaal",
["encounterID"] = 2363,
["npcID"] = 162099,
},
[418024] = {
["source"] = "Hand of the Lich King",
["event"] = "SPELL_CAST_START",
["npcID"] = 207386,
},
[372971] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Blacksmith",
["npcID"] = 189471,
},
[418025] = {
["source"] = "Hand of the Lich King",
["event"] = "SPELL_CAST_START",
["npcID"] = 207386,
},
[221308] = {
["source"] = "Blacksail Gunner",
["event"] = "SPELL_CAST_START",
["npcID"] = 108146,
},
[299250] = {
["encounterName"] = "Queen Azshara",
["npcID"] = 152910,
["encounterID"] = 2299,
},
[340208] = {
["npcID"] = 173655,
},
[393453] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dracthyr Stoneclaw",
["npcID"] = 201079,
},
[241788] = {
["npcID"] = 114632,
},
[393454] = {
["source"] = "Battlehorn Pyrhus",
["event"] = "SPELL_CAST_START",
["npcID"] = 190986,
},
[385263] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coastal Eel",
["npcID"] = 198782,
},
[137347] = {
["encounterName"] = "Council of Elders",
["source"] = "High Priestess Mar'li",
["npcID"] = 69132,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1570,
},
[143491] = {
["encounterName"] = "Fallen Protectors",
["source"] = "Sun Tenderheart",
["encounterID"] = 1598,
["event"] = "SPELL_CAST_START",
["npcID"] = 71480,
},
[389360] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Timekeeper",
["npcID"] = 192516,
},
[418031] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vereesa Windrunner",
["npcID"] = 207816,
},
[119875] = {
["encounterName"] = "General Pa'valak",
["source"] = "General Pa'valak",
["npcID"] = 61485,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1447,
},
[393458] = {
["source"] = "Malifron",
["event"] = "SPELL_CAST_START",
["npcID"] = 190278,
},
[389364] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cracktooth",
["npcID"] = 187528,
},
[15242] = {
["npcID"] = 13099,
},
[245888] = {
["source"] = "Antoran Champion",
["event"] = "SPELL_CAST_START",
["npcID"] = 123480,
},
[15498] = {
["npcID"] = 13097,
},
[209027] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Guard",
["npcID"] = 104246,
},
[356602] = {
["npcID"] = 180164,
},
[368890] = {
["npcID"] = 181408,
},
["404713"] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 200912,
},
[311551] = {
["encounterName"] = "Dark Inquisitor Xanesh",
["source"] = "Dark Inquisitor Xanesh",
["npcID"] = 156575,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2328,
},
[143497] = {
["encounterName"] = "Fallen Protectors",
["source"] = "Sun Tenderheart",
["npcID"] = 71480,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1598,
},
[57381] = {
["encounterName"] = "The Four Horsemen",
["source"] = "Lady Blaumeux",
["encounterID"] = 1121,
["event"] = "SPELL_CAST_START",
["npcID"] = 16065,
},
["196838"] = {
["encounterName"] = "Fenryr",
["source"] = "Fenryr",
["encounterID"] = 1807,
["event"] = "SPELL_CAST_START",
["npcID"] = 99868,
},
[170120] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Fragment",
["npcID"] = 89167,
},
[227461] = {
["encounterName"] = "Opera Hall",
["encounterID"] = 1957,
["npcID"] = 114324,
},
[299268] = {
["npcID"] = 144566,
},
[192648] = {
["source"] = "Halahk the Deathbringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 93949,
},
[145547] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'kron Dark Shaman",
["npcID"] = 72451,
},
[418047] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Anduin Lothar",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203679,
},
[258181] = {
["source"] = "Irontide Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 130400,
},
[145548] = {
["event"] = "SPELL_CAST_START",
["source"] = "Poison Bolt Totem",
["npcID"] = 72562,
},
[418049] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vereesa Windrunner",
["npcID"] = 207816,
},
[55334] = {
["source"] = "Death Knight Cavalier",
["event"] = "SPELL_CAST_START",
["npcID"] = 16163,
},
[303369] = {
["npcID"] = 155686,
},
[418051] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vereesa Windrunner",
["npcID"] = 207816,
},
[352520] = {
["npcID"] = 178601,
},
[145550] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'kron Shadowmage",
["npcID"] = 72150,
},
[393478] = {
["event"] = "SPELL_CAST_START",
["source"] = "Penumbrus",
["npcID"] = 189289,
},
[364808] = {
["npcID"] = 181145,
},
[128072] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dread Scarab",
["npcID"] = 63587,
},
[303373] = {
["npcID"] = 155686,
},
[130120] = {
["source"] = "Apparition of Terror",
["event"] = "SPELL_CAST_START",
["npcID"] = 66100,
},
[117833] = {
["encounterName"] = "The Spirit Kings",
["source"] = "Meng the Demented",
["encounterID"] = 1436,
["event"] = "SPELL_CAST_START",
["npcID"] = 60708,
},
[364811] = {
["npcID"] = 185037,
},
[418056] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Anduin Lothar",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203679,
},
[145552] = {
["source"] = "Irontide Coin Counter",
["event"] = "SPELL_CAST_START",
["npcID"] = 202398,
},
[125001] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zan'thik Ambermancer",
["npcID"] = 62838,
},
[360717] = {
["encounterName"] = "Lords of Dread",
["encounterID"] = 2543,
["npcID"] = 181399,
},
[256138] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dazar'ai Honor Guard",
["npcID"] = 127799,
},
[368909] = {
["npcID"] = 185861,
},
[145553] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mokvar the Treasurer",
["npcID"] = 72433,
},
[418059] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Anduin Lothar",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203679,
},
[145555] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'kron Warshaman",
["npcID"] = 71773,
},
[377105] = {
["source"] = "Vault Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 190510,
},
[303382] = {
["npcID"] = 155686,
},
[34345] = {
["npcID"] = 67283,
},
[13323] = {
["npcID"] = 32324,
},
[139413] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zandalari Spiritweaver",
["npcID"] = 69285,
},
[145557] = {
["event"] = "SPELL_CAST_START",
["source"] = "Healing Tide Totem",
["npcID"] = 72563,
},
[241808] = {
["npcID"] = 114792,
},
[30741] = {
["source"] = "Grand Warlock Nethekurse",
["event"] = "SPELL_CAST_START",
["npcID"] = 16807,
},
[352538] = {
["encounterName"] = "Guardian of the First Ones",
["npcID"] = 175731,
["encounterID"] = 2436,
},
[373017] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Blazebound Firestorm",
["encounterID"] = 2606,
["event"] = "SPELL_CAST_START",
["npcID"] = 189886,
},
[360730] = {
["npcID"] = 181114,
},
[405784] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tarasek Boarder",
["npcID"] = 203307,
},
[336158] = {
["npcID"] = 172217,
},
[385310] = {
["source"] = "Primalist Shockcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 195119,
},
[422172] = {
["encounterName"] = "Smolderon",
["source"] = "Smolderon",
["npcID"] = 200927,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2824,
},
[409885] = {
["source"] = "Highmountain Seer",
["event"] = "SPELL_CAST_START",
["npcID"] = 201578,
},
[373024] = {
["source"] = "Brackenhide Shaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 186220,
},
[360737] = {
["npcID"] = 181116,
},
[128078] = {
["event"] = "SPELL_CAST_START",
["source"] = "Adjunct Pivvika",
["npcID"] = 63104,
},
[145563] = {
["source"] = "Kor'kron Arcweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 71771,
},
[385313] = {
["source"] = "Primalist Shockcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 195119,
},
[145564] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'kron Arcweaver",
["npcID"] = 71771,
},
[418081] = {
["source"] = "Felhound",
["event"] = "SPELL_CAST_START",
["npcID"] = 206090,
},
[426273] = {
["event"] = "SPELL_CAST_START",
["source"] = "Strange Winged Goblin",
["npcID"] = 211945,
},
[128079] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadspinner Tender",
["npcID"] = 61981,
},
[303401] = {
["npcID"] = 155275,
},
[389412] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nezascar the Sightless",
["npcID"] = 196535,
},
[168092] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Life Warden Gola",
["npcID"] = 83892,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1757,
},
[119888] = {
["encounterName"] = "Sha of Fear",
["source"] = "Cheng Kang",
["encounterID"] = 1431,
["event"] = "SPELL_CAST_START",
["npcID"] = 61042,
},
[258199] = {
["source"] = "Irontide Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 130400,
},
[145566] = {
["encounterName"] = "General Nazgrim",
["source"] = "Kor'kron Ironblade",
["npcID"] = 71770,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1603,
},
[184476] = {
["encounterName"] = "Hellfire High Council",
["source"] = "Dia Darkwhisper",
["npcID"] = 92144,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1798,
},
[126032] = {
["source"] = "Cracklefang",
["event"] = "SPELL_CAST_START",
["npcID"] = 58768,
},
[393511] = {
["source"] = "Cauldronbearer Blakor",
["event"] = "SPELL_CAST_START",
["npcID"] = 186783,
},
["265523"] = {
["source"] = "Bloodsworn Defiler",
["event"] = "SPELL_CAST_START",
["npcID"] = 133912,
},
[373034] = {
["source"] = "Mudfin Mudrunner",
["event"] = "SPELL_CAST_START",
["npcID"] = 186690,
},
[118865] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursed Jade",
["npcID"] = 61174,
},
[145568] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overlord Runthak",
["npcID"] = 72191,
},
[258202] = {
["source"] = "Awakened Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 128302,
},
[145569] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hellscream Demolisher",
["npcID"] = 72194,
},
[207006] = {
["encounterName"] = "Gul'dan",
["source"] = "Inquisitor Vethriz",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104536,
},
[125010] = {
["event"] = "SPELL_CAST_START",
["source"] = "Adjunct Tzikzi",
["npcID"] = 62076,
},
[389423] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thieving Conjurer",
["npcID"] = 196388,
},
[172193] = {
["npcID"] = 172589,
},
[393520] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ceeqa the Peacetaker",
["npcID"] = 188708,
},
[332084] = {
["npcID"] = 167965,
},
["392640"] = {
["source"] = "Thunderhead",
["event"] = "SPELL_CAST_START",
["npcID"] = 197698,
},
[393523] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cracktooth",
["npcID"] = 187528,
},
[340279] = {
["npcID"] = 173714,
},
[373046] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Melidrussa Chillworn",
["encounterID"] = 2609,
["event"] = "SPELL_CAST_START",
["npcID"] = 188252,
},
[393525] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ceeqa the Peacetaker",
["npcID"] = 188708,
},
[368951] = {
["encounterName"] = "Halondrus the Reclaimer",
["encounterID"] = 2529,
["npcID"] = 180906,
},
[389430] = {
["source"] = "Unleashed Storm",
["event"] = "SPELL_CAST_START",
["npcID"] = 195846,
},
[389431] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bazual",
["npcID"] = 193532,
},
[393527] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cracktooth",
["npcID"] = 187528,
},
[303421] = {
["npcID"] = 155688,
},
[356666] = {
["npcID"] = 179892,
},
[198820] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Latosius",
["encounterID"] = 1835,
["event"] = "SPELL_CAST_START",
["npcID"] = 98970,
},
[389433] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darktooth Spirit-Caller",
["npcID"] = 195267,
},
[295231] = {
["npcID"] = 144574,
},
[373051] = {
["source"] = "Mudfin Salamancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 186669,
},
[215204] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Vigilant Duskwatch",
["encounterID"] = 1868,
["event"] = "SPELL_CAST_START",
["npcID"] = 104918,
},
[385339] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Maruuk",
["encounterID"] = 2581,
["event"] = "SPELL_CAST_START",
["npcID"] = 186338,
},
[389435] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darktooth Spirit-Caller",
["npcID"] = 195267,
},
["395427"] = {
["source"] = "Overseer Lahar",
["event"] = "SPELL_CAST_START",
["npcID"] = 189235,
},
[385341] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Construct",
["npcID"] = 195335,
},
[360767] = {
["npcID"] = 181115,
},
[241828] = {
["npcID"] = 114804,
},
[405821] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[328002] = {
["npcID"] = 168574,
},
[239781] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ghostly Acolyte",
["npcID"] = 120194,
},
[385344] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Construct",
["npcID"] = 195335,
},
[377154] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ripsaw the Stalker",
["npcID"] = 193153,
},
[373059] = {
["encounterName"] = "The Primal Council",
["source"] = "Kadros Icewrath",
["encounterID"] = 2590,
["event"] = "SPELL_CAST_START",
["npcID"] = 187771,
},
[409921] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Commander",
["npcID"] = 202109,
},
[340294] = {
["npcID"] = 162727,
},
[393539] = {
["event"] = "SPELL_CAST_START",
["source"] = "Champion Choruk",
["npcID"] = 186592,
},
[393540] = {
["source"] = "Zhurtan the Riverboiler",
["event"] = "SPELL_CAST_START",
["npcID"] = 188687,
},
[360775] = {
["npcID"] = 182363,
},
[143534] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunwalker Chagon",
["npcID"] = 67548,
},
[389446] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Nullification Device",
["npcID"] = 196712,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2615,
},
[385351] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Construct",
["npcID"] = 195335,
},
[32024] = {
["isChanneled"] = true,
["source"] = "Spiritbinder Cha'lat",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 69254,
},
[176301] = {
["source"] = "Everbloom Waterspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 88261,
},
[360778] = {
["npcID"] = 181116,
},
[418119] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aqir Destroyer",
["npcID"] = 207912,
},
[340300] = {
["npcID"] = 173720,
},
[141488] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthborn Hatred",
["npcID"] = 70822,
},
[340301] = {
["event"] = "SPELL_CAST_START",
["source"] = "Evolved Sample",
["npcID"] = 202651,
},
[418121] = {
["source"] = "Klaxxi Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 207923,
},
[9613] = {
["source"] = "Skeletal Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 10390,
},
[393547] = {
["source"] = "Kraunot",
["event"] = "SPELL_CAST_START",
["npcID"] = 186401,
},
[409931] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Commander",
["npcID"] = 202109,
},
[340304] = {
["npcID"] = 173720,
},
[377166] = {
["encounterName"] = "Terros",
["source"] = "Terros",
["encounterID"] = 2639,
["event"] = "SPELL_CAST_START",
["npcID"] = 190496,
},
[340305] = {
["npcID"] = 173720,
},
[418125] = {
["source"] = "Varian Wrynn",
["event"] = "SPELL_CAST_START",
["npcID"] = 205308,
},
[356690] = {
["npcID"] = 177135,
},
[344403] = {
["npcID"] = 175012,
},
[344404] = {
["npcID"] = 175012,
},
[35377] = {
["npcID"] = 59021,
},
[198833] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Latosius",
["encounterID"] = 1835,
["event"] = "SPELL_CAST_START",
["npcID"] = 98970,
},
[319831] = {
["npcID"] = 172401,
},
[414035] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ebyssian",
["npcID"] = 199144,
},
[368983] = {
["npcID"] = 191378,
},
[196787] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fel-Infused Fury",
["npcID"] = 99956,
},
[368984] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Flameshatter",
["npcID"] = 191136,
},
[137399] = {
["encounterName"] = "Jin'rokh the Breaker",
["source"] = "Jin'rokh the Breaker",
["npcID"] = 69465,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1577,
},
[393559] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gethrel the South Wind",
["npcID"] = 193848,
},
[414038] = {
["source"] = "Aquifon",
["event"] = "SPELL_CAST_START",
["npcID"] = 203468,
},
[418134] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zal'kir the Chosen",
["npcID"] = 205865,
},
[340315] = {
["npcID"] = 157309,
},
[364891] = {
["npcID"] = 183737,
},
[414041] = {
["source"] = "Goblin Shredder",
["event"] = "SPELL_CAST_START",
["npcID"] = 200964,
},
[418137] = {
["source"] = "Varian Wrynn",
["event"] = "SPELL_CAST_START",
["npcID"] = 205308,
},
[405850] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Destroyer",
["npcID"] = 201753,
},
[227508] = {
["encounterName"] = "Maiden of Virtue",
["encounterID"] = 1954,
["npcID"] = 113971,
},
[332128] = {
["npcID"] = 170419,
},
[368990] = {
["encounterName"] = "Emberon",
["source"] = "Emberon",
["encounterID"] = 2558,
["event"] = "SPELL_CAST_START",
["npcID"] = 184422,
},
[373087] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Blazebound Firestorm",
["encounterID"] = 2606,
["event"] = "SPELL_CAST_START",
["npcID"] = 189886,
},
[348513] = {
["encounterName"] = "Painsmith Raznal",
["encounterID"] = 2430,
["npcID"] = 176523,
},
[319843] = {
["npcID"] = 173996,
},
[381280] = {
["source"] = "Uktulut Trainee",
["event"] = "SPELL_CAST_START",
["npcID"] = 193204,
},
[229558] = {
["npcID"] = 115402,
},
[336228] = {
["npcID"] = 170694,
},
[274792] = {
["npcID"] = 140149,
},
[393569] = {
["isChanneled"] = true,
["source"] = "Broodguardian Ziruss",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 198214,
},
[6535] = {
["npcID"] = 3273,
},
[389474] = {
["npcID"] = 190904,
},
[364900] = {
["npcID"] = 183737,
},
[323943] = {
["encounterName"] = "Devos, Paragon of Loyalty",
["npcID"] = 162061,
["encounterID"] = 2359,
},
[113760] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fragrant Lotus",
["npcID"] = 56472,
},
[389477] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rimebound Sorcerer",
["npcID"] = 200758,
},
[389478] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darktooth Spirit-Caller",
["npcID"] = 195267,
},
[147646] = {
["npcID"] = 72807,
},
[385383] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge-Keep Overseer",
["npcID"] = 192699,
},
[128096] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vor'thik Dreadsworn",
["npcID"] = 62813,
},
[79971] = {
["source"] = "Gavinrad the Cruel",
["event"] = "SPELL_CAST_START",
["npcID"] = 93951,
},
[147647] = {
["source"] = "Harbinger of Y'Shaarj",
["event"] = "SPELL_CAST_START",
["npcID"] = 73452,
},
[33844] = {
["npcID"] = 81870,
},
[385386] = {
["event"] = "SPELL_CAST_START",
["source"] = "Menial Attendant",
["npcID"] = 192702,
},
[418153] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cinderclaw Stalker",
["npcID"] = 207084,
},
[307569] = {
["encounterName"] = "The Hivemind",
["source"] = "Ka'zir",
["npcID"] = 157253,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2333,
},
[295282] = {
["npcID"] = 154033,
},
[405868] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invoq",
["npcID"] = 203627,
},
[295283] = {
["npcID"] = 154033,
},
[315762] = {
["encounterName"] = "Vexiona",
["source"] = "Shadow of Vexiona",
["npcID"] = 162308,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2336,
},
[385390] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge-Keep Overseer",
["npcID"] = 192699,
},
[393582] = {
["source"] = "Cindershard Igniter",
["event"] = "SPELL_CAST_START",
["npcID"] = 198382,
},
[389487] = {
["source"] = "Lookout Mordren",
["event"] = "SPELL_CAST_START",
["npcID"] = 193668,
},
[128098] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vor'thik Fear-Shaper",
["npcID"] = 62814,
},
[405871] = {
["source"] = "Arcantrix",
["event"] = "SPELL_CAST_START",
["npcID"] = 200737,
},
[393584] = {
["source"] = "Horned Armoredon",
["event"] = "SPELL_CAST_START",
["npcID"] = 190339,
},
["386546"] = {
["source"] = "Arcane Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 186741,
},
[418159] = {
["source"] = "Varian Wrynn",
["event"] = "SPELL_CAST_START",
["npcID"] = 205308,
},
[229567] = {
["npcID"] = 115407,
},
[418161] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kirkessen the Zealous",
["npcID"] = 207821,
},
[377204] = {
["encounterName"] = "Warlord Sargha",
["source"] = "Warlord Sargha",
["npcID"] = 189901,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2611,
},
[128099] = {
["source"] = "Manifestation of Pride",
["event"] = "SPELL_CAST_START",
["npcID"] = 72280,
},
[113764] = {
["encounterName"] = "Brother Korloff",
["source"] = "Brother Korloff",
["npcID"] = 59223,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1424,
},
[393588] = {
["isChanneled"] = true,
["source"] = "Broodguardian Ziruss",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 198214,
},
[200898] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Inquisitor Tormentorum",
["npcID"] = 96015,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[295291] = {
["npcID"] = 154033,
},
[250048] = {
["encounterName"] = "The Defense of Eonar",
["source"] = "Essence of Eonar",
["npcID"] = 122500,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2075,
},
[389495] = {
["source"] = "Terillod the Devout",
["event"] = "SPELL_CAST_START",
["npcID"] = 193171,
},
[315772] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "N'Zoth the Corruptor",
["npcID"] = 158041,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[389496] = {
["source"] = "Liskanoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 193533,
},
[393592] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gethrel the South Wind",
["npcID"] = 193848,
},
[332156] = {
["npcID"] = 167963,
},
[389497] = {
["source"] = "Eternal Sand",
["event"] = "SPELL_CAST_START",
["npcID"] = 187475,
},
[133321] = {
["source"] = "Shieldwall Rifleman",
["event"] = "SPELL_CAST_START",
["npcID"] = 67297,
},
[250050] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["npcID"] = 122968,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2087,
},
[139465] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Ancestor",
["npcID"] = 69237,
},
[336257] = {
["npcID"] = 164351,
},
[260291] = {
["source"] = "Bladeguard Elite",
["event"] = "SPELL_CAST_START",
["npcID"] = 130451,
},
[260292] = {
["encounterName"] = "Cragmaw the Infested",
["source"] = "Cragmaw the Infested",
["npcID"] = 131817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2118,
},
[278919] = {
["npcID"] = 170788,
},
[389505] = {
["source"] = "Terillod the Devout",
["event"] = "SPELL_CAST_START",
["npcID"] = 193171,
},
[360835] = {
["npcID"] = 179006,
},
[332165] = {
["npcID"] = 170414,
},
[295304] = {
["npcID"] = 154033,
},
["200642"] = {
["npcID"] = 95771,
},
[369028] = {
["npcID"] = 185823,
},
[153804] = {
["encounterName"] = "Bonemaw",
["source"] = "Bonemaw",
["encounterID"] = 1679,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 75452,
},
[215241] = {
["source"] = "Duskwatch Executor",
["event"] = "SPELL_CAST_START",
["npcID"] = 115595,
},
[418180] = {
["source"] = "Glorious Vanguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 208670,
},
[227529] = {
["npcID"] = 114334,
},
[393607] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodclaw",
["npcID"] = 187553,
},
[303502] = {
["npcID"] = 155273,
},
[393609] = {
["event"] = "SPELL_CAST_START",
["source"] = "Krojek The Shoreprowler",
["npcID"] = 187645,
},
[389514] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bazual",
["npcID"] = 193532,
},
[385419] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge-Keep Custodian",
["npcID"] = 192703,
},
[389515] = {
["source"] = "Shiverweb Creeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 185811,
},
[360845] = {
["encounterName"] = "Prototype Pantheon",
["encounterID"] = 2544,
["npcID"] = 181551,
},
[364942] = {
["encounterName"] = "The Jailer",
["npcID"] = 180990,
["encounterID"] = 2537,
},
[418187] = {
["encounterName"] = "Council of Dreams",
["source"] = "Urctos",
["npcID"] = 208363,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[344464] = {
["npcID"] = 166398,
},
[418188] = {
["source"] = "Shackled Flames of the Betrayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 207815,
},
[389518] = {
["source"] = "Koroleth",
["event"] = "SPELL_CAST_START",
["npcID"] = 188180,
},
[137427] = {
["npcID"] = 170031,
},
[393615] = {
["event"] = "SPELL_CAST_START",
["source"] = "Huntmaster Amaa",
["npcID"] = 188715,
},
[111723] = {
["encounterName"] = "Raigonn",
["npcID"] = 56877,
["encounterID"] = 1419,
},
[328084] = {
["npcID"] = 168240,
},
[332181] = {
["npcID"] = 170418,
},
[418192] = {
["source"] = "Shackled Flames of the Betrayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 207815,
},
[405905] = {
["event"] = "SPELL_CAST_START",
["source"] = "Amniotic Ooze",
["npcID"] = 203072,
},
[295320] = {
["npcID"] = 154033,
},
[401810] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[348566] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 180159,
["encounterID"] = 2440,
},
[303513] = {
["npcID"] = 155277,
},
[340375] = {
["npcID"] = 168148,
},
[344471] = {
["npcID"] = 170634,
},
[352663] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[315802] = {
["npcID"] = 150959,
},
[319898] = {
["npcID"] = 168022,
},
[30493] = {
["npcID"] = 36660,
},
[360856] = {
["npcID"] = 185314,
},
[15503] = {
["encounterName"] = "Priestess Delrissa",
["encounterID"] = 1895,
["npcID"] = 24553,
},
[369049] = {
["encounterName"] = "Emberon",
["source"] = "Vault Keeper",
["encounterID"] = 2558,
["event"] = "SPELL_CAST_START",
["npcID"] = 186107,
},
[369050] = {
["source"] = "Nokhud Storm Adept",
["event"] = "SPELL_CAST_START",
["npcID"] = 187149,
},
[360859] = {
["npcID"] = 181047,
},
[418200] = {
["source"] = "Infinite Riftmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 208698,
},
[356764] = {
["npcID"] = 177878,
},
[328094] = {
["npcID"] = 168627,
},
[405914] = {
["source"] = "Shadowflame Amalgamation",
["event"] = "SPELL_CAST_START",
["npcID"] = 201934,
},
[418202] = {
["source"] = "Infinite Riftmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 208698,
},
[81008] = {
["npcID"] = 159323,
},
[360863] = {
["npcID"] = 183249,
},
["257899"] = {
["source"] = "Irontide Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 130012,
},
[369055] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Crustshaper",
["npcID"] = 186638,
},
[389534] = {
["event"] = "SPELL_CAST_START",
["source"] = "Korthrox the Destroyer",
["npcID"] = 183422,
},
[295332] = {
["encounterName"] = "Abyssal Commander Sivara",
["npcID"] = 151881,
["encounterID"] = 2298,
},
[397726] = {
["source"] = "Shrieking Whelp",
["event"] = "SPELL_CAST_START",
["npcID"] = 188100,
},
[434589] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overfiend",
["npcID"] = 217429,
},
[227542] = {
["encounterName"] = "Moroes",
["encounterID"] = 1961,
["npcID"] = 114317,
},
["257732"] = {
["source"] = "Irontide Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 129602,
},
[332196] = {
["npcID"] = 167963,
},
[397729] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glakis, Winter's Wrath",
["npcID"] = 199502,
},
[385442] = {
["encounterName"] = "Gulping Goliath",
["source"] = "Gulping Goliath",
["npcID"] = 189722,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2616,
},
[227543] = {
["encounterName"] = "Opera Hall",
["encounterID"] = 1957,
["npcID"] = 114284,
},
[393634] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rakkesh of the Flow",
["npcID"] = 193849,
},
[111728] = {
["encounterName"] = "Raigonn",
["source"] = "Raigonn",
["npcID"] = 56877,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1419,
},
[369061] = {
["encounterName"] = "Emberon",
["source"] = "Emberon",
["encounterID"] = 2558,
["event"] = "SPELL_CAST_START",
["npcID"] = 184422,
},
[410019] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Thadrion",
["encounterID"] = 2693,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 200913,
},
[405924] = {
["event"] = "SPELL_CAST_START",
["source"] = "Krono Sandtongue",
["npcID"] = 205622,
},
[227545] = {
["encounterName"] = "Moroes",
["npcID"] = 114316,
["encounterID"] = 1961,
},
[303532] = {
["npcID"] = 155275,
},
[299438] = {
["npcID"] = 150249,
},
[360875] = {
["npcID"] = 179006,
},
[430503] = {
["source"] = "Doomshadow",
["event"] = "SPELL_CAST_START",
["npcID"] = 208029,
},
[405929] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spellsworn Crecheguard",
["npcID"] = 203368,
},
[360876] = {
["npcID"] = 185755,
},
[54331] = {
["source"] = "Sludge Belcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 16029,
},
[381356] = {
["event"] = "SPELL_CAST_START",
["source"] = "Luddy Quicksnap",
["npcID"] = 193292,
},
[164064] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaz Endsky",
["npcID"] = 87690,
},
[381357] = {
["event"] = "SPELL_CAST_START",
["source"] = "Clearwater Ottuk",
["npcID"] = 192854,
},
[344496] = {
["encounterName"] = "Stone Legion Generals",
["npcID"] = 168113,
["encounterID"] = 2417,
},
[119922] = {
["encounterName"] = "Trial of the King",
["source"] = "Kuai the Brute",
["encounterID"] = 1442,
["event"] = "SPELL_CAST_START",
["npcID"] = 61442,
},
[120946] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sik'thik Amber-Weaver",
["npcID"] = 61929,
},
[147682] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ordon Oathguard",
["npcID"] = 72892,
},
[124018] = {
["encounterName"] = "Imperial Vizier Zor'lok",
["source"] = "Imperial Vizier Zor'lok",
["npcID"] = 62980,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1507,
},
[369072] = {
["source"] = "Plainswalker Bull",
["event"] = "SPELL_CAST_START",
["npcID"] = 187937,
},
[418222] = {
["source"] = "Gillidan",
["event"] = "SPELL_CAST_START",
["npcID"] = 205036,
},
[364978] = {
["encounterName"] = "Halondrus the Reclaimer",
["encounterID"] = 2529,
["npcID"] = 181047,
},
[340404] = {
["npcID"] = 168147,
},
[328117] = {
["encounterName"] = "Sire Denathrius",
["npcID"] = 167406,
["encounterID"] = 2407,
},
[364979] = {
["encounterName"] = "Halondrus the Reclaimer",
["encounterID"] = 2529,
["npcID"] = 180906,
},
[89205] = {
["source"] = "Dominance Sniper",
["event"] = "SPELL_CAST_START",
["npcID"] = 67362,
},
[418225] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vorus'arak",
["npcID"] = 205862,
},
[256222] = {
["source"] = "Mother Goat",
["event"] = "SPELL_CAST_START",
["npcID"] = 136939,
},
[418226] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vorus'arak",
["npcID"] = 205862,
},
[377270] = {
["source"] = "Mesmerized Healer",
["event"] = "SPELL_CAST_START",
["npcID"] = 195961,
},
[385462] = {
["source"] = "Rellen, The Learned",
["event"] = "SPELL_CAST_START",
["npcID"] = 190949,
},
[389560] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rimebound Reaver",
["npcID"] = 200756,
},
[364986] = {
["npcID"] = 181360,
},
[303550] = {
["encounterName"] = "Abyssal Commander Sivara",
["npcID"] = 155275,
["encounterID"] = 2298,
},
[340412] = {
["source"] = "Forgotten Research",
["event"] = "SPELL_CAST_START",
["npcID"] = 202446,
},
[430519] = {
["isChanneled"] = true,
["source"] = "Doomshadow",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208029,
},
[389562] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Great Shellkhan",
["npcID"] = 191305,
},
[147688] = {
["encounterName"] = "Galakras",
["source"] = "Lieutenant Krugruk",
["npcID"] = 72357,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1622,
},
[418233] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vorus'arak",
["npcID"] = 205862,
},
[340414] = {
["source"] = "Forgotten Research",
["event"] = "SPELL_CAST_START",
["npcID"] = 202446,
},
[299457] = {
["npcID"] = 151832,
},
[389564] = {
["source"] = "Steamgill",
["event"] = "SPELL_CAST_START",
["npcID"] = 193123,
},
[377277] = {
["event"] = "SPELL_CAST_START",
["source"] = "Volethi",
["npcID"] = 200727,
},
[139498] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corpse Spider",
["npcID"] = 68248,
},
["404896"] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Eternal Blaze",
["encounterID"] = 2687,
["event"] = "SPELL_CAST_START",
["npcID"] = 201773,
},
[299460] = {
["npcID"] = 150250,
},
[418237] = {
["event"] = "SPELL_CAST_START",
["source"] = "Prophet Skitra",
["npcID"] = 208491,
},
[373184] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dying Mage",
["npcID"] = 189769,
},
[287174] = {
["source"] = "Rustfeather",
["event"] = "SPELL_CAST_START",
["npcID"] = 152182,
},
[114807] = {
["encounterName"] = "Brother Korloff",
["source"] = "Brother Korloff",
["npcID"] = 59223,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1424,
},
[198888] = {
["source"] = "Storm Drake",
["event"] = "SPELL_CAST_START",
["npcID"] = 97068,
},
[319941] = {
["encounterName"] = "Echelon",
["encounterID"] = 2380,
["npcID"] = 164185,
},
[118903] = {
["source"] = "Glintrok Hexxer",
["event"] = "SPELL_CAST_START",
["npcID"] = 61216,
},
[157931] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Magus",
["npcID"] = 76263,
},
[356804] = {
["npcID"] = 178578,
},
[418241] = {
["event"] = "SPELL_CAST_START",
["source"] = "Prophet Skitra",
["npcID"] = 208491,
},
[389572] = {
["source"] = "Time-Lost Devilsaur",
["event"] = "SPELL_CAST_START",
["npcID"] = 187262,
},
[229608] = {
["npcID"] = 115486,
},
[88186] = {
["event"] = "SPELL_CAST_START",
["source"] = "Empyrean Assassin",
["npcID"] = 45922,
},
[178412] = {
["npcID"] = 83578,
},
[147694] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursed Hozen Swabby",
["npcID"] = 71920,
},
[332234] = {
["npcID"] = 167967,
},
[198892] = {
["source"] = "Storm Drake",
["event"] = "SPELL_CAST_START",
["npcID"] = 97068,
},
[373194] = {
["source"] = "Windyfin Windbringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 187432,
},
[118905] = {
["npcID"] = 61245,
},
[356812] = {
["npcID"] = 180286,
},
[229611] = {
["npcID"] = 115486,
},
[405962] = {
["source"] = "Bronogg the Bully",
["event"] = "SPELL_CAST_START",
["npcID"] = 203386,
},
[332239] = {
["npcID"] = 170418,
},
[401867] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Obsidian Guard",
["npcID"] = 200836,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[299474] = {
["npcID"] = 150154,
},
[418251] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zal'kir the Chosen",
["npcID"] = 205865,
},
[137458] = {
["encounterName"] = "Horridon",
["source"] = "Horridon",
["npcID"] = 68476,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1575,
},
[118906] = {
["isChanneled"] = true,
["source"] = "Dojani Reclaimer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 58117,
},
[299475] = {
["npcID"] = 150254,
},
[328146] = {
["encounterName"] = "Blightbone",
["encounterID"] = 2387,
["npcID"] = 164702,
},
[365008] = {
["encounterName"] = "Anduin Wrynn",
["encounterID"] = 2546,
["npcID"] = 183033,
},
[389583] = {
["source"] = "Arcane Manipulator",
["event"] = "SPELL_CAST_START",
["npcID"] = 188172,
},
[365009] = {
["npcID"] = 184409,
},
["266106"] = {
["source"] = "Feral Bloodswarmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 133835,
},
[373201] = {
["source"] = "Windyfin Skybasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 187431,
},
[319957] = {
["npcID"] = 170553,
},
[369107] = {
["source"] = "Ancient Construct",
["event"] = "SPELL_CAST_START",
["npcID"] = 200286,
},
[128123] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oracle Hiss'ir",
["npcID"] = 63998,
},
[418258] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imperial Vizier Zor'lok",
["npcID"] = 208500,
},
[227568] = {
["encounterName"] = "Opera Hall",
["npcID"] = 114261,
["encounterID"] = 1957,
},
[279003] = {
["npcID"] = 142082,
},
[369110] = {
["encounterName"] = "Emberon",
["source"] = "Emberon",
["encounterID"] = 2558,
["event"] = "SPELL_CAST_START",
["npcID"] = 184422,
},
[393686] = {
["source"] = "Turboris",
["event"] = "SPELL_CAST_START",
["npcID"] = 187886,
},
[250096] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["npcID"] = 122968,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2087,
},
[397783] = {
["encounterName"] = "Wise Mari",
["source"] = "Wise Mari",
["npcID"] = 56448,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1418,
},
[147703] = {
["npcID"] = 72895,
},
[319966] = {
["npcID"] = 167078,
},
[389594] = {
["event"] = "SPELL_CAST_START",
["source"] = "Horace \"Scalding\" Stern",
["npcID"] = 186430,
},
[147704] = {
["npcID"] = 72895,
},
[340446] = {
["npcID"] = 167898,
},
[174328] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulbinder Nyami",
["npcID"] = 76177,
},
[145658] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomlord",
["npcID"] = 72564,
},
[418269] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imperial Vizier Zor'lok",
["npcID"] = 208500,
},
[344546] = {
["npcID"] = 162880,
},
[381408] = {
["source"] = "Shiverweb Crawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 192591,
},
[393696] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vadne Bleakheart",
["npcID"] = 195764,
},
[365026] = {
["npcID"] = 182318,
},
[227575] = {
["encounterName"] = "Moroes",
["npcID"] = 114316,
["encounterID"] = 1961,
},
[54338] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mad Scientist",
["npcID"] = 16020,
},
[164092] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jackson Bajheera",
["npcID"] = 80484,
},
[348648] = {
["npcID"] = 176520,
},
[88194] = {
["event"] = "SPELL_CAST_START",
["source"] = "Young Storm Dragon",
["npcID"] = 45919,
},
[328170] = {
["npcID"] = 162057,
},
[125056] = {
["npcID"] = 165189,
},
[365033] = {
["encounterName"] = "The Jailer",
["npcID"] = 180990,
["encounterID"] = 2537,
},
[369129] = {
["event"] = "SPELL_CAST_START",
["source"] = "Modak Flamespit",
["npcID"] = 186509,
},
[299502] = {
["npcID"] = 155094,
},
[33860] = {
["source"] = "Bloodhilt Battlemage",
["event"] = "SPELL_CAST_START",
["npcID"] = 68639,
},
[356843] = {
["npcID"] = 179388,
},
[414184] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 198933,
},
[241914] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chief Alchemist Munculus",
["npcID"] = 127376,
},
[135425] = {
["event"] = "SPELL_CAST_START",
["source"] = "Horde Hunter",
["npcID"] = 68334,
},
[324079] = {
["encounterName"] = "Mordretha",
["encounterID"] = 2404,
["npcID"] = 165946,
},
["372683"] = {
["source"] = "Infused Whelp",
["event"] = "SPELL_CAST_START",
["npcID"] = 187894,
},
[332272] = {
["npcID"] = 180028,
},
[385517] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotbow Sentry",
["npcID"] = 187021,
},
[328177] = {
["npcID"] = 168572,
},
[414189] = {
["source"] = "Krrrn Trr Pyromancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 205821,
},
[11538] = {
["npcID"] = 113542,
},
[340467] = {
["npcID"] = 173756,
},
[328180] = {
["npcID"] = 168627,
},
[414192] = {
["source"] = "Krrrn Trr Cryomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 204451,
},
[365044] = {
["npcID"] = 182318,
},
[356853] = {
["npcID"] = 178577,
},
[360949] = {
["npcID"] = 182430,
},
[381430] = {
["npcID"] = 190388,
},
[319994] = {
["npcID"] = 170893,
},
[393718] = {
["event"] = "SPELL_CAST_START",
["source"] = "Huntmaster Amaa",
["npcID"] = 188715,
},
[340474] = {
["npcID"] = 167503,
},
[164102] = {
["npcID"] = 81235,
},
["400430"] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[319997] = {
["npcID"] = 164510,
},
[377338] = {
["source"] = "Aqualing",
["event"] = "SPELL_CAST_START",
["npcID"] = 190406,
},
[147720] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ordon Fire-Watcher",
["npcID"] = 72894,
},
[385531] = {
["encounterName"] = "Gulping Goliath",
["source"] = "Gulping Goliath",
["npcID"] = 189722,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2616,
},
[295425] = {
["npcID"] = 154039,
},
[336383] = {
["npcID"] = 179768,
},
[377341] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aqua Rager",
["npcID"] = 190407,
},
[381438] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tormented Steam",
["npcID"] = 188696,
},
[303619] = {
["npcID"] = 155791,
},
[422396] = {
["source"] = "Speaker Nalridun",
["event"] = "SPELL_CAST_START",
["npcID"] = 208862,
},
[360960] = {
["encounterName"] = "Dausegne, the Fallen Oracle",
["encounterID"] = 2540,
["npcID"] = 181224,
},
[184584] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gorebound Crone",
["npcID"] = 93154,
},
[377344] = {
["source"] = "Territorial Eagle",
["event"] = "SPELL_CAST_START",
["npcID"] = 192329,
},
[299525] = {
["npcID"] = 150250,
},
[385536] = {
["isChanneled"] = true,
["source"] = "Primalist Flamedancer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 190206,
},
[162058] = {
["encounterName"] = "Skylord Tovra",
["encounterID"] = 1736,
["npcID"] = 80005,
},
[147723] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ordon Fire-Watcher",
["npcID"] = 72894,
},
[320005] = {
["npcID"] = 164477,
},
[274952] = {
["source"] = "Rohnkor",
["event"] = "SPELL_CAST_START",
["npcID"] = 128930,
},
[303623] = {
["npcID"] = 155763,
},
[200969] = {
["source"] = "King Tor",
["event"] = "SPELL_CAST_START",
["npcID"] = 97084,
},
[324103] = {
["npcID"] = 162133,
},
[393731] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flayfist",
["npcID"] = 187505,
},
[381444] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Rira Hackclaw",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186122,
},
[320008] = {
["encounterName"] = "The Manastorms",
["npcID"] = 164556,
["encounterID"] = 2394,
},
[227592] = {
["encounterName"] = "Shade of Medivh",
["encounterID"] = 1965,
["npcID"] = 114350,
},
[369158] = {
["npcID"] = 185841,
},
[303627] = {
["npcID"] = 155763,
},
[426500] = {
["source"] = "Gnarlroot",
["event"] = "SPELL_CAST_START",
["npcID"] = 81984,
},
[31012] = {
["encounterName"] = "Opera Hall",
["source"] = "Dorothee",
["event"] = "SPELL_CAST_START",
["npcID"] = 17535,
},
[295438] = {
["npcID"] = 144580,
},
[365067] = {
["npcID"] = 182318,
},
[328206] = {
["encounterName"] = "Echelon",
["encounterID"] = 2380,
["npcID"] = 164185,
},
[128137] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ilikkax",
["npcID"] = 62833,
},
[80012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pheary Sparkrocket",
["npcID"] = 88781,
},
[121994] = {
["encounterName"] = "Amber-Shaper Un'sok",
["source"] = "Amber-Shaper Un'sok",
["encounterID"] = 1499,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 62511,
},
[295444] = {
["encounterName"] = "Za'qul",
["npcID"] = 150859,
["encounterID"] = 2293,
},
[385551] = {
["encounterName"] = "Gulping Goliath",
["source"] = "Gulping Goliath",
["npcID"] = 189722,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2616,
},
[137491] = {
["encounterName"] = "Twin Empyreans",
["source"] = "Suen",
["npcID"] = 68904,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1560,
},
[360977] = {
["encounterName"] = "Halondrus the Reclaimer",
["encounterID"] = 2529,
["npcID"] = 180906,
},
[418318] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless One",
["npcID"] = 206463,
},
[162066] = {
["encounterName"] = "Skylord Tovra",
["encounterID"] = 1736,
["npcID"] = 80005,
},
[385553] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Stormseeker Acolyte",
["npcID"] = 194990,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2607,
},
[274968] = {
["npcID"] = 170414,
},
[422416] = {
["event"] = "SPELL_CAST_START",
["source"] = "Birchbramble",
["npcID"] = 209450,
},
[315927] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "N'Zoth the Corruptor",
["npcID"] = 158041,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[356885] = {
["npcID"] = 177833,
},
[274971] = {
["source"] = "Mala'kili",
["event"] = "SPELL_CAST_START",
["npcID"] = 128935,
},
[393748] = {
["event"] = "SPELL_CAST_START",
["source"] = "Krolkoth the Mountain",
["npcID"] = 197501,
},
[332313] = {
["encounterName"] = "Domina Venomblade",
["npcID"] = 164266,
["encounterID"] = 2385,
},
[385558] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Erkhart Stormvein",
["encounterID"] = 2623,
["event"] = "SPELL_CAST_START",
["npcID"] = 190485,
},
[356888] = {
["npcID"] = 177833,
},
[393750] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taresh",
["npcID"] = 188711,
},
[46153] = {
["encounterName"] = "Selin Fireheart",
["source"] = "Selin Fireheart",
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 24723,
},
[315932] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iron-Willed Enforcer",
["npcID"] = 162718,
},
[320028] = {
["npcID"] = 177545,
},
[393752] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vadne Bleakheart",
["npcID"] = 195764,
},
[426519] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["encounterID"] = 2708,
["event"] = "SPELL_CAST_START",
["npcID"] = 206172,
},
["387955"] = {
["source"] = "Ethereal Restorer",
["event"] = "SPELL_CAST_START",
["npcID"] = 196203,
},
[332318] = {
["encounterName"] = "Sludgefist",
["encounterID"] = 2399,
["npcID"] = 164407,
},
[418329] = {
["source"] = "Queen Angerboda",
["event"] = "SPELL_CAST_START",
["npcID"] = 207823,
},
[198934] = {
["source"] = "Valarjar Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 95834,
},
[381470] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Tricktotem",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186125,
},
[373279] = {
["npcID"] = 189988,
},
[426524] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Fiery Treant",
["npcID"] = 208459,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[385569] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["npcID"] = 189492,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2607,
},
[356901] = {
["npcID"] = 177004,
},
[418338] = {
["source"] = "Morchie",
["event"] = "SPELL_CAST_START",
["npcID"] = 205708,
},
[340519] = {
["npcID"] = 161857,
},
[442913] = {
["source"] = "Blind Blademaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 72131,
},
["198073"] = {
["encounterName"] = "Smashspite the Hateful",
["encounterID"] = 1834,
["npcID"] = 98949,
},
[442914] = {
["source"] = "Blind Blademaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 72131,
},
[332329] = {
["npcID"] = 170486,
},
[385574] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["npcID"] = 189492,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2607,
},
[377383] = {
["source"] = "Alpha Eagle",
["event"] = "SPELL_CAST_START",
["npcID"] = 192333,
},
[124048] = {
["source"] = "Osul Sharphorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 60647,
},
[361001] = {
["encounterName"] = "Vigilant Guardian",
["encounterID"] = 2512,
["npcID"] = 181850,
},
[369193] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Crustshaper",
["npcID"] = 186638,
},
[385578] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["encounterID"] = 2585,
["event"] = "SPELL_CAST_START",
["npcID"] = 186739,
},
[442919] = {
["source"] = "Blind Blademaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 72131,
},
[406058] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tentacle",
["npcID"] = 203406,
},
[332335] = {
["npcID"] = 170488,
},
[369197] = {
["source"] = "Dragonbane Firebinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 186599,
},
[393772] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hihveer",
["npcID"] = 188717,
},
[422443] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sickened Growth",
["npcID"] = 207926,
},
[324146] = {
["encounterName"] = "Ventunax",
["npcID"] = 162058,
["encounterID"] = 2356,
},
[356913] = {
["npcID"] = 177813,
},
[426541] = {
["event"] = "SPELL_CAST_START",
["source"] = "Runic Disciple",
["npcID"] = 131685,
},
[198944] = {
["source"] = "Valarjar Shieldmaiden",
["event"] = "SPELL_CAST_START",
["npcID"] = 95832,
},
[227615] = {
["encounterName"] = "Shade of Medivh",
["encounterID"] = 1965,
["npcID"] = 114350,
},
[168227] = {
["encounterName"] = "Skulloc, Son of Gruul",
["encounterID"] = 1754,
["npcID"] = 83612,
},
[80022] = {
["npcID"] = 42870,
},
[227616] = {
["encounterName"] = "Moroes",
["encounterID"] = 1961,
["npcID"] = 114319,
},
[393780] = {
["event"] = "SPELL_CAST_START",
["source"] = "Living Flame",
["npcID"] = 184693,
},
[365110] = {
["npcID"] = 183746,
},
[393781] = {
["source"] = "Flame Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 192764,
},
[389686] = {
["source"] = "Crystal Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 187160,
},
[361016] = {
["npcID"] = 181045,
},
[397878] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corrupt Living Water",
["npcID"] = 59873,
},
[393783] = {
["source"] = "Iskakx",
["event"] = "SPELL_CAST_START",
["npcID"] = 192761,
},
["374045"] = {
["source"] = "Containment Apparatus",
["event"] = "SPELL_CAST_START",
["npcID"] = 190342,
},
[303678] = {
["npcID"] = 155793,
},
[356923] = {
["npcID"] = 179890,
},
[377402] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infuser Sariya",
["npcID"] = 190405,
},
[397881] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corrupt Living Water",
["npcID"] = 59873,
},
[356924] = {
["npcID"] = 179890,
},
[328254] = {
["encounterName"] = "Sun King's Salvation",
["encounterID"] = 2402,
["npcID"] = 168700,
},
[320063] = {
["encounterName"] = "An Affront of Challengers",
["encounterID"] = 2391,
["npcID"] = 164451,
},
[393787] = {
["source"] = "Iskakx",
["event"] = "SPELL_CAST_START",
["npcID"] = 192761,
},
[258338] = {
["encounterName"] = "Council o' Captains",
["source"] = "Captain Raoul",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 126847,
},
[414267] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scalecommander Emberthal",
["npcID"] = 199141,
},
[361023] = {
["npcID"] = 181005,
},
[356928] = {
["npcID"] = 177128,
},
[361024] = {
["npcID"] = 183737,
},
[365120] = {
["encounterName"] = "Anduin Wrynn",
["encounterID"] = 2546,
["npcID"] = 181954,
},
[320067] = {
["npcID"] = 178944,
},
[356929] = {
["npcID"] = 179837,
},
[336451] = {
["npcID"] = 173943,
},
[130198] = {
["source"] = "Heavy Mook",
["event"] = "SPELL_CAST_START",
["npcID"] = 67399,
},
[397888] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Waterspeaker",
["npcID"] = 200126,
},
[320069] = {
["encounterName"] = "An Affront of Challengers",
["encounterID"] = 2391,
["npcID"] = 164451,
},
[393793] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hacklung",
["npcID"] = 187752,
},
[397889] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Waterspeaker",
["npcID"] = 200126,
},
[377411] = {
["source"] = "Nimblewing Striker",
["event"] = "SPELL_CAST_START",
["npcID"] = 192938,
},
[37967] = {
["npcID"] = 17871,
},
[397892] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imacu'tya",
["npcID"] = 104275,
},
[303690] = {
["npcID"] = 155764,
},
[381512] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Erkhart Stormvein",
["encounterID"] = 2623,
["event"] = "SPELL_CAST_START",
["npcID"] = 190485,
},
[352842] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 176532,
["encounterID"] = 2435,
},
[352843] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 176533,
["encounterID"] = 2435,
},
[397897] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jazshariu",
["npcID"] = 104273,
},
[145712] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Sri'thik Bombardier",
["npcID"] = 71385,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[123033] = {
["source"] = "Lao-Chin the Iron Belly",
["event"] = "SPELL_CAST_START",
["npcID"] = 62804,
},
["396073"] = {
["source"] = "The Nodding Tiger",
["event"] = "SPELL_CAST_START",
["npcID"] = 59544,
},
[356941] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 178081,
["encounterID"] = 2435,
},
[262739] = {
["source"] = "Overlord Gugyoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 137177,
},
[381516] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Erkhart Stormvein",
["npcID"] = 190485,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2623,
},
[356942] = {
["npcID"] = 179837,
},
[393804] = {
["source"] = "Whirglgurgl",
["event"] = "SPELL_CAST_START",
["npcID"] = 188860,
},
[381517] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Erkhart Stormvein",
["encounterID"] = 2623,
["event"] = "SPELL_CAST_START",
["npcID"] = 190485,
},
[320081] = {
["npcID"] = 170029,
},
[143666] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Iyyokuk the Lucid",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71160,
},
[373327] = {
["source"] = "Primal Flame",
["event"] = "SPELL_CAST_START",
["npcID"] = 187593,
},
[381519] = {
["source"] = "Tarasek Raider",
["event"] = "SPELL_CAST_START",
["npcID"] = 191047,
},
[23337] = {
["npcID"] = 4624,
},
[141619] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frostmane Bonechiller",
["npcID"] = 70465,
},
[373329] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[381521] = {
["source"] = "Summoned Downpour",
["event"] = "SPELL_CAST_START",
["npcID"] = 192462,
},
[340564] = {
["npcID"] = 169206,
},
[348756] = {
["encounterName"] = "Kel'Thuzad",
["npcID"] = 175559,
["encounterID"] = 2422,
},
[426576] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dream Seedling",
["npcID"] = 211339,
},
[75934] = {
["source"] = "Slovan",
["event"] = "SPELL_CAST_START",
["npcID"] = 58285,
},
[235823] = {
["npcID"] = 118489,
},
[393811] = {
["source"] = "Maiden of Diligence",
["event"] = "SPELL_CAST_START",
["npcID"] = 192718,
},
[141621] = {
["source"] = "Frost Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 70982,
},
[340567] = {
["npcID"] = 162741,
},
[393812] = {
["source"] = "Whirglgurgl",
["event"] = "SPELL_CAST_START",
["npcID"] = 188860,
},
[198962] = {
["source"] = "Valarjar Runecarver",
["event"] = "SPELL_CAST_START",
["npcID"] = 96664,
},
[356951] = {
["npcID"] = 177004,
},
[118940] = {
["encounterName"] = "Gekkan",
["source"] = "Glintrok Oracle",
["encounterID"] = 2129,
["event"] = "SPELL_CAST_START",
["npcID"] = 61339,
},
[15253] = {
["source"] = "Arcane Fiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 18429,
},
[166197] = {
["source"] = "Bloodmaul Bonecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 77995,
},
[235825] = {
["npcID"] = 118487,
},
[369241] = {
["source"] = "Searing Flame Harchek",
["event"] = "SPELL_CAST_START",
["npcID"] = 191476,
},
[196916] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lady Velandras Ravencrest",
["npcID"] = 98538,
},
[133432] = {
["npcID"] = 67671,
},
[356955] = {
["npcID"] = 176880,
},
[381530] = {
["source"] = "Nokhud Thunderfist",
["event"] = "SPELL_CAST_START",
["npcID"] = 193373,
},
[356956] = {
["npcID"] = 177573,
},
[377435] = {
["source"] = "Time-Lost Geomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 187265,
},
[397914] = {
["event"] = "SPELL_CAST_START",
["source"] = "Depraved Mistweaver",
["npcID"] = 200137,
},
[328287] = {
["npcID"] = 165265,
},
[111774] = {
["npcID"] = 58757,
},
[328288] = {
["npcID"] = 168718,
},
[389725] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bazual",
["npcID"] = 193532,
},
[381535] = {
["npcID"] = 190388,
},
[111775] = {
["encounterName"] = "Lilian Voss",
["npcID"] = 58722,
["encounterID"] = 1429,
},
[227638] = {
["encounterName"] = "Attumen the Huntsman",
["encounterID"] = 1960,
["npcID"] = 114262,
},
[414303] = {
["encounterName"] = "Manifested Timeways",
["source"] = "Manifested Timeways",
["npcID"] = 198996,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2667,
},
[365155] = {
["npcID"] = 183746,
},
[340581] = {
["npcID"] = 166263,
},
[235831] = {
["npcID"] = 118839,
},
[328295] = {
["npcID"] = 168718,
},
[239927] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zor'thaduun",
["npcID"] = 117648,
},
[131390] = {
["source"] = "Bellandra Felstorm",
["event"] = "SPELL_CAST_START",
["npcID"] = 66275,
},
[414307] = {
["encounterName"] = "Manifested Timeways",
["source"] = "Manifested Timeways",
["npcID"] = 198996,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2667,
},
[369254] = {
["npcID"] = 185886,
},
[356967] = {
["npcID"] = 180348,
},
[393830] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gragza the Dragon-Breaker",
["npcID"] = 191507,
},
[166205] = {
["source"] = "Bloodmaul Bonecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 77995,
},
[235833] = {
["npcID"] = 118491,
},
[158014] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gruffy",
["npcID"] = 193251,
},
[393832] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sturdy Gladehorn",
["npcID"] = 196655,
},
[406120] = {
["event"] = "SPELL_CAST_START",
["source"] = "Keeper Tyr",
["npcID"] = 198982,
},
[295536] = {
["encounterName"] = "HK-8 Aerial Oppression Unit",
["npcID"] = 150190,
["encounterID"] = 2291,
},
[340590] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Rootfingers",
["npcID"] = 172066,
},
[393835] = {
["source"] = "Shiverweb Cloaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 195397,
},
[397931] = {
["event"] = "SPELL_CAST_START",
["source"] = "Minion of Doubt",
["npcID"] = 57109,
},
[320114] = {
["encounterName"] = "Xav the Unfallen",
["encounterID"] = 2366,
["npcID"] = 162329,
},
[340593] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rootfingers",
["npcID"] = 172066,
},
[365168] = {
["npcID"] = 183398,
},
[46164] = {
["encounterName"] = "Kael'thas Sunstrider",
["encounterID"] = 1894,
["npcID"] = 24664,
},
[235837] = {
["npcID"] = 118492,
},
[221502] = {
["npcID"] = 108339,
},
[365169] = {
["encounterName"] = "The Jailer",
["npcID"] = 180990,
["encounterID"] = 2537,
},
[336499] = {
["encounterName"] = "Mistcaller",
["encounterID"] = 2392,
["npcID"] = 164501,
},
[227646] = {
["encounterName"] = "Moroes",
["encounterID"] = 1961,
["npcID"] = 114318,
},
[410223] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["encounterID"] = 2677,
["event"] = "SPELL_CAST_START",
["npcID"] = 204931,
},
[410225] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["encounterID"] = 2677,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 204931,
},
["200345"] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Risen Archer",
["npcID"] = 98275,
},
[373364] = {
["npcID"] = 189878,
},
[158020] = {
["source"] = "Avatar of Sacrifice",
["event"] = "SPELL_CAST_START",
["npcID"] = 151957,
},
[385652] = {
["source"] = "Awakened Crag",
["event"] = "SPELL_CAST_START",
["npcID"] = 195243,
},
[15254] = {
["encounterName"] = "Nexus-Prince Shaffar",
["source"] = "Ethereal Beacon",
["encounterID"] = 1899,
["event"] = "SPELL_CAST_START",
["npcID"] = 18431,
},
[320123] = {
["npcID"] = 168966,
},
[235841] = {
["npcID"] = 118448,
},
[422518] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["encounterID"] = 2677,
["event"] = "SPELL_CAST_START",
["npcID"] = 204931,
},
[229698] = {
["npcID"] = 115417,
},
[270976] = {
["event"] = "SPELL_CAST_START",
["source"] = "Briarwood Invader",
["npcID"] = 131373,
},
[373370] = {
["npcID"] = 189878,
},
[328318] = {
["npcID"] = 170598,
},
[316031] = {
["encounterName"] = "Shad'har the Insatiable",
["source"] = "Shad'har the Insatiable",
["npcID"] = 157231,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2335,
},
[135497] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dizzy",
["npcID"] = 68361,
},
[126117] = {
["npcID"] = 63532,
},
[410234] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Grommash Hellscream",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203678,
},
[414330] = {
["encounterName"] = "Iridikron",
["source"] = "Chromie",
["encounterID"] = 2669,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 204449,
},
[270979] = {
["event"] = "SPELL_CAST_START",
["source"] = "Briarwood Invader",
["npcID"] = 131373,
},
["397048"] = {
["source"] = "Frostbreath Arachnid",
["event"] = "SPELL_CAST_START",
["npcID"] = 199333,
},
[164168] = {
["npcID"] = 81212,
},
[410236] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Grommash Hellscream",
["encounterID"] = 2672,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 203678,
},
[361088] = {
["npcID"] = 182378,
},
[365185] = {
["npcID"] = 184659,
},
[418430] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felborn Imp",
["npcID"] = 210700,
},
[377473] = {
["encounterName"] = "Warlord Sargha",
["source"] = "Warlord Sargha",
["npcID"] = 189901,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2611,
},
[291463] = {
["npcID"] = 144568,
},
[381570] = {
["npcID"] = 190388,
},
[402050] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[393859] = {
["source"] = "Skittering Woodborer",
["event"] = "SPELL_CAST_START",
["npcID"] = 189750,
},
[418436] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felborn Imp",
["npcID"] = 210700,
},
[381575] = {
["source"] = "Rustpine Immolator",
["event"] = "SPELL_CAST_START",
["npcID"] = 187396,
},
[303756] = {
["npcID"] = 155810,
},
[328331] = {
["npcID"] = 168717,
},
[393864] = {
["source"] = "Trap-Layer Kerwal",
["event"] = "SPELL_CAST_START",
["npcID"] = 186516,
},
[320141] = {
["encounterName"] = "The Manastorms",
["npcID"] = 164556,
["encounterID"] = 2394,
},
[160079] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blackrock Forge Specialist",
["npcID"] = 79200,
},
[162127] = {
["npcID"] = 83729,
},
[410249] = {
["encounterName"] = "Tyr, the Infinite Keeper",
["source"] = "Tyr, the Infinite Keeper",
["encounterID"] = 2670,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 198998,
},
[332430] = {
["npcID"] = 177788,
},
[340622] = {
["npcID"] = 173798,
},
[381580] = {
["source"] = "Captain Reykal",
["event"] = "SPELL_CAST_START",
["npcID"] = 203355,
},
[320144] = {
["encounterName"] = "The Manastorms",
["npcID"] = 164555,
["encounterID"] = 2394,
},
[340623] = {
["npcID"] = 173798,
},
[377486] = {
["source"] = "Infinite Agent",
["event"] = "SPELL_CAST_START",
["npcID"] = 184335,
},
[381582] = {
["source"] = "Brutal Motivator",
["event"] = "SPELL_CAST_START",
["npcID"] = 184453,
},
[328338] = {
["npcID"] = 167493,
},
[135507] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Cleric Laresa",
["npcID"] = 67551,
},
[373392] = {
["source"] = "Nokhud Longbow",
["event"] = "SPELL_CAST_START",
["npcID"] = 192789,
},
[410254] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Grommash Hellscream",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203678,
},
[340627] = {
["npcID"] = 173798,
},
[114859] = {
["npcID"] = 59614,
},
[381585] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spellsworn Wingcatcher",
["npcID"] = 201369,
},
[135508] = {
["source"] = "Alliance Rootshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 68821,
},
[377490] = {
["source"] = "Thunderspine Crasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 191057,
},
[373395] = {
["source"] = "Nokhud Defender",
["event"] = "SPELL_CAST_START",
["npcID"] = 199717,
},
[229711] = {
["npcID"] = 115419,
},
[418449] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rune Bear",
["npcID"] = 207050,
},
[389779] = {
["npcID"] = 34545,
},
[340631] = {
["npcID"] = 173800,
},
[393876] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gragza the Dragon-Breaker",
["npcID"] = 191507,
},
[426643] = {
["source"] = "The Abominable Greench",
["event"] = "SPELL_CAST_START",
["npcID"] = 54499,
},
[406165] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[196947] = {
["encounterName"] = "Helya",
["source"] = "Helya",
["encounterID"] = 1824,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 96759,
},
[426645] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Ravager",
["npcID"] = 212673,
},
[381592] = {
["source"] = "Brutal Motivator",
["event"] = "SPELL_CAST_START",
["npcID"] = 184453,
},
[229714] = {
["npcID"] = 115419,
},
[381593] = {
["source"] = "Ebonstone Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 184300,
},
[393881] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nezascar the Sightless",
["npcID"] = 196535,
},
[119981] = {
["encounterName"] = "Trial of the King",
["source"] = "Ming the Cunning",
["encounterID"] = 1442,
["event"] = "SPELL_CAST_START",
["npcID"] = 61444,
},
[145752] = {
["source"] = "Spike Mine",
["event"] = "SPELL_CAST_START",
["npcID"] = 72656,
},
[365212] = {
["encounterName"] = "The Jailer",
["npcID"] = 180990,
["encounterID"] = 2537,
},
[135513] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Dark Cleric Laresa",
["npcID"] = 67551,
},
[377500] = {
["source"] = "Infinite Agent",
["event"] = "SPELL_CAST_START",
["npcID"] = 184335,
},
[373405] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["encounterID"] = 2592,
["event"] = "SPELL_CAST_START",
["npcID"] = 187967,
},
[229716] = {
["npcID"] = 115419,
},
[377502] = {
["source"] = "Time-Lost Murloc",
["event"] = "SPELL_CAST_START",
["npcID"] = 190584,
},
[365215] = {
["npcID"] = 178563,
},
[377503] = {
["source"] = "Rune Seal Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 187155,
},
[340642] = {
["npcID"] = 172078,
},
[275112] = {
["source"] = "Blisterhide",
["event"] = "SPELL_CAST_START",
["npcID"] = 197353,
},
[381602] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Kyrakka",
["encounterID"] = 2623,
["event"] = "SPELL_CAST_START",
["npcID"] = 190484,
},
[164187] = {
["npcID"] = 81407,
},
[91313] = {
["npcID"] = 48037,
},
[37979] = {
["npcID"] = 17730,
},
[340646] = {
["npcID"] = 173802,
},
[316072] = {
["npcID"] = 161258,
},
[320168] = {
["encounterName"] = "The Manastorms",
["npcID"] = 164555,
["encounterID"] = 2394,
},
[227672] = {
["encounterName"] = "Moroes",
["encounterID"] = 1961,
["npcID"] = 114321,
},
[147805] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rock Moss",
["npcID"] = 73157,
},
[381605] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Kyrakka",
["encounterID"] = 2623,
["event"] = "SPELL_CAST_START",
["npcID"] = 190484,
},
[320170] = {
["encounterName"] = "Amarth, The Harvester",
["encounterID"] = 2388,
["npcID"] = 162692,
},
[340649] = {
["npcID"] = 159747,
},
[393894] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nezascar the Sightless",
["npcID"] = 196535,
},
[418469] = {
["source"] = "Minion of Deathwingurlugull",
["event"] = "SPELL_CAST_START",
["npcID"] = 205037,
},
[377512] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spiteful Snail",
["npcID"] = 186833,
},
[141663] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthborn Hatred",
["npcID"] = 70822,
},
[406183] = {
["event"] = "SPELL_CAST_START",
["source"] = "Krono Sandtongue",
["npcID"] = 205622,
},
[336556] = {
["npcID"] = 179913,
},
[426663] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Vicious Snap Dragon",
["npcID"] = 212681,
},
[223579] = {
["source"] = "Or'ell",
["event"] = "SPELL_CAST_START",
["npcID"] = 102495,
},
[143712] = {
["encounterName"] = "General Nazgrim",
["source"] = "General Nazgrim",
["encounterID"] = 1603,
["event"] = "SPELL_CAST_START",
["npcID"] = 71697,
},
[389804] = {
["source"] = "Unstable Curator",
["event"] = "SPELL_CAST_START",
["npcID"] = 187154,
},
[164192] = {
["npcID"] = 81236,
},
[336560] = {
["npcID"] = 180627,
},
[21807] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wily Woodling",
["npcID"] = 61155,
},
[418476] = {
["source"] = "Illidan Stormrage",
["event"] = "SPELL_CAST_START",
["npcID"] = 205306,
},
[122034] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shek'zeer Clutch-Keeper",
["npcID"] = 64559,
},
[369328] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Runic Protector",
["npcID"] = 184107,
},
[373424] = {
["encounterName"] = "Chargath, Bane of Scales",
["source"] = "Chargath, Bane of Scales",
["npcID"] = 189340,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2613,
},
[418478] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rune Bear",
["npcID"] = 207050,
},
[295606] = {
["encounterName"] = "Abyssal Commander Sivara",
["npcID"] = 151881,
["encounterID"] = 2298,
},
[166242] = {
["npcID"] = 162874,
},
[377522] = {
["encounterName"] = "Warlord Sargha",
["source"] = "Raging Ember",
["npcID"] = 192464,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2611,
},
[303799] = {
["encounterName"] = "Queen Azshara",
["npcID"] = 152910,
["encounterID"] = 2299,
},
[340662] = {
["npcID"] = 172078,
},
[393907] = {
["source"] = "Discordant Watcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 189149,
},
[373429] = {
["npcID"] = 189878,
},
[369335] = {
["source"] = "Runic Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 184107,
},
[389814] = {
["npcID"] = 189955,
},
[250208] = {
["npcID"] = 158427,
},
[211299] = {
["event"] = "SPELL_CAST_START",
["source"] = "Watchful Inquisitor",
["npcID"] = 105715,
},
[147815] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thrall",
["npcID"] = 73483,
},
[225635] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lunar Archer",
["npcID"] = 120721,
},
[124085] = {
["event"] = "SPELL_CAST_START",
["source"] = "Set'thik Zephyrian",
["npcID"] = 63593,
},
[135529] = {
["source"] = "Thaumaturge Saresse",
["event"] = "SPELL_CAST_START",
["npcID"] = 67692,
},
[377532] = {
["source"] = "Thunderspine Crasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 191057,
},
[414394] = {
["source"] = "Nixke Voltscroll",
["event"] = "SPELL_CAST_START",
["npcID"] = 200965,
},
[145769] = {
["encounterName"] = "Norushen",
["source"] = "Amalgam of Corruption",
["npcID"] = 72276,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1624,
},
[147817] = {
["npcID"] = 72876,
},
[398012] = {
["npcID"] = 191093,
},
[426684] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Ravager",
["npcID"] = 212673,
},
[320196] = {
["npcID"] = 175605,
},
["198959"] = {
["source"] = "Valarjar Runecarver",
["event"] = "SPELL_CAST_START",
["npcID"] = 96664,
},
[32863] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Warlock",
["npcID"] = 17371,
},
[135532] = {
["source"] = "Thaumaturge Saresse",
["event"] = "SPELL_CAST_START",
["npcID"] = 67692,
},
[324293] = {
["npcID"] = 165919,
},
[406209] = {
["source"] = "Han'thul",
["event"] = "SPELL_CAST_START",
["npcID"] = 198914,
},
[406210] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Naturalist",
["npcID"] = 201746,
},
[320200] = {
["encounterName"] = "Stichflesh",
["encounterID"] = 2389,
["npcID"] = 162689,
},
[114872] = {
["npcID"] = 59613,
},
[336584] = {
["npcID"] = 164476,
},
[44639] = {
["source"] = "Coilskar Witch",
["event"] = "SPELL_CAST_START",
["npcID"] = 24696,
},
[106681] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fragrant Lotus",
["npcID"] = 56472,
},
[328395] = {
["npcID"] = 171656,
},
[365257] = {
["encounterName"] = "Lihuvim, Principal Architect",
["encounterID"] = 2539,
["npcID"] = 182071,
},
[406215] = {
["event"] = "SPELL_CAST_START",
["source"] = "Un'Gorian Diemetradon",
["npcID"] = 205856,
},
[114873] = {
["npcID"] = 59613,
},
[117945] = {
["encounterName"] = "Elegon",
["source"] = "Celestial Protector",
["encounterID"] = 1500,
["event"] = "SPELL_CAST_START",
["npcID"] = 60793,
},
[320208] = {
["encounterName"] = "Stichflesh",
["encounterID"] = 2389,
["npcID"] = 164578,
},
[328400] = {
["npcID"] = 164737,
},
[135538] = {
["source"] = "Thaumaturge Saresse",
["event"] = "SPELL_CAST_START",
["npcID"] = 67692,
},
[369359] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infused Proto-Drake",
["npcID"] = 194200,
},
[147826] = {
["npcID"] = 73167,
},
[361169] = {
["npcID"] = 182466,
},
[422606] = {
["event"] = "SPELL_CAST_START",
["source"] = "Volgoth The Flamebringer",
["npcID"] = 209129,
},
[332500] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fathomless Lurker",
["npcID"] = 209580,
},
["356407"] = {
["npcID"] = 180091,
},
[393937] = {
["source"] = "Discordant Watcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 189149,
},
[147828] = {
["npcID"] = 73167,
},
[37985] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sunreaver Dragonhawk",
["npcID"] = 68762,
},
[369365] = {
["source"] = "Earthen Warder",
["event"] = "SPELL_CAST_START",
["npcID"] = 184132,
},
[422610] = {
["source"] = "Tithris",
["event"] = "SPELL_CAST_START",
["npcID"] = 210674,
},
[422611] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[336601] = {
["npcID"] = 164476,
},
[377559] = {
["encounterName"] = "Treemouth",
["source"] = "Treemouth",
["encounterID"] = 2568,
["event"] = "SPELL_CAST_START",
["npcID"] = 186120,
},
[365272] = {
["encounterName"] = "Prototype Pantheon",
["encounterID"] = 2544,
["npcID"] = 181551,
},
[357081] = {
["npcID"] = 176956,
},
[328411] = {
["npcID"] = 158165,
},
[414422] = {
["event"] = "SPELL_CAST_START",
["source"] = "Goblin Shredder",
["npcID"] = 200964,
},
[357082] = {
["npcID"] = 178733,
},
["384663"] = {
["source"] = "Forgewrought Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 194816,
},
[357083] = {
["npcID"] = 180864,
},
[328413] = {
["npcID"] = 157463,
},
[332509] = {
["npcID"] = 164555,
},
[176502] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sharpclaw Hunter",
["npcID"] = 83689,
},
[357084] = {
["npcID"] = 180379,
},
[328414] = {
["npcID"] = 165270,
},
[414425] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2709,
},
[135545] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Skyfire Gyrocopter",
["npcID"] = 68115,
},
[357085] = {
["npcID"] = 176959,
},
[357086] = {
["npcID"] = 176959,
},
[385757] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mender Eskros",
["npcID"] = 195303,
},
[357087] = {
["npcID"] = 178731,
},
[145786] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Zar'thik Amber Priest",
["npcID"] = 71397,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[381663] = {
["event"] = "SPELL_CAST_START",
["source"] = "Apex Blazewing",
["npcID"] = 193291,
},
[324323] = {
["npcID"] = 165919,
},
[340707] = {
["npcID"] = 172084,
},
[164218] = {
["npcID"] = 81407,
},
[357091] = {
["npcID"] = 178731,
},
[418528] = {
["source"] = "Illidan Stormrage",
["event"] = "SPELL_CAST_START",
["npcID"] = 205306,
},
[162171] = {
["encounterName"] = "Rocketspark and Borka",
["encounterID"] = 1715,
["npcID"] = 77803,
},
[373477] = {
["source"] = "Bound Shoresnapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 190193,
},
[199034] = {
["source"] = "Valarjar Aspirant",
["event"] = "SPELL_CAST_START",
["npcID"] = 101637,
},
[418531] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2709,
},
[328429] = {
["npcID"] = 168022,
},
[332525] = {
["encounterName"] = "Painsmith Raznal",
["encounterID"] = 2430,
["npcID"] = 171396,
},
[373483] = {
["source"] = "Soggymaw Wavebringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 187263,
},
[332526] = {
["encounterName"] = "Painsmith Raznal",
["encounterID"] = 2430,
["npcID"] = 171396,
},
[357102] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 176533,
},
[117954] = {
["encounterName"] = "Elegon",
["source"] = "Elegon",
["encounterID"] = 1500,
["event"] = "SPELL_CAST_START",
["npcID"] = 60410,
},
[426731] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Oracle",
["npcID"] = 41096,
},
[365295] = {
["encounterName"] = "Anduin Wrynn",
["encounterID"] = 2546,
["npcID"] = 181954,
},
[176512] = {
["npcID"] = 83692,
},
[389870] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Colossal Stormfiend",
["npcID"] = 197145,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2607,
},
[320243] = {
["npcID"] = 166425,
},
[12058] = {
["source"] = "Zandalari Fetish-Binder",
["event"] = "SPELL_CAST_START",
["npcID"] = 69155,
},
[410351] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["npcID"] = 199659,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[381681] = {
["source"] = "Rustpine Immolator",
["event"] = "SPELL_CAST_START",
["npcID"] = 187396,
},
[84165] = {
["source"] = "Dark Iron Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 42008,
},
[357107] = {
["npcID"] = 177144,
},
[328437] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2405,
["npcID"] = 166644,
},
[365299] = {
["npcID"] = 185181,
},
[176514] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sharpclaw Poison-Shaper",
["npcID"] = 83694,
},
[357108] = {
["npcID"] = 177144,
},
[381683] = {
["source"] = "Nokhud Warspear",
["event"] = "SPELL_CAST_START",
["npcID"] = 192791,
},
[170371] = {
["source"] = "Sargerei Militant",
["event"] = "SPELL_CAST_START",
["npcID"] = 89207,
},
[256382] = {
["npcID"] = 127807,
},
[176515] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sharpclaw Poison-Shaper",
["npcID"] = 83694,
},
[406260] = {
["event"] = "SPELL_CAST_START",
["source"] = "Memory of a Traitorous Sister",
["npcID"] = 200826,
},
[369399] = {
["source"] = "Earthen Weaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 186420,
},
[357112] = {
["npcID"] = 177831,
},
[369400] = {
["source"] = "Earthen Warder",
["event"] = "SPELL_CAST_START",
["npcID"] = 184132,
},
[426741] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Sentinel",
["npcID"] = 40577,
},
[111813] = {
["npcID"] = 58822,
},
[176517] = {
["event"] = "SPELL_CAST_START",
["source"] = "Panthran Witchdoctor",
["npcID"] = 83690,
},
[357115] = {
["npcID"] = 177915,
},
[377594] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["npcID"] = 189492,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2607,
},
[402170] = {
["source"] = "Vengeful Research",
["event"] = "SPELL_CAST_START",
["npcID"] = 201490,
},
[126149] = {
["source"] = "Final Doubt",
["event"] = "SPELL_CAST_START",
["npcID"] = 57330,
},
[381694] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Gashtooth",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186124,
},
[340738] = {
["npcID"] = 167848,
},
[369409] = {
["source"] = "Earthen Custodian",
["event"] = "SPELL_CAST_START",
["npcID"] = 184130,
},
[414463] = {
["source"] = "MR-7 Tangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 205824,
},
[307974] = {
["encounterName"] = "Wrathion",
["source"] = "Wrathion",
["npcID"] = 156818,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2329,
},
[240006] = {
["npcID"] = 182863,
},
[369411] = {
["source"] = "Cavern Seeker",
["event"] = "SPELL_CAST_START",
["npcID"] = 184301,
},
[332550] = {
["npcID"] = 169875,
},
[126151] = {
["source"] = "Final Doubt",
["event"] = "SPELL_CAST_START",
["npcID"] = 57330,
},
[414466] = {
["source"] = "MR-7 Gutcutter",
["event"] = "SPELL_CAST_START",
["npcID"] = 204515,
},
[381701] = {
["npcID"] = 190933,
},
[117960] = {
["encounterName"] = "Elegon",
["source"] = "Elegon",
["encounterID"] = 1500,
["event"] = "SPELL_CAST_START",
["npcID"] = 60410,
},
[221577] = {
["source"] = "Astral Farseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 111170,
},
[414468] = {
["source"] = "MR-7 Shadowflipper",
["event"] = "SPELL_CAST_START",
["npcID"] = 205825,
},
[328458] = {
["npcID"] = 168844,
},
[340746] = {
["npcID"] = 167848,
},
[377608] = {
["npcID"] = 190938,
},
[143759] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Ka'roz the Locust",
["encounterID"] = 1593,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 71154,
},
[373513] = {
["npcID"] = 190128,
},
[377609] = {
["source"] = "Worldbreaker Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 185594,
},
[117961] = {
["encounterName"] = "The Spirit Kings",
["source"] = "Qiang the Merciless",
["encounterID"] = 1436,
["event"] = "SPELL_CAST_START",
["npcID"] = 60709,
},
[340749] = {
["npcID"] = 167548,
},
[328462] = {
["npcID"] = 168845,
},
[414473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greaves",
["npcID"] = 207278,
},
[340750] = {
["npcID"] = 167548,
},
[377612] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["npcID"] = 189492,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2607,
},
[324368] = {
["encounterName"] = "Kin-Tara",
["npcID"] = 163077,
["encounterID"] = 2357,
},
[295698] = {
["npcID"] = 154041,
},
[414475] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greaves",
["npcID"] = 207278,
},
[414476] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greaves",
["npcID"] = 207278,
},
[369423] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nesting Creche Crawler",
["npcID"] = 201623,
},
["404472"] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 200912,
},
[393998] = {
["source"] = "Discordant Watcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 189149,
},
[414477] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greaves",
["npcID"] = 207278,
},
[46184] = {
["encounterName"] = "Priestess Delrissa",
["encounterID"] = 1895,
["npcID"] = 24556,
},
[361233] = {
["npcID"] = 182158,
},
[357139] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 176532,
["encounterID"] = 2435,
},
[35945] = {
["source"] = "Shattered Hand Sharpshooter",
["event"] = "SPELL_CAST_START",
["npcID"] = 16704,
},
[145812] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Set'thik Wind Wielder",
["npcID"] = 71405,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[426768] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Tempest Witch",
["npcID"] = 40634,
},
[340758] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2405,
["npcID"] = 166644,
},
[221584] = {
["source"] = "Astral Farseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 111170,
},
[418578] = {
["source"] = "Illidan Stormrage",
["event"] = "SPELL_CAST_START",
["npcID"] = 205306,
},
[340759] = {
["npcID"] = 168967,
},
[340760] = {
["npcID"] = 166140,
},
[118988] = {
["encounterName"] = "Gekkan",
["source"] = "Gekkan",
["encounterID"] = 2129,
["event"] = "SPELL_CAST_START",
["npcID"] = 61243,
},
[332569] = {
["npcID"] = 156559,
},
[340761] = {
["npcID"] = 166140,
},
[348953] = {
["encounterName"] = "Kel'Thuzad",
["npcID"] = 175559,
["encounterID"] = 2422,
},
[46185] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Zelfan",
["npcID"] = 24556,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1895,
},
[291613] = {
["encounterName"] = "King Mechagon",
["npcID"] = 150396,
["encounterID"] = 2260,
},
[328475] = {
["npcID"] = 164737,
},
[283422] = {
["encounterName"] = "Tussle Tonks",
["npcID"] = 145185,
["encounterID"] = 2257,
},
[357146] = {
["npcID"] = 178883,
},
[147863] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jademist Dancer",
["npcID"] = 72767,
},
[381721] = {
["npcID"] = 3265,
},
["265089"] = {
["source"] = "Devout Blood Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 131492,
},
[340764] = {
["npcID"] = 173864,
},
[256401] = {
["source"] = "Cellar Crawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 137000,
},
[199061] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enslaved Shieldmaiden",
["npcID"] = 102104,
},
[271138] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bombarding Zeppelin",
["npcID"] = 136958,
},
[194966] = {
["source"] = "Lord Etheldrin Ravencrest",
["event"] = "SPELL_CAST_START",
["npcID"] = 98521,
},
[422683] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oxis of Fire",
["npcID"] = 210319,
},
[118990] = {
["source"] = "Mortbreath Snapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 60201,
},
[422685] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oxis of Fire",
["npcID"] = 210319,
},
[369442] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infused Proto-Drake",
["npcID"] = 189515,
},
[406304] = {
["event"] = "SPELL_CAST_START",
["source"] = "Memory of a Defender",
["npcID"] = 200816,
},
[426783] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Seer",
["npcID"] = 212775,
},
[256405] = {
["encounterName"] = "Ring of Booty",
["source"] = "Trothak",
["encounterID"] = 2095,
["event"] = "SPELL_CAST_START",
["npcID"] = 126969,
},
[402209] = {
["source"] = "Vengeful Research",
["event"] = "SPELL_CAST_START",
["npcID"] = 201490,
},
[147868] = {
["source"] = "Blackfuse Engineer",
["event"] = "SPELL_CAST_START",
["npcID"] = 73095,
},
[235927] = {
["encounterName"] = "The Desolate Host",
["source"] = "Reanimated Templar",
["npcID"] = 118715,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2054,
},
[227736] = {
["encounterName"] = "Moroes",
["encounterID"] = 1961,
["npcID"] = 114312,
},
[151965] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodmaul Slaver",
["npcID"] = 75191,
},
[422691] = {
["encounterName"] = "Smolderon",
["source"] = "Smolderon",
["npcID"] = 200927,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2824,
},
[324394] = {
["npcID"] = 165197,
},
[46187] = {
["encounterName"] = "Priestess Delrissa",
["encounterID"] = 1895,
["npcID"] = 24556,
},
[422693] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oxis of Fire",
["npcID"] = 210319,
},
[320300] = {
["encounterName"] = "An Affront of Challengers",
["encounterID"] = 2391,
["npcID"] = 164461,
},
[373545] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tranquil Tideskipper",
["npcID"] = 192148,
},
[344875] = {
["npcID"] = 171317,
},
[168350] = {
["event"] = "SPELL_CAST_START",
["source"] = "Demon Marauder",
["npcID"] = 89208,
},
["384899"] = {
["source"] = "Rotbow Stalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 186208,
},
[422696] = {
["event"] = "SPELL_CAST_START",
["source"] = "Avius Flamebeak",
["npcID"] = 210305,
},
[414506] = {
["event"] = "SPELL_CAST_START",
["source"] = "Verdant Dream Raven",
["npcID"] = 211372,
},
[373549] = {
["source"] = "Grimy Skimmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 189614,
},
[422699] = {
["event"] = "SPELL_CAST_START",
["source"] = "Phebis of the Burning Sea",
["npcID"] = 210306,
},
[418605] = {
["source"] = "Future Self",
["event"] = "SPELL_CAST_START",
["npcID"] = 208887,
},
[260508] = {
["encounterName"] = "Soulbound Goliath",
["source"] = "Soulbound Goliath",
["npcID"] = 131667,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2114,
},
[340788] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2405,
["npcID"] = 166644,
},
[402225] = {
["source"] = "Vengeful Research",
["event"] = "SPELL_CAST_START",
["npcID"] = 201490,
},
[357172] = {
["npcID"] = 178575,
},
[90325] = {
["npcID"] = 155277,
},
[365365] = {
["npcID"] = 184603,
},
[133542] = {
["source"] = "Vol'jin",
["event"] = "SPELL_CAST_START",
["npcID"] = 67414,
},
[308026] = {
["npcID"] = 157634,
},
[394037] = {
["source"] = "Unbound Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 187036,
},
[316218] = {
["npcID"] = 160384,
},
[44141] = {
["encounterName"] = "Priestess Delrissa",
["encounterID"] = 1895,
["npcID"] = 24558,
},
[340793] = {
["npcID"] = 166140,
},
[147878] = {
["npcID"] = 72888,
},
[201123] = {
["source"] = "Vilethorn Blossom",
["event"] = "SPELL_CAST_START",
["npcID"] = 99360,
},
[369465] = {
["source"] = "Earthen Weaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 186420,
},
[130260] = {
["encounterName"] = "Darkmaster Gandling",
["source"] = "Failed Student",
["encounterID"] = 1430,
["event"] = "SPELL_CAST_START",
["npcID"] = 59078,
},
[147879] = {
["npcID"] = 72888,
},
[377658] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["npcID"] = 189492,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2607,
},
[332605] = {
["npcID"] = 170572,
},
[35950] = {
["source"] = "Shattered Hand Houndmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 17670,
},
[147880] = {
["npcID"] = 73175,
},
[389947] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Dominator",
["npcID"] = 193839,
},
[389948] = {
["source"] = "Overseer Zambul",
["event"] = "SPELL_CAST_START",
["npcID"] = 191145,
},
[377661] = {
["source"] = "Azure Vorquin",
["event"] = "SPELL_CAST_START",
["npcID"] = 190216,
},
[332608] = {
["npcID"] = 170572,
},
[357183] = {
["npcID"] = 177938,
},
[394045] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vadne Bleakheart",
["npcID"] = 195764,
},
[303939] = {
["npcID"] = 155871,
},
[406333] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[414525] = {
["source"] = "Morchie",
["event"] = "SPELL_CAST_START",
["npcID"] = 205708,
},
[418621] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aqir Fanatic",
["npcID"] = 207896,
},
[389951] = {
["event"] = "SPELL_CAST_START",
["source"] = "Strunraan",
["npcID"] = 193534,
},
[262983] = {
["npcID"] = 155629,
},
[418622] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aqir Scarab",
["npcID"] = 207910,
},
[332612] = {
["npcID"] = 170572,
},
[203176] = {
["encounterName"] = "Advisor Vandros",
["source"] = "Advisor Vandros",
["encounterID"] = 1829,
["event"] = "SPELL_CAST_START",
["npcID"] = 98208,
},
[418624] = {
["source"] = "Klaxxi Assassin",
["event"] = "SPELL_CAST_START",
["npcID"] = 207915,
},
[357188] = {
["encounterName"] = "So'azmi",
["npcID"] = 175806,
["encounterID"] = 2437,
},
[147884] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcweaver Reinforcements",
["npcID"] = 73153,
},
[373573] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bough Darter",
["npcID"] = 208235,
},
[381765] = {
["source"] = "Rimebound Controller",
["event"] = "SPELL_CAST_START",
["npcID"] = 191654,
},
[324425] = {
["npcID"] = 155239,
},
["386024"] = {
["source"] = "Primalist Stormspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 194894,
},
[385862] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murloc Hopper",
["npcID"] = 195218,
},
[357192] = {
["npcID"] = 178576,
},
[398150] = {
["source"] = "Shadowmoon Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 76446,
},
[46191] = {
["encounterName"] = "Priestess Delrissa",
["encounterID"] = 1895,
["npcID"] = 24558,
},
[308044] = {
["encounterName"] = "Maut",
["source"] = "Maut",
["npcID"] = 156523,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2327,
},
[365385] = {
["encounterName"] = "The Jailer",
["npcID"] = 184622,
["encounterID"] = 2537,
},
[414535] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 198933,
},
[406344] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Firecaller",
["npcID"] = 200454,
},
[381770] = {
["encounterName"] = "Treemouth",
["source"] = "Decaying Slime",
["encounterID"] = 2568,
["event"] = "SPELL_CAST_START",
["npcID"] = 192481,
},
[406345] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remnants of Sindragosa",
["npcID"] = 201089,
},
[398154] = {
["source"] = "Defiled Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 75451,
},
[303952] = {
["npcID"] = 155910,
},
[357197] = {
["npcID"] = 180336,
},
[320336] = {
["npcID"] = 163126,
},
[130265] = {
["npcID"] = 66291,
},
[394060] = {
["event"] = "SPELL_CAST_START",
["source"] = "Productive Pollinator",
["npcID"] = 193809,
},
[20793] = {
["source"] = "Dark Iron Pyromancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 41902,
},
[141746] = {
["event"] = "SPELL_CAST_START",
["source"] = "Viletongue Skirmisher",
["npcID"] = 58738,
},
[418637] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[205231] = {
["npcID"] = 103673,
},
[316244] = {
["npcID"] = 162056,
},
[130266] = {
["npcID"] = 66200,
},
[182705] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bleeding Darkcaster",
["npcID"] = 92041,
},
[170418] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Warrior",
["npcID"] = 85467,
},
[328533] = {
["npcID"] = 163862,
},
[361300] = {
["encounterName"] = "Prototype Pantheon",
["encounterID"] = 2544,
["npcID"] = 181549,
},
[133558] = {
["source"] = "Korune Spellweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 68815,
},
[365399] = {
["npcID"] = 183748,
},
[303963] = {
["npcID"] = 155873,
},
[406357] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remnants of Sindragosa",
["npcID"] = 201089,
},
[361304] = {
["encounterName"] = "Prototype Pantheon",
["encounterID"] = 2544,
["npcID"] = 183421,
},
[365400] = {
["npcID"] = 184413,
},
[201139] = {
["source"] = "Wrathguard Bladelord",
["event"] = "SPELL_CAST_START",
["npcID"] = 98810,
},
[406358] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 200912,
},
[344922] = {
["npcID"] = 168148,
},
[34930] = {
["source"] = "Ethereal Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 18331,
},
[162231] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bladespire Sorcerer",
["npcID"] = 80071,
},
[385883] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge-Keep Custodian",
["npcID"] = 192703,
},
[324447] = {
["npcID"] = 175803,
},
[398171] = {
["event"] = "SPELL_CAST_START",
["source"] = "Senegos",
["npcID"] = 199923,
},
[398172] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stellagosa",
["npcID"] = 200099,
},
[389981] = {
["npcID"] = 189955,
},
[122078] = {
["source"] = "Dreadling",
["event"] = "SPELL_CAST_START",
["npcID"] = 62306,
},
[406366] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Nightflame",
["npcID"] = 200931,
},
[426845] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infested Icecaller",
["npcID"] = 84989,
},
[357218] = {
["npcID"] = 176957,
},
[33395] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "물의 정령",
["npcID"] = 208441,
},
[357219] = {
["npcID"] = 176957,
},
[320358] = {
["encounterName"] = "Stichflesh",
["npcID"] = 162689,
},
[406369] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Nightflame",
["npcID"] = 200931,
},
["265433"] = {
["source"] = "Bloodsworn Defiler",
["event"] = "SPELL_CAST_START",
["npcID"] = 133912,
},
[332646] = {
["npcID"] = 162872,
},
[349030] = {
["encounterName"] = "The Eye of the Jailer",
["npcID"] = 175725,
["encounterID"] = 2433,
},
[143805] = {
["encounterName"] = "Malkorok",
["source"] = "Malkorok",
["npcID"] = 71454,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1595,
},
[303978] = {
["npcID"] = 155873,
},
[344936] = {
["npcID"] = 168975,
},
[332650] = {
["npcID"] = 161857,
},
[168381] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rescued Vanguard Priest",
["npcID"] = 84202,
},
[357226] = {
["npcID"] = 180429,
},
[131520] = {
["npcID"] = 66169,
},
[426855] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["encounterID"] = 2708,
["event"] = "SPELL_CAST_START",
["npcID"] = 206172,
},
[361324] = {
["encounterName"] = "Halondrus the Reclaimer",
["encounterID"] = 2529,
["npcID"] = 180906,
},
[166335] = {
["npcID"] = 82579,
},
[406378] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remnants of Sindragosa",
["npcID"] = 201089,
},
[328559] = {
["npcID"] = 166677,
},
[271220] = {
["source"] = "Scrapbone Grunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 152960,
},
[373614] = {
["source"] = "Blazebound Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 190034,
},
[332657] = {
["npcID"] = 164587,
},
[357232] = {
["npcID"] = 179108,
},
[389999] = {
["npcID"] = 189955,
},
[365426] = {
["npcID"] = 184413,
},
[135620] = {
["source"] = "Dreadguard Cavalry",
["event"] = "SPELL_CAST_START",
["npcID"] = 67309,
},
[373618] = {
["npcID"] = 190174,
},
[73958] = {
["npcID"] = 39464,
},
[135621] = {
["event"] = "SPELL_CAST_START",
["source"] = "Capacitor Totem",
["npcID"] = 68872,
},
[320376] = {
["encounterName"] = "Stichflesh",
["encounterID"] = 2389,
["npcID"] = 164578,
},
[145861] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zeal",
["npcID"] = 72661,
},
[414579] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fuzani Sprite",
["npcID"] = 205858,
},
[135622] = {
["event"] = "SPELL_CAST_START",
["source"] = "Uduji",
["npcID"] = 67434,
},
[235968] = {
["encounterName"] = "The Desolate Host",
["source"] = "Ghastly Bonewarden",
["npcID"] = 118728,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2054,
},
["376200"] = {
["source"] = "Forgewrought Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 194816,
},
[227777] = {
["encounterName"] = "Opera Hall",
["npcID"] = 114260,
["encounterID"] = 1957,
},
[394102] = {
["source"] = "Terillod the Devout",
["event"] = "SPELL_CAST_START",
["npcID"] = 193171,
},
[166341] = {
["npcID"] = 82579,
},
[135623] = {
["event"] = "SPELL_CAST_START",
["source"] = "Uduji",
["npcID"] = 67434,
},
[385912] = {
["isChanneled"] = true,
["source"] = "Shiverweb Crawler",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 195397,
},
[135624] = {
["event"] = "SPELL_CAST_START",
["source"] = "Uduji",
["npcID"] = 67434,
},
[357243] = {
["npcID"] = 180433,
},
[344956] = {
["npcID"] = 162829,
},
[422776] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2709,
},
[357245] = {
["npcID"] = 180407,
},
[332671] = {
["npcID"] = 170480,
},
[385916] = {
["encounterName"] = "Granyth",
["source"] = "Granyth",
["encounterID"] = 2637,
["event"] = "SPELL_CAST_START",
["npcID"] = 186616,
},
[135626] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Uduji",
["npcID"] = 67434,
},
[68841] = {
["event"] = "SPELL_CAST_START",
["source"] = "Apothecary Frye",
["npcID"] = 36272,
},
[361343] = {
["npcID"] = 178963,
},
[418684] = {
["source"] = "Alliance Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 208208,
},
[398206] = {
["source"] = "Exhumed Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 75979,
},
[324483] = {
["npcID"] = 155239,
},
[141771] = {
["event"] = "SPELL_CAST_START",
["source"] = "Viletongue Raider",
["npcID"] = 58737,
},
[422782] = {
["source"] = "Amerinth",
["event"] = "SPELL_CAST_START",
["npcID"] = 210675,
},
[320390] = {
["npcID"] = 177140,
},
[227783] = {
["encounterName"] = "Opera Hall",
["npcID"] = 114260,
["encounterID"] = 1957,
},
[394114] = {
["event"] = "SPELL_CAST_START",
["source"] = "S.A.V.I.O.R.",
["npcID"] = 195328,
},
[373636] = {
["source"] = "Konkhular",
["event"] = "SPELL_CAST_START",
["npcID"] = 194544,
},
[377732] = {
["source"] = "Refti Custodian",
["event"] = "SPELL_CAST_START",
["npcID"] = 184319,
},
[211401] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Imp",
["npcID"] = 104295,
},
[295818] = {
["npcID"] = 156132,
},
[406404] = {
["source"] = "Calibrating Scent Matrix",
["event"] = "SPELL_CAST_START",
["npcID"] = 203606,
},
[299915] = {
["encounterName"] = "The Queen's Court",
["npcID"] = 152853,
["encounterID"] = 2311,
},
[324490] = {
["encounterName"] = "Globgrog",
["encounterID"] = 2382,
["npcID"] = 164255,
},
[340874] = {
["npcID"] = 162657,
},
[111849] = {
["source"] = "Lorekeeper Vaeldrin",
["event"] = "SPELL_CAST_START",
["npcID"] = 58970,
},
[344971] = {
["npcID"] = 170301,
},
[168398] = {
["encounterName"] = "Skulloc, Son of Gruul",
["encounterID"] = 1754,
["npcID"] = 84215,
},
[357259] = {
["npcID"] = 180392,
},
[381834] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Rira Hackclaw",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186122,
},
[287632] = {
["source"] = "Gnomeregan Assault Tank",
["event"] = "SPELL_CAST_START",
["npcID"] = 148342,
},
[357260] = {
["npcID"] = 180431,
},
[128233] = {
["source"] = "Scarlet Evangelist",
["event"] = "SPELL_CAST_START",
["npcID"] = 58685,
},
[344975] = {
["npcID"] = 175331,
},
[211406] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Imp",
["npcID"] = 104295,
},
[79085] = {
["event"] = "SPELL_CAST_START",
["source"] = "Muckscale Serpentus",
["npcID"] = 63466,
},
[406415] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remnants of Sindragosa",
["npcID"] = 201089,
},
[164307] = {
["npcID"] = 98200,
},
[414609] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pureblooded Cloud Serpent",
["npcID"] = 205680,
},
[304025] = {
["npcID"] = 155859,
},
[57464] = {
["encounterName"] = "The Four Horsemen",
["source"] = "Lady Blaumeux",
["encounterID"] = 1121,
["event"] = "SPELL_CAST_START",
["npcID"] = 16065,
},
[182739] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sinister Shrieker",
["npcID"] = 101900,
},
[410516] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["npcID"] = 199659,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[344986] = {
["npcID"] = 158314,
},
[256464] = {
["npcID"] = 129874,
},
[283551] = {
["encounterName"] = "King Mechagon",
["npcID"] = 144249,
["encounterID"] = 2260,
},
[369563] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Baelog",
["event"] = "SPELL_CAST_START",
["npcID"] = 184581,
},
[164311] = {
["npcID"] = 98198,
},
[406426] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remnants of Sindragosa",
["npcID"] = 201089,
},
[426905] = {
["event"] = "SPELL_CAST_START",
["source"] = "Minion of Ghur'sha",
["npcID"] = 212778,
},
[111854] = {
["npcID"] = 58633,
},
[178647] = {
["source"] = "Lunarfall Rifleman",
["event"] = "SPELL_CAST_START",
["npcID"] = 89298,
},
[57465] = {
["encounterName"] = "The Four Horsemen",
["source"] = "Sir Zeliek",
["encounterID"] = 1121,
["event"] = "SPELL_CAST_START",
["npcID"] = 16063,
},
[349087] = {
["npcID"] = 176705,
},
[373662] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earthen Custodian",
["npcID"] = 186420,
},
[332705] = {
["npcID"] = 170490,
},
[385950] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deathwingurlugull",
["npcID"] = 195314,
},
[332706] = {
["npcID"] = 170490,
},
[23102] = {
["npcID"] = 30312,
},
[422813] = {
["source"] = "Guardian Ordan",
["event"] = "SPELL_CAST_START",
["npcID"] = 208727,
},
[336803] = {
["npcID"] = 175819,
},
[332708] = {
["npcID"] = 167532,
},
[336804] = {
["npcID"] = 177295,
},
[422815] = {
["source"] = "Guardian Ordan",
["event"] = "SPELL_CAST_START",
["npcID"] = 208727,
},
[192985] = {
["encounterName"] = "Wrath of Azshara",
["source"] = "Wrath of Azshara",
["npcID"] = 96028,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1814,
},
[422816] = {
["source"] = "Tithris",
["event"] = "SPELL_CAST_START",
["npcID"] = 210674,
},
[385955] = {
["source"] = "Professor Intinosa",
["event"] = "SPELL_CAST_START",
["npcID"] = 195354,
},
[365477] = {
["npcID"] = 181797,
},
[369573] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Baelog",
["event"] = "SPELL_CAST_START",
["npcID"] = 184581,
},
[357286] = {
["npcID"] = 180392,
},
[377765] = {
["npcID"] = 189205,
},
[336809] = {
["npcID"] = 162873,
},
[385959] = {
["source"] = "Titan Defense Matrix",
["event"] = "SPELL_CAST_START",
["npcID"] = 193244,
},
[345002] = {
["npcID"] = 168977,
},
[176605] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jeron Emberfall",
["npcID"] = 88178,
},
[130288] = {
["isChanneled"] = true,
["source"] = "Sha of Despair",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 59651,
},
[116977] = {
["source"] = "Stone Quilen",
["event"] = "SPELL_CAST_START",
["npcID"] = 60576,
},
[345004] = {
["npcID"] = 175347,
},
[332717] = {
["npcID"] = 166178,
},
[143840] = {
["encounterName"] = "Fallen Protectors",
["source"] = "He Softfoot",
["npcID"] = 71478,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1598,
},
[195037] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Oracle",
["npcID"] = 95861,
},
[410537] = {
["source"] = "Scalecommander Sarkareth",
["event"] = "SPELL_CAST_START",
["npcID"] = 199984,
},
[304048] = {
["npcID"] = 155859,
},
[324527] = {
["encounterName"] = "Globgrog",
["encounterID"] = 2382,
["npcID"] = 164255,
},
[304049] = {
["npcID"] = 155859,
},
[135650] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wolf-Rider Gaja",
["npcID"] = 67413,
},
[373678] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
["381663"] = {
["source"] = "Apex Blazewing",
["event"] = "SPELL_CAST_START",
["npcID"] = 193291,
},
[141794] = {
["event"] = "SPELL_CAST_START",
["source"] = "Champion Sithiss",
["npcID"] = 59632,
},
[88308] = {
["encounterName"] = "Altairus",
["source"] = "Altairus",
["npcID"] = 43873,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1041,
},
[398254] = {
["source"] = "Winterpelt Defender",
["event"] = "SPELL_CAST_START",
["npcID"] = 200362,
},
[373680] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Melidrussa Chillworn",
["encounterID"] = 2609,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188252,
},
[80117] = {
["source"] = "Gorged Gyreworm",
["event"] = "SPELL_CAST_START",
["npcID"] = 44259,
},
[65147] = {
["npcID"] = 33743,
},
[133604] = {
["source"] = "Bilgewater Grenadier",
["event"] = "SPELL_CAST_START",
["npcID"] = 67460,
},
[120052] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Batu",
["npcID"] = 63872,
},
[209378] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imacu'tya",
["npcID"] = 104275,
},
[227809] = {
["encounterName"] = "Maiden of Virtue",
["encounterID"] = 1954,
["npcID"] = 113971,
},
[422837] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["encounterID"] = 2677,
["event"] = "SPELL_CAST_START",
["npcID"] = 204931,
},
[394167] = {
["source"] = "Cygenoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 185660,
},
[332733] = {
["npcID"] = 170634,
},
[304063] = {
["npcID"] = 155909,
},
[373692] = {
["source"] = "Blazebound Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 190034,
},
[385980] = {
["event"] = "SPELL_CAST_START",
["source"] = "Strunraan",
["npcID"] = 193534,
},
[373693] = {
["source"] = "Blazebound Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 190034,
},
[316353] = {
["npcID"] = 154462,
},
[414652] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron",
["npcID"] = 198933,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2669,
},
[199143] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Dantalionax",
["encounterID"] = 1835,
["event"] = "SPELL_CAST_START",
["npcID"] = 98970,
},
[336834] = {
["npcID"] = 177295,
},
[299973] = {
["event"] = "SPELL_CAST_START",
["source"] = "Killsaw",
["npcID"] = 152007,
},
[369602] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Olaf",
["npcID"] = 184580,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2555,
},
[373698] = {
["source"] = "Brackenhide Shaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 186220,
},
[336838] = {
["npcID"] = 164345,
},
[93433] = {
["isChanneled"] = true,
["source"] = "William",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[398276] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glakis, Winter's Wrath",
["npcID"] = 199502,
},
[188907] = {
["npcID"] = 92789,
},
[299979] = {
["event"] = "SPELL_CAST_START",
["source"] = "Killsaw",
["npcID"] = 152007,
},
[304075] = {
["npcID"] = 155812,
},
[227817] = {
["encounterName"] = "Maiden of Virtue",
["encounterID"] = 1954,
["npcID"] = 113971,
},
[271310] = {
["source"] = "Pathfinder Tacha",
["event"] = "SPELL_CAST_START",
["npcID"] = 200263,
},
[328651] = {
["npcID"] = 167493,
},
[135664] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felhand Demon-Speaker",
["npcID"] = 67764,
},
[256489] = {
["encounterName"] = "Ring of Booty",
["source"] = "Trothak",
["encounterID"] = 2095,
["event"] = "SPELL_CAST_START",
["npcID"] = 126969,
},
[320462] = {
["npcID"] = 163128,
},
[414665] = {
["source"] = "Murloc Gillbeater",
["event"] = "SPELL_CAST_START",
["npcID"] = 205823,
},
[320463] = {
["npcID"] = 171814,
},
["198595"] = {
["source"] = "Valarjar Thundercaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 95842,
},
[128249] = {
["source"] = "Scarlet Evoker",
["event"] = "SPELL_CAST_START",
["npcID"] = 58756,
},
[40064] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Technician",
["npcID"] = 17414,
},
[131570] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chief Ingoo Ingoo XVII",
["npcID"] = 68545,
},
[20801] = {
["source"] = "Imp Minion",
["event"] = "SPELL_CAST_START",
["npcID"] = 12922,
},
[320465] = {
["npcID"] = 171814,
},
[199151] = {
["source"] = "Angerhoof Bull",
["event"] = "SPELL_CAST_START",
["npcID"] = 96611,
},
[145907] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'kron Skullsplitter",
["npcID"] = 72744,
},
[217583] = {
["source"] = "Duskwatch Executor",
["event"] = "SPELL_CAST_START",
["npcID"] = 115595,
},
[345044] = {
["npcID"] = 170028,
},
[406481] = {
["encounterName"] = "Morchie",
["source"] = "Morchie",
["encounterID"] = 2671,
["event"] = "SPELL_CAST_START",
["npcID"] = 198999,
},
[197105] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Arcanist",
["npcID"] = 97171,
},
[256494] = {
["encounterName"] = "Ring of Booty",
["source"] = "Trothak",
["encounterID"] = 2095,
["event"] = "SPELL_CAST_START",
["npcID"] = 126969,
},
[57984] = {
["npcID"] = 95061,
},
[357336] = {
["npcID"] = 180355,
},
[131575] = {
["npcID"] = 66947,
},
[328667] = {
["npcID"] = 163126,
},
[304093] = {
["npcID"] = 170634,
},
[398296] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shambling Infester",
["npcID"] = 200387,
},
[320478] = {
["npcID"] = 150959,
},
[386012] = {
["source"] = "Stormcaller Boroo",
["event"] = "SPELL_CAST_START",
["npcID"] = 194317,
},
[398300] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shambling Infester",
["npcID"] = 200387,
},
[304098] = {
["npcID"] = 155900,
},
[357343] = {
["npcID"] = 180427,
},
[406493] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spinmarrow",
["npcID"] = 203480,
},
[133627] = {
["source"] = "Silvermoon Runeseeker",
["event"] = "SPELL_CAST_START",
["npcID"] = 67806,
},
[386015] = {
["source"] = "Primalist Stormspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 194894,
},
[390111] = {
["encounterName"] = "Khajin the Unyielding",
["source"] = "Khajin the Unyielding",
["encounterID"] = 2617,
["event"] = "SPELL_CAST_START",
["npcID"] = 189727,
},
[139771] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shan'ze Celestial Shaper",
["npcID"] = 70240,
},
[406495] = {
["source"] = "Ookbeard",
["event"] = "SPELL_CAST_START",
["npcID"] = 200956,
},
[426974] = {
["event"] = "SPELL_CAST_START",
["source"] = "Addled Arcanomancer",
["npcID"] = 84990,
},
[336868] = {
["npcID"] = 162669,
},
[139772] = {
["isChanneled"] = true,
["source"] = "Shan'ze Celestial Shaper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 70240,
},
[418784] = {
["event"] = "SPELL_CAST_START",
["source"] = "Supreme General Pa'valak",
["npcID"] = 208211,
},
[390115] = {
["source"] = "Sarana",
["event"] = "SPELL_CAST_START",
["npcID"] = 190161,
},
[193018] = {
["encounterName"] = "King Deepbeard",
["source"] = "King Deepbeard",
["npcID"] = 91797,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1812,
},
[373733] = {
["encounterName"] = "Chargath, Bane of Scales",
["source"] = "Chargath, Bane of Scales",
["npcID"] = 189340,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2613,
},
[361447] = {
["npcID"] = 185510,
},
[44163] = {
["npcID"] = 24558,
},
[361448] = {
["npcID"] = 182368,
},
[166397] = {
["npcID"] = 82590,
},
[345066] = {
["npcID"] = 164064,
},
[386024] = {
["source"] = "Primalist Stormspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 194894,
},
[357354] = {
["npcID"] = 180427,
},
[418791] = {
["event"] = "SPELL_CAST_START",
["source"] = "Supreme General Pa'valak",
["npcID"] = 208211,
},
[324589] = {
["encounterName"] = "Mordretha",
["encounterID"] = 2404,
["npcID"] = 166524,
},
[386026] = {
["source"] = "Unstable Squall",
["event"] = "SPELL_CAST_START",
["npcID"] = 194895,
},
[361452] = {
["npcID"] = 179006,
},
[137729] = {
["encounterName"] = "Megaera",
["source"] = "Flaming Head",
["encounterID"] = 1578,
["event"] = "SPELL_CAST_START",
["npcID"] = 70212,
},
[328687] = {
["npcID"] = 166079,
},
[283634] = {
["npcID"] = 150748,
},
[386028] = {
["source"] = "Primalist Thunderbeast",
["event"] = "SPELL_CAST_START",
["npcID"] = 195696,
},
[340975] = {
["npcID"] = 167088,
},
[373742] = {
["encounterName"] = "Chargath, Bane of Scales",
["source"] = "Chargath, Bane of Scales",
["npcID"] = 189340,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2613,
},
[188927] = {
["npcID"] = 92789,
},
[418796] = {
["event"] = "SPELL_CAST_START",
["source"] = "Supreme General Pa'valak",
["npcID"] = 208211,
},
[332788] = {
["npcID"] = 162818,
},
[345076] = {
["npcID"] = 170037,
},
[357364] = {
["npcID"] = 178294,
},
[233983] = {
["encounterName"] = "Demonic Inquisition",
["source"] = "Belac",
["encounterID"] = 2048,
["event"] = "SPELL_CAST_START",
["npcID"] = 116691,
},
[377844] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Rira Hackclaw",
["npcID"] = 186122,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2570,
},
[345079] = {
["npcID"] = 170031,
},
[336888] = {
["npcID"] = 168233,
},
[406516] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[209410] = {
["source"] = "Duskwatch Arcanist",
["event"] = "SPELL_CAST_START",
["npcID"] = 104247,
},
[295932] = {
["npcID"] = 151329,
},
[357369] = {
["npcID"] = 178294,
},
[357370] = {
["npcID"] = 178294,
},
[150023] = {
["encounterName"] = "Magmolatus",
["source"] = "Magmolatus",
["npcID"] = 74475,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1655,
},
[68872] = {
["encounterName"] = "Bronjahm",
["source"] = "Bronjahm",
["encounterID"] = 2006,
["event"] = "SPELL_CAST_START",
["npcID"] = 36497,
},
[283648] = {
["npcID"] = 150730,
},
[336893] = {
["npcID"] = 162873,
},
[361469] = {
["npcID"] = 185800,
},
[209413] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guardian Construct",
["npcID"] = 104270,
},
[324608] = {
["encounterName"] = "Oryphrion",
["npcID"] = 162060,
["encounterID"] = 2358,
},
[324609] = {
["npcID"] = 166396,
},
[377854] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sky Vixen Shokhari",
["npcID"] = 190761,
},
[308227] = {
["encounterName"] = "The Hivemind",
["source"] = "Tek'ris",
["npcID"] = 157254,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2333,
},
[328707] = {
["npcID"] = 168992,
},
[406527] = {
["source"] = "Banana Bomber",
["event"] = "SPELL_CAST_START",
["npcID"] = 203641,
},
[295942] = {
["npcID"] = 162845,
},
[199176] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["encounterID"] = 1792,
["event"] = "SPELL_CAST_START",
["npcID"] = 91005,
},
[320517] = {
["npcID"] = 163894,
},
[211464] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felbound Enforcer",
["npcID"] = 104278,
},
[410625] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 201754,
},
[365572] = {
["npcID"] = 184733,
},
[271371] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scavenging Opportunist",
["npcID"] = 202673,
},
["392451"] = {
["source"] = "Flame Channeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 197985,
},
[199178] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["encounterID"] = 1792,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 91005,
},
[201226] = {
["source"] = "Bloodtainted Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 100531,
},
[176652] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jeron Emberfall",
["npcID"] = 88178,
},
[390150] = {
["source"] = "Wyrmeater",
["event"] = "SPELL_CAST_START",
["npcID"] = 186612,
},
[410629] = {
["source"] = "Scalecommander Sarkareth",
["event"] = "SPELL_CAST_START",
["npcID"] = 199984,
},
[390151] = {
["npcID"] = 189955,
},
[369674] = {
["source"] = "Stonevault Geomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 184022,
},
[369675] = {
["source"] = "Stonevault Geomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 184022,
},
[227851] = {
["encounterName"] = "Moroes",
["encounterID"] = 1961,
["npcID"] = 114312,
},
[150032] = {
["encounterName"] = "Magmolatus",
["source"] = "Magmolatus",
["npcID"] = 74475,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1655,
},
[386059] = {
["source"] = "Basrikron",
["event"] = "SPELL_CAST_START",
["npcID"] = 193535,
},
[312336] = {
["encounterName"] = "Dark Inquisitor Xanesh",
["source"] = "Dark Inquisitor Xanesh",
["npcID"] = 156575,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2328,
},
[336911] = {
["npcID"] = 178979,
},
[357390] = {
["npcID"] = 178055,
},
[320529] = {
["npcID"] = 168886,
},
[211470] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow Mistress",
["npcID"] = 104300,
},
[386063] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Maruuk",
["encounterID"] = 2581,
["event"] = "SPELL_CAST_START",
["npcID"] = 186338,
},
[267288] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthen Ring Shaman",
["npcID"] = 135671,
},
[291865] = {
["encounterName"] = "King Mechagon",
["npcID"] = 150396,
["encounterID"] = 2260,
},
[139797] = {
["event"] = "SPELL_CAST_START",
["source"] = "Manchu",
["npcID"] = 70202,
},
[211473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow Mistress",
["npcID"] = 104300,
},
[394261] = {
["source"] = "Gurblbrblr the Invader",
["event"] = "SPELL_CAST_START",
["npcID"] = 197211,
},
[394262] = {
["source"] = "Cygenoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 185660,
},
[150038] = {
["encounterName"] = "Magmolatus",
["source"] = "Magmolatus",
["npcID"] = 74475,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1655,
},
[386072] = {
["source"] = "Professor Intinosa",
["event"] = "SPELL_CAST_START",
["npcID"] = 195354,
},
[394264] = {
["source"] = "Hyenamaster Durgun",
["event"] = "SPELL_CAST_START",
["npcID"] = 186515,
},
[390169] = {
["source"] = "Magmaclaw Raider",
["event"] = "SPELL_CAST_START",
["npcID"] = 187218,
},
[145944] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zeal",
["npcID"] = 72661,
},
[365596] = {
["npcID"] = 180917,
},
[172567] = {
["npcID"] = 81368,
},
[211477] = {
["event"] = "SPELL_CAST_START",
["source"] = "Legion Hound",
["npcID"] = 104277,
},
[213525] = {
["source"] = "Brother Neals",
["event"] = "SPELL_CAST_START",
["npcID"] = 952,
},
[386078] = {
["source"] = "Echo of Loss",
["event"] = "SPELL_CAST_START",
["npcID"] = 190259,
},
[139803] = {
["source"] = "Manchu",
["event"] = "SPELL_CAST_START",
["npcID"] = 70202,
},
[112911] = {
["encounterName"] = "Taran Zhu",
["source"] = "Fragment of Hatred",
["npcID"] = 58810,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1306,
},
[291878] = {
["encounterName"] = "King Mechagon",
["npcID"] = 150396,
["encounterID"] = 2260,
},
[410655] = {
["source"] = "Scalecommander Sarkareth",
["event"] = "SPELL_CAST_START",
["npcID"] = 199984,
},
[332836] = {
["npcID"] = 169927,
},
[304167] = {
["npcID"] = 155920,
},
[398370] = {
["event"] = "SPELL_CAST_START",
["source"] = "Calcifying Crawler",
["npcID"] = 203342,
},
[394275] = {
["source"] = "Cygenoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 185660,
},
[131614] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'thik Siegesmith",
["npcID"] = 65551,
},
[406564] = {
["source"] = "Ookbeard",
["event"] = "SPELL_CAST_START",
["npcID"] = 200956,
},
[369703] = {
["encounterName"] = "Bromach",
["source"] = "Bromach",
["encounterID"] = 2556,
["event"] = "SPELL_CAST_START",
["npcID"] = 184018,
},
[406565] = {
["isChanneled"] = true,
["source"] = "Ookbeard",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 200956,
},
[147998] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazebound Chanter",
["npcID"] = 72897,
},
[406566] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Lava Elemental",
["npcID"] = 202264,
},
[361513] = {
["encounterName"] = "Dausegne, the Fallen Oracle",
["encounterID"] = 2540,
["npcID"] = 181224,
},
[414758] = {
["source"] = "Slagnaros",
["event"] = "SPELL_CAST_START",
["npcID"] = 206134,
},
[357418] = {
["npcID"] = 178443,
},
[176670] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jeron Emberfall",
["npcID"] = 88178,
},
[373803] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Infused Whelp",
["encounterID"] = 2609,
["event"] = "SPELL_CAST_START",
["npcID"] = 189893,
},
[316463] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Mindgate",
["npcID"] = 158374,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[377900] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Scavenger",
["npcID"] = 191833,
},
[148001] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazebound Chanter",
["npcID"] = 72897,
},
[398380] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seismodor, Earth's Wrath",
["npcID"] = 199664,
},
[357423] = {
["npcID"] = 177310,
},
[353328] = {
["npcID"] = 178964,
},
[148002] = {
["npcID"] = 72897,
},
[236061] = {
["encounterName"] = "Maiden of Vigilance",
["source"] = "Maiden of Vigilance",
["encounterID"] = 2052,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 118289,
},
[386096] = {
["event"] = "SPELL_CAST_START",
["source"] = "Screechflight Witherer",
["npcID"] = 183954,
},
[394288] = {
["source"] = "Gurblbrblr the Invader",
["event"] = "SPELL_CAST_START",
["npcID"] = 197211,
},
[172578] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Melded Berserker",
["npcID"] = 86372,
},
[382002] = {
["event"] = "SPELL_CAST_START",
["source"] = "Apex Blazewing",
["npcID"] = 193291,
},
[390194] = {
["event"] = "SPELL_CAST_START",
["source"] = "Uranto the Swift",
["npcID"] = 191103,
},
[148004] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eternal Kilnmaster",
["npcID"] = 72896,
},
[300088] = {
["encounterName"] = "The Queen's Court",
["npcID"] = 152852,
["encounterID"] = 2311,
},
[234015] = {
["encounterName"] = "Demonic Inquisition",
["source"] = "Belac",
["encounterID"] = 2048,
["event"] = "SPELL_CAST_START",
["npcID"] = 116691,
},
[422961] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2709,
},
[13860] = {
["source"] = "Horde Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 67904,
},
[386101] = {
["source"] = "Screechflight Bellower",
["event"] = "SPELL_CAST_START",
["npcID"] = 187124,
},
[406581] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Lava Elemental",
["npcID"] = 202264,
},
[394294] = {
["source"] = "Vyzos the Prophet",
["event"] = "SPELL_CAST_START",
["npcID"] = 191308,
},
[125204] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forgotten King",
["npcID"] = 67081,
},
[324667] = {
["encounterName"] = "Globgrog",
["encounterID"] = 2382,
["npcID"] = 164255,
},
[377912] = {
["source"] = "Guardian Sentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 192680,
},
[304189] = {
["npcID"] = 155917,
},
[422966] = {
["source"] = "Nolaki",
["event"] = "SPELL_CAST_START",
["npcID"] = 208706,
},
[398392] = {
["source"] = "Sulfira Wanderling",
["event"] = "SPELL_CAST_START",
["npcID"] = 205808,
},
[365627] = {
["npcID"] = 183396,
},
[195109] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Stormweaver",
["npcID"] = 91783,
},
[263234] = {
["encounterName"] = "Adderis and Aspix",
["npcID"] = 133379,
["encounterID"] = 2124,
},
[398394] = {
["source"] = "Deep Krolusk",
["event"] = "SPELL_CAST_START",
["npcID"] = 202738,
},
[386107] = {
["event"] = "SPELL_CAST_START",
["source"] = "Screechflight Hexclaw",
["npcID"] = 183995,
},
[320576] = {
["npcID"] = 168886,
},
[20296] = {
["source"] = "Scarlet Technician",
["event"] = "SPELL_CAST_START",
["npcID"] = 211884,
},
[398397] = {
["source"] = "Magmaclaw Supplicant",
["event"] = "SPELL_CAST_START",
["npcID"] = 203933,
},
[422972] = {
["source"] = "Valunei",
["event"] = "SPELL_CAST_START",
["npcID"] = 208709,
},
[365632] = {
["npcID"] = 184742,
},
[357441] = {
["npcID"] = 177980,
},
[398399] = {
["source"] = "Chittering Acidclaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 201093,
},
[328772] = {
["npcID"] = 168644,
},
[398400] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seismodor, Earth's Wrath",
["npcID"] = 199664,
},
[336964] = {
["npcID"] = 168515,
},
[328773] = {
["npcID"] = 168644,
},
[435263] = {
["source"] = "Archaios the Artificer",
["event"] = "SPELL_CAST_START",
["npcID"] = 217564,
},
[390210] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Chonker",
["npcID"] = 185751,
},
[377923] = {
["source"] = "Bound Spark",
["event"] = "SPELL_CAST_START",
["npcID"] = 186624,
},
[398403] = {
["event"] = "SPELL_CAST_START",
["source"] = "Furious Earth",
["npcID"] = 200431,
},
[199210] = {
["source"] = "Valarjar Marksman",
["event"] = "SPELL_CAST_START",
["npcID"] = 96640,
},
[139822] = {
["encounterName"] = "Megaera",
["source"] = "Flaming Head",
["encounterID"] = 1578,
["event"] = "SPELL_CAST_START",
["npcID"] = 70212,
},
[256551] = {
["encounterName"] = "Ring of Booty",
["source"] = "Sawtooth Shark",
["encounterID"] = 2095,
["event"] = "SPELL_CAST_START",
["npcID"] = 129359,
},
[377927] = {
["source"] = "Smoldering Feather",
["event"] = "SPELL_CAST_START",
["npcID"] = 192690,
},
[271439] = {
["source"] = "Bombarding Zeppelin",
["event"] = "SPELL_CAST_START",
["npcID"] = 136958,
},
[377930] = {
["source"] = "Smoldering Feather",
["event"] = "SPELL_CAST_START",
["npcID"] = 192692,
},
[193069] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felsworn Infester",
["npcID"] = 96587,
},
[414793] = {
["source"] = "Slagnaros",
["event"] = "SPELL_CAST_START",
["npcID"] = 206134,
},
["405391"] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Rionthus",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 200918,
},
[211501] = {
["source"] = "Enchanted Broodling",
["event"] = "SPELL_CAST_START",
["npcID"] = 105876,
},
[296018] = {
["encounterName"] = "Za'qul",
["npcID"] = 150859,
["encounterID"] = 2293,
},
[365646] = {
["npcID"] = 184651,
},
[296019] = {
["npcID"] = 171919,
},
[121114] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sik'thik Amber-Weaver",
["npcID"] = 61929,
},
[260651] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scavenging Hullripper",
["npcID"] = 193596,
},
["374699"] = {
["source"] = "Flamecaller Aymi",
["event"] = "SPELL_CAST_START",
["npcID"] = 190368,
},
[390223] = {
["source"] = "Flashfrost Tarasek",
["event"] = "SPELL_CAST_START",
["npcID"] = 187089,
},
[128282] = {
["source"] = "Shek'zeer Clutch-Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 64559,
},
[320596] = {
["encounterName"] = "Blightbone",
["encounterID"] = 2387,
["npcID"] = 162691,
},
[328789] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2405,
["npcID"] = 169062,
},
[291928] = {
["encounterName"] = "King Mechagon",
["npcID"] = 150396,
["encounterID"] = 2260,
},
[361556] = {
["npcID"] = 181685,
},
[38033] = {
["source"] = "Hatecoil Spitespeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 89025,
},
[328791] = {
["encounterName"] = "Lord Chamberlain",
["encounterID"] = 2381,
["npcID"] = 164218,
},
[128283] = {
["source"] = "Shuffling Mistlurker",
["event"] = "SPELL_CAST_START",
["npcID"] = 65404,
},
[320600] = {
["npcID"] = 162965,
},
[260654] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scavenging Hullripper",
["npcID"] = 193596,
},
[369750] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ceeqa the Peacetaker",
["npcID"] = 188708,
},
[68895] = {
["source"] = "Spiteful Apparition",
["event"] = "SPELL_CAST_START",
["npcID"] = 36551,
},
[369751] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Djaradin",
["npcID"] = 195032,
},
[125212] = {
["npcID"] = 50349,
},
[32914] = {
["source"] = "Mutated Silkmoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 57422,
},
[369754] = {
["encounterName"] = "Bromach",
["source"] = "Bromach",
["encounterID"] = 2556,
["event"] = "SPELL_CAST_START",
["npcID"] = 184018,
},
[390233] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rendvith",
["npcID"] = 196971,
},
[316511] = {
["npcID"] = 159458,
},
[328799] = {
["npcID"] = 166935,
},
[365661] = {
["npcID"] = 184651,
},
[160312] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Cleric",
["npcID"] = 77134,
},
[377950] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Tricktotem",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186125,
},
[176696] = {
["npcID"] = 85752,
},
[122142] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Borokhula the Destroyer",
["npcID"] = 58739,
},
[394334] = {
["source"] = "Matriarch Avethyra",
["event"] = "SPELL_CAST_START",
["npcID"] = 184847,
},
[135739] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ishi",
["npcID"] = 68936,
},
[414815] = {
["source"] = "Slagnaros",
["event"] = "SPELL_CAST_START",
["npcID"] = 206134,
},
[336996] = {
["npcID"] = 162744,
},
["258672"] = {
["source"] = "Irontide Crackshot",
["event"] = "SPELL_CAST_START",
["npcID"] = 126918,
},
[386146] = {
["source"] = "Professor Intinosa",
["event"] = "SPELL_CAST_START",
["npcID"] = 195354,
},
[195129] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Crusher",
["npcID"] = 91782,
},
[423010] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dionaessa",
["npcID"] = 210813,
},
[148029] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pterrordax",
["npcID"] = 73223,
},
[135742] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ishi",
["npcID"] = 68936,
},
[390245] = {
["event"] = "SPELL_CAST_START",
["source"] = "Embertooth Spearhunter",
["npcID"] = 188725,
},
[139838] = {
["encounterName"] = "Megaera",
["source"] = "Venomous Head",
["encounterID"] = 1578,
["event"] = "SPELL_CAST_START",
["npcID"] = 70247,
},
[423012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feltouched Trickster",
["npcID"] = 205918,
},
[32330] = {
["npcID"] = 17732,
},
[394344] = {
["event"] = "SPELL_CAST_START",
["source"] = "Death's Shadow",
["npcID"] = 190985,
},
[154175] = {
["encounterName"] = "Bonemaw",
["source"] = "Bonemaw",
["encounterID"] = 1679,
["event"] = "SPELL_CAST_START",
["npcID"] = 75452,
},
[410728] = {
["source"] = "Sabellian",
["event"] = "SPELL_CAST_START",
["npcID"] = 201411,
},
[275569] = {
["npcID"] = 168442,
},
[365676] = {
["npcID"] = 184734,
},
[139841] = {
["encounterName"] = "Megaera",
["source"] = "Frozen Head",
["encounterID"] = 1578,
["event"] = "SPELL_CAST_START",
["npcID"] = 70235,
},
[112930] = {
["source"] = "Lu-Shero",
["event"] = "SPELL_CAST_START",
["npcID"] = 69274,
},
[373869] = {
["source"] = "Scorchling",
["event"] = "SPELL_CAST_START",
["npcID"] = 190205,
},
[365678] = {
["npcID"] = 184734,
},
[341104] = {
["npcID"] = 164477,
},
[341105] = {
["npcID"] = 164477,
},
[373872] = {
["source"] = "Monstrous Decay",
["event"] = "SPELL_CAST_START",
["npcID"] = 186227,
},
[398447] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seismodor, Earth's Wrath",
["npcID"] = 199664,
},
[143939] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Kil'ruk the Wind-Reaver",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71161,
},
[406639] = {
["source"] = "Response Team Watcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 202318,
},
[365682] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2553,
["npcID"] = 184140,
},
[160323] = {
["source"] = "Pale Stabber",
["event"] = "SPELL_CAST_START",
["npcID"] = 92529,
},
[377971] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spawning Thresher",
["npcID"] = 194342,
},
[320631] = {
["encounterName"] = "Blightbone",
["encounterID"] = 2387,
["npcID"] = 164702,
},
[394355] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frostjaw",
["npcID"] = 192043,
},
[369781] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Eric \"The Swift\"",
["event"] = "SPELL_CAST_START",
["npcID"] = 184582,
},
[145989] = {
["event"] = "SPELL_CAST_START",
["source"] = "Amalgamated Hubris",
["npcID"] = 72658,
},
[345207] = {
["npcID"] = 170031,
},
[365686] = {
["npcID"] = 184533,
},
[406644] = {
["source"] = "Response Team Watcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 202318,
},
[394357] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kalecgos",
["npcID"] = 197657,
},
[300155] = {
["npcID"] = 164929,
},
[357497] = {
["npcID"] = 177980,
},
[193092] = {
["encounterName"] = "Hymdall",
["source"] = "Hymdall",
["encounterID"] = 1805,
["event"] = "SPELL_CAST_START",
["npcID"] = 94960,
},
[283775] = {
["npcID"] = 150744,
},
[320637] = {
["encounterName"] = "Blightbone",
["encounterID"] = 2387,
["npcID"] = 162691,
},
[357499] = {
["npcID"] = 177980,
},
[300159] = {
["npcID"] = 150276,
},
[193093] = {
["encounterName"] = "King Deepbeard",
["source"] = "King Deepbeard",
["npcID"] = 91797,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1812,
},
[122149] = {
["encounterName"] = "Wind Lord Mel'jarak",
["source"] = "Zar'thik Battle-Mender",
["npcID"] = 62408,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1498,
},
[131657] = {
["source"] = "Ik'thik Vanguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 58368,
},
[369788] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Djaradin",
["npcID"] = 195032,
},
[308352] = {
["npcID"] = 156318,
},
[209477] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mana Wyrm",
["npcID"] = 105703,
},
[386173] = {
["encounterName"] = "Vexamus",
["source"] = "Vexamus",
["encounterID"] = 2562,
["event"] = "SPELL_CAST_START",
["npcID"] = 194181,
},
[406652] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ookbeard",
["npcID"] = 200956,
},
[414844] = {
["encounterName"] = "The Headless Horseman",
["source"] = "Headless Horseman",
["encounterID"] = 2725,
["event"] = "SPELL_CAST_START",
["npcID"] = 207438,
},
[369791] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Eric \"The Swift\"",
["event"] = "SPELL_CAST_START",
["npcID"] = 184582,
},
[308355] = {
["npcID"] = 156321,
},
[182856] = {
["npcID"] = 161785,
},
[291973] = {
["encounterName"] = "K.U.-J.0.",
["npcID"] = 144246,
["encounterID"] = 2258,
},
[398463] = {
["source"] = "Overflow Magma Serpent",
["event"] = "SPELL_CAST_START",
["npcID"] = 204387,
},
[320644] = {
["encounterName"] = "Xav the Unfallen",
["encounterID"] = 2366,
["npcID"] = 162329,
},
[145995] = {
["source"] = "Kor'kron Dark Farseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 72770,
},
[164426] = {
["encounterName"] = "Fleshrender Nok'gar",
["encounterID"] = 1749,
["npcID"] = 81305,
},
[398464] = {
["event"] = "SPELL_CAST_START",
["source"] = "Smelly Rock Worm",
["npcID"] = 203410,
},
["373017"] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Blazebound Firestorm",
["encounterID"] = 2606,
["event"] = "SPELL_CAST_START",
["npcID"] = 189886,
},
[357508] = {
["npcID"] = 180495,
},
[341127] = {
["npcID"] = 158259,
},
[345223] = {
["npcID"] = 170026,
},
[263309] = {
["encounterName"] = "Adderis and Aspix",
["npcID"] = 133379,
["encounterID"] = 2124,
},
[332937] = {
["encounterName"] = "Sire Denathrius",
["npcID"] = 170710,
},
[227913] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felspite Dominator",
["npcID"] = 102788,
},
[377991] = {
["source"] = "Guardian Sentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 192680,
},
[353417] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[398471] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nimbulatus, Storm's Wrath",
["npcID"] = 199667,
},
[353418] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[373897] = {
["source"] = "Decayed Elder",
["event"] = "SPELL_CAST_START",
["npcID"] = 189531,
},
[296078] = {
["encounterName"] = "Za'qul",
["npcID"] = 150859,
["encounterID"] = 2293,
},
[410760] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wild Vortex",
["npcID"] = 45912,
},
[365707] = {
["npcID"] = 183429,
},
[176718] = {
["npcID"] = 154461,
},
[341133] = {
["npcID"] = 165470,
},
[365708] = {
["npcID"] = 185363,
},
[320655] = {
["encounterName"] = "Blightbone",
["encounterID"] = 2387,
["npcID"] = 162691,
},
[300177] = {
["npcID"] = 150276,
},
[258634] = {
["npcID"] = 154129,
},
[369806] = {
["source"] = "Hulking Berserker",
["event"] = "SPELL_CAST_START",
["npcID"] = 184020,
},
[394381] = {
["event"] = "SPELL_CAST_START",
["source"] = "Root of Decay",
["npcID"] = 185326,
},
[227917] = {
["npcID"] = 114526,
},
[213582] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sinister Shrieker",
["npcID"] = 101900,
},
[296085] = {
["encounterName"] = "Za'qul",
["npcID"] = 150859,
["encounterID"] = 2293,
},
[398479] = {
["source"] = "Hibernating Worm",
["event"] = "SPELL_CAST_START",
["npcID"] = 204742,
},
[48280] = {
["npcID"] = 153897,
},
[406671] = {
["source"] = "Response Team Watcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 202318,
},
[345236] = {
["npcID"] = 170157,
},
[365715] = {
["npcID"] = 184530,
},
[369811] = {
["source"] = "Hulking Berserker",
["event"] = "SPELL_CAST_START",
["npcID"] = 184020,
},
[390290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infuser Sariya",
["npcID"] = 190405,
},
[378003] = {
["source"] = "Guardian Sentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 192680,
},
[345238] = {
["npcID"] = 165124,
},
[365717] = {
["npcID"] = 185363,
},
[369813] = {
["event"] = "SPELL_CAST_START",
["source"] = "Summoned Destroyer",
["npcID"] = 193288,
},
[341143] = {
["npcID"] = 164476,
},
[328856] = {
["npcID"] = 162528,
},
[382101] = {
["source"] = "Echo of Loss",
["event"] = "SPELL_CAST_START",
["npcID"] = 190259,
},
[201298] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodtainted Burster",
["npcID"] = 100532,
},
[328857] = {
["encounterName"] = "Shriekwing",
["npcID"] = 164406,
["encounterID"] = 2398,
},
[382102] = {
["source"] = "Rebel Conjurer",
["event"] = "SPELL_CAST_START",
["npcID"] = 195063,
},
[143958] = {
["encounterName"] = "Fallen Protectors",
["source"] = "Embodied Gloom",
["npcID"] = 71477,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1598,
},
[341145] = {
["npcID"] = 174090,
},
[106797] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["encounterID"] = 1416,
["event"] = "SPELL_CAST_START",
["npcID"] = 56732,
},
[300188] = {
["npcID"] = 150253,
},
[406678] = {
["encounterName"] = "The Vigilant Steward, Zskarn",
["source"] = "Zskarn",
["npcID"] = 202375,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2689,
},
[394391] = {
["source"] = "Rhuzast the Tempest",
["event"] = "SPELL_CAST_START",
["npcID"] = 197409,
},
[394392] = {
["source"] = "Echo of Loss",
["event"] = "SPELL_CAST_START",
["npcID"] = 190259,
},
[369818] = {
["source"] = "Hulking Berserker",
["event"] = "SPELL_CAST_START",
["npcID"] = 184020,
},
["373803"] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Infused Whelp",
["encounterID"] = 2609,
["event"] = "SPELL_CAST_START",
["npcID"] = 189893,
},
[427159] = {
["source"] = "Amalgamation of Dreams",
["event"] = "SPELL_CAST_START",
["npcID"] = 209915,
},
[365723] = {
["encounterName"] = "Dausegne, the Fallen Oracle",
["encounterID"] = 2540,
["npcID"] = 183438,
},
[373915] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Decatriarch Wratheye",
["encounterID"] = 2569,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 186121,
},
[236115] = {
["encounterName"] = "Sisters of the Moon",
["source"] = "Priestess Lunaspyre",
["npcID"] = 118518,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2050,
},
[378012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lavacaller Primalist",
["npcID"] = 186823,
},
[143961] = {
["encounterName"] = "Fallen Protectors",
["source"] = "Embodied Misery",
["npcID"] = 71476,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1598,
},
[373917] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Decatriarch Wratheye",
["npcID"] = 186121,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2569,
},
[361630] = {
["encounterName"] = "Dausegne, the Fallen Oracle",
["encounterID"] = 2540,
["npcID"] = 181224,
},
[139866] = {
["encounterName"] = "Megaera",
["source"] = "Frozen Head",
["npcID"] = 70250,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1578,
},
[369823] = {
["source"] = "Vicious Basilisk",
["event"] = "SPELL_CAST_START",
["npcID"] = 184023,
},
[227925] = {
["npcID"] = 114526,
},
[398494] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Shalewing",
["npcID"] = 207090,
},
[406686] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Magmashaper",
["npcID"] = 202257,
},
[139867] = {
["encounterName"] = "Dark Animus",
["source"] = "Dark Animus",
["npcID"] = 69427,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1576,
},
["409492"] = {
["source"] = "Afflicted Soul",
["event"] = "SPELL_CAST_START",
["npcID"] = 204773,
},
[113967] = {
["source"] = "Agitated Nettleskin",
["event"] = "SPELL_CAST_START",
["npcID"] = 61811,
},
[353443] = {
["npcID"] = 179080,
},
[390305] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rendvith",
["npcID"] = 196971,
},
[398497] = {
["source"] = "Nesting Shalewing",
["event"] = "SPELL_CAST_START",
["npcID"] = 202785,
},
[369828] = {
["source"] = "Vicious Basilisk",
["event"] = "SPELL_CAST_START",
["npcID"] = 184023,
},
[139869] = {
["encounterName"] = "Dark Animus",
["source"] = "Dark Animus",
["encounterID"] = 1576,
["event"] = "SPELL_CAST_START",
["npcID"] = 69427,
},
[112944] = {
["encounterName"] = "Hoptallus",
["source"] = "Hoptallus",
["encounterID"] = 1413,
["event"] = "SPELL_CAST_START",
["npcID"] = 56717,
},
[324776] = {
["npcID"] = 166275,
},
[398500] = {
["event"] = "SPELL_CAST_START",
["source"] = "Conflagrated Rock Cobra",
["npcID"] = 203328,
},
[337064] = {
["npcID"] = 170301,
},
[252503] = {
["event"] = "SPELL_CAST_START",
["source"] = "Assault Infernal",
["npcID"] = 127189,
},
[378022] = {
["encounterName"] = "Treemouth",
["source"] = "Treemouth",
["npcID"] = 186120,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2568,
},
[398501] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hunting Rock Viper",
["npcID"] = 203783,
},
[127280] = {
["event"] = "SPELL_CAST_START",
["source"] = "Viletongue Skirmisher",
["npcID"] = 58738,
},
[128304] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shado-Pan Disciple",
["npcID"] = 58198,
},
[260696] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Malady",
["npcID"] = 131823,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2113,
},
[263344] = {
["npcID"] = 157094,
},
[398504] = {
["source"] = "Sulfurous Viper",
["event"] = "SPELL_CAST_START",
["npcID"] = 205814,
},
[435366] = {
["source"] = "Eratus, the Unwoven Paradox",
["event"] = "SPELL_CAST_START",
["npcID"] = 217190,
},
[427175] = {
["source"] = "Amalgamation of Dreams",
["event"] = "SPELL_CAST_START",
["npcID"] = 209915,
},
[300207] = {
["npcID"] = 150253,
},
[260697] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Briar",
["npcID"] = 131825,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2113,
},
[361644] = {
["encounterName"] = "Dausegne, the Fallen Oracle",
["encounterID"] = 2540,
["npcID"] = 181224,
},
[38556] = {
["npcID"] = 74228,
},
[394411] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kalecgos",
["npcID"] = 197657,
},
[337071] = {
["npcID"] = 170301,
},
[260698] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["npcID"] = 131824,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2113,
},
[378029] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Gashtooth",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186124,
},
[116018] = {
["encounterName"] = "Feng the Accursed",
["source"] = "Feng the Accursed",
["encounterID"] = 1390,
["event"] = "SPELL_CAST_START",
["npcID"] = 60009,
},
[260699] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["npcID"] = 131824,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2113,
},
[365744] = {
["npcID"] = 184651,
},
[386223] = {
["source"] = "Primal Stormshield",
["event"] = "SPELL_CAST_START",
["npcID"] = 194896,
},
[373936] = {
["source"] = "Wilted Oak",
["event"] = "SPELL_CAST_START",
["npcID"] = 186229,
},
[260700] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Malady",
["npcID"] = 131823,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2113,
},
[345267] = {
["npcID"] = 162937,
},
[135780] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ishi",
["npcID"] = 68936,
},
[328885] = {
["encounterName"] = "Sun King's Salvation",
["encounterID"] = 2402,
["npcID"] = 168973,
},
[260701] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Briar",
["npcID"] = 131825,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2113,
},
[390323] = {
["npcID"] = 189933,
},
[320696] = {
["npcID"] = 163121,
},
[164452] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mathias Zunn",
["npcID"] = 85137,
},
[373942] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Decatriarch Wratheye",
["encounterID"] = 2569,
["event"] = "SPELL_CAST_START",
["npcID"] = 186121,
},
[143974] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Korven the Prime",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71155,
},
[260703] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Malady",
["npcID"] = 131823,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2113,
},
[292029] = {
["npcID"] = 144568,
},
[427189] = {
["event"] = "SPELL_CAST_START",
["source"] = "Amalgamation of Dreams",
["npcID"] = 209915,
},
[195172] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Crusher",
["npcID"] = 91782,
},
[49309] = {
["npcID"] = 32340,
},
[451765] = {
["source"] = "[DNT]Teleport Bunny Prime",
["event"] = "SPELL_CAST_START",
["npcID"] = 224528,
},
[162407] = {
["encounterName"] = "Rocketspark and Borka",
["encounterID"] = 1715,
["npcID"] = 77803,
},
[394426] = {
["source"] = "Council Flamecaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 198503,
},
[394427] = {
["isChanneled"] = true,
["source"] = "Eranog",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 198503,
},
[143977] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Korven the Prime",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71155,
},
[394429] = {
["source"] = "Tarolekk, the Stomper",
["event"] = "SPELL_CAST_START",
["npcID"] = 197650,
},
["257739"] = {
["source"] = "Blacktooth Scrapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 129529,
},
[61597] = {
["npcID"] = 34920,
},
[382143] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reclaimer Makko",
["npcID"] = 191536,
},
[154218] = {
["encounterName"] = "Soulbinder Nyami",
["source"] = "Spiteful Arbiter",
["encounterID"] = 1685,
["event"] = "SPELL_CAST_START",
["npcID"] = 76284,
},
[172649] = {
["npcID"] = 83763,
},
[114999] = {
["encounterName"] = "Taran Zhu",
["source"] = "Taran Zhu",
["npcID"] = 56884,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1306,
},
["377844"] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Rira Hackclaw",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186122,
},
[427200] = {
["event"] = "SPELL_CAST_START",
["source"] = "Amalgamation of Dreams",
["npcID"] = 209915,
},
[439488] = {
["encounterName"] = "Echo of Doragosa",
["source"] = "Echo of Doragosa",
["npcID"] = 190609,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2565,
},
[263371] = {
["encounterName"] = "Adderis and Aspix",
["npcID"] = 133944,
["encounterID"] = 2124,
},
[394436] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shas'ith",
["npcID"] = 189822,
},
[154221] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zipteq",
["npcID"] = 78734,
},
[203371] = {
["source"] = "Hill Ettin",
["event"] = "SPELL_CAST_START",
["npcID"] = 102886,
},
[394439] = {
["source"] = "Acequian",
["event"] = "SPELL_CAST_START",
["npcID"] = 187617,
},
[369865] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonhunter Igordan",
["npcID"] = 191611,
},
[178797] = {
["source"] = "High Warlord Volrath",
["event"] = "SPELL_CAST_START",
["npcID"] = 82877,
},
[394440] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eaglemaster Niraak",
["npcID"] = 192020,
},
[86331] = {
["encounterName"] = "Grand Vizier Ertan",
["source"] = "Grand Vizier Ertan",
["npcID"] = 43878,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1043,
},
["215433"] = {
["source"] = "Valarjar Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 95834,
},
[361676] = {
["encounterName"] = "Halondrus the Reclaimer",
["encounterID"] = 2529,
["npcID"] = 180906,
},
[54431] = {
["source"] = "Grrvrgull the Conqueror",
["event"] = "SPELL_CAST_START",
["npcID"] = 98503,
},
[394443] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primordial Wrath",
["npcID"] = 190579,
},
[341199] = {
["npcID"] = 174093,
},
[115002] = {
["encounterName"] = "Taran Zhu",
["source"] = "Taran Zhu",
["npcID"] = 56884,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1306,
},
[341200] = {
["npcID"] = 174100,
},
["406333"] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["encounterID"] = 2680,
["event"] = "SPELL_CAST_START",
["npcID"] = 201320,
},
[406733] = {
["event"] = "SPELL_CAST_START",
["source"] = "Memory of a Traitorous Sister",
["npcID"] = 200826,
},
[423117] = {
["encounterName"] = "Volcoross",
["source"] = "Volcoross",
["npcID"] = 208478,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2737,
},
[116027] = {
["source"] = "Hopper",
["event"] = "SPELL_CAST_START",
["npcID"] = 59464,
},
[236142] = {
["encounterName"] = "The Desolate Host",
["source"] = "Engine of Souls",
["npcID"] = 118460,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2054,
},
[406737] = {
["event"] = "SPELL_CAST_START",
["source"] = "Memory of a Betrayer",
["npcID"] = 200828,
},
["429172"] = {
["encounterName"] = "Mindbender Ghur'sha",
["source"] = "Mindbender Ghur'sha",
["encounterID"] = 1046,
["event"] = "SPELL_CAST_START",
["npcID"] = 40788,
},
[337110] = {
["encounterName"] = "The Council of Blood",
["encounterID"] = 2412,
["npcID"] = 166969,
},
[373972] = {
["isChanneled"] = true,
["source"] = "Primalist Flamedancer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 190206,
},
[160372] = {
["source"] = "Lost Tormenter",
["event"] = "SPELL_CAST_START",
["npcID"] = 90985,
},
[148085] = {
["isChanneled"] = true,
["source"] = "Blackfuse Engineer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 73095,
},
[320729] = {
["encounterName"] = "Xav the Unfallen",
["encounterID"] = 2366,
["npcID"] = 162329,
},
[143990] = {
["encounterName"] = "Kor'kron Dark Shaman",
["source"] = "Wavebinder Kardris",
["encounterID"] = 1606,
["event"] = "SPELL_CAST_START",
["npcID"] = 71858,
},
[146038] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kor'kron Gunner",
["npcID"] = 72784,
},
[410837] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ritualmaster Skarna",
["npcID"] = 202274,
},
[15785] = {
["source"] = "Mana Leech",
["event"] = "SPELL_CAST_START",
["npcID"] = 19306,
},
[139895] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soul-Fed Construct",
["npcID"] = 70308,
},
[258672] = {
["source"] = "Irontide Crackshot",
["event"] = "SPELL_CAST_START",
["npcID"] = 126918,
},
[211571] = {
["source"] = "Eredar Chaosbringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 105617,
},
[152183] = {
["event"] = "SPELL_CAST_START",
["source"] = "Slagna",
["npcID"] = 75406,
},
[390361] = {
["npcID"] = 190070,
},
[427223] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Putrid Pyromancer",
["npcID"] = 84957,
},
[166519] = {
["source"] = "Lava Plume",
["event"] = "SPELL_CAST_START",
["npcID"] = 82701,
},
[287970] = {
["npcID"] = 144564,
},
[115006] = {
["npcID"] = 58943,
},
[423131] = {
["source"] = "Wrathion",
["event"] = "SPELL_CAST_START",
["npcID"] = 210077,
},
[75073] = {
["source"] = "Spiritbinder Cha'lat",
["event"] = "SPELL_CAST_START",
["npcID"] = 69254,
},
[139899] = {
["event"] = "SPELL_CAST_START",
["source"] = "Monara",
["npcID"] = 70440,
},
[394464] = {
["event"] = "SPELL_CAST_START",
["source"] = "Piercer Gigra",
["npcID"] = 186511,
},
[139900] = {
["source"] = "Stormbringer Draz'kil",
["event"] = "SPELL_CAST_START",
["npcID"] = 70445,
},
[394466] = {
["source"] = "Primordial Hail",
["event"] = "SPELL_CAST_START",
["npcID"] = 189039,
},
[382179] = {
["source"] = "Senior Researcher Alydrus",
["event"] = "SPELL_CAST_START",
["npcID"] = 208734,
},
[365798] = {
["npcID"] = 183439,
},
[394470] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ko'jo",
["npcID"] = 186367,
},
[139903] = {
["source"] = "Stormbringer Draz'kil",
["event"] = "SPELL_CAST_START",
["npcID"] = 70445,
},
[337131] = {
["npcID"] = 162872,
},
[115009] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shado-Pan Stormbringer",
["npcID"] = 59808,
},
[349419] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[406760] = {
["event"] = "SPELL_CAST_START",
["source"] = "Memory of a Master",
["npcID"] = 200827,
},
[365805] = {
["encounterName"] = "Anduin Wrynn",
["encounterID"] = 2546,
["npcID"] = 181954,
},
[369901] = {
["event"] = "SPELL_CAST_START",
["source"] = "Smoldering Feather",
["npcID"] = 186965,
},
[115010] = {
["encounterName"] = "Taran Zhu",
["source"] = "Gripping Hatred",
["npcID"] = 59804,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1306,
},
[217725] = {
["isChanneled"] = true,
["source"] = "Vicious Manafang",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 98205,
},
[292083] = {
["encounterName"] = "Blackwater Behemoth",
["npcID"] = 150653,
["encounterID"] = 2289,
},
[419052] = {
["source"] = "Future Self",
["event"] = "SPELL_CAST_START",
["npcID"] = 208959,
},
[146050] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'kron Gunner",
["npcID"] = 72784,
},
[427245] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hapless Assistant",
["npcID"] = 212981,
},
[193152] = {
["encounterName"] = "King Deepbeard",
["source"] = "King Deepbeard",
["npcID"] = 91797,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1812,
},
[227966] = {
["npcID"] = 114544,
},
[414959] = {
["source"] = "Blazing Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 205140,
},
[357619] = {
["npcID"] = 177443,
},
[357620] = {
["npcID"] = 177443,
},
[133765] = {
["encounterName"] = "Durumu the Forgotten",
["source"] = "Durumu the Forgotten",
["encounterID"] = 1572,
["event"] = "SPELL_CAST_START",
["npcID"] = 68036,
},
[144005] = {
["encounterName"] = "Kor'kron Dark Shaman",
["source"] = "Wavebinder Kardris",
["npcID"] = 71858,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1606,
},
[406771] = {
["event"] = "SPELL_CAST_START",
["source"] = "Memory of a Master",
["npcID"] = 200827,
},
[197250] = {
["encounterName"] = "Cordana Felsong",
["source"] = "Cordana Felsong",
["npcID"] = 95888,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1818,
},
[390389] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Survivalist",
["npcID"] = 207857,
},
[394485] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hypoxicron",
["npcID"] = 186334,
},
[197251] = {
["encounterName"] = "Cordana Felsong",
["source"] = "Cordana Felsong",
["npcID"] = 95888,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1818,
},
[15530] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Yazzai",
["encounterID"] = 1895,
["event"] = "SPELL_CAST_START",
["npcID"] = 24561,
},
[410870] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wild Vortex",
["npcID"] = 45912,
},
[357626] = {
["npcID"] = 177442,
},
[115013] = {
["event"] = "SPELL_CAST_START",
["source"] = "Borokhula the Destroyer",
["npcID"] = 58739,
},
[89415] = {
["npcID"] = 57783,
},
[410873] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gust Soldier",
["npcID"] = 45477,
},
[406778] = {
["source"] = "Wild Blaze Hound",
["event"] = "SPELL_CAST_START",
["npcID"] = 205234,
},
[172679] = {
["npcID"] = 80685,
},
[135818] = {
["source"] = "Alliance Footman",
["event"] = "SPELL_CAST_START",
["npcID"] = 67901,
},
[394493] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ko'jo",
["npcID"] = 186367,
},
[106823] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["encounterID"] = 1416,
["event"] = "SPELL_CAST_START",
["npcID"] = 56732,
},
[320771] = {
["encounterName"] = "Nalthor the Rimebinder",
["encounterID"] = 2390,
["npcID"] = 162693,
},
[378112] = {
["source"] = "Encroaching Hornswog",
["event"] = "SPELL_CAST_START",
["npcID"] = 189314,
},
[414974] = {
["source"] = "Blazing Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 205140,
},
[320772] = {
["encounterName"] = "Nalthor the Rimebinder",
["encounterID"] = 2390,
["npcID"] = 162693,
},
[406783] = {
["source"] = "Shadowflame Amalgamation",
["event"] = "SPELL_CAST_START",
["npcID"] = 201934,
},
[394496] = {
["source"] = "Ruinous",
["event"] = "SPELL_CAST_START",
["npcID"] = 193522,
},
[353540] = {
["npcID"] = 179152,
},
[260741] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Briar",
["npcID"] = 131825,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2113,
},
[300296] = {
["npcID"] = 150143,
},
[374020] = {
["event"] = "SPELL_CAST_START",
["source"] = "Containment Apparatus",
["npcID"] = 190342,
},
[369925] = {
["source"] = "Blazing Dreadsquall",
["event"] = "SPELL_CAST_START",
["npcID"] = 191509,
},
[267532] = {
["npcID"] = 131568,
},
[271628] = {
["npcID"] = 176434,
},
[357639] = {
["npcID"] = 177443,
},
[156301] = {
["npcID"] = 80935,
},
[378120] = {
["source"] = "Unstable Rock",
["event"] = "SPELL_CAST_START",
["npcID"] = 192799,
},
[193164] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blade Dancer Illianna",
["npcID"] = 96657,
},
[250505] = {
["source"] = "Forgotten Gryphon",
["event"] = "SPELL_CAST_START",
["npcID"] = 193154,
},
[406792] = {
["source"] = "Contaminated Magmaclaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 204315,
},
[34984] = {
["npcID"] = 17731,
},
[365835] = {
["npcID"] = 183407,
},
[106826] = {
["encounterName"] = "Sha of Violence",
["source"] = "Sha of Violence",
["npcID"] = 56719,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1305,
},
[166543] = {
["encounterName"] = "Nitrogg Thundertower",
["encounterID"] = 1732,
["npcID"] = 82721,
},
[410890] = {
["source"] = "Infinite Warder",
["event"] = "SPELL_CAST_START",
["npcID"] = 205259,
},
[39592] = {
["npcID"] = 67380,
},
["257784"] = {
["source"] = "Bilge Rat Brinescale",
["event"] = "SPELL_CAST_START",
["npcID"] = 129600,
},
[316689] = {
["npcID"] = 162682,
},
[394509] = {
["source"] = "Ruinous",
["event"] = "SPELL_CAST_START",
["npcID"] = 193522,
},
[227981] = {
["npcID"] = 114541,
},
[106827] = {
["encounterName"] = "Sha of Violence",
["source"] = "Sha of Violence",
["npcID"] = 56719,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1305,
},
[320787] = {
["encounterName"] = "The Manastorms",
["npcID"] = 164556,
["encounterID"] = 2394,
},
[406798] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sawscale Viper",
["npcID"] = 208691,
},
[320788] = {
["encounterName"] = "Nalthor the Rimebinder",
["encounterID"] = 2390,
["npcID"] = 162693,
},
[394512] = {
["source"] = "Void Spawn",
["event"] = "SPELL_CAST_START",
["npcID"] = 75652,
},
[414992] = {
["source"] = "Burning Flamespeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 205138,
},
[414993] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elder Cassaphine",
["npcID"] = 206818,
},
[406802] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cavern Flayer",
["npcID"] = 202307,
},
[369942] = {
["source"] = "Blazing Dreadsquall",
["event"] = "SPELL_CAST_START",
["npcID"] = 191509,
},
[374038] = {
["encounterName"] = "The Primal Council",
["source"] = "Embar Firepath",
["encounterID"] = 2590,
["event"] = "SPELL_CAST_START",
["npcID"] = 187767,
},
[365847] = {
["npcID"] = 183229,
},
[390422] = {
["npcID"] = 189933,
},
[328986] = {
["npcID"] = 169159,
},
[337178] = {
["npcID"] = 170838,
},
[178837] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cackling Pyromaniac",
["npcID"] = 79510,
},
[365850] = {
["npcID"] = 181652,
},
[369946] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonhunter Igordan",
["npcID"] = 191611,
},
[357659] = {
["npcID"] = 178878,
},
[410904] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["encounterID"] = 2673,
["event"] = "SPELL_CAST_START",
["npcID"] = 199000,
},
[365851] = {
["npcID"] = 183404,
},
[121165] = {
["encounterName"] = "Gekkan",
["source"] = "Harthak Flameseeker",
["encounterID"] = 2129,
["event"] = "SPELL_CAST_START",
["npcID"] = 61392,
},
[227987] = {
["encounterName"] = "Opera Hall",
["npcID"] = 114328,
["encounterID"] = 1957,
},
[419097] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hel'nurathian Cultist",
["npcID"] = 205939,
},
[374045] = {
["event"] = "SPELL_CAST_START",
["source"] = "Containment Apparatus",
["npcID"] = 190342,
},
[427290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Galok Wingslicer",
["npcID"] = 209047,
},
[232084] = {
["npcID"] = 116549,
},
[271652] = {
["npcID"] = 176434,
},
[118094] = {
["encounterName"] = "The Spirit Kings",
["source"] = "Subetai the Swift",
["encounterID"] = 1436,
["event"] = "SPELL_CAST_START",
["npcID"] = 60710,
},
[44202] = {
["encounterName"] = "Kael'thas Sunstrider",
["event"] = "SPELL_CAST_START",
["source"] = "Phoenix",
["npcID"] = 24674,
},
[378143] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthshatter Primalist",
["npcID"] = 187173,
},
[240277] = {
["encounterName"] = "Garothi Worldbreaker",
["source"] = "Garothi Worldbreaker",
["encounterID"] = 2076,
["event"] = "SPELL_CAST_START",
["npcID"] = 122450,
},
[320804] = {
["encounterName"] = "The Manastorms",
["npcID"] = 164561,
["encounterID"] = 2394,
},
[113999] = {
["encounterName"] = "Rattlegore",
["npcID"] = 59153,
["encounterID"] = 1428,
},
[320805] = {
["npcID"] = 168244,
},
[6358] = {
["npcID"] = 1863,
},
[394530] = {
["source"] = "Acequian",
["event"] = "SPELL_CAST_START",
["npcID"] = 187617,
},
[316711] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Psychus",
["npcID"] = 158376,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[353573] = {
["npcID"] = 179136,
},
[419106] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feltouched Conjurer",
["npcID"] = 205919,
},
["76634"] = {
["source"] = "Tainted Sentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 40925,
},
[378150] = {
["npcID"] = 191376,
},
[176796] = {
["source"] = "Ashmaul Forager",
["event"] = "SPELL_CAST_START",
["npcID"] = 83803,
},
[398631] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Crackshot",
["npcID"] = 200852,
},
[394536] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chief Dead Eye",
["npcID"] = 195337,
},
[382249] = {
["source"] = "Trickclaw Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 185528,
},
[324909] = {
["npcID"] = 164926,
},
[122193] = {
["encounterName"] = "Wind Lord Mel'jarak",
["source"] = "Zar'thik Battle-Mender",
["npcID"] = 62408,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1498,
},
[378155] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Tricktotem",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186125,
},
[398634] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Crackshot",
["npcID"] = 200852,
},
[172703] = {
["npcID"] = 83763,
},
["384823"] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Blazebound Firestorm",
["encounterID"] = 2606,
["event"] = "SPELL_CAST_START",
["npcID"] = 189886,
},
[81236] = {
["source"] = "Plagued Hatchling",
["event"] = "SPELL_CAST_START",
["npcID"] = 10678,
},
[365870] = {
["npcID"] = 183404,
},
[172704] = {
["npcID"] = 80698,
},
[419116] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jaedenar Adherent",
["npcID"] = 205905,
},
[324914] = {
["npcID"] = 166299,
},
[365872] = {
["encounterName"] = "Anduin Wrynn",
["encounterID"] = 2546,
["npcID"] = 181954,
},
[201375] = {
["isChanneled"] = true,
["source"] = "Seacursed Slaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 97043,
},
[137891] = {
["encounterName"] = "Council of Elders",
["source"] = "High Priestess Mar'li",
["npcID"] = 69132,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1570,
},
[195232] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Wavebinder",
["npcID"] = 97170,
},
[374066] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Geomancer",
["npcID"] = 190345,
},
[320822] = {
["npcID"] = 165222,
},
[227999] = {
["npcID"] = 114542,
},
[345397] = {
["encounterName"] = "Shriekwing",
["npcID"] = 164406,
["encounterID"] = 2398,
},
[320823] = {
["encounterName"] = "The Manastorms",
["npcID"] = 164555,
["encounterID"] = 2394,
},
[128339] = {
["source"] = "Ethereal Sha",
["event"] = "SPELL_CAST_START",
["npcID"] = 65414,
},
[148133] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Mushan Beast",
["npcID"] = 73185,
},
[382261] = {
["event"] = "SPELL_CAST_START",
["source"] = "Amalgam of Desperation",
["npcID"] = 199423,
},
[419123] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["encounterID"] = 2677,
["event"] = "SPELL_CAST_START",
["npcID"] = 204931,
},
[42669] = {
["encounterName"] = "Ingvar the Plunderer",
["source"] = "Ingvar the Plunderer",
["encounterID"] = 2025,
["event"] = "SPELL_CAST_START",
["npcID"] = 23954,
},
[166565] = {
["encounterName"] = "Nitrogg Thundertower",
["encounterID"] = 1732,
["npcID"] = 79548,
},
[324923] = {
["npcID"] = 164926,
},
[349498] = {
["encounterName"] = "The Grand Menagerie",
["npcID"] = 176556,
["encounterID"] = 2441,
},
[374073] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Geomancer",
["npcID"] = 190345,
},
[230050] = {
["npcID"] = 115765,
},
[292159] = {
["encounterName"] = "Blackwater Behemoth",
["npcID"] = 150653,
["encounterID"] = 2289,
},
[365883] = {
["npcID"] = 181045,
},
[275778] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ettin Stoneflinger",
["npcID"] = 136419,
},
[361789] = {
["encounterName"] = "Prototype Pantheon",
["npcID"] = 183149,
["encounterID"] = 2544,
},
[115030] = {
["event"] = "SPELL_CAST_START",
["source"] = "Muck Brawler",
["npcID"] = 192630,
},
[20824] = {
["npcID"] = 7379,
},
[402748] = {
["event"] = "SPELL_CAST_START",
["source"] = "Molten Crusher",
["npcID"] = 202284,
},
[365887] = {
["npcID"] = 184878,
},
[121174] = {
["encounterName"] = "Gekkan",
["source"] = "Harthak Flameseeker",
["encounterID"] = 2129,
["event"] = "SPELL_CAST_START",
["npcID"] = 61392,
},
[148138] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blackfuse Engineer",
["npcID"] = 73095,
},
[365888] = {
["npcID"] = 184879,
},
["272609"] = {
["source"] = "Faceless Corruptor",
["event"] = "SPELL_CAST_START",
["npcID"] = 138281,
},
[374080] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Ravager",
["npcID"] = 190348,
},
[374081] = {
["source"] = "Godoloto",
["event"] = "SPELL_CAST_START",
["npcID"] = 190022,
},
[133804] = {
["source"] = "Broodmaster Noshi",
["event"] = "SPELL_CAST_START",
["npcID"] = 67264,
},
[353603] = {
["encounterName"] = "Fatescribe Roh-Kalo",
["encounterID"] = 2431,
["npcID"] = 175730,
},
[172714] = {
["npcID"] = 80696,
},
[320838] = {
["npcID"] = 160356,
},
[260773] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131824,
},
[37551] = {
["source"] = "Shattered Hand Sharpshooter",
["event"] = "SPELL_CAST_START",
["npcID"] = 16704,
},
[394563] = {
["event"] = "SPELL_CAST_START",
["source"] = "Death's Shadow",
["npcID"] = 190985,
},
[406851] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[394564] = {
["source"] = "Gillidan",
["event"] = "SPELL_CAST_START",
["npcID"] = 205036,
},
[382277] = {
["source"] = "Balara",
["event"] = "SPELL_CAST_START",
["npcID"] = 193457,
},
[365895] = {
["npcID"] = 183412,
},
[390470] = {
["npcID"] = 189933,
},
[106841] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["encounterID"] = 1416,
["event"] = "SPELL_CAST_START",
["npcID"] = 56732,
},
[415045] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nixke Voltscroll",
["npcID"] = 200965,
},
[406854] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Arcanist",
["npcID"] = 201736,
},
[394567] = {
["source"] = "Gillidan",
["event"] = "SPELL_CAST_START",
["npcID"] = 205036,
},
[402759] = {
["event"] = "SPELL_CAST_START",
["source"] = "Molten Crusher",
["npcID"] = 202284,
},
[341323] = {
["npcID"] = 173973,
},
[365898] = {
["npcID"] = 183413,
},
[168622] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Mage",
["npcID"] = 84155,
},
[118105] = {
["encounterName"] = "The Spirit Kings",
["source"] = "Subetai the Swift",
["encounterID"] = 1436,
["event"] = "SPELL_CAST_START",
["npcID"] = 60710,
},
[419144] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["encounterID"] = 2677,
["event"] = "SPELL_CAST_START",
["npcID"] = 204931,
},
[228011] = {
["encounterName"] = "Opera Hall",
["npcID"] = 114522,
["encounterID"] = 1957,
},
[199341] = {
["source"] = "Valarjar Trapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 96934,
},
[365901] = {
["npcID"] = 183413,
},
[20825] = {
["npcID"] = 7028,
},
[118106] = {
["encounterName"] = "The Spirit Kings",
["source"] = "Subetai the Swift",
["encounterID"] = 1436,
["event"] = "SPELL_CAST_START",
["npcID"] = 60710,
},
[394573] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frostjaw",
["npcID"] = 192043,
},
[365903] = {
["npcID"] = 183413,
},
[402766] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Flame Sentinel",
["npcID"] = 202260,
},
[427341] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rydra Scalegorger",
["npcID"] = 209048,
},
[337235] = {
["encounterName"] = "Tred'ova",
["encounterID"] = 2393,
["npcID"] = 164517,
},
[415055] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pureblooded Proto-Drake",
["npcID"] = 205682,
},
[390481] = {
["event"] = "SPELL_CAST_START",
["source"] = "Uranto the Swift",
["npcID"] = 191103,
},
[427343] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[365907] = {
["npcID"] = 184880,
},
[402769] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Flame Sentinel",
["npcID"] = 202260,
},
[211632] = {
["source"] = "Eredar Chaosbringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 105617,
},
[365908] = {
["npcID"] = 184880,
},
[353621] = {
["npcID"] = 179133,
},
[390483] = {
["source"] = "Riverbend Gnasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 190888,
},
[130395] = {
["encounterName"] = "The Stone Guard",
["source"] = "Jasper Guardian",
["npcID"] = 59915,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1395,
},
[402772] = {
["event"] = "SPELL_CAST_START",
["source"] = "Contaminated Deepstrider Alpha",
["npcID"] = 204308,
},
[361815] = {
["encounterName"] = "Anduin Wrynn",
["encounterID"] = 2546,
["npcID"] = 181954,
},
[398677] = {
["source"] = "Irontide Scallywag",
["event"] = "SPELL_CAST_START",
["npcID"] = 203910,
},
[168629] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Brute",
["npcID"] = 81065,
},
[419158] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invading Infernal",
["npcID"] = 206765,
},
[398681] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frigid Binder",
["npcID"] = 200623,
},
[304479] = {
["npcID"] = 156015,
},
[228019] = {
["encounterName"] = "Opera Hall",
["npcID"] = 114522,
["encounterID"] = 1957,
},
[232115] = {
["npcID"] = 116549,
},
[406874] = {
["event"] = "SPELL_CAST_START",
["source"] = "Contaminated Krolusk",
["npcID"] = 204310,
},
[390492] = {
["source"] = "Vicious Elder Ember Worg",
["event"] = "SPELL_CAST_START",
["npcID"] = 198905,
},
[423259] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wildfire Blazekin",
["npcID"] = 210685,
},
[172728] = {
["npcID"] = 85538,
},
[337249] = {
["encounterName"] = "Tred'ova",
["encounterID"] = 2393,
["npcID"] = 164517,
},
[423260] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[382303] = {
["encounterName"] = "Bromach",
["source"] = "Bromach",
["encounterID"] = 2556,
["event"] = "SPELL_CAST_START",
["npcID"] = 184018,
},
[201399] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadfire Imp",
["npcID"] = 100527,
},
[374112] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Frostbreath Arachnid",
["encounterID"] = 2592,
["event"] = "SPELL_CAST_START",
["npcID"] = 189234,
},
[378208] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Gashtooth",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186124,
},
[365921] = {
["npcID"] = 183416,
},
[133820] = {
["event"] = "SPELL_CAST_START",
["source"] = "Squad Leader Bosh",
["npcID"] = 68143,
},
[168634] = {
["source"] = "Gor'vosh Necromancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 81087,
},
[394593] = {
["source"] = "Captain Lancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 193198,
},
[341349] = {
["npcID"] = 173973,
},
[213688] = {
["npcID"] = 107024,
},
[398690] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glakis, Winter's Wrath",
["npcID"] = 199502,
},
[423265] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[410978] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Dragonhunter",
["npcID"] = 202108,
},
[337255] = {
["encounterName"] = "Tred'ova",
["encounterID"] = 2393,
["npcID"] = 164517,
},
[398692] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glakis, Winter's Wrath",
["npcID"] = 199502,
},
[341352] = {
["npcID"] = 174092,
},
[120160] = {
["encounterName"] = "Trial of the King",
["source"] = "Haiyan the Unstoppable",
["encounterID"] = 1442,
["event"] = "SPELL_CAST_START",
["npcID"] = 61445,
},
[228025] = {
["encounterName"] = "Opera Hall",
["npcID"] = 114329,
["encounterID"] = 1957,
},
[394598] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shade of Grief",
["npcID"] = 187559,
},
[316779] = {
["npcID"] = 178043,
},
[406886] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Blight of Galakrond",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 198997,
},
[110945] = {
["encounterName"] = "Gu Cloudstrike",
["source"] = "Gu Cloudstrike",
["npcID"] = 56747,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1303,
},
[419174] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hel'nurathian Hellion",
["npcID"] = 205936,
},
[402793] = {
["source"] = "Gholna",
["event"] = "SPELL_CAST_START",
["npcID"] = 199853,
},
[260793] = {
["encounterName"] = "Cragmaw the Infested",
["source"] = "Cragmaw the Infested",
["npcID"] = 131817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2118,
},
[386411] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Teera",
["encounterID"] = 2581,
["event"] = "SPELL_CAST_START",
["npcID"] = 186339,
},
[345454] = {
["npcID"] = 157833,
},
[374126] = {
["event"] = "SPELL_CAST_START",
["source"] = "Broadhoof Bull",
["npcID"] = 193385,
},
[378222] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Charged Hornswog",
["npcID"] = 187324,
},
[223933] = {
["npcID"] = 179737,
},
[345457] = {
["npcID"] = 157833,
},
[76133] = {
["encounterName"] = "Ozumat",
["source"] = "Neptulon",
["npcID"] = 40792,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1047,
},
[390511] = {
["npcID"] = 189954,
},
[394607] = {
["source"] = "Captain Lancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 193198,
},
[427376] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gilgoblin Hunter",
["npcID"] = 40935,
},
[199361] = {
["source"] = "Valarjar Trapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 96934,
},
[419185] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invading Infernal",
["npcID"] = 206765,
},
[187074] = {
["encounterName"] = "Hellfire Assault",
["source"] = "Hulking Berserker",
["npcID"] = 92911,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1778,
},
[162500] = {
["encounterName"] = "Rocketspark and Borka",
["encounterID"] = 1715,
["npcID"] = 77803,
},
[378229] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Gashtooth",
["npcID"] = 186124,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2570,
},
[398708] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Tempest",
["npcID"] = 200673,
},
[86374] = {
["npcID"] = 61252,
},
[209602] = {
["encounterName"] = "Advisor Melandrus",
["source"] = "Advisor Melandrus",
["npcID"] = 104218,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1870,
},
[374135] = {
["event"] = "SPELL_CAST_START",
["source"] = "Snowhorn Bruffalon",
["npcID"] = 192885,
},
[329082] = {
["npcID"] = 166042,
},
[201411] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadfire Imp",
["npcID"] = 100527,
},
[324987] = {
["npcID"] = 166301,
},
[329083] = {
["npcID"] = 166042,
},
[402807] = {
["source"] = "Glittering Shard Construct",
["event"] = "SPELL_CAST_START",
["npcID"] = 204578,
},
[374137] = {
["event"] = "SPELL_CAST_START",
["source"] = "Parched Broadhoof Bull",
["npcID"] = 194352,
},
[410999] = {
["event"] = "SPELL_CAST_START",
["source"] = "Armored Mistral",
["npcID"] = 45915,
},
[398712] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nimbulatus, Storm's Wrath",
["npcID"] = 199667,
},
[411000] = {
["event"] = "SPELL_CAST_START",
["source"] = "Armored Mistral",
["npcID"] = 45915,
},
[411001] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lurking Tempest",
["npcID"] = 45704,
},
[411002] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cloud Prince",
["npcID"] = 45917,
},
[112998] = {
["event"] = "SPELL_CAST_START",
["source"] = "Residual Hatred",
["npcID"] = 58803,
},
[114022] = {
["source"] = "Scarlet Treasurer",
["event"] = "SPELL_CAST_START",
["npcID"] = 59241,
},
[394620] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightrot",
["npcID"] = 188707,
},
[394622] = {
["source"] = "Gnarls",
["event"] = "SPELL_CAST_START",
["npcID"] = 197354,
},
[406911] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Champion",
["npcID"] = 201288,
},
[398720] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Bulwark",
["npcID"] = 200850,
},
[35511] = {
["source"] = "Shattered Hand Sharpshooter",
["event"] = "SPELL_CAST_START",
["npcID"] = 16704,
},
[106856] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["encounterID"] = 1416,
["event"] = "SPELL_CAST_START",
["npcID"] = 56732,
},
[300424] = {
["npcID"] = 150160,
},
[390531] = {
["source"] = "Uranto the Swift",
["event"] = "SPELL_CAST_START",
["npcID"] = 191103,
},
[415106] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Blight of Galakrond",
["encounterID"] = 2668,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 198997,
},
[365958] = {
["encounterName"] = "Anduin Wrynn",
["encounterID"] = 2546,
["npcID"] = 181954,
},
[370054] = {
["event"] = "SPELL_CAST_START",
["source"] = "Olphis the Molten",
["npcID"] = 181875,
},
[411012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Young Storm Dragon",
["npcID"] = 45919,
},
[215754] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spawn of Serpentrix",
["npcID"] = 108655,
},
[374152] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alpha Thornsided Basilisk",
["npcID"] = 197352,
},
[365961] = {
["npcID"] = 183416,
},
[125289] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bataari Flamecaller",
["npcID"] = 63526,
},
[341390] = {
["npcID"] = 174012,
},
[329104] = {
["encounterName"] = "Lord Chamberlain",
["encounterID"] = 2381,
["npcID"] = 164218,
},
[300434] = {
["npcID"] = 150160,
},
[419211] = {
["source"] = "Felbark the Defiler",
["event"] = "SPELL_CAST_START",
["npcID"] = 207094,
},
[374158] = {
["source"] = "Hecutta",
["event"] = "SPELL_CAST_START",
["npcID"] = 207300,
},
[59575] = {
["encounterName"] = "Skarvold & Dalronn",
["source"] = "Dalronn the Controller",
["encounterID"] = 2024,
["event"] = "SPELL_CAST_START",
["npcID"] = 24201,
},
[300436] = {
["npcID"] = 150146,
},
[329107] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2405,
["npcID"] = 169219,
},
[353682] = {
["npcID"] = 176880,
},
[341395] = {
["npcID"] = 174012,
},
[180945] = {
["encounterName"] = "Hellfire Assault",
["source"] = "Felfire Demolisher",
["npcID"] = 91103,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1778,
},
[232142] = {
["encounterName"] = "Opera Hall",
["npcID"] = 116574,
["encounterID"] = 1957,
},
[394641] = {
["source"] = "Frostfist",
["event"] = "SPELL_CAST_START",
["npcID"] = 192030,
},
["228279"] = {
["npcID"] = 114632,
},
[329110] = {
["encounterName"] = "Doctor Ickus",
["encounterID"] = 2384,
["npcID"] = 164967,
},
[133845] = {
["event"] = "SPELL_CAST_START",
["source"] = "Squad Leader Bosh",
["npcID"] = 68143,
},
[185042] = {
["encounterName"] = "Hellfire Assault",
["source"] = "Hellfire Cannon",
["npcID"] = 90018,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1778,
},
[304537] = {
["npcID"] = 151828,
},
[390548] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[345495] = {
["encounterName"] = "Painsmith Raznal",
["encounterID"] = 2430,
["npcID"] = 175519,
},
[304539] = {
["npcID"] = 151828,
},
[123244] = {
["encounterName"] = "Lei Shi",
["source"] = "Lei Shi",
["encounterID"] = 1506,
["event"] = "SPELL_CAST_START",
["npcID"] = 62983,
},
[415125] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Blight of Galakrond",
["encounterID"] = 2668,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207639,
},
[419221] = {
["source"] = "Cho'gall",
["event"] = "SPELL_CAST_START",
["npcID"] = 208212,
},
[406934] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Lavamancer",
["npcID"] = 202256,
},
[394647] = {
["source"] = "Bloodhorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 192003,
},
[32093] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ik'thik Incubator",
["npcID"] = 59890,
},
[258768] = {
["source"] = "Forgotten Gryphon",
["event"] = "SPELL_CAST_START",
["npcID"] = 193154,
},
[419223] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cho'gall",
["npcID"] = 208212,
},
[341404] = {
["npcID"] = 174017,
},
[316830] = {
["npcID"] = 165056,
},
[341406] = {
["npcID"] = 174012,
},
[427417] = {
["event"] = "SPELL_CAST_START",
["source"] = "Prophet of the Flame",
["npcID"] = 207315,
},
[144089] = {
["encounterName"] = "Kor'kron Dark Shaman",
["source"] = "Earthbreaker Haromm",
["npcID"] = 71859,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1606,
},
[394652] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infernum",
["npcID"] = 193648,
},
[296355] = {
["npcID"] = 152612,
},
[398749] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Bulwark",
["npcID"] = 200850,
},
[144090] = {
["encounterName"] = "Kor'kron Dark Shaman",
["source"] = "Earthbreaker Haromm",
["npcID"] = 71859,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1606,
},
[419229] = {
["source"] = "Cho'gall",
["event"] = "SPELL_CAST_START",
["npcID"] = 208212,
},
[316836] = {
["npcID"] = 160478,
},
[390560] = {
["event"] = "SPELL_CAST_START",
["source"] = "Norbett",
["npcID"] = 190968,
},
[361890] = {
["npcID"] = 181453,
},
[168666] = {
["encounterName"] = "Yalnu",
["source"] = "Lady Baihu",
["npcID"] = 84358,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1756,
},
[154331] = {
["npcID"] = 133104,
},
[292264] = {
["encounterName"] = "King Mechagon",
["npcID"] = 144249,
["encounterID"] = 2260,
},
[106864] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["encounterID"] = 1416,
["event"] = "SPELL_CAST_START",
["npcID"] = 56732,
},
[242391] = {
["npcID"] = 156212,
},
[325033] = {
["npcID"] = 178467,
},
[325034] = {
["npcID"] = 167951,
},
[427428] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greedy Gessie",
["npcID"] = 209936,
},
[232153] = {
["encounterName"] = "Opera Hall",
["npcID"] = 114328,
["encounterID"] = 1957,
},
[296365] = {
["npcID"] = 152612,
},
[333227] = {
["npcID"] = 169905,
},
[353706] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 180159,
["encounterID"] = 2440,
},
[292270] = {
["encounterName"] = "Blackwater Behemoth",
["npcID"] = 150653,
["encounterID"] = 2289,
},
[378282] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Thaumaturge",
["npcID"] = 192788,
},
[258777] = {
["source"] = "Irontide Oarsman",
["event"] = "SPELL_CAST_START",
["npcID"] = 127111,
},
[199389] = {
["encounterName"] = "Dresaron",
["source"] = "Dresaron",
["npcID"] = 99200,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1838,
},
[341422] = {
["npcID"] = 174194,
},
[78196] = {
["source"] = "Dark Iron Pyromancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 41902,
},
[333231] = {
["encounterName"] = "An Affront of Challengers",
["encounterID"] = 2391,
["npcID"] = 164461,
},
[263604] = {
["npcID"] = 137587,
},
[345520] = {
["npcID"] = 157833,
},
[419244] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feltouched Trickster",
["npcID"] = 205918,
},
[296372] = {
["npcID"] = 152612,
},
["198904"] = {
["npcID"] = 99358,
},
[110963] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scarlet Purifier",
["npcID"] = 58569,
},
[345523] = {
["npcID"] = 156203,
},
[252637] = {
["source"] = "Slobbering Fiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 127810,
},
[398770] = {
["source"] = "Izormu",
["event"] = "SPELL_CAST_START",
["npcID"] = 201504,
},
[406962] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Horde Axe Thrower",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203799,
},
[172771] = {
["npcID"] = 86809,
},
[394676] = {
["source"] = "Council Icecaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 198501,
},
[333241] = {
["npcID"] = 170850,
},
[15536] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Flamecaller",
["npcID"] = 38926,
},
[370104] = {
["source"] = "Qalashi Metalshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 190767,
},
[390583] = {
["event"] = "SPELL_CAST_START",
["source"] = "Norbett",
["npcID"] = 190968,
},
[361913] = {
["encounterName"] = "Lords of Dread",
["encounterID"] = 2543,
["npcID"] = 181398,
},
[394680] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reclaimer Makko",
["npcID"] = 191536,
},
["255371"] = {
["encounterName"] = "Rezan",
["source"] = "Rezan",
["encounterID"] = 2086,
["event"] = "SPELL_CAST_START",
["npcID"] = 122963,
},
[386490] = {
["encounterName"] = "Granyth",
["source"] = "Nokhud Saboteur",
["encounterID"] = 2637,
["event"] = "SPELL_CAST_START",
["npcID"] = 195821,
},
[292290] = {
["encounterName"] = "King Mechagon",
["encounterID"] = 2260,
["npcID"] = 144249,
},
[115062] = {
["source"] = "Unga Fish-Getter",
["event"] = "SPELL_CAST_START",
["npcID"] = 60299,
},
[398780] = {
["source"] = "Farscale Myrmidon",
["event"] = "SPELL_CAST_START",
["npcID"] = 200485,
},
[337344] = {
["npcID"] = 159459,
},
[341441] = {
["npcID"] = 174069,
},
[398782] = {
["event"] = "SPELL_CAST_START",
["source"] = "Farscale Hunter",
["npcID"] = 200484,
},
[152298] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vengeful Magma Elemental",
["npcID"] = 75820,
},
["384194"] = {
["source"] = "Primalist Cinderweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 190207,
},
[394688] = {
["source"] = "Magmaton",
["event"] = "SPELL_CAST_START",
["npcID"] = 186827,
},
[361923] = {
["encounterName"] = "Lords of Dread",
["encounterID"] = 2543,
["npcID"] = 183138,
},
[320966] = {
["encounterName"] = "Kin-Tara",
["npcID"] = 162059,
["encounterID"] = 2357,
},
[427456] = {
["encounterName"] = "Commander Ulthok",
["source"] = "Commander Ulthok",
["npcID"] = 40765,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1044,
},
[406978] = {
["source"] = "Contamination Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 204581,
},
[110968] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scarlet Purifier",
["npcID"] = 58569,
},
[337351] = {
["npcID"] = 159459,
},
[427459] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Earthshaper Telu",
["npcID"] = 83893,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1757,
},
[300491] = {
["encounterName"] = "Queen Azshara",
["npcID"] = 153090,
["encounterID"] = 2299,
},
[374215] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[329163] = {
["npcID"] = 168837,
},
[402887] = {
["source"] = "Gholna",
["event"] = "SPELL_CAST_START",
["npcID"] = 199853,
},
[402888] = {
["source"] = "Bonesifter Marwak",
["event"] = "SPELL_CAST_START",
["npcID"] = 200681,
},
[68988] = {
["encounterName"] = "Bronjahm",
["source"] = "Bronjahm",
["encounterID"] = 2006,
["event"] = "SPELL_CAST_START",
["npcID"] = 36497,
},
[312782] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "N'Zoth the Corruptor",
["npcID"] = 158041,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[382410] = {
["source"] = "Trickclaw Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 185528,
},
[353741] = {
["npcID"] = 178958,
},
[205549] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["encounterID"] = 1792,
["event"] = "SPELL_CAST_START",
["npcID"] = 91005,
},
[288210] = {
["npcID"] = 163032,
},
[329168] = {
["encounterName"] = "Lord Chamberlain",
["encounterID"] = 2381,
["npcID"] = 165737,
},
[398796] = {
["source"] = "Farscale Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 200486,
},
["386757"] = {
["encounterName"] = "Khajin the Unyielding",
["source"] = "Khajin the Unyielding",
["encounterID"] = 2617,
["event"] = "SPELL_CAST_START",
["npcID"] = 189727,
},
[345552] = {
["npcID"] = 177168,
},
[44224] = {
["encounterName"] = "Kael'thas Sunstrider",
["encounterID"] = 1894,
["npcID"] = 24664,
},
[345553] = {
["npcID"] = 174843,
},
[345554] = {
["npcID"] = 177862,
},
[146163] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'kron Dark Farseer",
["npcID"] = 72770,
},
[329172] = {
["encounterName"] = "Lord Chamberlain",
["encounterID"] = 2381,
["npcID"] = 165737,
},
[170738] = {
["event"] = "SPELL_CAST_START",
["source"] = "Undermage Kesalon",
["npcID"] = 85496,
},
[394706] = {
["source"] = "Unstable Frost",
["event"] = "SPELL_CAST_START",
["npcID"] = 198702,
},
[124283] = {
["encounterName"] = "General Pa'valak",
["source"] = "General Pa'valak",
["npcID"] = 61485,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1447,
},
[154356] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Soulpriest",
["npcID"] = 76595,
},
[390613] = {
["event"] = "SPELL_CAST_START",
["source"] = "Snarglebone",
["npcID"] = 197344,
},
[164597] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodmaul Geomancer",
["npcID"] = 75198,
},
[15537] = {
["source"] = "Morloch",
["event"] = "SPELL_CAST_START",
["npcID"] = 11657,
},
[15665] = {
["npcID"] = 9778,
},
[144119] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Amber",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71407,
},
[320989] = {
["npcID"] = 156561,
},
[329181] = {
["encounterName"] = "Sire Denathrius",
["npcID"] = 167406,
["encounterID"] = 2407,
},
[271841] = {
["npcID"] = 157002,
},
[275937] = {
["source"] = "Frigidus",
["event"] = "SPELL_CAST_START",
["npcID"] = 204425,
},
[320991] = {
["npcID"] = 162038,
},
[128381] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'thik Resonator",
["npcID"] = 62755,
},
[349663] = {
["encounterName"] = "The Grand Menagerie",
["npcID"] = 176556,
["encounterID"] = 2441,
},
["265407"] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Banquet Steward",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 131586,
},
[394717] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wilrive",
["npcID"] = 193632,
},
["374544"] = {
["source"] = "Fetid Rotsinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 186226,
},
[146170] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kor'kron Dark Farseer",
["npcID"] = 72770,
},
[390624] = {
["event"] = "SPELL_CAST_START",
["source"] = "Snarglebone",
["npcID"] = 197344,
},
[353763] = {
["npcID"] = 179135,
},
[394721] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wilrive",
["npcID"] = 193632,
},
[382434] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["npcID"] = 189492,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2607,
},
["293827"] = {
["npcID"] = 144294,
},
[382435] = {
["source"] = "Decay Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 186191,
},
[320999] = {
["npcID"] = 164852,
},
[38595] = {
["encounterName"] = "Priestess Delrissa",
["encounterID"] = 1895,
["npcID"] = 24558,
},
[321000] = {
["npcID"] = 177134,
},
[423396] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lethka",
["npcID"] = 208740,
},
[353769] = {
["npcID"] = 179136,
},
[300525] = {
["npcID"] = 150142,
},
[411111] = {
["event"] = "SPELL_CAST_START",
["source"] = "Calibrating Scent Matrix",
["npcID"] = 203606,
},
[390633] = {
["npcID"] = 189954,
},
[411112] = {
["source"] = "Calibrating Scent Matrix",
["event"] = "SPELL_CAST_START",
["npcID"] = 203606,
},
[133889] = {
["source"] = "Bilgewater Field Medic",
["event"] = "SPELL_CAST_START",
["npcID"] = 67919,
},
[394731] = {
["source"] = "Unstable Earth",
["event"] = "SPELL_CAST_START",
["npcID"] = 198709,
},
[427498] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Life Warden Gola",
["npcID"] = 83892,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1757,
},
[321009] = {
["encounterName"] = "Kin-Tara",
["npcID"] = 162059,
["encounterID"] = 2357,
},
[357872] = {
["npcID"] = 177427,
},
[22883] = {
["source"] = "Siaszerathel",
["event"] = "SPELL_CAST_START",
["npcID"] = 189583,
},
[333299] = {
["npcID"] = 169893,
},
[146179] = {
["encounterName"] = "Norushen",
["source"] = "Amalgam of Corruption",
["npcID"] = 72276,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1624,
},
[415215] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Alliance Archer",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 206352,
},
[86405] = {
["source"] = "Rockshell Snapclaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 63369,
},
[386546] = {
["source"] = "Arcane Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 186741,
},
[146180] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Staff of Resonating Water",
["encounterID"] = 1594,
["event"] = "SPELL_CAST_START",
["npcID"] = 72810,
},
[386547] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Teera",
["encounterID"] = 2581,
["event"] = "SPELL_CAST_START",
["npcID"] = 186339,
},
[353782] = {
["npcID"] = 179136,
},
[423410] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lethka",
["npcID"] = 208740,
},
[353783] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 176565,
["encounterID"] = 2440,
},
[122244] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sik'thik Engineer",
["npcID"] = 62632,
},
[423413] = {
["source"] = "Man'ari Acolyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 208855,
},
[427509] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Earthshaper Telu",
["npcID"] = 83893,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1757,
},
[195332] = {
["encounterName"] = "Ash'Golm",
["source"] = "Ember",
["encounterID"] = 1816,
["event"] = "SPELL_CAST_START",
["npcID"] = 99233,
},
[427510] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Dulhu",
["npcID"] = 83894,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1757,
},
[366074] = {
["npcID"] = 183927,
},
[296447] = {
["npcID"] = 152644,
},
[148232] = {
["encounterName"] = "Galakras",
["source"] = "Lor'themar Theron",
["encounterID"] = 1622,
["event"] = "SPELL_CAST_START",
["npcID"] = 72560,
},
[386555] = {
["source"] = "Dathea Stormlash",
["event"] = "SPELL_CAST_START",
["npcID"] = 187768,
},
[325119] = {
["npcID"] = 157212,
},
[366077] = {
["npcID"] = 183291,
},
[321025] = {
["npcID"] = 157754,
},
[137994] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Ritualist",
["npcID"] = 69702,
},
[394749] = {
["source"] = "Unstable Storm",
["event"] = "SPELL_CAST_START",
["npcID"] = 198716,
},
[300547] = {
["npcID"] = 150142,
},
[164617] = {
["encounterName"] = "Gug'rokk",
["source"] = "Bloodmaul Flamespeaker",
["npcID"] = 81767,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1654,
},
[386559] = {
["encounterName"] = "Khajin the Unyielding",
["source"] = "Khajin the Unyielding",
["npcID"] = 189727,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2617,
},
[137995] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Ritualist",
["npcID"] = 69702,
},
[407039] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Voice From Beyond",
["encounterID"] = 2684,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 203812,
},
[296454] = {
["npcID"] = 152656,
},
[419327] = {
["source"] = "Timeline Marauder",
["event"] = "SPELL_CAST_START",
["npcID"] = 199748,
},
[423423] = {
["source"] = "Man'ari Sycophant",
["event"] = "SPELL_CAST_START",
["npcID"] = 208856,
},
[172810] = {
["npcID"] = 81603,
},
[199433] = {
["source"] = "Stormfang Bonecaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 187931,
},
[361989] = {
["encounterName"] = "Anduin Wrynn",
["encounterID"] = 2546,
["npcID"] = 181954,
},
[258822] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shallows Seagull",
["npcID"] = 141877,
},
[329224] = {
["npcID"] = 168022,
},
[219913] = {
["event"] = "SPELL_CAST_START",
["source"] = "Violent Crageater",
["npcID"] = 95916,
},
[296459] = {
["encounterName"] = "Radiance of Azshara",
["npcID"] = 152364,
["encounterID"] = 2305,
},
[407045] = {
["source"] = "Ookbeard",
["event"] = "SPELL_CAST_START",
["npcID"] = 200956,
},
[275983] = {
["npcID"] = 157571,
},
[275984] = {
["npcID"] = 166936,
},
[382474] = {
["source"] = "Decay Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 186191,
},
[419336] = {
["source"] = "Fel-Watcher Mara",
["event"] = "SPELL_CAST_START",
["npcID"] = 206925,
},
[300560] = {
["npcID"] = 150142,
},
[419337] = {
["source"] = "Fel-Watcher Mara",
["event"] = "SPELL_CAST_START",
["npcID"] = 206925,
},
[394763] = {
["source"] = "Private Shikzar",
["event"] = "SPELL_CAST_START",
["npcID"] = 193127,
},
[341520] = {
["npcID"] = 173973,
},
[394765] = {
["source"] = "Morgg",
["event"] = "SPELL_CAST_START",
["npcID"] = 189244,
},
[11443] = {
["source"] = "Thuzadin Shadowcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 10398,
},
[189200] = {
["npcID"] = 156244,
},
[407055] = {
["source"] = "High Seer Jhatal",
["event"] = "SPELL_CAST_START",
["npcID"] = 199842,
},
[419343] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2731,
},
[172818] = {
["npcID"] = 184074,
},
[166675] = {
["npcID"] = 80937,
},
[325143] = {
["npcID"] = 157212,
},
[329239] = {
["npcID"] = 163882,
},
[345623] = {
["npcID"] = 165824,
},
[366102] = {
["npcID"] = 181011,
},
[370198] = {
["source"] = "Kauj",
["event"] = "SPELL_CAST_START",
["npcID"] = 186386,
},
[407060] = {
["source"] = "High Seer Jhatal",
["event"] = "SPELL_CAST_START",
["npcID"] = 199842,
},
[260879] = {
["encounterName"] = "Elder Leaxa",
["source"] = "Elder Leaxa",
["npcID"] = 131318,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2111,
},
[15795] = {
["event"] = "SPELL_CAST_START",
["source"] = "S.H.A.R.K. Rocketeer",
["npcID"] = 68669,
},
[394775] = {
["source"] = "Eldoren the Reborn",
["event"] = "SPELL_CAST_START",
["npcID"] = 193234,
},
[345627] = {
["npcID"] = 159174,
},
[419351] = {
["source"] = "Infinite Saboteur",
["event"] = "SPELL_CAST_START",
["npcID"] = 208438,
},
[390681] = {
["npcID"] = 189954,
},
[114062] = {
["encounterName"] = "Jandice Barov",
["npcID"] = 59184,
["encounterID"] = 1427,
},
[378397] = {
["npcID"] = 191095,
},
[407069] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[394782] = {
["source"] = "Ty'foon the Ascended",
["event"] = "SPELL_CAST_START",
["npcID"] = 191354,
},
[415262] = {
["encounterName"] = "The Headless Horseman",
["source"] = "Headless Horseman",
["encounterID"] = 2725,
["event"] = "SPELL_CAST_START",
["npcID"] = 207438,
},
[321061] = {
["encounterName"] = "The Manastorms",
["encounterID"] = 2394,
["npcID"] = 164555,
},
[370212] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Ironskin",
["npcID"] = 191524,
},
[329256] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2405,
["npcID"] = 169271,
},
[423459] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["encounterID"] = 2708,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 209800,
},
[325162] = {
["npcID"] = 166544,
},
[325163] = {
["npcID"] = 171772,
},
[402983] = {
["source"] = "Gholna",
["event"] = "SPELL_CAST_START",
["npcID"] = 199853,
},
[267824] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soul Essence",
["npcID"] = 135240,
},
[353835] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 176565,
["encounterID"] = 2440,
},
[402985] = {
["source"] = "Gholna",
["event"] = "SPELL_CAST_START",
["npcID"] = 199853,
},
[357932] = {
["npcID"] = 178810,
},
[362028] = {
["encounterName"] = "The Jailer",
["encounterID"] = 2537,
["npcID"] = 180990,
},
[423465] = {
["source"] = "Arzal'kal",
["event"] = "SPELL_CAST_START",
["npcID"] = 208836,
},
[394795] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stonewrecker Tokara",
["npcID"] = 193442,
},
[419370] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feltouched Conjurer",
["npcID"] = 205919,
},
[378413] = {
["event"] = "SPELL_CAST_START",
["source"] = "Water Fury",
["npcID"] = 191111,
},
[423467] = {
["source"] = "Hooded Saboteur",
["event"] = "SPELL_CAST_START",
["npcID"] = 208836,
},
[402989] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[394798] = {
["event"] = "SPELL_CAST_START",
["source"] = "Azra's Prized Peony",
["npcID"] = 193135,
},
[133923] = {
["event"] = "SPELL_CAST_START",
["source"] = "Commander Tel'vrak",
["npcID"] = 67879,
},
[423469] = {
["source"] = "Mosa Umbramane",
["event"] = "SPELL_CAST_START",
["npcID"] = 210070,
},
[158498] = {
["event"] = "SPELL_CAST_START",
["source"] = "Windroc",
["npcID"] = 79398,
},
[370225] = {
["source"] = "Shrieking Whelp",
["event"] = "SPELL_CAST_START",
["npcID"] = 187159,
},
[394800] = {
["source"] = "Council Earthcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 198500,
},
[423471] = {
["source"] = "Monstrous Blisterfiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 208880,
},
[122259] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sik'thik Engineer",
["npcID"] = 62632,
},
[394802] = {
["source"] = "Council Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 198502,
},
[284217] = {
["npcID"] = 144564,
},
[357941] = {
["npcID"] = 178883,
},
[394803] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corrupted Proto-Dragon",
["npcID"] = 193658,
},
[284218] = {
["npcID"] = 144564,
},
[260894] = {
["encounterName"] = "Elder Leaxa",
["source"] = "Elder Leaxa",
["npcID"] = 131318,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2111,
},
[284219] = {
["npcID"] = 150297,
},
[357943] = {
["npcID"] = 180013,
},
[357944] = {
["npcID"] = 179768,
},
[394806] = {
["source"] = "Phleep",
["event"] = "SPELL_CAST_START",
["npcID"] = 193210,
},
[284223] = {
["npcID"] = 144564,
},
[226083] = {
["npcID"] = 179460,
},
[407097] = {
["source"] = "Earthrender Ku'siva",
["event"] = "SPELL_CAST_START",
["npcID"] = 199840,
},
[390715] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eranog",
["npcID"] = 184972,
},
[394811] = {
["source"] = "Seeker Teryx",
["event"] = "SPELL_CAST_START",
["npcID"] = 193188,
},
["300414"] = {
["npcID"] = 150143,
},
[427579] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stalwart Bristlebruin",
["npcID"] = 210507,
},
[366143] = {
["npcID"] = 184651,
},
[308803] = {
["npcID"] = 158259,
},
[357953] = {
["npcID"] = 180013,
},
[427581] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stalwart Bristlebruin",
["npcID"] = 210507,
},
[158506] = {
["event"] = "SPELL_CAST_START",
["source"] = "Windroc",
["npcID"] = 79398,
},
[394816] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shardwing",
["npcID"] = 201562,
},
[183081] = {
["npcID"] = 104091,
},
[357955] = {
["npcID"] = 178883,
},
[415296] = {
["source"] = "Larodar, Keeper of the Flame",
["event"] = "SPELL_CAST_START",
["npcID"] = 205136,
},
[374339] = {
["event"] = "SPELL_CAST_START",
["source"] = "Refti Defender",
["npcID"] = 190340,
},
[427585] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stalwart Bristlebruin",
["npcID"] = 210507,
},
[158508] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaliri Skyterror",
["npcID"] = 85753,
},
[407107] = {
["source"] = "Earthrender Ku'siva",
["event"] = "SPELL_CAST_START",
["npcID"] = 199840,
},
[197418] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Illysanna Ravencrest",
["encounterID"] = 1833,
["event"] = "SPELL_CAST_START",
["npcID"] = 98696,
},
[366150] = {
["npcID"] = 180906,
},
[407108] = {
["source"] = "Earthrender Ku'siva",
["event"] = "SPELL_CAST_START",
["npcID"] = 199840,
},
[70043] = {
["encounterName"] = "Bronjahm",
["source"] = "Bronjahm",
["encounterID"] = 2006,
["event"] = "SPELL_CAST_START",
["npcID"] = 36497,
},
[374343] = {
["encounterName"] = "Echo of Doragosa",
["source"] = "Echo of Doragosa",
["encounterID"] = 2565,
["event"] = "SPELL_CAST_START",
["npcID"] = 190609,
},
[362056] = {
["encounterName"] = "Halondrus the Reclaimer",
["encounterID"] = 2529,
["npcID"] = 181447,
},
[300620] = {
["encounterName"] = "Queen Azshara",
["npcID"] = 153090,
["encounterID"] = 2299,
},
[276046] = {
["npcID"] = 138794,
},
[146223] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hellscream Annihilator",
["npcID"] = 72847,
},
[394824] = {
["source"] = "Seeker Teryx",
["event"] = "SPELL_CAST_START",
["npcID"] = 193188,
},
[154415] = {
["encounterName"] = "Soulbinder Nyami",
["source"] = "Soulbinder Nyami",
["npcID"] = 76177,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1685,
},
[415304] = {
["source"] = "Great Glorious Alliance Paladin",
["event"] = "SPELL_CAST_START",
["npcID"] = 207579,
},
[162608] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shani Freezewind",
["npcID"] = 80485,
},
[197422] = {
["encounterName"] = "Cordana Felsong",
["source"] = "Cordana Felsong",
["npcID"] = 95888,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1818,
},
[357967] = {
["npcID"] = 178897,
},
[394829] = {
["source"] = "Osseous Broodmother",
["event"] = "SPELL_CAST_START",
["npcID"] = 203348,
},
[382542] = {
["source"] = "Vicious Ice Slitherer",
["event"] = "SPELL_CAST_START",
["npcID"] = 186391,
},
[22121] = {
["npcID"] = 13358,
},
[260907] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["npcID"] = 131824,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2113,
},
[183088] = {
["source"] = "Mightstone Breaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 113998,
},
["412129"] = {
["source"] = "Lerai, Timesworn Maiden",
["event"] = "SPELL_CAST_START",
["npcID"] = 205152,
},
[386640] = {
["source"] = "Tarasek Looter",
["event"] = "SPELL_CAST_START",
["npcID"] = 187242,
},
[407120] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Horde Axe Thrower",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203799,
},
[394833] = {
["source"] = "Qalashi War Mammoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 192737,
},
[370259] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Earth Elemental",
["npcID"] = 187322,
},
[407121] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Horde Warlock",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203857,
},
["257736"] = {
["source"] = "Irontide Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 126919,
},
[150324] = {
["encounterName"] = "Magmolatus",
["source"] = "Ruination",
["npcID"] = 74570,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1655,
},
[407122] = {
["source"] = "Horde Warlock",
["event"] = "SPELL_CAST_START",
["npcID"] = 203857,
},
[39121] = {
["source"] = "Bloodwarder Greenkeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 18419,
},
[195378] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rippling Lifefury",
["npcID"] = 95869,
},
[378453] = {
["isChanneled"] = true,
["source"] = "Inferna the Bound",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 186735,
},
[419411] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ursoc the Destroyer",
["npcID"] = 206834,
},
[407124] = {
["source"] = "Horde Raider",
["event"] = "SPELL_CAST_START",
["npcID"] = 207969,
},
[378454] = {
["source"] = "Primal Avalanche",
["event"] = "SPELL_CAST_START",
["npcID"] = 187082,
},
[407125] = {
["source"] = "Horde Raider",
["event"] = "SPELL_CAST_START",
["npcID"] = 207969,
},
[394838] = {
["source"] = "Henlare",
["event"] = "SPELL_CAST_START",
["npcID"] = 193229,
},
[263775] = {
["encounterName"] = "Adderis and Aspix",
["encounterID"] = 2124,
["npcID"] = 133944,
},
[191284] = {
["encounterName"] = "Hymdall",
["source"] = "Hymdall",
["encounterID"] = 1805,
["event"] = "SPELL_CAST_START",
["npcID"] = 94960,
},
[304733] = {
["encounterName"] = "Za'qul",
["npcID"] = 150859,
["encounterID"] = 2293,
},
[374361] = {
["encounterName"] = "Echo of Doragosa",
["source"] = "Echo of Doragosa",
["encounterID"] = 2565,
["event"] = "SPELL_CAST_START",
["npcID"] = 190609,
},
[357979] = {
["npcID"] = 178897,
},
[366171] = {
["npcID"] = 184952,
},
[329310] = {
["npcID"] = 158813,
},
[382555] = {
["source"] = "Bracken Warscourge",
["event"] = "SPELL_CAST_START",
["npcID"] = 185529,
},
[403034] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fyrakk",
["npcID"] = 200832,
},
[374364] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["encounterID"] = 2582,
["event"] = "SPELL_CAST_START",
["npcID"] = 186644,
},
[394843] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oshigol",
["npcID"] = 193235,
},
[129437] = {
["source"] = "Krasari Hissing Wasp",
["event"] = "SPELL_CAST_START",
["npcID"] = 65802,
},
[374365] = {
["encounterName"] = "Magmatusk",
["source"] = "Magmatusk",
["npcID"] = 181861,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2610,
},
[138042] = {
["source"] = "Zandalari Warbringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 69841,
},
[120222] = {
["source"] = "Seething Sha",
["event"] = "SPELL_CAST_START",
["npcID"] = 61610,
},
[162617] = {
["encounterName"] = "Rocketspark and Borka",
["encounterID"] = 1715,
["npcID"] = 77816,
},
[138043] = {
["source"] = "Zandalari Warscout",
["event"] = "SPELL_CAST_START",
["npcID"] = 69768,
},
[142139] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthborn Hatred",
["npcID"] = 70822,
},
[321124] = {
["npcID"] = 156815,
},
[382561] = {
["source"] = "Snowhide Shaman",
["event"] = "SPELL_CAST_START",
["npcID"] = 189654,
},
[357987] = {
["npcID"] = 178757,
},
[386658] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rokzul",
["npcID"] = 194458,
},
[362084] = {
["npcID"] = 181324,
},
[382563] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[325223] = {
["npcID"] = 166304,
},
[111008] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scarlet Zealot",
["npcID"] = 58590,
},
[191290] = {
["npcID"] = 76642,
},
[386660] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["encounterID"] = 2582,
["event"] = "SPELL_CAST_START",
["npcID"] = 186644,
},
[366182] = {
["npcID"] = 183498,
},
[423523] = {
["source"] = "Anguished Dream Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 210304,
},
[411236] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[366183] = {
["npcID"] = 183498,
},
[337513] = {
["npcID"] = 158259,
},
[162621] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alune Windmane",
["npcID"] = 80488,
},
[329322] = {
["npcID"] = 155831,
},
[366185] = {
["npcID"] = 183499,
},
[390760] = {
["source"] = "Chief Grrlgllmesh",
["event"] = "SPELL_CAST_START",
["npcID"] = 186678,
},
[329325] = {
["npcID"] = 155831,
},
[366187] = {
["npcID"] = 183499,
},
[329326] = {
["npcID"] = 155831,
},
[349805] = {
["encounterName"] = "Kel'Thuzad",
["npcID"] = 176973,
["encounterID"] = 2422,
},
[423529] = {
["source"] = "Anguished Dream Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 210304,
},
[111010] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scarlet Zealot",
["npcID"] = 58590,
},
[366189] = {
["npcID"] = 183500,
},
[325232] = {
["npcID"] = 170031,
},
["407733"] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 200912,
},
[337520] = {
["npcID"] = 159412,
},
[423531] = {
["source"] = "Anguished Dream Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 210304,
},
[394861] = {
["source"] = "Henlare",
["event"] = "SPELL_CAST_START",
["npcID"] = 193229,
},
[390766] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blitztusk",
["npcID"] = 190907,
},
[419437] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hel'nurathian Defender",
["npcID"] = 205937,
},
[382576] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earthen Guardian",
["npcID"] = 184131,
},
[296566] = {
["encounterName"] = "Radiance of Azshara",
["npcID"] = 152364,
["encounterID"] = 2305,
},
[284279] = {
["event"] = "SPELL_CAST_START",
["source"] = "Buckshot Bazza",
["npcID"] = 144565,
},
[321141] = {
["npcID"] = 156562,
},
[138052] = {
["encounterName"] = "Ji-Kun",
["source"] = "Ji-Kun",
["encounterID"] = 1573,
["event"] = "SPELL_CAST_START",
["npcID"] = 69712,
},
[382578] = {
["source"] = "Earthen Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 184131,
},
[403057] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[341621] = {
["encounterName"] = "Lady Inerva Darkvein",
["npcID"] = 165521,
["encounterID"] = 2406,
},
[386675] = {
["source"] = "Siaszerathel",
["event"] = "SPELL_CAST_START",
["npcID"] = 189583,
},
[13878] = {
["npcID"] = 45569,
},
[366197] = {
["npcID"] = 183500,
},
[358006] = {
["npcID"] = 179608,
},
[394869] = {
["event"] = "SPELL_CAST_START",
["source"] = "Boneshaper Jardak",
["npcID"] = 188693,
},
[366199] = {
["npcID"] = 183495,
},
[394870] = {
["isChanneled"] = true,
["source"] = "Council Icecaller",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 198501,
},
[183108] = {
["npcID"] = 106547,
},
[337530] = {
["npcID"] = 158259,
},
[32363] = {
["encounterName"] = "Nexus-Prince Shaffar",
["source"] = "Nexus-Prince Shaffar",
["encounterID"] = 1899,
["event"] = "SPELL_CAST_START",
["npcID"] = 18344,
},
[407159] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Blight of Galakrond",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 198997,
},
[427638] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nuoberon",
["npcID"] = 209113,
},
[358011] = {
["npcID"] = 178789,
},
[142152] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mouth of Terror",
["npcID"] = 70691,
},
[39126] = {
["source"] = "Sunseeker Botanist",
["event"] = "SPELL_CAST_START",
["npcID"] = 18422,
},
[390780] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blitztusk",
["npcID"] = 190907,
},
[394876] = {
["event"] = "SPELL_CAST_START",
["source"] = "Phenran",
["npcID"] = 193688,
},
[183111] = {
["npcID"] = 104091,
},
[140106] = {
["source"] = "Zandalari Spearanger",
["event"] = "SPELL_CAST_START",
["npcID"] = 69298,
},
[162633] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thunderlord Beast-Tender",
["npcID"] = 80423,
},
[394878] = {
["isChanneled"] = true,
["source"] = "Eranog",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 198500,
},
[154442] = {
["encounterName"] = "Ner'zhul",
["source"] = "Ner'zhul",
["encounterID"] = 1682,
["event"] = "SPELL_CAST_START",
["npcID"] = 76407,
},
[179017] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fathom-Commander Zarrin",
["npcID"] = 88090,
},
[382593] = {
["source"] = "Cruel Bonecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 186206,
},
[370307] = {
["source"] = "Eranog",
["event"] = "SPELL_CAST_START",
["npcID"] = 184972,
},
[325254] = {
["encounterName"] = "Grand Proctor Beryllia",
["encounterID"] = 2362,
["npcID"] = 162102,
},
[106920] = {
["event"] = "SPELL_CAST_START",
["source"] = "Regenerating Sha",
["npcID"] = 56763,
},
[398978] = {
["event"] = "SPELL_CAST_START",
["source"] = "Memory of an Attacker",
["npcID"] = 200825,
},
[39127] = {
["source"] = "Sunseeker Chemist",
["event"] = "SPELL_CAST_START",
["npcID"] = 19486,
},
[390788] = {
["source"] = "Chief Grrlgllmesh",
["event"] = "SPELL_CAST_START",
["npcID"] = 186678,
},
[148301] = {
["encounterName"] = "Galakras",
["source"] = "Kor'kron Demolisher",
["encounterID"] = 1622,
["event"] = "SPELL_CAST_START",
["npcID"] = 72947,
},
[382597] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frost Shackler",
["npcID"] = 190993,
},
[358023] = {
["npcID"] = 180474,
},
[398981] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stalwart Broodwarden",
["npcID"] = 198263,
},
[386694] = {
["source"] = "Stormsurge Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 194897,
},
[325258] = {
["encounterName"] = "Mueh'zala",
["npcID"] = 166608,
["encounterID"] = 2396,
},
[148302] = {
["encounterName"] = "Galakras",
["source"] = "Kor'kron Demolisher",
["encounterID"] = 1622,
["event"] = "SPELL_CAST_START",
["npcID"] = 72947,
},
[32364] = {
["encounterName"] = "Nexus-Prince Shaffar",
["source"] = "Nexus-Prince Shaffar",
["encounterID"] = 1899,
["event"] = "SPELL_CAST_START",
["npcID"] = 18344,
},
[162638] = {
["event"] = "SPELL_CAST_START",
["source"] = "Avenger Turley",
["npcID"] = 80499,
},
[272016] = {
["npcID"] = 154014,
},
[398985] = {
["source"] = "Broodguardian Ziruss",
["event"] = "SPELL_CAST_START",
["npcID"] = 198214,
},
[39128] = {
["source"] = "Sunseeker Chemist",
["event"] = "SPELL_CAST_START",
["npcID"] = 19486,
},
[386700] = {
["source"] = "Winter Conqueror",
["event"] = "SPELL_CAST_START",
["npcID"] = 190129,
},
[353935] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[394893] = {
["source"] = "Lookout Mordren",
["event"] = "SPELL_CAST_START",
["npcID"] = 193668,
},
[407181] = {
["event"] = "SPELL_CAST_START",
["source"] = "Watcher Koranos",
["npcID"] = 200077,
},
[106923] = {
["encounterName"] = "Gu Cloudstrike",
["source"] = "Azure Serpent",
["npcID"] = 56754,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1303,
},
[415373] = {
["source"] = "Great Glorious Alliance Footman",
["event"] = "SPELL_CAST_START",
["npcID"] = 207578,
},
[394895] = {
["event"] = "SPELL_CAST_START",
["source"] = "Phenran",
["npcID"] = 193688,
},
[158546] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rustwing Scavenger",
["npcID"] = 153293,
},
[337556] = {
["npcID"] = 162853,
},
[366227] = {
["npcID"] = 183496,
},
[345749] = {
["npcID"] = 158259,
},
[256846] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dinomancer Kish'o",
["npcID"] = 129553,
},
[358038] = {
["npcID"] = 179802,
},
[158549] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rustwing Scavenger",
["npcID"] = 153293,
},
[321178] = {
["npcID"] = 162047,
},
[427668] = {
["encounterName"] = "Commander Ulthok",
["source"] = "Commander Ulthok",
["npcID"] = 40765,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1044,
},
[337562] = {
["npcID"] = 162875,
},
[358041] = {
["npcID"] = 180160,
},
[394903] = {
["source"] = "Lookout Mordren",
["event"] = "SPELL_CAST_START",
["npcID"] = 193668,
},
["227592"] = {
["encounterName"] = "Shade of Medivh",
["encounterID"] = 1965,
["npcID"] = 114350,
},
[133976] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Jade Warlord",
["npcID"] = 68005,
},
[374426] = {
["source"] = "Initiate Radiya",
["event"] = "SPELL_CAST_START",
["npcID"] = 190014,
},
[256849] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dinomancer Kish'o",
["npcID"] = 129553,
},
[423576] = {
["source"] = "Speaker Nalridun",
["event"] = "SPELL_CAST_START",
["npcID"] = 208862,
},
[427672] = {
["encounterName"] = "Commander Ulthok",
["source"] = "Commander Ulthok",
["npcID"] = 40765,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1044,
},
[349853] = {
["npcID"] = 177093,
},
[337566] = {
["npcID"] = 172797,
},
[138073] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Mogu Guardian",
["npcID"] = 69767,
},
[382620] = {
["source"] = "Bonebolt Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 185534,
},
[329376] = {
["npcID"] = 179913,
},
[358047] = {
["npcID"] = 179931,
},
[403101] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Eternal Blaze",
["npcID"] = 201773,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[407198] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
["381470"] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Tricktotem",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186125,
},
[394912] = {
["source"] = "Crystalus",
["event"] = "SPELL_CAST_START",
["npcID"] = 193645,
},
[407200] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[333477] = {
["npcID"] = 163621,
},
[386722] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alerted Stormsmith",
["npcID"] = 192236,
},
[358053] = {
["npcID"] = 180160,
},
[329383] = {
["npcID"] = 153882,
},
[333479] = {
["npcID"] = 163620,
},
[199514] = {
["isChanneled"] = true,
["source"] = "Shroud Hound",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 97365,
},
[358055] = {
["npcID"] = 179254,
},
[411300] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Waveshaper",
["npcID"] = 205363,
},
[407205] = {
["source"] = "Horde Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 203861,
},
[272046] = {
["encounterName"] = "Skycap'n Kragg",
["source"] = "Sharkbait",
["encounterID"] = 2093,
["event"] = "SPELL_CAST_START",
["npcID"] = 126841,
},
[407207] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[362154] = {
["npcID"] = 182879,
},
[345772] = {
["npcID"] = 175579,
},
[191325] = {
["encounterName"] = "Dresaron",
["source"] = "Dresaron",
["npcID"] = 99200,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1838,
},
[394922] = {
["isChanneled"] = true,
["source"] = "Braekkas",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 196855,
},
[362157] = {
["npcID"] = 182879,
},
[329392] = {
["npcID"] = 157576,
},
[333488] = {
["encounterName"] = "Amarth, The Harvester",
["encounterID"] = 2388,
["npcID"] = 163157,
},
[407212] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Dragonhunter",
["npcID"] = 202108,
},
[193375] = {
["encounterName"] = "Ularogg Cragshaper",
["source"] = "Ularogg Cragshaper",
["encounterID"] = 1791,
["event"] = "SPELL_CAST_START",
["npcID"] = 91004,
},
[353969] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[193376] = {
["encounterName"] = "Ularogg Cragshaper",
["source"] = "Ularogg Cragshaper",
["encounterID"] = 1791,
["event"] = "SPELL_CAST_START",
["npcID"] = 91004,
},
[329396] = {
["npcID"] = 159664,
},
[399024] = {
["source"] = "Farscale Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 200486,
},
[358067] = {
["npcID"] = 178877,
},
[399025] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Revenant",
["npcID"] = 200720,
},
[390834] = {
["source"] = "Sarana",
["event"] = "SPELL_CAST_START",
["npcID"] = 190161,
},
[415409] = {
["source"] = "Rupturing Firevine",
["event"] = "SPELL_CAST_START",
["npcID"] = 207699,
},
[125363] = {
["source"] = "Ik-Ik the Nimble",
["event"] = "SPELL_CAST_START",
["npcID"] = 50836,
},
["429037"] = {
["encounterName"] = "Mindbender Ghur'sha",
["source"] = "Erunak Stonespeaker",
["encounterID"] = 1046,
["event"] = "SPELL_CAST_START",
["npcID"] = 40825,
},
[419506] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["encounterID"] = 2677,
["event"] = "SPELL_CAST_START",
["npcID"] = 204931,
},
[329401] = {
["npcID"] = 159664,
},
[228193] = {
["encounterName"] = "Opera Hall",
["npcID"] = 114329,
["encounterID"] = 1957,
},
[329402] = {
["npcID"] = 161620,
},
["263943"] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Heartsbane Runeweaver",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131677,
},
[256864] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dinomancer Kish'o",
["npcID"] = 129553,
},
[386745] = {
["npcID"] = 189206,
},
[423607] = {
["source"] = "Elisande",
["event"] = "SPELL_CAST_START",
["npcID"] = 208668,
},
[256865] = {
["npcID"] = 169175,
},
[304831] = {
["npcID"] = 156142,
},
[181094] = {
["encounterName"] = "Hellfire Assault",
["source"] = "Felfire Demolisher",
["npcID"] = 91103,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1778,
},
[125365] = {
["source"] = "Ik-Ik the Nimble",
["event"] = "SPELL_CAST_START",
["npcID"] = 50836,
},
[321216] = {
["npcID"] = 164886,
},
[423610] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2731,
},
[415419] = {
["source"] = "Larodar, Keeper of the Flame",
["event"] = "SPELL_CAST_START",
["npcID"] = 205136,
},
[419516] = {
["source"] = "Chronaxie",
["event"] = "SPELL_CAST_START",
["npcID"] = 206070,
},
[427708] = {
["source"] = "Reefbreaker Moruud",
["event"] = "SPELL_CAST_START",
["npcID"] = 209898,
},
[366272] = {
["npcID"] = 185032,
},
["200630"] = {
["npcID"] = 95769,
},
[358082] = {
["npcID"] = 179608,
},
[152427] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magma Lord",
["npcID"] = 75211,
},
[411328] = {
["event"] = "SPELL_CAST_START",
["source"] = "Diganthor",
["npcID"] = 204434,
},
[329414] = {
["npcID"] = 161620,
},
[423617] = {
["source"] = "Elisande",
["event"] = "SPELL_CAST_START",
["npcID"] = 208668,
},
[394948] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ashbinder Tornecha",
["npcID"] = 192344,
},
[366278] = {
["npcID"] = 185032,
},
[386757] = {
["encounterName"] = "Khajin the Unyielding",
["source"] = "Khajin the Unyielding",
["npcID"] = 189727,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2617,
},
[407236] = {
["source"] = "Shrinekeeper Qanosh",
["event"] = "SPELL_CAST_START",
["npcID"] = 199839,
},
[419524] = {
["source"] = "Loose Time",
["event"] = "SPELL_CAST_START",
["npcID"] = 209170,
},
[394950] = {
["event"] = "SPELL_CAST_START",
["source"] = "Broodweaver Araznae",
["npcID"] = 193220,
},
[31600] = {
["npcID"] = 25227,
},
[166766] = {
["npcID"] = 171172,
},
[142192] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crypt Guardian",
["npcID"] = 61783,
},
["255577"] = {
["encounterName"] = "Priestess Alun'za",
["source"] = "Priestess Alun'za",
["encounterID"] = 2084,
["event"] = "SPELL_CAST_START",
["npcID"] = 122967,
},
[341709] = {
["encounterName"] = "Mistcaller",
["encounterID"] = 2392,
["npcID"] = 164501,
},
[329422] = {
["npcID"] = 157571,
},
[201581] = {
["encounterName"] = "Millificent Manastorm",
["source"] = "Millificent Manastorm",
["encounterID"] = 1847,
["event"] = "SPELL_CAST_START",
["npcID"] = 101976,
},
[423626] = {
["encounterName"] = "The Headless Horseman",
["source"] = "Headless Horseman",
["encounterID"] = 2725,
["event"] = "SPELL_CAST_START",
["npcID"] = 207438,
},
[415435] = {
["source"] = "Coalesced Moment",
["event"] = "SPELL_CAST_START",
["npcID"] = 206064,
},
[337616] = {
["npcID"] = 158989,
},
[390861] = {
["source"] = "Angen",
["event"] = "SPELL_CAST_START",
["npcID"] = 193341,
},
[329425] = {
["npcID"] = 157634,
},
[382670] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Teera",
["encounterID"] = 2581,
["event"] = "SPELL_CAST_START",
["npcID"] = 186339,
},
[358096] = {
["npcID"] = 177425,
},
[366288] = {
["npcID"] = 184911,
},
[125370] = {
["source"] = "Gar'lok",
["event"] = "SPELL_CAST_START",
["npcID"] = 50739,
},
[292565] = {
["encounterName"] = "Za'qul",
["npcID"] = 151034,
["encounterID"] = 2293,
},
[394959] = {
["source"] = "Acequian",
["event"] = "SPELL_CAST_START",
["npcID"] = 187617,
},
[116155] = {
["npcID"] = 59521,
},
[252781] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zanchuli Witch-Doctor",
["npcID"] = 122969,
},
[427727] = {
["source"] = "Reefbreaker Moruud",
["event"] = "SPELL_CAST_START",
["npcID"] = 209898,
},
[220016] = {
["npcID"] = 107602,
},
[256878] = {
["npcID"] = 171303,
},
[329432] = {
["npcID"] = 170740,
},
[59616] = {
["source"] = "Dragonflayer Runecaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 23960,
},
[399061] = {
["source"] = "Irontide Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 200858,
},
[419540] = {
["event"] = "SPELL_CAST_START",
["source"] = "Molten General",
["npcID"] = 207941,
},
[399062] = {
["source"] = "Irontide Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 200858,
},
[15801] = {
["npcID"] = 11600,
},
[333531] = {
["npcID"] = 167588,
},
[32369] = {
["encounterName"] = "Nexus-Prince Shaffar",
["source"] = "Ethereal Apprentice",
["encounterID"] = 1899,
["event"] = "SPELL_CAST_START",
["npcID"] = 18430,
},
[116157] = {
["encounterName"] = "Feng the Accursed",
["source"] = "Feng the Accursed",
["encounterID"] = 1390,
["event"] = "SPELL_CAST_START",
["npcID"] = 60009,
},
[354011] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[69056] = {
["source"] = "Soulguard Watchman",
["event"] = "SPELL_CAST_START",
["npcID"] = 36478,
},
[329437] = {
["npcID"] = 182791,
},
[399065] = {
["source"] = "Irontide Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 200858,
},
[122301] = {
["npcID"] = 62930,
},
[106942] = {
["encounterName"] = "Sha of Violence",
["source"] = "Destroying Sha",
["npcID"] = 56765,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1305,
},
[321247] = {
["encounterName"] = "Amarth, The Harvester",
["encounterID"] = 2388,
["npcID"] = 163157,
},
[296673] = {
["npcID"] = 155919,
},
[256882] = {
["event"] = "SPELL_CAST_START",
["source"] = "Monzumi",
["npcID"] = 129552,
},
[394972] = {
["source"] = "Qalashi Lavabearer",
["event"] = "SPELL_CAST_START",
["npcID"] = 197148,
},
[386781] = {
["encounterName"] = "Telash Greywing",
["source"] = "Telash Greywing",
["encounterID"] = 2583,
["event"] = "SPELL_CAST_START",
["npcID"] = 186737,
},
[341728] = {
["npcID"] = 174161,
},
[59617] = {
["source"] = "Dragonflayer Runecaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 23960,
},
[366303] = {
["npcID"] = 183927,
},
[362210] = {
["npcID"] = 181963,
},
[358115] = {
["npcID"] = 178467,
},
[403169] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ishyra",
["npcID"] = 200579,
},
[358116] = {
["npcID"] = 180627,
},
[6685] = {
["source"] = "Kharanos Rifleman",
["event"] = "SPELL_CAST_START",
["npcID"] = 41182,
},
[222072] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Zealot",
["npcID"] = 111506,
},
[366309] = {
["npcID"] = 180917,
},
[321256] = {
["npcID"] = 156815,
},
[341735] = {
["npcID"] = 174336,
},
[31602] = {
["encounterName"] = "Nerub'enkan",
["source"] = "Nerub'enkan",
["encounterID"] = 480,
["event"] = "SPELL_CAST_START",
["npcID"] = 10437,
},
[382696] = {
["source"] = "Earthen Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 184131,
},
[32370] = {
["encounterName"] = "Nexus-Prince Shaffar",
["source"] = "Ethereal Apprentice",
["encounterID"] = 1899,
["event"] = "SPELL_CAST_START",
["npcID"] = 18430,
},
[131968] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sik'thik Battle-Mender",
["npcID"] = 67093,
},
[33508] = {
["isChanneled"] = true,
["source"] = "Shadowmoon Darkcaster",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 17694,
},
[288497] = {
["source"] = "Huezeki Windsong",
["event"] = "SPELL_CAST_START",
["npcID"] = 205497,
},
[341742] = {
["npcID"] = 174336,
},
[329455] = {
["encounterName"] = "Hungering Destroyer",
["npcID"] = 164261,
["encounterID"] = 2383,
},
[349934] = {
["encounterName"] = "The Grand Menagerie",
["npcID"] = 176555,
["encounterID"] = 2441,
},
[325360] = {
["encounterName"] = "Grand Proctor Beryllia",
["encounterID"] = 2362,
["npcID"] = 162102,
},
[116162] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fizzy Brew Alemental",
["npcID"] = 59520,
},
[201598] = {
["encounterName"] = "Festerface",
["source"] = "Festerface",
["encounterID"] = 1848,
["event"] = "SPELL_CAST_START",
["npcID"] = 101995,
},
[325361] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2405,
["npcID"] = 166644,
},
[296691] = {
["npcID"] = 156133,
},
[121282] = {
["encounterName"] = "Wing Leader Ner'onok",
["source"] = "Wing Leader Ner'onok",
["encounterID"] = 1464,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 62205,
},
[181120] = {
["encounterName"] = "Hellfire Assault",
["source"] = "Iron Dragoon",
["npcID"] = 90114,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1778,
},
[399086] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Firecaller",
["npcID"] = 200454,
},
[382704] = {
["source"] = "Vyzos the Prophet",
["event"] = "SPELL_CAST_START",
["npcID"] = 191308,
},
[386800] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rokzul",
["npcID"] = 194458,
},
[341747] = {
["npcID"] = 174158,
},
[427758] = {
["event"] = "SPELL_CAST_START",
["source"] = "Envoy of Winter",
["npcID"] = 209929,
},
[386801] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Shardbreaker",
["npcID"] = 194303,
},
[390897] = {
["source"] = "Scalepiercer",
["event"] = "SPELL_CAST_START",
["npcID"] = 186632,
},
[427760] = {
["event"] = "SPELL_CAST_START",
["source"] = "Envoy of Winter",
["npcID"] = 209929,
},
[284409] = {
["npcID"] = 144566,
},
[382708] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Warden",
["npcID"] = 193293,
},
[366326] = {
["npcID"] = 185537,
},
[121284] = {
["encounterName"] = "Wing Leader Ner'onok",
["source"] = "Wing Leader Ner'onok",
["npcID"] = 62205,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1464,
},
[407285] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Skullcrusher",
["npcID"] = 202258,
},
[296701] = {
["encounterName"] = "Radiance of Azshara",
["npcID"] = 152512,
["encounterID"] = 2305,
},
[382712] = {
["source"] = "Wilted Oak",
["event"] = "SPELL_CAST_START",
["npcID"] = 186229,
},
[211845] = {
["npcID"] = 150805,
},
[427771] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Lady Naz'jar",
["npcID"] = 40586,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[366336] = {
["npcID"] = 183927,
},
[263943] = {
["event"] = "SPELL_CAST_START",
["source"] = "Heartsbane Runeweaver",
["npcID"] = 131677,
},
[349954] = {
["encounterName"] = "The Grand Menagerie",
["npcID"] = 176555,
["encounterID"] = 2441,
},
[390912] = {
["source"] = "Vile Lasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 197219,
},
[407296] = {
["source"] = "Erupting Shadowflame",
["event"] = "SPELL_CAST_START",
["npcID"] = 199838,
},
[222087] = {
["source"] = "Lightspawn",
["event"] = "SPELL_CAST_START",
["npcID"] = 111510,
},
[403201] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ishyra",
["npcID"] = 200579,
},
[411393] = {
["source"] = "Bogg",
["event"] = "SPELL_CAST_START",
["npcID"] = 201747,
},
[124359] = {
["event"] = "SPELL_CAST_START",
["source"] = "Den Mother Moof",
["npcID"] = 63518,
},
[411394] = {
["source"] = "Bogg",
["event"] = "SPELL_CAST_START",
["npcID"] = 201747,
},
[403203] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Eternal Blaze",
["npcID"] = 201773,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[374533] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["npcID"] = 189478,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2612,
},
[395012] = {
["source"] = "Temporal Investi-gator",
["event"] = "SPELL_CAST_START",
["npcID"] = 201664,
},
[142222] = {
["event"] = "SPELL_CAST_START",
["source"] = "Huntmaster S'thoc",
["npcID"] = 71259,
},
[60646] = {
["source"] = "Korjan Slavemaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 65638,
},
[325386] = {
["npcID"] = 166941,
},
[172941] = {
["npcID"] = 80691,
},
[403207] = {
["source"] = "Khirna Cragheart",
["event"] = "SPELL_CAST_START",
["npcID"] = 198915,
},
[341771] = {
["npcID"] = 170882,
},
[411399] = {
["source"] = "Bogg",
["event"] = "SPELL_CAST_START",
["npcID"] = 201747,
},
[232330] = {
["event"] = "SPELL_CAST_START",
["source"] = "Val'kyr of Odyn",
["npcID"] = 116695,
},
[69068] = {
["source"] = "Soulguard Adept",
["event"] = "SPELL_CAST_START",
["npcID"] = 36620,
},
[395017] = {
["event"] = "SPELL_CAST_START",
["source"] = "Massive Magmashell",
["npcID"] = 193152,
},
[403210] = {
["source"] = "Khirna Cragheart",
["event"] = "SPELL_CAST_START",
["npcID"] = 198915,
},
[172943] = {
["npcID"] = 84520,
},
[341775] = {
["npcID"] = 167528,
},
[300818] = {
["npcID"] = 150195,
},
[419595] = {
["event"] = "SPELL_CAST_START",
["source"] = "Molten General",
["npcID"] = 207941,
},
[390926] = {
["source"] = "Barker",
["event"] = "SPELL_CAST_START",
["npcID"] = 194515,
},
[148370] = {
["source"] = "Windreaver Tar'rath",
["event"] = "SPELL_CAST_START",
["npcID"] = 73667,
},
[199567] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Image of Latosius",
["encounterID"] = 1835,
["event"] = "SPELL_CAST_START",
["npcID"] = 101028,
},
[325395] = {
["encounterName"] = "Domina Venomblade",
["npcID"] = 166813,
["encounterID"] = 2385,
},
[296725] = {
["encounterName"] = "Lady Ashvane",
["npcID"] = 152236,
["encounterID"] = 2304,
},
[411407] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Waveshaper",
["npcID"] = 205363,
},
["278444"] = {
["source"] = "Devouring Maggot",
["event"] = "SPELL_CAST_START",
["npcID"] = 134024,
},
[263961] = {
["event"] = "SPELL_CAST_START",
["source"] = "Heartsbane Soulcharmer",
["npcID"] = 131812,
},
[354068] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[195473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gritslime Snail",
["npcID"] = 91786,
},
[325399] = {
["encounterName"] = "Artificer Xy'mox",
["npcID"] = 166644,
["encounterID"] = 2405,
},
[179091] = {
["npcID"] = 88783,
},
[395029] = {
["isChanneled"] = true,
["source"] = "Melidrussa Chillworn",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 195119,
},
[390934] = {
["event"] = "SPELL_CAST_START",
["source"] = "Melkhop",
["npcID"] = 193311,
},
[15547] = {
["npcID"] = 12047,
},
[390938] = {
["source"] = "Aggravated Skitterfly",
["event"] = "SPELL_CAST_START",
["npcID"] = 197406,
},
[341790] = {
["npcID"] = 167528,
},
[395035] = {
["source"] = "Soulharvester Duuren",
["event"] = "SPELL_CAST_START",
["npcID"] = 195928,
},
[288546] = {
["npcID"] = 148797,
},
[390940] = {
["source"] = "Gnarls",
["event"] = "SPELL_CAST_START",
["npcID"] = 197354,
},
[382749] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Hornswog",
["npcID"] = 187111,
},
[172952] = {
["npcID"] = 83026,
},
[354080] = {
["encounterName"] = "The Tarragrue",
["npcID"] = 175611,
["encounterID"] = 2423,
},
[333602] = {
["npcID"] = 163126,
},
[390943] = {
["npcID"] = 185784,
},
[272167] = {
["npcID"] = 136404,
},
["385553"] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Stormseeker Acolyte",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 194990,
},
[349987] = {
["encounterName"] = "The Grand Menagerie",
["npcID"] = 176555,
["encounterID"] = 2441,
},
[386849] = {
["source"] = "Unleashed Storm",
["event"] = "SPELL_CAST_START",
["npcID"] = 195846,
},
[341796] = {
["npcID"] = 165066,
},
[362275] = {
["encounterName"] = "Rygelon",
["encounterID"] = 2549,
["npcID"] = 182777,
},
[374563] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dazzling Dragonfly",
["npcID"] = 190362,
},
[300840] = {
["source"] = "Inhuman Test Subject",
["event"] = "SPELL_CAST_START",
["npcID"] = 202147,
},
[250774] = {
["event"] = "SPELL_CAST_START",
["source"] = "Putrid Engineer",
["npcID"] = 126337,
},
["409271"] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Magma Mystic",
["encounterID"] = 2682,
["event"] = "SPELL_CAST_START",
["npcID"] = 199703,
},
[407332] = {
["source"] = "Agitated Dustmoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 202316,
},
[374567] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["encounterID"] = 2582,
["event"] = "SPELL_CAST_START",
["npcID"] = 186644,
},
[296748] = {
["npcID"] = 152875,
},
[125392] = {
["event"] = "SPELL_CAST_START",
["source"] = "Warbringer Qobi",
["npcID"] = 63528,
},
[423718] = {
["source"] = "Balboan",
["event"] = "SPELL_CAST_START",
["npcID"] = 210559,
},
[183197] = {
["npcID"] = 155221,
},
[236442] = {
["encounterName"] = "Sisters of the Moon",
["source"] = "Captain Yathae Moonstrike",
["npcID"] = 118374,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2050,
},
[419624] = {
["event"] = "SPELL_CAST_START",
["source"] = "Whispering Behemoth",
["npcID"] = 207171,
},
[329518] = {
["encounterName"] = "Sun King's Salvation",
["encounterID"] = 2402,
["npcID"] = 165805,
},
[317231] = {
["encounterName"] = "Xav the Unfallen",
["encounterID"] = 2366,
["npcID"] = 162329,
},
[9532] = {
["npcID"] = 701,
},
[256922] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Maiden",
["npcID"] = 131821,
},
[116178] = {
["source"] = "Sudsy Brew Alemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 59522,
},
[304946] = {
["npcID"] = 156213,
},
[411437] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Siegemaster",
["npcID"] = 198874,
},
[300852] = {
["source"] = "Inhuman Test Subject",
["event"] = "SPELL_CAST_START",
["npcID"] = 202147,
},
[136099] = {
["source"] = "Bloodhilt Lightsworn",
["event"] = "SPELL_CAST_START",
["npcID"] = 68640,
},
[423725] = {
["source"] = "Balboan",
["event"] = "SPELL_CAST_START",
["npcID"] = 210559,
},
[350002] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 176533,
["encounterID"] = 2435,
},
[228254] = {
["npcID"] = 114626,
},
[411439] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Siegemaster",
["npcID"] = 198874,
},
[366387] = {
["npcID"] = 180978,
},
[419632] = {
["isChanneled"] = true,
["source"] = "Pendule",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208945,
},
[395058] = {
["source"] = "Pirdan The Blinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 186512,
},
[112084] = {
["encounterName"] = "Lorewalker Stonestep",
["source"] = "Zao Sunseeker",
["encounterID"] = 1417,
["event"] = "SPELL_CAST_START",
["npcID"] = 58826,
},
[395060] = {
["event"] = "SPELL_CAST_START",
["source"] = "Im'bunata",
["npcID"] = 196199,
},
[395061] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stonewrecker Tokara",
["npcID"] = 193442,
},
[423734] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomfiend",
["npcID"] = 210910,
},
[148391] = {
["source"] = "Gate-Crasher Sav'ah",
["event"] = "SPELL_CAST_START",
["npcID"] = 73670,
},
[69080] = {
["source"] = "Soulguard Bonecaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 36564,
},
[333629] = {
["encounterName"] = "Amarth, The Harvester",
["encounterID"] = 2388,
["npcID"] = 168246,
},
[309055] = {
["npcID"] = 156320,
},
["264734"] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 131863,
},
[199589] = {
["event"] = "SPELL_CAST_START",
["source"] = "Helarjar Mistcaller",
["npcID"] = 99033,
},
[407354] = {
["source"] = "Contaminated Shalewing",
["event"] = "SPELL_CAST_START",
["npcID"] = 204311,
},
[160680] = {
["encounterName"] = "Nitrogg Thundertower",
["encounterID"] = 1732,
["npcID"] = 79548,
},
[325440] = {
["encounterName"] = "Sun King's Salvation",
["encounterID"] = 2402,
["npcID"] = 165764,
},
[134058] = {
["source"] = "Cog Captain Winklespring",
["event"] = "SPELL_CAST_START",
["npcID"] = 149503,
},
[140202] = {
["source"] = "Animated Warrior",
["event"] = "SPELL_CAST_START",
["npcID"] = 67473,
},
[382783] = {
["event"] = "SPELL_CAST_START",
["source"] = "Obsidian Tyrant",
["npcID"] = 202483,
},
[125398] = {
["source"] = "Gar'lok",
["event"] = "SPELL_CAST_START",
["npcID"] = 50739,
},
[354114] = {
["npcID"] = 179234,
},
[407359] = {
["source"] = "Contaminated Shalewing",
["event"] = "SPELL_CAST_START",
["npcID"] = 204311,
},
[321349] = {
["npcID"] = 164857,
},
[238502] = {
["encounterName"] = "Kil'jaeden",
["source"] = "Kil'jaeden",
["encounterID"] = 2051,
["event"] = "SPELL_CAST_START",
["npcID"] = 117269,
},
[191401] = {
["source"] = "Valarjar Marksman",
["event"] = "SPELL_CAST_START",
["npcID"] = 96640,
},
[362308] = {
["npcID"] = 185755,
},
[382787] = {
["source"] = "Disease Slasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 187315,
},
[354117] = {
["npcID"] = 179234,
},
[390979] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bound Inferno",
["npcID"] = 186627,
},
[197546] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Illysanna Ravencrest",
["encounterID"] = 1833,
["event"] = "SPELL_CAST_START",
["npcID"] = 98696,
},
[366406] = {
["npcID"] = 184908,
},
[358215] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 177787,
["encounterID"] = 2435,
},
[333641] = {
["npcID"] = 169905,
},
[44271] = {
["encounterName"] = "Priestess Delrissa",
["encounterID"] = 1895,
["npcID"] = 24555,
},
[390982] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonbane Soldier",
["npcID"] = 186607,
},
[382791] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Lavamancer",
["npcID"] = 193944,
},
[390983] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Rampager",
["npcID"] = 186727,
},
[366409] = {
["npcID"] = 184908,
},
[390984] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Rampager",
["npcID"] = 186727,
},
[403272] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[362316] = {
["npcID"] = 184425,
},
[150448] = {
["npcID"] = 76465,
},
[390987] = {
["source"] = "Qalashi Stonemender",
["event"] = "SPELL_CAST_START",
["npcID"] = 187600,
},
[390988] = {
["source"] = "Crystalus",
["event"] = "SPELL_CAST_START",
["npcID"] = 193645,
},
[419659] = {
["event"] = "SPELL_CAST_START",
["source"] = "Observational Pollen Guard",
["npcID"] = 210624,
},
[345936] = {
["encounterName"] = "Shriekwing",
["npcID"] = 164406,
["encounterID"] = 2398,
},
[228269] = {
["encounterName"] = "Shade of Medivh",
["npcID"] = 114350,
["encounterID"] = 1965,
},
[124378] = {
["event"] = "SPELL_CAST_START",
["source"] = "Den Mother Moof",
["npcID"] = 63518,
},
[358225] = {
["npcID"] = 178732,
},
[358226] = {
["npcID"] = 176949,
},
["358320"] = {
["npcID"] = 180162,
},
[358227] = {
["npcID"] = 176959,
},
[382802] = {
["source"] = "Vile Rothexer",
["event"] = "SPELL_CAST_START",
["npcID"] = 187224,
},
[321367] = {
["npcID"] = 156562,
},
[284506] = {
["npcID"] = 144566,
},
[129499] = {
["event"] = "SPELL_CAST_START",
["source"] = "Manifestation of Fear",
["npcID"] = 59874,
},
[427858] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["npcID"] = 82682,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1751,
},
[329561] = {
["encounterName"] = "Sun King's Salvation",
["encounterID"] = 2402,
["npcID"] = 165778,
},
[358232] = {
["npcID"] = 180104,
},
[325469] = {
["npcID"] = 166928,
},
[427863] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["npcID"] = 82682,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1751,
},
["198962"] = {
["source"] = "Valarjar Runecarver",
["event"] = "SPELL_CAST_START",
["npcID"] = 96664,
},
[391003] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Shaman Rotknuckle",
["npcID"] = 197356,
},
[362333] = {
["npcID"] = 178560,
},
[354142] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[197558] = {
["encounterName"] = "Fenryr",
["source"] = "Fenryr",
["encounterID"] = 1807,
["event"] = "SPELL_CAST_START",
["npcID"] = 95674,
},
[423771] = {
["source"] = "Elisande",
["event"] = "SPELL_CAST_START",
["npcID"] = 208668,
},
[407389] = {
["source"] = "Brimstone Serpent",
["event"] = "SPELL_CAST_START",
["npcID"] = 202272,
},
[264038] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coven Thornshaper",
["npcID"] = 131666,
},
[374624] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Frozen Destroyer",
["npcID"] = 190686,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2605,
},
[317284] = {
["npcID"] = 162880,
},
[228278] = {
["npcID"] = 114633,
},
[354147] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[423775] = {
["source"] = "Amerinth",
["event"] = "SPELL_CAST_START",
["npcID"] = 210675,
},
[228279] = {
["npcID"] = 114632,
},
[228280] = {
["npcID"] = 114629,
},
[183227] = {
["npcID"] = 92450,
},
[341864] = {
["npcID"] = 174092,
},
[419684] = {
["source"] = "Observational Pollen Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 210624,
},
[341865] = {
["npcID"] = 174194,
},
[132031] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lyalia",
["npcID"] = 59849,
},
[317292] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "N'Zoth the Corruptor",
["npcID"] = 162480,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[341867] = {
["npcID"] = 165469,
},
[386921] = {
["encounterName"] = "Granyth",
["source"] = "Dragonkiller Lance",
["encounterID"] = 2637,
["event"] = "SPELL_CAST_START",
["npcID"] = 194367,
},
[374634] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["npcID"] = 189478,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2612,
},
[378731] = {
["npcID"] = 190938,
},
[391019] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[395115] = {
["event"] = "SPELL_CAST_START",
["source"] = "Smogswog the Firebreather",
["npcID"] = 193120,
},
[305010] = {
["source"] = "Tidemistress Ethendriss",
["event"] = "SPELL_CAST_START",
["npcID"] = 153934,
},
[207806] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Patrol Captain Gerdo",
["npcID"] = 104215,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[403309] = {
["event"] = "SPELL_CAST_START",
["source"] = "Expulsion Drone",
["npcID"] = 202592,
},
[22907] = {
["encounterName"] = "Swamplord Musel'ek",
["encounterID"] = 1947,
["npcID"] = 17826,
},
[427885] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["npcID"] = 82682,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1751,
},
[411503] = {
["event"] = "SPELL_CAST_START",
["source"] = "Diganthor",
["npcID"] = 204434,
},
[193473] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cleave Training Dummy",
["npcID"] = 192337,
},
[391026] = {
["source"] = "Liskanoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 193533,
},
[321399] = {
["npcID"] = 173414,
},
[382836] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Maruuk",
["encounterID"] = 2581,
["event"] = "SPELL_CAST_START",
["npcID"] = 186338,
},
[350071] = {
["encounterName"] = "Remnant of Ner'zhul",
["npcID"] = 177117,
["encounterID"] = 2432,
},
[256959] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reanimated Honor Guard",
["npcID"] = 127757,
},
[325498] = {
["npcID"] = 157212,
},
[87527] = {
["source"] = "Dustbelcher Trainee",
["event"] = "SPELL_CAST_START",
["npcID"] = 46695,
},
[321406] = {
["encounterName"] = "Doctor Ickus",
["encounterID"] = 2384,
["npcID"] = 169498,
},
[162759] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jared V. Hellstrike",
["npcID"] = 85131,
},
[124389] = {
["event"] = "SPELL_CAST_START",
["source"] = "Riverblade Scavenger",
["npcID"] = 68409,
},
[358271] = {
["npcID"] = 179914,
},
[427899] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["npcID"] = 82682,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1751,
},
[144330] = {
["encounterName"] = "Kor'kron Dark Shaman",
["source"] = "Wavebinder Kardris",
["npcID"] = 71858,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1606,
},
[325506] = {
["encounterName"] = "Sun King's Salvation",
["encounterID"] = 2402,
["npcID"] = 165764,
},
[403326] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[138187] = {
["source"] = "Lightning Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 69834,
},
[207815] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Patrol Captain Gerdo",
["npcID"] = 104215,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[391040] = {
["npcID"] = 185784,
},
[296839] = {
["npcID"] = 152898,
},
[162763] = {
["source"] = "Vanguard Samuelle",
["event"] = "SPELL_CAST_START",
["npcID"] = 80492,
},
[106984] = {
["encounterName"] = "Gu Cloudstrike",
["source"] = "Gu Cloudstrike",
["npcID"] = 56747,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1303,
},
[391043] = {
["npcID"] = 185784,
},
[127463] = {
["npcID"] = 58928,
},
[350086] = {
["encounterName"] = "The Grand Menagerie",
["npcID"] = 176705,
["encounterID"] = 2441,
},
[341895] = {
["npcID"] = 168647,
},
[329608] = {
["npcID"] = 155828,
},
[423811] = {
["source"] = "Overseer Chardryn",
["event"] = "SPELL_CAST_START",
["npcID"] = 210912,
},
[329609] = {
["npcID"] = 155828,
},
[254920] = {
["npcID"] = 169206,
},
[250825] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Venomhide Weaver",
["npcID"] = 126049,
},
[391050] = {
["source"] = "High Channeler Ryvati",
["event"] = "SPELL_CAST_START",
["npcID"] = 197535,
},
[199629] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["encounterID"] = 1792,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 91005,
},
[391051] = {
["source"] = "Uurtus",
["event"] = "SPELL_CAST_START",
["npcID"] = 193724,
},
[378764] = {
["encounterName"] = "Treemouth",
["source"] = "Treemouth",
["npcID"] = 186120,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2568,
},
[395148] = {
["source"] = "Mikrin of the Raging Winds",
["event"] = "SPELL_CAST_START",
["npcID"] = 193173,
},
[423820] = {
["source"] = "Overseer Chardryn",
["event"] = "SPELL_CAST_START",
["npcID"] = 210912,
},
[325523] = {
["npcID"] = 165515,
},
[127466] = {
["npcID"] = 58928,
},
[117227] = {
["encounterName"] = "Protectors of the Endless",
["source"] = "Elder Asani",
["encounterID"] = 1409,
["event"] = "SPELL_CAST_START",
["npcID"] = 60586,
},
[236494] = {
["encounterName"] = "Fallen Avatar",
["source"] = "Fallen Avatar",
["encounterID"] = 2038,
["event"] = "SPELL_CAST_START",
["npcID"] = 116939,
},
[164819] = {
["npcID"] = 81726,
},
[350101] = {
["encounterName"] = "The Grand Menagerie",
["npcID"] = 176705,
["encounterID"] = 2441,
},
[346006] = {
["encounterName"] = "Zo'phex the Sentinel",
["npcID"] = 175616,
["encounterID"] = 2425,
},
[354198] = {
["encounterName"] = "Kel'Thuzad",
["npcID"] = 175559,
["encounterID"] = 2422,
},
[436117] = {
["source"] = "Eratus, the Unwoven Paradox",
["event"] = "SPELL_CAST_START",
["npcID"] = 217190,
},
[32637] = {
["npcID"] = 167749,
},
[395161] = {
["source"] = "Treasure-Mad Trambladd",
["event"] = "SPELL_CAST_START",
["npcID"] = 193146,
},
[142296] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Shaman Xorenth",
["npcID"] = 70683,
},
[325535] = {
["npcID"] = 164562,
},
[395163] = {
["source"] = "Gethdazr",
["event"] = "SPELL_CAST_START",
["npcID"] = 196165,
},
[358302] = {
["npcID"] = 179911,
},
[136154] = {
["encounterName"] = "Durumu the Forgotten",
["source"] = "Crimson Fog",
["npcID"] = 69050,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1572,
},
[333729] = {
["npcID"] = 168949,
},
[162777] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iron Marksman",
["npcID"] = 80422,
},
[395167] = {
["source"] = "O'nank Shorescour",
["event"] = "SPELL_CAST_START",
["npcID"] = 193118,
},
[230358] = {
["encounterName"] = "Mistress Sassz'ine",
["source"] = "Mistress Sassz'ine",
["npcID"] = 115767,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2037,
},
[358307] = {
["npcID"] = 179913,
},
[374691] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[382883] = {
["source"] = "Vile Rothexer",
["event"] = "SPELL_CAST_START",
["npcID"] = 187224,
},
[362405] = {
["encounterName"] = "Anduin Wrynn",
["encounterID"] = 2546,
["npcID"] = 181954,
},
[113136] = {
["npcID"] = 59080,
},
[222169] = {
["npcID"] = 107953,
},
[395174] = {
["source"] = "Gethdazr",
["event"] = "SPELL_CAST_START",
["npcID"] = 196165,
},
[358314] = {
["npcID"] = 180162,
},
[230362] = {
["encounterName"] = "Mistress Sassz'ine",
["source"] = "Electrifying Jellyfish",
["npcID"] = 115896,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2037,
},
[325549] = {
["npcID"] = 172080,
},
[395177] = {
["event"] = "SPELL_CAST_START",
["source"] = "Massive Magmashell",
["npcID"] = 193152,
},
[51963] = {
["npcID"] = 27829,
},
[374699] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamecaller Aymi",
["npcID"] = 190368,
},
[193502] = {
["source"] = "Glayvianna Soulrender",
["event"] = "SPELL_CAST_START",
["npcID"] = 98177,
},
[325552] = {
["encounterName"] = "Domina Venomblade",
["npcID"] = 164266,
["encounterID"] = 2385,
},
[183263] = {
["npcID"] = 155219,
},
[142306] = {
["isChanneled"] = true,
["source"] = "Dark Shaman Xorenth",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 70683,
},
[226269] = {
["source"] = "Forgotten Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 113699,
},
[358320] = {
["npcID"] = 180162,
},
[386991] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Proto-Drake",
["npcID"] = 184869,
},
[386992] = {
["source"] = "Wild Proto-Drake",
["event"] = "SPELL_CAST_START",
["npcID"] = 192636,
},
[395184] = {
["source"] = "Blazing Proto-Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 185883,
},
[386993] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cascade Proto-Drake",
["npcID"] = 194939,
},
[374706] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamecaller Aymi",
["npcID"] = 190368,
},
[193505] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[415667] = {
["event"] = "SPELL_CAST_START",
["source"] = "Adamanthia",
["npcID"] = 198921,
},
[358327] = {
["npcID"] = 179760,
},
[370615] = {
["source"] = "Eranog",
["event"] = "SPELL_CAST_START",
["npcID"] = 184972,
},
[358328] = {
["npcID"] = 179760,
},
[113141] = {
["encounterName"] = "Darkmaster Gandling",
["npcID"] = 59080,
},
[296894] = {
["encounterName"] = "Radiance of Azshara",
["npcID"] = 152364,
["encounterID"] = 2305,
},
[199652] = {
["source"] = "King Haldor",
["event"] = "SPELL_CAST_START",
["npcID"] = 95843,
},
[391098] = {
["event"] = "SPELL_CAST_START",
["source"] = "Galzuda",
["npcID"] = 193330,
},
[427960] = {
["event"] = "SPELL_CAST_START",
["source"] = "Firebrand Fystia",
["npcID"] = 209893,
},
[321471] = {
["encounterName"] = "Mistcaller",
["npcID"] = 164501,
["encounterID"] = 2392,
},
[395196] = {
["source"] = "Blazing Proto-Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 185883,
},
[203750] = {
["npcID"] = 108871,
},
[387006] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotting Treant",
["npcID"] = 186361,
},
[374719] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blistered Basilisk",
["npcID"] = 193702,
},
[427964] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Incarnation",
["npcID"] = 213559,
},
[374720] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["encounterID"] = 2582,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 186644,
},
[142315] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Xaril the Poisoned Mind",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71157,
},
[354242] = {
["npcID"] = 179434,
},
[236518] = {
["encounterName"] = "Sisters of the Moon",
["source"] = "Priestess Lunaspyre",
["npcID"] = 118518,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2050,
},
[378818] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Thaumaturge",
["npcID"] = 192788,
},
[411585] = {
["source"] = "Jalgon Stoutburn",
["event"] = "SPELL_CAST_START",
["npcID"] = 204426,
},
[268234] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Bile Oozeling",
["npcID"] = 136541,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2115,
},
[374724] = {
["source"] = "Flamecaller Aymi",
["event"] = "SPELL_CAST_START",
["npcID"] = 190368,
},
[358342] = {
["npcID"] = 179851,
},
[427972] = {
["encounterName"] = "Volcoross",
["source"] = "Lieutenant Lunker",
["npcID"] = 211272,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2737,
},
[125432] = {
["source"] = "Sra'thik Pool-Tender",
["event"] = "SPELL_CAST_START",
["npcID"] = 63570,
},
[127480] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voress'thalik",
["npcID"] = 62270,
},
[354250] = {
["npcID"] = 179434,
},
[117241] = {
["source"] = "Zandalari Fire-Dancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 60402,
},
[407496] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[358348] = {
["npcID"] = 179472,
},
[378827] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Plunderer",
["npcID"] = 192786,
},
[341966] = {
["npcID"] = 162690,
},
[56063] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naxxramas Acolyte",
["npcID"] = 15981,
},
[387021] = {
["source"] = "Agitated Essence",
["event"] = "SPELL_CAST_START",
["npcID"] = 192238,
},
[226285] = {
["source"] = "Eredar Chaosbringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 105617,
},
[341969] = {
["npcID"] = 174210,
},
[264150] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thornguard",
["npcID"] = 131858,
},
[199663] = {
["source"] = "Ghostly Councilor",
["event"] = "SPELL_CAST_START",
["npcID"] = 98370,
},
[358353] = {
["npcID"] = 179760,
},
[378832] = {
["source"] = "Skulking Bruiser",
["event"] = "SPELL_CAST_START",
["npcID"] = 196384,
},
[11969] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazebound Elemental",
["npcID"] = 38896,
},
[419790] = {
["event"] = "SPELL_CAST_START",
["source"] = "Druid of the Moon",
["npcID"] = 210686,
},
[228334] = {
["encounterName"] = "Shade of Medivh",
["encounterID"] = 1965,
["npcID"] = 114350,
},
[337876] = {
["npcID"] = 162874,
},
[407504] = {
["encounterName"] = "Morchie",
["source"] = "Morchie",
["encounterID"] = 2671,
["event"] = "SPELL_CAST_START",
["npcID"] = 198999,
},
[264153] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devouring Maggot",
["npcID"] = 134024,
},
[207856] = {
["isChanneled"] = true,
["source"] = "Helarjar Champion",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 96754,
},
[226287] = {
["source"] = "Vileshard Chunk",
["event"] = "SPELL_CAST_START",
["npcID"] = 101438,
},
[325590] = {
["encounterName"] = "Sun King's Salvation",
["encounterID"] = 2402,
["npcID"] = 165763,
},
[378835] = {
["source"] = "Brackenhide Rotflinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 186362,
},
[325591] = {
["npcID"] = 157212,
},
[366549] = {
["npcID"] = 185154,
},
[146421] = {
["source"] = "Noodle Stand",
["event"] = "SPELL_CAST_START",
["npcID"] = 72952,
},
[230384] = {
["encounterName"] = "Mistress Sassz'ine",
["source"] = "Mistress Sassz'ine",
["npcID"] = 115767,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2037,
},
[101885] = {
["source"] = "The Abominable Greench",
["event"] = "SPELL_CAST_START",
["npcID"] = 54499,
},
[254959] = {
["source"] = "Dazar'ai Colossus",
["event"] = "SPELL_CAST_START",
["npcID"] = 122984,
},
[374743] = {
["npcID"] = 115488,
},
[395222] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kain Firebrand",
["npcID"] = 193675,
},
[354265] = {
["encounterName"] = "Fatescribe Roh-Kalo",
["encounterID"] = 2431,
["npcID"] = 175730,
},
[236529] = {
["encounterName"] = "Sisters of the Moon",
["source"] = "Huntress Kasparian",
["npcID"] = 118523,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2050,
},
[140279] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shan'ze Animator",
["npcID"] = 70069,
},
[333787] = {
["npcID"] = 168934,
},
[419798] = {
["event"] = "SPELL_CAST_START",
["source"] = "Druid of the Moon",
["npcID"] = 210686,
},
[146423] = {
["source"] = "Noodle Stand",
["event"] = "SPELL_CAST_START",
["npcID"] = 72952,
},
[214003] = {
["source"] = "Risen Swordsman",
["event"] = "SPELL_CAST_START",
["npcID"] = 102094,
},
[211956] = {
["source"] = "Wyrmtongue Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 105629,
},
[427992] = {
["event"] = "SPELL_CAST_START",
["source"] = "Keeper of the Dream",
["npcID"] = 210423,
},
[142329] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'kron Dark Shaman",
["npcID"] = 71245,
},
[387037] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Revenant",
["npcID"] = 195917,
},
[366559] = {
["npcID"] = 185154,
},
[211958] = {
["source"] = "Wyrmtongue Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 105629,
},
[378847] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Spinecrusher",
["npcID"] = 192787,
},
[387039] = {
["source"] = "Nokhud Reaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 187201,
},
[144379] = {
["encounterName"] = "Sha of Pride",
["source"] = "Manifestation of Pride",
["encounterID"] = 1604,
["event"] = "SPELL_CAST_START",
["npcID"] = 71946,
},
[391136] = {
["source"] = "Drakonid Breaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 187240,
},
[166906] = {
["npcID"] = 178645,
},
[325605] = {
["npcID"] = 172080,
},
[378850] = {
["source"] = "Destabilized Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 181536,
},
[350180] = {
["npcID"] = 177286,
},
[136189] = {
["encounterName"] = "Council of Elders",
["source"] = "Sul the Sandcrawler",
["encounterID"] = 1570,
["event"] = "SPELL_CAST_START",
["npcID"] = 69078,
},
[329703] = {
["npcID"] = 159106,
},
[226296] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[366566] = {
["encounterName"] = "Blightbone",
["encounterID"] = 2387,
["npcID"] = 184910,
},
[387045] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ezrigeth",
["npcID"] = 187666,
},
[358375] = {
["npcID"] = 179472,
},
[238584] = {
["npcID"] = 115646,
},
[428004] = {
["isChanneled"] = true,
["source"] = "Dream Seedling",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210423,
},
[399336] = {
["source"] = "Tarasek Frostclaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 201035,
},
[387049] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wild Proto-Dragon",
["npcID"] = 194089,
},
[154623] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Spirit-Tender",
["npcID"] = 77131,
},
[395241] = {
["source"] = "Primalist Voltweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 198868,
},
[177150] = {
["npcID"] = 81726,
},
[423912] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Stonewarmer",
["npcID"] = 210235,
},
[268274] = {
["source"] = "Booty Fanatic",
["event"] = "SPELL_CAST_START",
["npcID"] = 136539,
},
[305136] = {
["npcID"] = 156212,
},
[329711] = {
["encounterName"] = "Sire Denathrius",
["npcID"] = 169196,
["encounterID"] = 2407,
},
[366573] = {
["npcID"] = 185154,
},
[321520] = {
["npcID"] = 166926,
},
[374765] = {
["source"] = "Watchful Vulture",
["event"] = "SPELL_CAST_START",
["npcID"] = 190031,
},
[252923] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zanchuli Witch-Doctor",
["npcID"] = 122969,
},
[140290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zur'chaka the Bonecrafter",
["npcID"] = 69666,
},
[142338] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'kron Dark Shaman",
["npcID"] = 71245,
},
[387054] = {
["source"] = "Brinetooth Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 187281,
},
[362480] = {
["npcID"] = 183366,
},
[268278] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lady Waycrest",
["npcID"] = 131545,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2116,
},
[313332] = {
["npcID"] = 166046,
},
[407535] = {
["source"] = "Horde Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 203861,
},
[201729] = {
["encounterName"] = "Festerface",
["source"] = "Festerface",
["encounterID"] = 1848,
["event"] = "SPELL_CAST_START",
["npcID"] = 101995,
},
[238592] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darksworn Ritualist",
["npcID"] = 117739,
},
[391158] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tomnu",
["npcID"] = 193722,
},
[395254] = {
["source"] = "Primalist Tempestmaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 198878,
},
[288765] = {
["npcID"] = 177637,
},
[350202] = {
["encounterName"] = "The Nine",
["npcID"] = 177095,
["encounterID"] = 2429,
},
[407544] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[428023] = {
["event"] = "SPELL_CAST_START",
["source"] = "Keeper of the Dream",
["npcID"] = 210423,
},
[358396] = {
["npcID"] = 179460,
},
[387067] = {
["source"] = "Arcane Construct",
["event"] = "SPELL_CAST_START",
["npcID"] = 186740,
},
[142345] = {
["event"] = "SPELL_CAST_START",
["source"] = "Poison Bolt Totem",
["npcID"] = 71334,
},
[114182] = {
["source"] = "Scarlet Scholar",
["event"] = "SPELL_CAST_START",
["npcID"] = 59372,
},
[337920] = {
["npcID"] = 162874,
},
[411644] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Tidehunter",
["npcID"] = 205365,
},
[333827] = {
["npcID"] = 167533,
},
[211975] = {
["source"] = "Wyrmtongue Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 105629,
},
[407552] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rionthus",
["npcID"] = 200918,
},
[144396] = {
["encounterName"] = "Fallen Protectors",
["source"] = "Rook Stonetoe",
["npcID"] = 71475,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1598,
},
[166923] = {
["npcID"] = 81603,
},
[126471] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spirit of Lao-Fe",
["npcID"] = 58817,
},
[207881] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Talixae Flamewreath",
["npcID"] = 104217,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1869,
},
[403459] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Essence of Shadow",
["npcID"] = 201774,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[374789] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["encounterID"] = 2582,
["event"] = "SPELL_CAST_START",
["npcID"] = 186644,
},
[69131] = {
["source"] = "Soulguard Animator",
["event"] = "SPELL_CAST_START",
["npcID"] = 36516,
},
[378886] = {
["event"] = "SPELL_CAST_START",
["source"] = "Turi Flickerflame",
["npcID"] = 199740,
},
[136207] = {
["npcID"] = 67512,
},
[114185] = {
["isChanneled"] = true,
["source"] = "Scarlet Scholar",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 59372,
},
[395273] = {
["source"] = "Primal Stormsentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 196856,
},
[144400] = {
["encounterName"] = "Sha of Pride",
["source"] = "Sha of Pride",
["encounterID"] = 1604,
["event"] = "SPELL_CAST_START",
["npcID"] = 71734,
},
[268306] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lady Waycrest",
["npcID"] = 131545,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2116,
},
[136209] = {
["encounterName"] = "Primordius",
["source"] = "Primordius",
["npcID"] = 69017,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1574,
},
[333839] = {
["npcID"] = 167534,
},
[374797] = {
["event"] = "SPELL_CAST_START",
["source"] = "Angry Wind Eagle",
["npcID"] = 191355,
},
[296978] = {
["npcID"] = 153003,
},
[366606] = {
["encounterName"] = "Rygelon",
["npcID"] = 182777,
["encounterID"] = 2549,
},
[301075] = {
["npcID"] = 144574,
},
[134164] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alliance Sentinel",
["npcID"] = 67900,
},
[12739] = {
["source"] = "Scholomance Neophyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 10470,
},
[428047] = {
["event"] = "SPELL_CAST_START",
["source"] = "Verlann Timbercrush",
["npcID"] = 207554,
},
[333845] = {
["npcID"] = 167534,
},
[387091] = {
["source"] = "Time-Lost Sunseeker",
["event"] = "SPELL_CAST_START",
["npcID"] = 187239,
},
[391187] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bisquius",
["npcID"] = 197557,
},
[28293] = {
["event"] = "SPELL_CAST_START",
["source"] = "Living Monstrosity",
["npcID"] = 16021,
},
[395284] = {
["event"] = "SPELL_CAST_START",
["source"] = "Groffnar",
["npcID"] = 201537,
},
[29317] = {
["encounterName"] = "Gothik the Harvester",
["source"] = "Gothik the Harvester",
["npcID"] = 16060,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1109,
},
[15043] = {
["npcID"] = 32324,
},
[30853] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Summoner",
["npcID"] = 17395,
},
[191508] = {
["source"] = "Valarjar Aspirant",
["event"] = "SPELL_CAST_START",
["npcID"] = 101637,
},
[321564] = {
["npcID"] = 165829,
},
[428054] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Lady Naz'jar",
["npcID"] = 40586,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[284703] = {
["npcID"] = 144572,
},
[321565] = {
["npcID"] = 165829,
},
[191509] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hill Ettin",
["npcID"] = 102886,
},
[146456] = {
["event"] = "SPELL_CAST_START",
["source"] = "Goro'dan",
["npcID"] = 72964,
},
[164887] = {
["event"] = "SPELL_CAST_START",
["source"] = "Everbloom Mender",
["npcID"] = 81820,
},
[415769] = {
["source"] = "Coalesced Time",
["event"] = "SPELL_CAST_START",
["npcID"] = 206140,
},
[391195] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bisquius",
["npcID"] = 197557,
},
[415770] = {
["source"] = "Coalesced Time",
["event"] = "SPELL_CAST_START",
["npcID"] = 206140,
},
["227913"] = {
["npcID"] = 102788,
},
[391198] = {
["source"] = "Tserasor the Preserver",
["event"] = "SPELL_CAST_START",
["npcID"] = 190598,
},
[415773] = {
["source"] = "Interval",
["event"] = "SPELL_CAST_START",
["npcID"] = 206065,
},
[259092] = {
["source"] = "Irontide Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 126919,
},
[292903] = {
["npcID"] = 150958,
},
[395297] = {
["event"] = "SPELL_CAST_START",
["source"] = "Snee",
["npcID"] = 186203,
},
[333861] = {
["npcID"] = 167536,
},
[199705] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["encounterID"] = 1792,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 91005,
},
[395299] = {
["source"] = "Spellforged Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 194402,
},
[366629] = {
["npcID"] = 185155,
},
[28294] = {
["source"] = "Living Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 16021,
},
[391204] = {
["source"] = "Uurtus",
["event"] = "SPELL_CAST_START",
["npcID"] = 193724,
},
[395300] = {
["event"] = "SPELL_CAST_START",
["source"] = "Azure Pathfinder",
["npcID"] = 194210,
},
[189467] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maiev Shadowsong",
["npcID"] = 210140,
},
[374823] = {
["event"] = "SPELL_CAST_START",
["source"] = "Squallbringer Cyraz",
["npcID"] = 190370,
},
[329770] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2405,
["npcID"] = 166644,
},
[366633] = {
["npcID"] = 185155,
},
[292910] = {
["npcID"] = 171172,
},
[17287] = {
["source"] = "Bloodwarder Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 19633,
},
[189469] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maiev Shadowsong",
["npcID"] = 210140,
},
[329774] = {
["encounterName"] = "Hungering Destroyer",
["npcID"] = 164261,
["encounterID"] = 2383,
},
[358446] = {
["npcID"] = 179460,
},
[148513] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Kun-Da",
["npcID"] = 71408,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[407596] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[428077] = {
["event"] = "SPELL_CAST_START",
["source"] = "Keeper of the Dream",
["npcID"] = 210423,
},
[333875] = {
["npcID"] = 168942,
},
[177185] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alkali",
["npcID"] = 86268,
},
[148515] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Jun-Wei",
["npcID"] = 73723,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[134180] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sam the Wise",
["npcID"] = 68128,
},
[136228] = {
["encounterName"] = "Primordius",
["source"] = "Primordius",
["npcID"] = 69017,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1574,
},
[238622] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Felwing Terror",
["npcID"] = 118836,
},
[387122] = {
["source"] = "Forgotten Creation",
["event"] = "SPELL_CAST_START",
["npcID"] = 193214,
},
[329783] = {
["npcID"] = 156226,
},
[428082] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["npcID"] = 82682,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1751,
},
[387125] = {
["source"] = "Primalist Thunderbeast",
["event"] = "SPELL_CAST_START",
["npcID"] = 195696,
},
[358455] = {
["npcID"] = 177972,
},
[411700] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Tidehunter",
["npcID"] = 205365,
},
[207906] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Talixae Flamewreath",
["npcID"] = 104217,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1869,
},
[374839] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["npcID"] = 189478,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2612,
},
[297020] = {
["npcID"] = 185015,
},
[387127] = {
["source"] = "Primalist Thunderbeast",
["event"] = "SPELL_CAST_START",
["npcID"] = 195696,
},
[31623] = {
["encounterName"] = "Swamplord Musel'ek",
["encounterID"] = 1947,
["npcID"] = 17826,
},
[191524] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blade Dancer Illianna",
["npcID"] = 96657,
},
[292926] = {
["npcID"] = 151127,
},
[325694] = {
["npcID"] = 160359,
},
[337982] = {
["npcID"] = 162872,
},
[325696] = {
["npcID"] = 172080,
},
[191527] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blade Dancer Illianna",
["npcID"] = 96657,
},
[391230] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bisquius",
["npcID"] = 197557,
},
[148522] = {
["encounterName"] = "Galakras",
["source"] = "Dragonmaw Tidal Shaman",
["encounterID"] = 1622,
["event"] = "SPELL_CAST_START",
["npcID"] = 72958,
},
[387135] = {
["source"] = "Primalist Arcblade",
["event"] = "SPELL_CAST_START",
["npcID"] = 194898,
},
[325700] = {
["npcID"] = 165529,
},
[325701] = {
["npcID"] = 165529,
},
[272457] = {
["encounterName"] = "Sporecaller Zancha",
["source"] = "Sporecaller Zancha",
["npcID"] = 131383,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2112,
},
[164907] = {
["source"] = "Reanimated Ritual Bones",
["event"] = "SPELL_CAST_START",
["npcID"] = 75715,
},
[317511] = {
["npcID"] = 158477,
},
["383823"] = {
["source"] = "Nokhud Hornsounder",
["event"] = "SPELL_CAST_START",
["npcID"] = 192796,
},
[350280] = {
["encounterName"] = "The Tarragrue",
["npcID"] = 175611,
["encounterID"] = 2423,
},
[346186] = {
["npcID"] = 167323,
},
[337995] = {
["npcID"] = 170048,
},
[292942] = {
["npcID"] = 171919,
},
[350283] = {
["encounterName"] = "The Nine",
["npcID"] = 177094,
["encounterID"] = 2429,
},
[387145] = {
["source"] = "Stormcaller Boroo",
["event"] = "SPELL_CAST_START",
["npcID"] = 194317,
},
[118297] = {
["npcID"] = 61029,
},
[428103] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Naz'jar Frost Witch",
["npcID"] = 44404,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[284752] = {
["npcID"] = 144572,
},
[226347] = {
["source"] = "Stoneclaw Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 91332,
},
[362572] = {
["npcID"] = 182728,
},
[370764] = {
["source"] = "Crystal Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 187160,
},
[144433] = {
["npcID"] = 71885,
},
[329808] = {
["encounterName"] = "Stone Legion Generals",
["npcID"] = 168113,
["encounterID"] = 2417,
},
[199726] = {
["source"] = "King Ranulf",
["event"] = "SPELL_CAST_START",
["npcID"] = 97083,
},
[370766] = {
["source"] = "Crystal Thrasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 187139,
},
[272469] = {
["event"] = "SPELL_CAST_START",
["source"] = "Abyssal Reach",
["npcID"] = 138538,
},
[362576] = {
["npcID"] = 182728,
},
[387151] = {
["encounterName"] = "Telash Greywing",
["source"] = "Telash Greywing",
["encounterID"] = 2583,
["event"] = "SPELL_CAST_START",
["npcID"] = 186737,
},
[391247] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bazual",
["npcID"] = 193532,
},
[156722] = {
["source"] = "Shadowmoon Exhumer",
["event"] = "SPELL_CAST_START",
["npcID"] = 77700,
},
[301141] = {
["encounterName"] = "Za'qul",
["npcID"] = 150859,
["encounterID"] = 2293,
},
[338003] = {
["npcID"] = 165414,
},
[374865] = {
["event"] = "SPELL_CAST_START",
["source"] = "Plains Rockfang",
["npcID"] = 193384,
},
[183345] = {
["npcID"] = 185015,
},
[338005] = {
["npcID"] = 165415,
},
[395346] = {
["source"] = "Snee",
["event"] = "SPELL_CAST_START",
["npcID"] = 186203,
},
[411730] = {
["event"] = "SPELL_CAST_START",
["source"] = "Molten Hound",
["npcID"] = 205611,
},
[28297] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lightning Totem",
["npcID"] = 16385,
},
[358486] = {
["npcID"] = 178898,
},
[169012] = {
["source"] = "Burning Familiar",
["event"] = "SPELL_CAST_START",
["npcID"] = 89196,
},
[383062] = {
["source"] = "Decayed Elder",
["event"] = "SPELL_CAST_START",
["npcID"] = 189531,
},
[395351] = {
["event"] = "SPELL_CAST_START",
["source"] = "Azure Pathfinder",
["npcID"] = 194210,
},
[338011] = {
["npcID"] = 166318,
},
[17290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hellfire Imp",
["npcID"] = 17477,
},
[346204] = {
["encounterName"] = "Zo'phex the Sentinel",
["npcID"] = 175616,
["encounterID"] = 2425,
},
[346205] = {
["npcID"] = 173717,
},
[411738] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rashok",
["npcID"] = 201320,
},
[366685] = {
["npcID"] = 185271,
},
[321633] = {
["npcID"] = 175605,
},
[292963] = {
["encounterName"] = "Za'qul",
["npcID"] = 150859,
["encounterID"] = 2293,
},
[346208] = {
["npcID"] = 177899,
},
[358496] = {
["npcID"] = 179805,
},
[166969] = {
["npcID"] = 79315,
},
[169017] = {
["source"] = "Felfire Familiar",
["event"] = "SPELL_CAST_START",
["npcID"] = 89197,
},
[366689] = {
["npcID"] = 185268,
},
[383073] = {
["encounterName"] = "Terros",
["source"] = "Terros",
["encounterID"] = 2639,
["event"] = "SPELL_CAST_START",
["npcID"] = 190496,
},
[354405] = {
["encounterName"] = "The Tarragrue",
["npcID"] = 175611,
["encounterID"] = 2423,
},
[374885] = {
["source"] = "Astral Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 189555,
},
[428130] = {
["event"] = "SPELL_CAST_START",
["source"] = "Verlann Timbercrush",
["npcID"] = 207554,
},
[169020] = {
["source"] = "Shadowflame Familiar",
["event"] = "SPELL_CAST_START",
["npcID"] = 89195,
},
[238648] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomflame Infernal",
["npcID"] = 121045,
},
[333929] = {
["npcID"] = 164847,
},
[329834] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2405,
["npcID"] = 169267,
},
[358505] = {
["npcID"] = 179779,
},
[362601] = {
["encounterName"] = "Lihuvim, Principal Architect",
["encounterID"] = 2539,
["npcID"] = 182169,
},
[333931] = {
["npcID"] = 164847,
},
[358506] = {
["npcID"] = 179779,
},
[333932] = {
["encounterName"] = "Sire Denathrius",
["npcID"] = 169813,
["encounterID"] = 2407,
},
[403561] = {
["source"] = "Fael'lin",
["event"] = "SPELL_CAST_START",
["npcID"] = 198916,
},
[342125] = {
["npcID"] = 167538,
},
[329838] = {
["npcID"] = 159027,
},
[374892] = {
["source"] = "Plainswalker Calf",
["event"] = "SPELL_CAST_START",
["npcID"] = 187939,
},
[411754] = {
["event"] = "SPELL_CAST_START",
["source"] = "Conduit Guardian",
["npcID"] = 205478,
},
[415850] = {
["source"] = "Roiling Deathstalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 211242,
},
[358510] = {
["npcID"] = 179779,
},
[411755] = {
["event"] = "SPELL_CAST_START",
["source"] = "Conduit Guardian",
["npcID"] = 205478,
},
[428139] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["npcID"] = 82682,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1751,
},
[403565] = {
["source"] = "Fael'lin",
["event"] = "SPELL_CAST_START",
["npcID"] = 198916,
},
[122402] = {
["encounterName"] = "Amber-Shaper Un'sok",
["source"] = "Amber Monstrosity",
["encounterID"] = 1499,
["event"] = "SPELL_CAST_START",
["npcID"] = 62711,
},
[403566] = {
["source"] = "Flare Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 202683,
},
[321652] = {
["npcID"] = 175605,
},
[212031] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bound Energy",
["npcID"] = 105705,
},
[197696] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Illysanna Ravencrest",
["npcID"] = 98696,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1833,
},
[374898] = {
["event"] = "SPELL_CAST_START",
["source"] = "Old Arbhog",
["npcID"] = 196897,
},
[395377] = {
["source"] = "Thondrozus",
["event"] = "SPELL_CAST_START",
["npcID"] = 192769,
},
[387186] = {
["source"] = "Bronze Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 187127,
},
[395378] = {
["source"] = "Malsegan",
["event"] = "SPELL_CAST_START",
["npcID"] = 193212,
},
[301177] = {
["encounterName"] = "HK-8 Aerial Oppression Unit",
["npcID"] = 150190,
["encounterID"] = 2291,
},
[28299] = {
["encounterName"] = "Thaddius",
["source"] = "Thaddius",
["npcID"] = 15928,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1120,
},
[342135] = {
["npcID"] = 162744,
},
[411763] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Infinite Keeper",
["encounterID"] = 2673,
["event"] = "SPELL_CAST_START",
["npcID"] = 205212,
},
[387189] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rendvith",
["npcID"] = 196971,
},
[29579] = {
["npcID"] = 114625,
},
[142406] = {
["source"] = "Kor'kron Emberguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 70798,
},
[387191] = {
["source"] = "Strunraan",
["event"] = "SPELL_CAST_START",
["npcID"] = 193534,
},
[110117] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ethereal Sha",
["npcID"] = 65414,
},
[362617] = {
["encounterName"] = "The Jailer",
["encounterID"] = 2537,
["npcID"] = 180990,
},
[387192] = {
["source"] = "Bronze Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 187127,
},
[342139] = {
["npcID"] = 167536,
},
[197700] = {
["source"] = "Temple Priestess",
["event"] = "SPELL_CAST_START",
["npcID"] = 105760,
},
[403576] = {
["source"] = "Warden Entrix",
["event"] = "SPELL_CAST_START",
["npcID"] = 200960,
},
[255041] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feasting Skyscreamer",
["npcID"] = 128434,
},
[403577] = {
["isChanneled"] = true,
["source"] = "Spellsworn Mender",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 200960,
},
[123429] = {
["npcID"] = 60195,
},
[366716] = {
["npcID"] = 185274,
},
[122406] = {
["encounterName"] = "Wind Lord Mel'jarak",
["source"] = "Wind Lord Mel'jarak",
["npcID"] = 62397,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1498,
},
[110119] = {
["encounterName"] = "Sha of Violence",
["source"] = "Sha Manifestation",
["npcID"] = 58201,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1305,
},
[346243] = {
["npcID"] = 168233,
},
[350339] = {
["encounterName"] = "The Nine",
["npcID"] = 177407,
["encounterID"] = 2429,
},
[321669] = {
["encounterName"] = "Mistcaller",
["encounterID"] = 2392,
["npcID"] = 165108,
},
[329862] = {
["npcID"] = 153885,
},
[350342] = {
["encounterName"] = "The Nine",
["npcID"] = 177095,
["encounterID"] = 2429,
},
[144461] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chi-Ji",
["npcID"] = 71952,
},
[387205] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tyrhold Gryphon",
["npcID"] = 198417,
},
[118312] = {
["encounterName"] = "Protectors of the Endless",
["source"] = "Elder Asani",
["encounterID"] = 1409,
["event"] = "SPELL_CAST_START",
["npcID"] = 60586,
},
[193611] = {
["encounterName"] = "Lady Hatecoil",
["source"] = "Lady Hatecoil",
["npcID"] = 91789,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1811,
},
[122408] = {
["encounterName"] = "Amber-Shaper Un'sok",
["source"] = "Amber Monstrosity",
["encounterID"] = 1499,
["event"] = "SPELL_CAST_START",
["npcID"] = 62711,
},
[125480] = {
["source"] = "Amber Searsting",
["event"] = "SPELL_CAST_START",
["npcID"] = 63569,
},
[358538] = {
["npcID"] = 180728,
},
[346251] = {
["npcID"] = 178490,
},
[216139] = {
["event"] = "SPELL_CAST_START",
["source"] = "Black Harvest Invoker",
["npcID"] = 108799,
},
[419975] = {
["event"] = "SPELL_CAST_START",
["source"] = "Splinterlimb",
["npcID"] = 209365,
},
[35096] = {
["source"] = "Bloodwarder Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 19633,
},
[142416] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Iyyokuk the Lucid",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71160,
},
[403593] = {
["source"] = "Magma Burster",
["event"] = "SPELL_CAST_START",
["npcID"] = 200801,
},
[358540] = {
["npcID"] = 177974,
},
[138321] = {
["encounterName"] = "Ra-den",
["source"] = "Ra-den",
["npcID"] = 69473,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1580,
},
[173135] = {
["npcID"] = 83578,
},
[129577] = {
["source"] = "Korjan Slavemaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 65638,
},
[391308] = {
["source"] = "Boolk",
["event"] = "SPELL_CAST_START",
["npcID"] = 191450,
},
[379023] = {
["source"] = "Shortcoat Bear",
["event"] = "SPELL_CAST_START",
["npcID"] = 193497,
},
[11975] = {
["source"] = "Skeletal Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 10390,
},
[399504] = {
["source"] = "Tarasek Frostclaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 201035,
},
[185425] = {
["event"] = "SPELL_CAST_START",
["source"] = "Steeljaw Grizzly",
["npcID"] = 96677,
},
[173138] = {
["npcID"] = 80700,
},
[403601] = {
["source"] = "Warden Entrix",
["event"] = "SPELL_CAST_START",
["npcID"] = 200960,
},
[325782] = {
["npcID"] = 160075,
},
[333975] = {
["npcID"] = 165998,
},
[28301] = {
["source"] = "Mad Scientist",
["event"] = "SPELL_CAST_START",
["npcID"] = 16020,
},
[30093] = {
["event"] = "SPELL_CAST_START",
["source"] = "Necro Knight",
["npcID"] = 16165,
},
[144470] = {
["source"] = "Chi-Ji",
["event"] = "SPELL_CAST_START",
["npcID"] = 71952,
},
[407701] = {
["isChanneled"] = true,
["source"] = "Pendule",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 204030,
},
[411798] = {
["source"] = "Oozing Sludge",
["event"] = "SPELL_CAST_START",
["npcID"] = 205644,
},
[387224] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dracthyr Mender",
["npcID"] = 201069,
},
[379033] = {
["source"] = "Loyal Bakar",
["event"] = "SPELL_CAST_START",
["npcID"] = 184656,
},
[424087] = {
["source"] = "Zaqali Devastator",
["event"] = "SPELL_CAST_START",
["npcID"] = 207089,
},
[325790] = {
["npcID"] = 172909,
},
[350365] = {
["encounterName"] = "The Nine",
["npcID"] = 177095,
["encounterID"] = 2429,
},
["405641"] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Shadowflame Amalgamation",
["encounterID"] = 2687,
["event"] = "SPELL_CAST_START",
["npcID"] = 201934,
},
[338079] = {
["npcID"] = 164737,
},
[391326] = {
["source"] = "Honmor",
["event"] = "SPELL_CAST_START",
["npcID"] = 193704,
},
[238677] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadflame Corruptor",
["npcID"] = 118783,
},
["114646"] = {
["source"] = "Haunting Sha",
["event"] = "SPELL_CAST_START",
["npcID"] = 59555,
},
[387232] = {
["event"] = "SPELL_CAST_START",
["source"] = "Emerald Preserver",
["npcID"] = 209202,
},
[317605] = {
["npcID"] = 162744,
},
[358563] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zo'phex",
["npcID"] = 175616,
},
[284840] = {
["npcID"] = 144572,
},
[297128] = {
["npcID"] = 144298,
},
[395427] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overseer Lahar",
["npcID"] = 189235,
},
[411811] = {
["source"] = "Bubbling Slime",
["event"] = "SPELL_CAST_START",
["npcID"] = 205651,
},
[29582] = {
["source"] = "Phantom Guest",
["event"] = "SPELL_CAST_START",
["npcID"] = 16409,
},
[189531] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mystic Aaran",
["npcID"] = 95603,
},
[366759] = {
["npcID"] = 183498,
},
[325802] = {
["npcID"] = 166936,
},
[383143] = {
["source"] = "Brackenhide Putrifier",
["event"] = "SPELL_CAST_START",
["npcID"] = 192057,
},
[189532] = {
["event"] = "SPELL_CAST_START",
["source"] = "Binder Hallaani",
["npcID"] = 95613,
},
[144479] = {
["encounterName"] = "Norushen",
["source"] = "Essence of Corruption",
["encounterID"] = 1624,
["event"] = "SPELL_CAST_START",
["npcID"] = 71976,
},
[199772] = {
["source"] = "Valarjar Champion",
["event"] = "SPELL_CAST_START",
["npcID"] = 97087,
},
["428374"] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Lady Naz'jar",
["encounterID"] = 1045,
["event"] = "SPELL_CAST_START",
["npcID"] = 40586,
},
[403625] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[342189] = {
["npcID"] = 174175,
},
[248922] = {
["npcID"] = 129927,
},
[387243] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Murhulk",
["npcID"] = 195095,
},
[9672] = {
["source"] = "Skeletal Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 10390,
},
[346286] = {
["encounterName"] = "Mailroom Mayhem",
["npcID"] = 175646,
["encounterID"] = 2424,
},
[329904] = {
["npcID"] = 157118,
},
[329905] = {
["npcID"] = 157118,
},
[144482] = {
["encounterName"] = "Norushen",
["source"] = "Manifestation of Corruption",
["encounterID"] = 1624,
["event"] = "SPELL_CAST_START",
["npcID"] = 71977,
},
[350385] = {
["encounterName"] = "The Nine",
["npcID"] = 177094,
["encounterID"] = 2429,
},
[125490] = {
["source"] = "Amber Searsting",
["event"] = "SPELL_CAST_START",
["npcID"] = 63569,
},
[138339] = {
["encounterName"] = "Ra-den",
["source"] = "Ra-den",
["npcID"] = 69473,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1580,
},
[329908] = {
["npcID"] = 157017,
},
["164965"] = {
["source"] = "Everbloom Naturalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 81819,
},
[329909] = {
["npcID"] = 157017,
},
[193633] = {
["source"] = "Risen Archer",
["event"] = "SPELL_CAST_START",
["npcID"] = 98275,
},
[140389] = {
["source"] = "Zandalari Beast Handler",
["event"] = "SPELL_CAST_START",
["npcID"] = 69312,
},
[167012] = {
["npcID"] = 170694,
},
[136294] = {
["encounterName"] = "Tortos",
["source"] = "Tortos",
["npcID"] = 67977,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1565,
},
[29583] = {
["npcID"] = 114625,
},
[140390] = {
["source"] = "Zandalari Beast Handler",
["event"] = "SPELL_CAST_START",
["npcID"] = 69312,
},
["398206"] = {
["source"] = "Exhumed Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 75979,
},
[407733] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 200912,
},
[164965] = {
["event"] = "SPELL_CAST_START",
["source"] = "Everbloom Naturalist",
["npcID"] = 81819,
},
[358585] = {
["npcID"] = 176669,
},
[354490] = {
["npcID"] = 179526,
},
[374969] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["npcID"] = 189478,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2612,
},
[395448] = {
["source"] = "Voraazka",
["event"] = "SPELL_CAST_START",
["npcID"] = 193674,
},
[329917] = {
["npcID"] = 168578,
},
[146536] = {
["source"] = "Kor'thik Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 72954,
},
[148584] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skunky Brew Alemental",
["npcID"] = 71908,
},
[136297] = {
["isChanneled"] = true,
["source"] = "Goblin Cannon",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 67694,
},
["265368"] = {
["source"] = "Bewitched Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 131587,
},
[146537] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aggron",
["npcID"] = 72981,
},
[383165] = {
["source"] = "Brackenhide Putrifier",
["event"] = "SPELL_CAST_START",
["npcID"] = 192057,
},
[387261] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["npcID"] = 189492,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2607,
},
[407740] = {
["source"] = "Aurantia",
["event"] = "SPELL_CAST_START",
["npcID"] = 203047,
},
["168082"] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Life Warden Gola",
["encounterID"] = 1757,
["event"] = "SPELL_CAST_START",
["npcID"] = 83892,
},
[334017] = {
["encounterName"] = "Lady Inerva Darkvein",
["npcID"] = 170199,
["encounterID"] = 2406,
},
[162921] = {
["source"] = "Tormented Stagwing",
["event"] = "SPELL_CAST_START",
["npcID"] = 90480,
},
[411837] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fragment of Fire",
["npcID"] = 205971,
},
[226406] = {
["source"] = "Emberhusk Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 113537,
},
[321734] = {
["npcID"] = 156564,
},
[395458] = {
["source"] = "Harkyn Grymstone",
["event"] = "SPELL_CAST_START",
["npcID"] = 186200,
},
[140397] = {
["source"] = "Mighty Devilsaur",
["event"] = "SPELL_CAST_START",
["npcID"] = 69406,
},
[334023] = {
["npcID"] = 167536,
},
[358598] = {
["npcID"] = 178897,
},
[329929] = {
["npcID"] = 157083,
},
[191595] = {
["source"] = "Felsworn Infester",
["event"] = "SPELL_CAST_START",
["npcID"] = 96587,
},
[329930] = {
["npcID"] = 157083,
},
[207979] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jazshariu",
["npcID"] = 104273,
},
[297166] = {
["npcID"] = 152875,
},
[350411] = {
["encounterName"] = "Soulrender Dormazain",
["npcID"] = 175728,
["encounterID"] = 2434,
},
[272592] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Corruptor",
["npcID"] = 138281,
},
[358603] = {
["npcID"] = 181212,
},
[140400] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zandalari Prophet",
["npcID"] = 70557,
},
[207980] = {
["event"] = "SPELL_CAST_START",
["source"] = "Baalgar the Watchful",
["npcID"] = 104274,
},
[201837] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taintheart Summoner",
["npcID"] = 99366,
},
[366797] = {
["npcID"] = 183749,
},
[387277] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Revenant",
["npcID"] = 195917,
},
[424140] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
["408975"] = {
["source"] = "Sundered Edgelord",
["event"] = "SPELL_CAST_START",
["npcID"] = 198873,
},
[403662] = {
["source"] = "Master Mathias Shaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 198983,
},
[264407] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Maiden",
["npcID"] = 131821,
},
[115259] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ik'thik Incubator",
["npcID"] = 59890,
},
[358611] = {
["npcID"] = 179760,
},
[350421] = {
["encounterName"] = "Fatescribe Roh-Kalo",
["encounterID"] = 2431,
["npcID"] = 175730,
},
[329943] = {
["encounterName"] = "Sire Denathrius",
["npcID"] = 168156,
["encounterID"] = 2407,
},
[350422] = {
["encounterName"] = "Soulrender Dormazain",
["npcID"] = 175727,
["encounterID"] = 2434,
},
[391380] = {
["source"] = "Ohn'ir Windsage",
["event"] = "SPELL_CAST_START",
["npcID"] = 195352,
},
[362710] = {
["npcID"] = 183229,
},
[224369] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soul Fragment",
["npcID"] = 112710,
},
[391382] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Volatile Infuser",
["npcID"] = 197671,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2635,
},
[134263] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sam the Wise",
["npcID"] = 68128,
},
[411862] = {
["source"] = "Animation Fluid",
["event"] = "SPELL_CAST_START",
["npcID"] = 203939,
},
[403671] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[395480] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gaelzion",
["npcID"] = 193653,
},
[317661] = {
["npcID"] = 163503,
},
[117309] = {
["encounterName"] = "Protectors of the Endless",
["source"] = "Elder Asani",
["encounterID"] = 1409,
["event"] = "SPELL_CAST_START",
["npcID"] = 60586,
},
[391385] = {
["source"] = "Summoned Lava Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 182815,
},
[387290] = {
["source"] = "Morlash",
["event"] = "SPELL_CAST_START",
["npcID"] = 201549,
},
[140409] = {
["source"] = "Master Caller",
["event"] = "SPELL_CAST_START",
["npcID"] = 69286,
},
[415963] = {
["event"] = "SPELL_CAST_START",
["source"] = "Adamanthia",
["npcID"] = 198921,
},
[305378] = {
["npcID"] = 177862,
},
[119358] = {
["encounterName"] = "Elegon",
["source"] = "Elegon",
["encounterID"] = 1500,
["event"] = "SPELL_CAST_START",
["npcID"] = 60410,
},
[259187] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["npcID"] = 122968,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2087,
},
[358624] = {
["npcID"] = 178997,
},
[140411] = {
["event"] = "SPELL_CAST_START",
["source"] = "Master Caller",
["npcID"] = 69286,
},
[334051] = {
["npcID"] = 168942,
},
[321764] = {
["npcID"] = 164861,
},
[407775] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thadrion",
["npcID"] = 200913,
},
[395488] = {
["source"] = "Pipspark Thundersnap",
["event"] = "SPELL_CAST_START",
["npcID"] = 193684,
},
[366818] = {
["npcID"] = 185275,
},
[387297] = {
["source"] = "Sundered Runebinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 186354,
},
[395489] = {
["event"] = "SPELL_CAST_START",
["source"] = "Karantun",
["npcID"] = 193647,
},
[224375] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Infernal Imp",
["encounterID"] = 1869,
["event"] = "SPELL_CAST_START",
["npcID"] = 112668,
},
[375011] = {
["npcID"] = 191019,
},
[424161] = {
["source"] = "The Apostle",
["event"] = "SPELL_CAST_START",
["npcID"] = 209911,
},
[387300] = {
["source"] = "Feasting Wyrm",
["event"] = "SPELL_CAST_START",
["npcID"] = 192739,
},
[119360] = {
["encounterName"] = "Elegon",
["source"] = "Elegon",
["encounterID"] = 1500,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 60410,
},
[366823] = {
["npcID"] = 185275,
},
[193659] = {
["encounterName"] = "God-King Skovald",
["source"] = "God-King Skovald",
["encounterID"] = 1808,
["event"] = "SPELL_CAST_START",
["npcID"] = 95675,
},
[61730] = {
["source"] = "Snowplain Disciple",
["event"] = "SPELL_CAST_START",
["npcID"] = 26705,
},
[428263] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Lady Naz'jar",
["npcID"] = 40586,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[338157] = {
["npcID"] = 165047,
},
[391402] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 189492,
},
[199805] = {
["source"] = "Stormforged Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 96574,
},
[136321] = {
["source"] = "Darkhatched Sorcerer",
["event"] = "SPELL_CAST_START",
["npcID"] = 67748,
},
[358638] = {
["npcID"] = 178997,
},
[395501] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Volatile Infuser",
["encounterID"] = 2635,
["event"] = "SPELL_CAST_START",
["npcID"] = 192934,
},
[407790] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[325876] = {
["npcID"] = 165414,
},
[395504] = {
["isChanneled"] = true,
["source"] = "Thondrozus",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 192769,
},
[325877] = {
["encounterName"] = "Sun King's Salvation",
["encounterID"] = 2402,
["npcID"] = 165805,
},
[240766] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guardian Sentry",
["npcID"] = 120777,
},
[424176] = {
["source"] = "Ancient Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 210637,
},
[350453] = {
["npcID"] = 179894,
},
[358645] = {
["npcID"] = 179736,
},
[329975] = {
["npcID"] = 157102,
},
[403699] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Essence of Shadow",
["npcID"] = 201774,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[424178] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sickened Growth",
["npcID"] = 207926,
},
[387317] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ruby Culler",
["npcID"] = 190093,
},
[407796] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[119364] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Beast of Jade",
["npcID"] = 66772,
},
[87622] = {
["encounterName"] = "Asaad",
["source"] = "Asaad",
["npcID"] = 43875,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1042,
},
[329978] = {
["npcID"] = 156142,
},
[158854] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elder Darkweaver Kath",
["npcID"] = 85771,
},
[193668] = {
["encounterName"] = "God-King Skovald",
["source"] = "God-King Skovald",
["encounterID"] = 1808,
["event"] = "SPELL_CAST_START",
["npcID"] = 95675,
},
[334076] = {
["npcID"] = 168942,
},
[119365] = {
["source"] = "Sorcerer Mogu",
["event"] = "SPELL_CAST_START",
["npcID"] = 61250,
},
[123461] = {
["encounterName"] = "Lei Shi",
["source"] = "Lei Shi",
["encounterID"] = 1506,
["event"] = "SPELL_CAST_START",
["npcID"] = 62983,
},
["193826"] = {
["encounterName"] = "God-King Skovald",
["source"] = "God-King Skovald",
["encounterID"] = 1808,
["event"] = "SPELL_CAST_START",
["npcID"] = 95675,
},
[55077] = {
["source"] = "Savage Worg",
["event"] = "SPELL_CAST_START",
["npcID"] = 29735,
},
[379134] = {
["npcID"] = 191092,
},
[366847] = {
["encounterName"] = "Prototype Pantheon",
["encounterID"] = 2544,
["npcID"] = 182144,
},
[106055] = {
["encounterName"] = "Wise Mari",
["source"] = "Wise Mari",
["encounterID"] = 1418,
["event"] = "SPELL_CAST_START",
["npcID"] = 56448,
},
[383231] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Lavamancer",
["npcID"] = 193944,
},
[140427] = {
["source"] = "Mighty Devilsaur",
["event"] = "SPELL_CAST_START",
["npcID"] = 69406,
},
[411903] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Chemist",
["npcID"] = 205656,
},
[350467] = {
["encounterName"] = "The Nine",
["npcID"] = 175726,
["encounterID"] = 2429,
},
[329989] = {
["npcID"] = 158978,
},
[329990] = {
["npcID"] = 158978,
},
[350469] = {
["encounterName"] = "Remnant of Ner'zhul",
["npcID"] = 175729,
["encounterID"] = 2432,
},
[411906] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Chemist",
["npcID"] = 205656,
},
[383236] = {
["source"] = "Beguiled Aquamancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 195960,
},
[383237] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Lava Elemental",
["npcID"] = 187321,
},
[342280] = {
["encounterName"] = "Lady Inerva Darkvein",
["npcID"] = 165521,
["encounterID"] = 2406,
},
[342281] = {
["encounterName"] = "Lady Inerva Darkvein",
["npcID"] = 165521,
["encounterID"] = 2406,
},
[428293] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Naz'jar Honor Guard",
["npcID"] = 40633,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[114249] = {
["npcID"] = 59416,
},
[366858] = {
["npcID"] = 183748,
},
[387337] = {
["npcID"] = 191093,
},
[411912] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Devourer",
["npcID"] = 205673,
},
[354572] = {
["source"] = "Unruly Patron",
["event"] = "SPELL_CAST_START",
["npcID"] = 176561,
},
[407817] = {
["source"] = "Gholna",
["event"] = "SPELL_CAST_START",
["npcID"] = 199853,
},
[321807] = {
["npcID"] = 163619,
},
[276754] = {
["npcID"] = 156245,
},
[395531] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chargum",
["npcID"] = 193685,
},
[136338] = {
["source"] = "Nalak",
["event"] = "SPELL_CAST_START",
["npcID"] = 69099,
},
[411916] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Devourer",
["npcID"] = 205673,
},
[120394] = {
["encounterName"] = "Sha of Fear",
["source"] = "Dread Spawn",
["encounterID"] = 1431,
["event"] = "SPELL_CAST_START",
["npcID"] = 61003,
},
[144530] = {
["event"] = "SPELL_CAST_START",
["source"] = "Yu'lon",
["npcID"] = 71955,
},
[387343] = {
["source"] = "Molded Boulder",
["event"] = "SPELL_CAST_START",
["npcID"] = 190213,
},
[253068] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadgaze Soulspinner",
["npcID"] = 127588,
},
[313621] = {
["npcID"] = 177637,
},
[366866] = {
["npcID"] = 184651,
},
[136340] = {
["source"] = "Nalak",
["event"] = "SPELL_CAST_START",
["npcID"] = 69099,
},
[375058] = {
["source"] = "Old Arbhog",
["event"] = "SPELL_CAST_START",
["npcID"] = 196897,
},
[362771] = {
["encounterName"] = "Anduin Wrynn",
["encounterID"] = 2546,
["npcID"] = 183463,
},
[366869] = {
["npcID"] = 184651,
},
[403731] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duzalgor",
["npcID"] = 200610,
},
[411923] = {
["event"] = "SPELL_CAST_START",
["source"] = "Diganthor",
["npcID"] = 204434,
},
[150677] = {
["encounterName"] = "Gug'rokk",
["source"] = "Gug'rokk",
["npcID"] = 74790,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1654,
},
[42281] = {
["npcID"] = 23694,
},
[395541] = {
["event"] = "SPELL_CAST_START",
["source"] = "Emblazion",
["npcID"] = 193650,
},
["375687"] = {
["source"] = "Decay Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 190426,
},
[272670] = {
["npcID"] = 134600,
},
[354586] = {
["npcID"] = 179526,
},
[375065] = {
["source"] = "Fetid Rotsinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 186226,
},
[185493] = {
["npcID"] = 157016,
},
[375068] = {
["encounterName"] = "Magmatusk",
["source"] = "Lava Tentacles",
["npcID"] = 190023,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2610,
},
[403740] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[403741] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[321828] = {
["encounterName"] = "Mistcaller",
["encounterID"] = 2392,
["npcID"] = 164501,
},
[297254] = {
["encounterName"] = "King Gobbamak",
["npcID"] = 150159,
["encounterID"] = 2290,
},
[236694] = {
["encounterName"] = "Sisters of the Moon",
["source"] = "Captain Yathae Moonstrike",
["npcID"] = 118374,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2050,
},
[301351] = {
["encounterName"] = "HK-8 Aerial Oppression Unit",
["npcID"] = 150190,
["encounterID"] = 2291,
},
[26262] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Tendril",
["npcID"] = 65282,
},
[342310] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2405,
["npcID"] = 166644,
},
[424227] = {
["event"] = "SPELL_CAST_START",
["source"] = "Priestess of the Moon",
["npcID"] = 211076,
},
[156829] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gul'kosh",
["npcID"] = 78437,
},
[321834] = {
["encounterName"] = "Mistcaller",
["encounterID"] = 2392,
["npcID"] = 164501,
},
[375079] = {
["event"] = "SPELL_CAST_START",
["source"] = "Squallbringer Cyraz",
["npcID"] = 190370,
},
[395558] = {
["event"] = "SPELL_CAST_START",
["source"] = "Emblazion",
["npcID"] = 193650,
},
[95826] = {
["npcID"] = 42316,
},
[399656] = {
["event"] = "SPELL_CAST_START",
["source"] = "Igneous Darkness",
["npcID"] = 202866,
},
[358699] = {
["npcID"] = 180417,
},
[358700] = {
["npcID"] = 180417,
},
[129617] = {
["npcID"] = 65745,
},
[424234] = {
["source"] = "Amirdrassil Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 207769,
},
[424235] = {
["source"] = "Amirdrassil Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 207782,
},
[391470] = {
["event"] = "SPELL_CAST_START",
["source"] = "Piton",
["npcID"] = 194464,
},
[395567] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gravlion",
["npcID"] = 193654,
},
[146595] = {
["encounterName"] = "Sha of Pride",
["source"] = "Norushen",
["encounterID"] = 1604,
["event"] = "SPELL_CAST_START",
["npcID"] = 71965,
},
[399664] = {
["event"] = "SPELL_CAST_START",
["source"] = "Igneous Darkness",
["npcID"] = 202866,
},
[330037] = {
["npcID"] = 168361,
},
[416048] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2709,
},
[399666] = {
["source"] = "Spellsworn Construct",
["event"] = "SPELL_CAST_START",
["npcID"] = 200598,
},
[424241] = {
["source"] = "Amirdrassil Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 207782,
},
[411954] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Infinite Chronoweaver",
["npcID"] = 205384,
},
[375094] = {
["source"] = "Swift Hornstrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 190029,
},
[264510] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Marksman",
["npcID"] = 131849,
},
[411958] = {
["source"] = "Iridikron's Creation",
["event"] = "SPELL_CAST_START",
["npcID"] = 205691,
},
[50989] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Wintergrasp Catapult",
["npcID"] = 27881,
},
[102998] = {
["event"] = "SPELL_CAST_START",
["source"] = "Xiao",
["npcID"] = 59839,
},
[197797] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Risen Arcanist",
["npcID"] = 100486,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1833,
},
[199845] = {
["isChanneled"] = true,
["source"] = "Psyfiend",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 101398,
},
[428345] = {
["event"] = "SPELL_CAST_START",
["source"] = "Molten Scorpid",
["npcID"] = 213696,
},
[403771] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[114262] = {
["encounterName"] = "Lilian Voss",
["source"] = "Darkmaster Gandling",
["encounterID"] = 1429,
["event"] = "SPELL_CAST_START",
["npcID"] = 58875,
},
[403772] = {
["source"] = "Vakan",
["event"] = "SPELL_CAST_START",
["npcID"] = 199855,
},
["260894"] = {
["encounterName"] = "Elder Leaxa",
["source"] = "Elder Leaxa",
["encounterID"] = 2111,
["event"] = "SPELL_CAST_START",
["npcID"] = 131318,
},
[399678] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rampant Shadowflame",
["npcID"] = 203698,
},
[169129] = {
["encounterName"] = "Skulloc, Son of Gruul",
["encounterID"] = 1754,
["npcID"] = 84464,
},
[264520] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maddened Survivalist",
["npcID"] = 131850,
},
[183465] = {
["source"] = "Tarspitter Lurker",
["event"] = "SPELL_CAST_START",
["npcID"] = 91001,
},
[138412] = {
["source"] = "Gokkar",
["event"] = "SPELL_CAST_START",
["npcID"] = 69400,
},
[383298] = {
["source"] = "Summoned Lava Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 182815,
},
[395586] = {
["source"] = "Spellforged Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 194402,
},
[391491] = {
["source"] = "Sootscale the Indomitable",
["event"] = "SPELL_CAST_START",
["npcID"] = 190307,
},
[146605] = {
["source"] = "Kovok",
["event"] = "SPELL_CAST_START",
["npcID"] = 72927,
},
[169132] = {
["encounterName"] = "Skulloc, Son of Gruul",
["npcID"] = 84464,
["encounterID"] = 1754,
},
[236712] = {
["encounterName"] = "Sisters of the Moon",
["source"] = "Priestess Lunaspyre",
["npcID"] = 118518,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2050,
},
[264525] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maddened Survivalist",
["npcID"] = 131850,
},
[387398] = {
["source"] = "Worldbreaker Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 185589,
},
[358728] = {
["npcID"] = 176940,
},
[146607] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corrupted Skullsplitter",
["npcID"] = 72983,
},
[115289] = {
["encounterName"] = "Thalnos the Soulrender",
["source"] = "Thalnos the Soulrender",
["encounterID"] = 1423,
["event"] = "SPELL_CAST_START",
["npcID"] = 59789,
},
[160943] = {
["encounterName"] = "Nitrogg Thundertower",
["encounterID"] = 1732,
["npcID"] = 77483,
},
[428360] = {
["event"] = "SPELL_CAST_START",
["source"] = "Firelands Destroyer",
["npcID"] = 210293,
},
[350541] = {
["encounterName"] = "The Nine",
["npcID"] = 175726,
["encounterID"] = 2429,
},
[403788] = {
["source"] = "Khirna Cragheart",
["event"] = "SPELL_CAST_START",
["npcID"] = 198915,
},
[334161] = {
["npcID"] = 171290,
},
[334162] = {
["npcID"] = 166908,
},
[193712] = {
["encounterName"] = "Lady Hatecoil",
["source"] = "Lady Hatecoil",
["encounterID"] = 1811,
["event"] = "SPELL_CAST_START",
["npcID"] = 91789,
},
[228526] = {
["npcID"] = 114783,
},
[387410] = {
["source"] = "Scalesmith Mita",
["event"] = "SPELL_CAST_START",
["npcID"] = 191010,
},
[403794] = {
["source"] = "Duzalgor",
["event"] = "SPELL_CAST_START",
["npcID"] = 200610,
},
[407891] = {
["source"] = "Horde Farseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 204206,
},
[167092] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cackling Pyromaniac",
["npcID"] = 79510,
},
[136374] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zandalari Speaker",
["npcID"] = 69136,
},
[138422] = {
["source"] = "Skumblade Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 69338,
},
[59696] = {
["source"] = "Proto-Drake Handler",
["event"] = "SPELL_CAST_START",
["npcID"] = 24082,
},
[399701] = {
["source"] = "Swooping Flayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 199809,
},
[334170] = {
["npcID"] = 171289,
},
[350554] = {
["encounterName"] = "Fatescribe Roh-Kalo",
["encounterID"] = 2431,
["npcID"] = 175730,
},
[193716] = {
["encounterName"] = "Lady Hatecoil",
["source"] = "Lady Hatecoil",
["npcID"] = 91789,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1811,
},
[346459] = {
["encounterName"] = "Kel'Thuzad",
["npcID"] = 175559,
["encounterID"] = 2422,
},
[366938] = {
["npcID"] = 185032,
},
[317791] = {
["encounterName"] = "Painsmith Raznal",
["encounterID"] = 2430,
["npcID"] = 163366,
},
[354653] = {
["npcID"] = 179560,
},
[411994] = {
["isChanneled"] = true,
["source"] = "Infinite Chronoweaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205384,
},
[317792] = {
["encounterName"] = "Painsmith Raznal",
["encounterID"] = 2430,
["npcID"] = 163366,
},
[22938] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lysander Starshade",
["npcID"] = 207856,
},
[321891] = {
["encounterName"] = "Mistcaller",
["encounterID"] = 2392,
["npcID"] = 165251,
},
[407902] = {
["source"] = "Horde Farseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 204206,
},
[362849] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2553,
["npcID"] = 183501,
},
[140476] = {
["source"] = "Mighty Devilsaur",
["event"] = "SPELL_CAST_START",
["npcID"] = 69406,
},
[321894] = {
["encounterName"] = "Nalthor the Rimebinder",
["encounterID"] = 2390,
["npcID"] = 162693,
},
[387427] = {
["source"] = "Uncontrolled Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 181775,
},
[146621] = {
["source"] = "Kovok",
["event"] = "SPELL_CAST_START",
["npcID"] = 72927,
},
[301418] = {
["source"] = "Cargo Crawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 158918,
},
[120416] = {
["npcID"] = 61302,
},
[358760] = {
["encounterName"] = "The Eye of the Jailer",
["npcID"] = 176521,
["encounterID"] = 2433,
},
[297325] = {
["encounterName"] = "The Queen's Court",
["npcID"] = 152852,
["encounterID"] = 2311,
},
[387433] = {
["source"] = "Zaphil the Defiant",
["event"] = "SPELL_CAST_START",
["npcID"] = 192223,
},
[35124] = {
["source"] = "Sunseeker Geomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 18420,
},
[399721] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spellsworn Construct",
["npcID"] = 200598,
},
[138433] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skumblade Brute",
["npcID"] = 69338,
},
[191678] = {
["source"] = "Viletongue Belcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 96480,
},
[412012] = {
["isChanneled"] = true,
["source"] = "Infinite Timeslicer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205408,
},
[407917] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[123490] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enslaved Bonesmasher",
["npcID"] = 63030,
},
[136387] = {
["npcID"] = 23682,
},
[358769] = {
["npcID"] = 180782,
},
[387440] = {
["source"] = "Ukhel Beastcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 195878,
},
[358770] = {
["npcID"] = 176880,
},
[138436] = {
["source"] = "Skumblade Seadragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 69226,
},
[346484] = {
["npcID"] = 179380,
},
[301431] = {
["encounterName"] = "Queen Azshara",
["npcID"] = 152910,
["encounterID"] = 2299,
},
[428400] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Burning Colossus",
["npcID"] = 207796,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[358773] = {
["npcID"] = 179891,
},
[428401] = {
["encounterName"] = "Ozumat",
["source"] = "Ink of Ozumat",
["npcID"] = 213770,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1047,
},
[14030] = {
["source"] = "Officer Jaxon",
["event"] = "SPELL_CAST_START",
["npcID"] = 14423,
},
[403827] = {
["source"] = "Shade of Onyxia",
["event"] = "SPELL_CAST_START",
["npcID"] = 199008,
},
[148677] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Kil'ruk the Wind-Reaver",
["npcID"] = 71161,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1593,
},
[169156] = {
["source"] = "Sargerei Felbringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 89200,
},
[264574] = {
["npcID"] = 134600,
},
[395639] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spellforged Horror",
["npcID"] = 194401,
},
[144583] = {
["encounterName"] = "Garrosh Hellscream",
["source"] = "Farseer Wolf Rider",
["npcID"] = 71983,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1623,
},
[395640] = {
["isChanneled"] = true,
["source"] = "Spellforged Horror",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 194401,
},
[144584] = {
["encounterName"] = "Garrosh Hellscream",
["source"] = "Farseer Wolf Rider",
["npcID"] = 71983,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1623,
},
[395642] = {
["isChanneled"] = true,
["source"] = "Spellforged Horror",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 194401,
},
[387452] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Commander",
["npcID"] = 190776,
},
[412027] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Infinite Keeper",
["encounterID"] = 2673,
["event"] = "SPELL_CAST_START",
["npcID"] = 205212,
},
[387453] = {
["source"] = "Professor Maxdormu",
["event"] = "SPELL_CAST_START",
["npcID"] = 189668,
},
[424315] = {
["event"] = "SPELL_CAST_START",
["source"] = "Druid of the Moon",
["npcID"] = 211086,
},
[358784] = {
["npcID"] = 179891,
},
[142539] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Zar'thik Amber Priest",
["npcID"] = 71397,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[395648] = {
["source"] = "Sogglmoggl",
["event"] = "SPELL_CAST_START",
["npcID"] = 188859,
},
[399744] = {
["source"] = "Warden Entrix",
["event"] = "SPELL_CAST_START",
["npcID"] = 200960,
},
[407936] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[395650] = {
["event"] = "SPELL_CAST_START",
["source"] = "Conjured Nightmare",
["npcID"] = 199014,
},
[399746] = {
["source"] = "Warp Crystal",
["event"] = "SPELL_CAST_START",
["npcID"] = 201082,
},
[395652] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sogglmoggl",
["npcID"] = 188859,
},
[395653] = {
["source"] = "Matriarch Remalla",
["event"] = "SPELL_CAST_START",
["npcID"] = 193246,
},
[191691] = {
["event"] = "SPELL_CAST_START",
["source"] = "Viletongue Belcher",
["npcID"] = 96480,
},
[144590] = {
["npcID"] = 71992,
},
[346506] = {
["npcID"] = 171581,
},
[387465] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Commander",
["npcID"] = 190776,
},
[140496] = {
["source"] = "Zandalari Haruspex",
["event"] = "SPELL_CAST_START",
["npcID"] = 69297,
},
[167119] = {
["npcID"] = 173114,
},
[321935] = {
["npcID"] = 164707,
},
[416139] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["encounterID"] = 2673,
["event"] = "SPELL_CAST_START",
["npcID"] = 199000,
},
[420236] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[122474] = {
["encounterName"] = "Imperial Vizier Zor'lok",
["source"] = "Imperial Vizier Zor'lok",
["npcID"] = 63554,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1507,
},
[346513] = {
["npcID"] = 171581,
},
[412046] = {
["event"] = "SPELL_CAST_START",
["source"] = "Monstrous Magmaclaw Snapper",
["npcID"] = 204214,
},
[403855] = {
["source"] = "Vakan",
["event"] = "SPELL_CAST_START",
["npcID"] = 199855,
},
[387473] = {
["source"] = "Brinetooth Bruiser",
["event"] = "SPELL_CAST_START",
["npcID"] = 187285,
},
[175314] = {
["npcID"] = 81994,
},
[228559] = {
["npcID"] = 114792,
},
[123499] = {
["event"] = "SPELL_CAST_START",
["source"] = "Set'thik Fanatic",
["npcID"] = 63031,
},
[326039] = {
["encounterName"] = "Grand Proctor Beryllia",
["encounterID"] = 2362,
["npcID"] = 162102,
},
[264603] = {
["encounterName"] = "Elder Leaxa",
["source"] = "Elder Leaxa",
["npcID"] = 131318,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2111,
},
[350615] = {
["encounterName"] = "Soulrender Dormazain",
["npcID"] = 175727,
["encounterID"] = 2434,
},
[297371] = {
["encounterName"] = "Queen Azshara",
["npcID"] = 152910,
["encounterID"] = 2299,
},
[342425] = {
["encounterName"] = "Stone Legion Generals",
["npcID"] = 168113,
["encounterID"] = 2417,
},
[395670] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spellforged Horror",
["npcID"] = 194401,
},
[268703] = {
["npcID"] = 134990,
},
[313757] = {
["npcID"] = 160974,
},
[383385] = {
["source"] = "Filth Caller",
["event"] = "SPELL_CAST_START",
["npcID"] = 185656,
},
[387481] = {
["source"] = "Brinetooth Bruiser",
["event"] = "SPELL_CAST_START",
["npcID"] = 187285,
},
[416152] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["encounterID"] = 2673,
["event"] = "SPELL_CAST_START",
["npcID"] = 199000,
},
[326046] = {
["npcID"] = 167111,
},
[152792] = {
["encounterName"] = "Nhallish",
["source"] = "Nhallish",
["encounterID"] = 1688,
["event"] = "SPELL_CAST_START",
["npcID"] = 75829,
},
[395675] = {
["source"] = "Embar Firepath",
["event"] = "SPELL_CAST_START",
["npcID"] = 187767,
},
[144602] = {
["npcID"] = 71992,
},
[395678] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spellforged Brute",
["npcID"] = 184456,
},
[412062] = {
["source"] = "Lead Researcher Sytorian",
["event"] = "SPELL_CAST_START",
["npcID"] = 203067,
},
[375201] = {
["source"] = "Risen Ohuna",
["event"] = "SPELL_CAST_START",
["npcID"] = 189087,
},
[412063] = {
["isChanneled"] = true,
["source"] = "Epoch Ripper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205435,
},
[424352] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[107120] = {
["encounterName"] = "Commander Ri'mok",
["npcID"] = 56636,
["encounterID"] = 1406,
},
[169179] = {
["encounterName"] = "Yalnu",
["source"] = "Yalnu",
["npcID"] = 83846,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1756,
},
[134366] = {
["encounterName"] = "Ji-Kun",
["source"] = "Ji-Kun",
["encounterID"] = 1573,
["event"] = "SPELL_CAST_START",
["npcID"] = 69712,
},
[395685] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spellforged Brute",
["npcID"] = 184456,
},
[144606] = {
["event"] = "SPELL_CAST_START",
["source"] = "Niuzao",
["npcID"] = 71954,
},
[346539] = {
["npcID"] = 175721,
},
[387497] = {
["source"] = "Time-Lost Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 187244,
},
[144608] = {
["npcID"] = 71954,
},
[228571] = {
["npcID"] = 114794,
},
[399786] = {
["isChanneled"] = true,
["source"] = "Amniotic Ooze",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 201117,
},
[38204] = {
["npcID"] = 33422,
},
[407978] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Ahnzon",
["encounterID"] = 2668,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 201792,
},
[127601] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kri'chon",
["npcID"] = 63978,
},
[321968] = {
["npcID"] = 164929,
},
[395692] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spellforged Brute",
["npcID"] = 184456,
},
[150753] = {
["encounterName"] = "Slave Watcher Crushto",
["source"] = "Slave Watcher Crushto",
["npcID"] = 74787,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1653,
},
[152801] = {
["encounterName"] = "Nhallish",
["source"] = "Nhallish",
["encounterID"] = 1688,
["event"] = "SPELL_CAST_START",
["npcID"] = 75829,
},
[338353] = {
["npcID"] = 173016,
},
[395694] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Shocktrooper",
["npcID"] = 199037,
},
[169185] = {
["source"] = "Sargerei Destructor",
["event"] = "SPELL_CAST_START",
["npcID"] = 89203,
},
[375216] = {
["source"] = "Nergazurai",
["event"] = "SPELL_CAST_START",
["npcID"] = 195895,
},
[395695] = {
["source"] = "Sleeping Whelp",
["event"] = "SPELL_CAST_START",
["npcID"] = 196073,
},
[387504] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primal Tsunami",
["npcID"] = 189729,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2618,
},
[114291] = {
["source"] = "Hopper",
["event"] = "SPELL_CAST_START",
["npcID"] = 59464,
},
[150755] = {
["encounterName"] = "Gug'rokk",
["source"] = "Gug'rokk",
["npcID"] = 74790,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1654,
},
[358835] = {
["npcID"] = 177444,
},
[338357] = {
["npcID"] = 172981,
},
[358836] = {
["npcID"] = 180664,
},
[412081] = {
["event"] = "SPELL_CAST_START",
["source"] = "Colossal Draconic Golem",
["npcID"] = 203826,
},
[403890] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duzalgor",
["npcID"] = 200610,
},
[334263] = {
["npcID"] = 168977,
},
[403891] = {
["encounterName"] = "Morchie",
["source"] = "Morchie",
["encounterID"] = 2671,
["event"] = "SPELL_CAST_START",
["npcID"] = 198999,
},
[362934] = {
["npcID"] = 182215,
},
[334266] = {
["encounterName"] = "Hungering Destroyer",
["npcID"] = 164261,
["encounterID"] = 2383,
},
[224482] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nether Acolyte",
["npcID"] = 127579,
},
[150759] = {
["encounterName"] = "Slave Watcher Crushto",
["source"] = "Slave Watcher Crushto",
["npcID"] = 74787,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1653,
},
[313790] = {
["npcID"] = 160974,
},
[144616] = {
["encounterName"] = "Garrosh Hellscream",
["source"] = "Siege Engineer",
["encounterID"] = 1623,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 71984,
},
[391610] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gusting Proto-Dragon",
["npcID"] = 190401,
},
[428472] = {
["isChanneled"] = true,
["source"] = "Molten Scorpid",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210295,
},
[358845] = {
["npcID"] = 181133,
},
[395707] = {
["source"] = "Raszageth",
["event"] = "SPELL_CAST_START",
["npcID"] = 199031,
},
[391613] = {
["event"] = "SPELL_CAST_START",
["source"] = "Subterranean Proto-Dragon",
["npcID"] = 190404,
},
[119414] = {
["encounterName"] = "Sha of Fear",
["source"] = "Sha of Fear",
["encounterID"] = 1431,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 60999,
},
[210150] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["encounterID"] = 1792,
["event"] = "SPELL_CAST_START",
["npcID"] = 91005,
},
[412093] = {
["event"] = "SPELL_CAST_START",
["source"] = "Contaminated Titan Watcher",
["npcID"] = 203834,
},
[201959] = {
["source"] = "Emberhusk Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 113536,
},
[134380] = {
["encounterName"] = "Ji-Kun",
["source"] = "Ji-Kun",
["encounterID"] = 1573,
["event"] = "SPELL_CAST_START",
["npcID"] = 69712,
},
[317894] = {
["npcID"] = 170042,
},
[420289] = {
["source"] = "Tempest Conqueror",
["event"] = "SPELL_CAST_START",
["npcID"] = 207040,
},
[257254] = {
["npcID"] = 171302,
},
[375237] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Commander",
["npcID"] = 190776,
},
[67195] = {
["isChanneled"] = true,
["source"] = "Glaive Thrower",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 34802,
},
[59710] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vereesa Windrunner",
["npcID"] = 207816,
},
[420292] = {
["source"] = "Tempest Conqueror",
["event"] = "SPELL_CAST_START",
["npcID"] = 207040,
},
[152814] = {
["source"] = "Shadowmoon Bone-Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 75713,
},
[342474] = {
["npcID"] = 165759,
},
[387528] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mountain Shaper",
["npcID"] = 186329,
},
[244969] = {
["encounterName"] = "Garothi Worldbreaker",
["source"] = "Garothi Worldbreaker",
["encounterID"] = 2076,
["event"] = "SPELL_CAST_START",
["npcID"] = 122450,
},
[138480] = {
["encounterName"] = "Dark Animus",
["source"] = "Large Anima Golem",
["npcID"] = 69700,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1576,
},
[142576] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Skeer the Bloodseeker",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71152,
},
[321999] = {
["npcID"] = 164705,
},
[138481] = {
["source"] = "Skumblade Saur-Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 69229,
},
[322000] = {
["npcID"] = 166357,
},
[317905] = {
["npcID"] = 157444,
},
[120442] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shek'zeer Bladesworn",
["npcID"] = 62563,
},
[152818] = {
["source"] = "Shadowmoon Bone-Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 75713,
},
[11985] = {
["npcID"] = 46914,
},
[375249] = {
["source"] = "Jadethroat Mallard",
["event"] = "SPELL_CAST_START",
["npcID"] = 190708,
},
[375250] = {
["source"] = "Mother Duck",
["event"] = "SPELL_CAST_START",
["npcID"] = 195892,
},
[391634] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glacial Proto-Dragon",
["npcID"] = 190403,
},
[424401] = {
["source"] = "Winterskorn Vrykul",
["event"] = "SPELL_CAST_START",
["npcID"] = 206037,
},
[14033] = {
["source"] = "Lorekeeper Vaeldrin",
["event"] = "SPELL_CAST_START",
["npcID"] = 58975,
},
[420306] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamebound Sentinel",
["npcID"] = 206900,
},
[183539] = {
["source"] = "Rotdrool Grabber",
["event"] = "SPELL_CAST_START",
["npcID"] = 91002,
},
[285148] = {
["npcID"] = 144578,
},
[121468] = {
["npcID"] = 61177,
},
[358872] = {
["npcID"] = 178592,
},
[412117] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 200912,
},
[191732] = {
["source"] = "Greater Lightning Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 97022,
},
[144631] = {
["event"] = "SPELL_CAST_START",
["source"] = "Xuen",
["npcID"] = 71953,
},
[67200] = {
["isChanneled"] = true,
["source"] = "Glaive Thrower",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 34802,
},
[120445] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shek'zeer Bladesworn",
["npcID"] = 62563,
},
[424408] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bodwin",
["npcID"] = 209153,
},
[148728] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spectral Mistweaver",
["npcID"] = 73025,
},
[150776] = {
["encounterName"] = "Gug'rokk",
["source"] = "Gug'rokk",
["npcID"] = 74790,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1654,
},
[383452] = {
["source"] = "Snowscruff Bakar",
["event"] = "SPELL_CAST_START",
["npcID"] = 193401,
},
[403931] = {
["source"] = "Vanessa VanCleef",
["event"] = "SPELL_CAST_START",
["npcID"] = 199598,
},
[148729] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spectral Windwalker",
["npcID"] = 73021,
},
[342496] = {
["npcID"] = 168961,
},
[191735] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felsworn Myrmidon",
["npcID"] = 98954,
},
[408029] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Loszkeleth",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 201790,
},
[362976] = {
["npcID"] = 183721,
},
[140539] = {
["event"] = "SPELL_CAST_START",
["source"] = "Memory of a Defender",
["npcID"] = 200527,
},
[144635] = {
["event"] = "SPELL_CAST_START",
["source"] = "Xuen",
["npcID"] = 71953,
},
["381593"] = {
["source"] = "Ebonstone Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 184300,
},
[197880] = {
["source"] = "Bonespeaker Runeaxe",
["event"] = "SPELL_CAST_START",
["npcID"] = 93066,
},
[412129] = {
["source"] = "Lerai, Timesworn Maiden",
["event"] = "SPELL_CAST_START",
["npcID"] = 205152,
},
[338406] = {
["npcID"] = 173051,
},
[173307] = {
["npcID"] = 83390,
},
[80514] = {
["isChanneled"] = true,
["source"] = "Skumblade Fleshripper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 69210,
},
[346599] = {
["npcID"] = 168975,
},
[367079] = {
["encounterName"] = "Halondrus the Reclaimer",
["encounterID"] = 2529,
["npcID"] = 180906,
},
[122496] = {
["encounterName"] = "Imperial Vizier Zor'lok",
["source"] = "Imperial Vizier Zor'lok",
["npcID"] = 63554,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1507,
},
[285165] = {
["npcID"] = 144580,
},
[387559] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primal Tsunami",
["npcID"] = 189729,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2618,
},
[362985] = {
["npcID"] = 183714,
},
[420326] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamebound Sentinel",
["npcID"] = 206900,
},
[412136] = {
["source"] = "Valow, Timesworn Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 201222,
},
[228603] = {
["npcID"] = 114804,
},
[346605] = {
["npcID"] = 175801,
},
[173311] = {
["npcID"] = 83390,
},
[317936] = {
["npcID"] = 163459,
},
[387564] = {
["source"] = "Conjured Lasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 196102,
},
[358894] = {
["npcID"] = 179892,
},
[395756] = {
["source"] = "Qalashi Flameslinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 196336,
},
[60227] = {
["encounterName"] = "Prince Keleseth",
["source"] = "Dragonflayer Strategist",
["encounterID"] = 2026,
["event"] = "SPELL_CAST_START",
["npcID"] = 23956,
},
[144642] = {
["event"] = "SPELL_CAST_START",
["source"] = "Xuen",
["npcID"] = 71953,
},
[264694] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["npcID"] = 131863,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2115,
},
[124546] = {
["event"] = "SPELL_CAST_START",
["source"] = "Apothecary Cheng",
["npcID"] = 63812,
},
[201983] = {
["source"] = "Emberhusk Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 113537,
},
[11986] = {
["npcID"] = 29438,
},
[420334] = {
["event"] = "SPELL_CAST_START",
["source"] = "Keeper Adranas",
["npcID"] = 209931,
},
[228606] = {
["npcID"] = 114803,
},
[428526] = {
["encounterName"] = "Ozumat",
["source"] = "Splotch",
["npcID"] = 213806,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1047,
},
[334324] = {
["npcID"] = 171376,
},
[189697] = {
["npcID"] = 161785,
},
[391666] = {
["source"] = "Honmor",
["event"] = "SPELL_CAST_START",
["npcID"] = 193704,
},
[107140] = {
["encounterName"] = "Gu Cloudstrike",
["source"] = "Azure Serpent",
["npcID"] = 56754,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1303,
},
[334326] = {
["npcID"] = 171376,
},
[387571] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primal Tsunami",
["npcID"] = 189729,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2618,
},
[395763] = {
["source"] = "Qalashi Flameslinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 196336,
},
[14034] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hellfire Familiar",
["npcID"] = 19016,
},
[428530] = {
["encounterName"] = "Ozumat",
["source"] = "Ink of Ozumat",
["npcID"] = 213770,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1047,
},
[334329] = {
["npcID"] = 171376,
},
[76423] = {
["npcID"] = 39352,
},
[126596] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Blade",
["npcID"] = 61010,
},
[309757] = {
["npcID"] = 156325,
},
[420347] = {
["source"] = "Kaldorei Archdruid",
["event"] = "SPELL_CAST_START",
["npcID"] = 211066,
},
[412156] = {
["source"] = "Time-Lost Aerobot",
["event"] = "SPELL_CAST_START",
["npcID"] = 205723,
},
[403965] = {
["source"] = "Vanessa VanCleef",
["event"] = "SPELL_CAST_START",
["npcID"] = 199598,
},
["377488"] = {
["source"] = "Rune Seal Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 187155,
},
[338434] = {
["npcID"] = 162875,
},
[375296] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skulking Bruiser",
["npcID"] = 196384,
},
[428542] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Sentinel",
["npcID"] = 40577,
},
[387585] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primal Tsunami",
["npcID"] = 189729,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2618,
},
[222471] = {
["source"] = "Stromgarde Defender",
["event"] = "SPELL_CAST_START",
["npcID"] = 107812,
},
[416256] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron's Creation",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 204918,
},
[367108] = {
["npcID"] = 184413,
},
[222472] = {
["source"] = "Tidal Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 111411,
},
[317963] = {
["npcID"] = 163458,
},
[358921] = {
["npcID"] = 178615,
},
[383496] = {
["source"] = "Strunraan",
["event"] = "SPELL_CAST_START",
["npcID"] = 193534,
},
[395784] = {
["source"] = "Raszageth",
["event"] = "SPELL_CAST_START",
["npcID"] = 199031,
},
[350732] = {
["encounterName"] = "Guardian of the First Ones",
["npcID"] = 175731,
["encounterID"] = 2436,
},
[37704] = {
["event"] = "SPELL_CAST_START",
["source"] = "Uduji Berserker",
["npcID"] = 67430,
},
[403978] = {
["encounterName"] = "The Vigilant Steward, Zskarn",
["source"] = "Zskarn",
["npcID"] = 202375,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2689,
},
[363021] = {
["encounterName"] = "Anduin Wrynn",
["encounterID"] = 2546,
["npcID"] = 183463,
},
[387596] = {
["source"] = "Risen Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 195877,
},
[150801] = {
["encounterName"] = "Slave Watcher Crushto",
["source"] = "Slave Watcher Crushto",
["npcID"] = 74787,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1653,
},
[342544] = {
["encounterName"] = "Stone Legion Generals",
["npcID"] = 168113,
["encounterID"] = 2417,
},
[379406] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Lavabearer",
["npcID"] = 189472,
},
[120458] = {
["encounterName"] = "Sha of Fear",
["source"] = "Sha of Fear",
["encounterID"] = 1431,
["event"] = "SPELL_CAST_START",
["npcID"] = 60999,
},
[391696] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Thundering Ravager",
["encounterID"] = 2605,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 190690,
},
["198750"] = {
["encounterName"] = "Odyn",
["source"] = "Stormforged Obliterator",
["encounterID"] = 1809,
["event"] = "SPELL_CAST_START",
["npcID"] = 102019,
},
[408080] = {
["source"] = "Kob'rok",
["event"] = "SPELL_CAST_START",
["npcID"] = 203462,
},
[240910] = {
["encounterName"] = "Kil'jaeden",
["source"] = "Kil'jaeden",
["encounterID"] = 2051,
["event"] = "SPELL_CAST_START",
["npcID"] = 117269,
},
[125579] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cloudbender Kobo",
["npcID"] = 63316,
},
["199726"] = {
["source"] = "King Ranulf",
["event"] = "SPELL_CAST_START",
["npcID"] = 97083,
},
[116364] = {
["encounterName"] = "Feng the Accursed",
["source"] = "Feng the Accursed",
["encounterID"] = 1390,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 60009,
},
[338456] = {
["npcID"] = 172981,
},
[395797] = {
["source"] = "Primalist Frostsculptor",
["event"] = "SPELL_CAST_START",
["npcID"] = 198424,
},
[158997] = {
["npcID"] = 81362,
},
[228625] = {
["npcID"] = 183425,
},
[428564] = {
["isChanneled"] = true,
["source"] = "Molten Scorpid",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210290,
},
[326171] = {
["encounterName"] = "Mueh'zala",
["npcID"] = 166608,
["encounterID"] = 2396,
},
[387608] = {
["isChanneled"] = true,
["source"] = "Ukhel Corruptor",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 195842,
},
[358938] = {
["npcID"] = 180840,
},
[232722] = {
["encounterName"] = "Mistress Sassz'ine",
["source"] = "Mistress Sassz'ine",
["npcID"] = 115767,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2037,
},
["413622"] = {
["source"] = "Infinite Watchkeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 207177,
},
[420377] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Birchbramble",
["npcID"] = 209450,
},
[346654] = {
["encounterName"] = "The Council of Blood",
["encounterID"] = 2412,
["npcID"] = 166969,
},
[317985] = {
["npcID"] = 163520,
},
[387613] = {
["source"] = "Ukhel Corruptor",
["event"] = "SPELL_CAST_START",
["npcID"] = 195842,
},
[326177] = {
["npcID"] = 167437,
},
[387614] = {
["source"] = "Ukhel Deathspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 195851,
},
[375327] = {
["event"] = "SPELL_CAST_START",
["source"] = "Subterranean Proto-Dragon",
["npcID"] = 190404,
},
[346657] = {
["encounterName"] = "The Council of Blood",
["encounterID"] = 2412,
["npcID"] = 166969,
},
[216342] = {
["event"] = "SPELL_CAST_START",
["source"] = "Koralune Ettin",
["npcID"] = 99791,
},
[136475] = {
["npcID"] = 23682,
},
[212247] = {
["npcID"] = 106885,
},
[363042] = {
["npcID"] = 181958,
},
[387618] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primalist Infuser",
["npcID"] = 196043,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2618,
},
[375331] = {
["encounterName"] = "The Primal Council",
["source"] = "Dathea Stormlash",
["encounterID"] = 2590,
["event"] = "SPELL_CAST_START",
["npcID"] = 187768,
},
[395811] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Pillager",
["npcID"] = 190115,
},
[277035] = {
["npcID"] = 154018,
},
[136478] = {
["encounterName"] = "Lei Shen",
["source"] = "Lei Shen",
["npcID"] = 68397,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1579,
},
[334377] = {
["npcID"] = 171805,
},
[7978] = {
["npcID"] = 67873,
},
[142623] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hekima the Wise",
["npcID"] = 70544,
},
[395816] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Ironskin",
["npcID"] = 191524,
},
[412200] = {
["source"] = "Time-Lost Aerobot",
["event"] = "SPELL_CAST_START",
["npcID"] = 205723,
},
[334381] = {
["npcID"] = 171384,
},
[277041] = {
["npcID"] = 154020,
},
[391723] = {
["source"] = "Flamegullet",
["event"] = "SPELL_CAST_START",
["npcID"] = 197697,
},
[395819] = {
["source"] = "Qalashi Scaleripper",
["event"] = "SPELL_CAST_START",
["npcID"] = 187602,
},
[142625] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wily Woodling",
["npcID"] = 61155,
},
[277043] = {
["npcID"] = 154018,
},
[181535] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sea Skrog",
["npcID"] = 88094,
},
[10452] = {
["npcID"] = 45569,
},
[387629] = {
["source"] = "Desecrated Ohuna",
["event"] = "SPELL_CAST_START",
["npcID"] = 195876,
},
[264757] = {
["encounterName"] = "Elder Leaxa",
["source"] = "Elder Leaxa",
["npcID"] = 131318,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2111,
},
[391726] = {
["source"] = "Thunderhead",
["event"] = "SPELL_CAST_START",
["npcID"] = 197698,
},
[181536] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sea Skrog",
["npcID"] = 88094,
},
[387631] = {
["source"] = "Sarana",
["event"] = "SPELL_CAST_START",
["npcID"] = 190161,
},
[128658] = {
["source"] = "Rok'nah Felcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 65507,
},
[34637] = {
["source"] = "Sunseeker Channeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 19505,
},
[375348] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gusting Proto-Dragon",
["npcID"] = 190401,
},
[395827] = {
["event"] = "SPELL_CAST_START",
["source"] = "Parched Broadhoof Bull",
["npcID"] = 194352,
},
[193826] = {
["encounterName"] = "God-King Skovald",
["source"] = "God-King Skovald",
["encounterID"] = 1808,
["event"] = "SPELL_CAST_START",
["npcID"] = 95675,
},
[420403] = {
["source"] = "Decaymonger Rotpaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 205995,
},
[358967] = {
["npcID"] = 179446,
},
[375351] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glacial Proto-Dragon",
["npcID"] = 190403,
},
[420405] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempest Caller",
["npcID"] = 207041,
},
[301629] = {
["npcID"] = 150297,
},
[358970] = {
["npcID"] = 179891,
},
[412215] = {
["source"] = "Spurlok, Timesworn Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 205158,
},
[358971] = {
["npcID"] = 179890,
},
[222499] = {
["npcID"] = 162829,
},
[159015] = {
["source"] = "Voracious Stonemuncher",
["event"] = "SPELL_CAST_START",
["npcID"] = 84253,
},
[146728] = {
["source"] = "Dragonmaw Tidal Shaman",
["event"] = "SPELL_CAST_START",
["npcID"] = 72367,
},
[395834] = {
["source"] = "Bonebolt Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 197121,
},
[208165] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Talixae Flamewreath",
["npcID"] = 104217,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1869,
},
[404027] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[115350] = {
["encounterName"] = "Lilian Voss",
["source"] = "Lilian's Soul",
["encounterID"] = 1429,
["event"] = "SPELL_CAST_START",
["npcID"] = 58791,
},
[277060] = {
["npcID"] = 154020,
},
[222501] = {
["event"] = "SPELL_CAST_START",
["source"] = "Captain Grub Redcut",
["npcID"] = 199351,
},
[399933] = {
["source"] = "Tukkaraq's Boat",
["event"] = "SPELL_CAST_START",
["npcID"] = 201121,
},
[346690] = {
["encounterName"] = "The Council of Blood",
["encounterID"] = 2412,
["npcID"] = 166971,
},
[334404] = {
["encounterName"] = "Huntsman Altimor",
["npcID"] = 165066,
["encounterID"] = 2418,
},
[34639] = {
["source"] = "Sunseeker Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 19509,
},
[395841] = {
["source"] = "Bracken Warscourge",
["event"] = "SPELL_CAST_START",
["npcID"] = 197120,
},
[358980] = {
["npcID"] = 180864,
},
[428609] = {
["source"] = "Stormforged Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 207024,
},
[387652] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frozen Revenant",
["npcID"] = 187203,
},
[358982] = {
["npcID"] = 180865,
},
[420419] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempest Caller",
["npcID"] = 207041,
},
[358983] = {
["npcID"] = 180865,
},
[159021] = {
["event"] = "SPELL_CAST_START",
["source"] = "Durag the Dominator",
["npcID"] = 77890,
},
[367176] = {
["npcID"] = 184409,
},
[346698] = {
["encounterName"] = "The Council of Blood",
["encounterID"] = 2412,
["npcID"] = 166971,
},
[420422] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["encounterID"] = 2677,
["event"] = "SPELL_CAST_START",
["npcID"] = 204931,
},
[387657] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mountain Shaper",
["npcID"] = 186329,
},
[350796] = {
["encounterName"] = "So'leah",
["npcID"] = 177269,
["encounterID"] = 2442,
},
[144688] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ordos",
["npcID"] = 72057,
},
[412233] = {
["source"] = "Time-Lost Rocketeer",
["event"] = "SPELL_CAST_START",
["npcID"] = 205727,
},
[54095] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naxxramas Worshipper",
["npcID"] = 16506,
},
[387659] = {
["source"] = "Boolk",
["event"] = "SPELL_CAST_START",
["npcID"] = 191450,
},
[144689] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ordos",
["npcID"] = 72057,
},
[148785] = {
["source"] = "War Master Kragg",
["event"] = "SPELL_CAST_START",
["npcID"] = 73775,
},
[399948] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Tempest",
["npcID"] = 200673,
},
[399949] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Tempest",
["npcID"] = 200673,
},
[408141] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Dazhak",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 201788,
},
[363088] = {
["encounterName"] = "Lihuvim, Principal Architect",
["encounterID"] = 2539,
["npcID"] = 182169,
},
[395855] = {
["source"] = "The Jolly Giant",
["event"] = "SPELL_CAST_START",
["npcID"] = 195204,
},
[354898] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 176532,
["encounterID"] = 2435,
},
[350803] = {
["encounterName"] = "The Eye of the Jailer",
["npcID"] = 175725,
["encounterID"] = 2433,
},
[395857] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Stonebinder",
["npcID"] = 189834,
},
[144692] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ordos",
["npcID"] = 72057,
},
[326230] = {
["npcID"] = 165829,
},
[395859] = {
["event"] = "SPELL_CAST_START",
["source"] = "Haunting Sha",
["npcID"] = 59555,
},
[387668] = {
["source"] = "Awakened Crag",
["event"] = "SPELL_CAST_START",
["npcID"] = 195243,
},
[395860] = {
["source"] = "The Jolly Giant",
["event"] = "SPELL_CAST_START",
["npcID"] = 195204,
},
[358999] = {
["encounterName"] = "Kel'Thuzad",
["npcID"] = 175559,
["encounterID"] = 2422,
},
[177460] = {
["npcID"] = 80381,
},
[30633] = {
["encounterName"] = "Warbringer O'mrogg",
["source"] = "Warbringer O'mrogg",
["event"] = "SPELL_CAST_START",
["npcID"] = 16809,
},
[375384] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Earthshaker",
["npcID"] = 190371,
},
[144695] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ordos",
["npcID"] = 72057,
},
[375385] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalbound Water Spirit",
["npcID"] = 190739,
},
[412247] = {
["event"] = "SPELL_CAST_START",
["source"] = "Agitator Zoralek",
["npcID"] = 199305,
},
[140600] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cavern Burrower",
["npcID"] = 70589,
},
[322143] = {
["npcID"] = 156559,
},
[375388] = {
["npcID"] = 190900,
},
[55633] = {
["source"] = "Spirit-Bound Sentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 69335,
},
[142649] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Hungry Kunchong",
["encounterID"] = 1593,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 71420,
},
["372223"] = {
["source"] = "Qalashi Bonetender",
["event"] = "SPELL_CAST_START",
["npcID"] = 189265,
},
[387677] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deathling Destroyer",
["npcID"] = 190214,
},
[350816] = {
["encounterName"] = "The Eye of the Jailer",
["npcID"] = 176531,
["encounterID"] = 2433,
},
[395871] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Stonebinder",
["npcID"] = 189834,
},
[395872] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Talking Fish",
["npcID"] = 59546,
},
[159035] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shaadum",
["npcID"] = 78728,
},
[387683] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frozen Revenant",
["npcID"] = 187203,
},
[354918] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 176532,
["encounterID"] = 2435,
},
[342631] = {
["npcID"] = 164107,
},
[253239] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dazar'ai Juggernaut",
["npcID"] = 122971,
},
[359016] = {
["npcID"] = 179460,
},
[395878] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Talking Fish",
["npcID"] = 59546,
},
[330347] = {
["npcID"] = 157583,
},
[142655] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Hungry Kunchong",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71420,
},
[371306] = {
["source"] = "Arcane Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 186741,
},
[350828] = {
["encounterName"] = "The Eye of the Jailer",
["npcID"] = 175725,
["encounterID"] = 2433,
},
[277106] = {
["event"] = "SPELL_CAST_START",
["source"] = "Professor Gastrinax",
["npcID"] = 203521,
},
[301681] = {
["npcID"] = 150292,
},
[436841] = {
["source"] = "Desecrated Ohuna",
["event"] = "SPELL_CAST_START",
["npcID"] = 195876,
},
[354927] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 178081,
["encounterID"] = 2435,
},
[118434] = {
["source"] = "Ik'thik Precursor",
["event"] = "SPELL_CAST_START",
["npcID"] = 58367,
},
[367215] = {
["npcID"] = 184395,
},
[391790] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seismic Stomps",
["npcID"] = 197829,
},
[391791] = {
["source"] = "Furious Deluge",
["event"] = "SPELL_CAST_START",
["npcID"] = 197220,
},
[222526] = {
["event"] = "SPELL_CAST_START",
["source"] = "Debilitating Eye",
["npcID"] = 111756,
},
[371313] = {
["npcID"] = 3255,
},
[391793] = {
["source"] = "Furious Deluge",
["event"] = "SPELL_CAST_START",
["npcID"] = 197220,
},
[354932] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 178081,
["encounterID"] = 2435,
},
[359028] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 176563,
["encounterID"] = 2440,
},
[354933] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 176533,
["encounterID"] = 2435,
},
[391795] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Tenmod",
["npcID"] = 194763,
},
[346742] = {
["encounterName"] = "Mailroom Mayhem",
["npcID"] = 175646,
["encounterID"] = 2424,
},
[399987] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Firecaller",
["npcID"] = 200454,
},
[261438] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lord Waycrest",
["npcID"] = 131527,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2116,
},
[412275] = {
["source"] = "Captain Reykal",
["event"] = "SPELL_CAST_START",
["npcID"] = 203355,
},
[134470] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bow Fly Swarm",
["npcID"] = 68222,
},
[395893] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[391798] = {
["source"] = "Rebel Incinerator",
["event"] = "SPELL_CAST_START",
["npcID"] = 195062,
},
[391799] = {
["event"] = "SPELL_CAST_START",
["source"] = "Root of Decay",
["npcID"] = 185326,
},
[354938] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 176533,
["encounterID"] = 2435,
},
[261440] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lord Waycrest",
["npcID"] = 131527,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2116,
},
[363130] = {
["encounterName"] = "Lihuvim, Principal Architect",
["encounterID"] = 2539,
["npcID"] = 182169,
},
[367228] = {
["npcID"] = 184767,
},
[136521] = {
["encounterName"] = "Council of Elders",
["source"] = "Sul the Sandcrawler",
["npcID"] = 69078,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1570,
},
[375420] = {
["event"] = "SPELL_CAST_START",
["source"] = "Riverbend Chomper",
["npcID"] = 189338,
},
[395899] = {
["source"] = "Primalist Chillblaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 199124,
},
[387708] = {
["source"] = "Disoriented Watcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 187745,
},
[412283] = {
["source"] = "Dreadful Defender",
["event"] = "SPELL_CAST_START",
["npcID"] = 203842,
},
[350847] = {
["encounterName"] = "The Eye of the Jailer",
["npcID"] = 175725,
["encounterID"] = 2433,
},
[251203] = {
["source"] = "Vanguard Portal-Master",
["event"] = "SPELL_CAST_START",
["npcID"] = 125151,
},
[375422] = {
["event"] = "SPELL_CAST_START",
["source"] = "Riverbend Gnasher",
["npcID"] = 190888,
},
[412284] = {
["source"] = "Captain Reykal",
["event"] = "SPELL_CAST_START",
["npcID"] = 203355,
},
[420476] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crustbreaker Conduit",
["npcID"] = 207038,
},
[165193] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stele",
["npcID"] = 72627,
},
[387711] = {
["isChanneled"] = true,
["source"] = "Ishyra",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 200579,
},
[140619] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cavern Burrower",
["npcID"] = 70589,
},
[142667] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Hungry Kunchong",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71420,
},
[146763] = {
["encounterName"] = "Galakras",
["source"] = "Dragonmaw Flameslinger",
["encounterID"] = 1622,
["event"] = "SPELL_CAST_START",
["npcID"] = 72353,
},
[33111] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Warlock",
["npcID"] = 17371,
},
[140620] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Growth",
["npcID"] = 70153,
},
[142668] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Kaz'tik the Manipulator",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71156,
},
[408193] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Shadowflame Amalgamation",
["npcID"] = 201934,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[197961] = {
["encounterName"] = "Odyn",
["source"] = "Odyn",
["encounterID"] = 1809,
["event"] = "SPELL_CAST_START",
["npcID"] = 95676,
},
[126631] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sha-Touched Footman",
["npcID"] = 68006,
},
[55638] = {
["encounterName"] = "Gothik the Harvester",
["source"] = "Unrelenting Rider",
["npcID"] = 16126,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1109,
},
[261446] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lady Waycrest",
["npcID"] = 131545,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2116,
},
[428674] = {
["encounterName"] = "Ozumat",
["source"] = "Neptulon",
["npcID"] = 40792,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1047,
},
["198379"] = {
["encounterName"] = "Archdruid Glaidalis",
["encounterID"] = 1836,
["npcID"] = 96512,
},
[59734] = {
["encounterName"] = "Ingvar the Plunderer",
["source"] = "Ingvar the Plunderer",
["encounterID"] = 2025,
["event"] = "SPELL_CAST_START",
["npcID"] = 23954,
},
[144718] = {
["encounterName"] = "Iron Juggernaut",
["source"] = "Crawler Mine",
["npcID"] = 72050,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1600,
},
[420485] = {
["source"] = "Deceiver Hr'qoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 206784,
},
[424581] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[346762] = {
["encounterName"] = "The Council of Blood",
["encounterID"] = 2412,
["npcID"] = 166969,
},
[420486] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cultist Nethus",
["npcID"] = 205940,
},
["226296"] = {
["npcID"] = 91000,
},
[334476] = {
["encounterName"] = "Stichflesh",
["npcID"] = 162689,
},
[420487] = {
["source"] = "Deceiver Hr'qoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 206784,
},
[86699] = {
["npcID"] = 61252,
},
[146768] = {
["encounterName"] = "Galakras",
["source"] = "Vereesa Windrunner",
["encounterID"] = 1622,
["event"] = "SPELL_CAST_START",
["npcID"] = 73910,
},
[346766] = {
["encounterName"] = "Hylbrande",
["npcID"] = 175663,
["encounterID"] = 2426,
},
[420490] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crustbreaker Conduit",
["npcID"] = 207038,
},
[322193] = {
["npcID"] = 157054,
},
[391821] = {
["source"] = "Snowhide Shaman",
["event"] = "SPELL_CAST_START",
["npcID"] = 189654,
},
[140626] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Growth",
["npcID"] = 70153,
},
[191823] = {
["encounterName"] = "Tirathon Saltheril",
["source"] = "Tirathon Saltheril",
["npcID"] = 95885,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1815,
},
[375439] = {
["encounterName"] = "Magmatusk",
["source"] = "Magmatusk",
["npcID"] = 181861,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2610,
},
[330386] = {
["npcID"] = 158976,
},
[350865] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 177154,
["encounterID"] = 2435,
},
[330387] = {
["npcID"] = 159178,
},
[342675] = {
["npcID"] = 170882,
},
[330388] = {
["npcID"] = 159178,
},
[285335] = {
["npcID"] = 156219,
},
[420495] = {
["source"] = "Deceiver Hr'qoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 206784,
},
[391825] = {
["npcID"] = 190900,
},
[140628] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eternal Guardian",
["npcID"] = 70586,
},
[334485] = {
["encounterName"] = "Ventunax",
["npcID"] = 162058,
["encounterID"] = 2356,
},
[179538] = {
["source"] = "Hatecoil Spitespeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 89025,
},
[330391] = {
["npcID"] = 159178,
},
[387732] = {
["npcID"] = 46915,
},
[146773] = {
["encounterName"] = "Galakras",
["source"] = "Master Cannoneer Dagryn",
["encounterID"] = 1622,
["event"] = "SPELL_CAST_START",
["npcID"] = 72356,
},
[395924] = {
["source"] = "Leerain",
["event"] = "SPELL_CAST_START",
["npcID"] = 193679,
},
[334488] = {
["encounterName"] = "Stichflesh",
["encounterID"] = 2389,
["npcID"] = 162689,
},
[375446] = {
["source"] = "Sunhide Stomphoof",
["event"] = "SPELL_CAST_START",
["npcID"] = 187960,
},
[140630] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eternal Guardian",
["npcID"] = 70586,
},
[420501] = {
["source"] = "Wildfire Primalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 209200,
},
[350875] = {
["encounterName"] = "So'leah",
["npcID"] = 177269,
["encounterID"] = 2442,
},
[391833] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sherath",
["npcID"] = 188710,
},
[330397] = {
["npcID"] = 160537,
},
[334493] = {
["npcID"] = 164862,
},
[146776] = {
["encounterName"] = "Galakras",
["source"] = "Dragonmaw Proto-Drake",
["encounterID"] = 1622,
["event"] = "SPELL_CAST_START",
["npcID"] = 72943,
},
[412313] = {
["source"] = "Emberdusk",
["event"] = "SPELL_CAST_START",
["npcID"] = 203664,
},
[387740] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maiden of Patience",
["npcID"] = 192720,
},
[330400] = {
["npcID"] = 158578,
},
[371358] = {
["source"] = "Unstable Curator",
["event"] = "SPELL_CAST_START",
["npcID"] = 187154,
},
[391837] = {
["source"] = "Emerald Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 191252,
},
[122542] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hawkmaster Nurong",
["npcID"] = 62574,
},
[395934] = {
["source"] = "Trickclaw Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 197119,
},
[334498] = {
["encounterName"] = "Stone Legion Generals",
["npcID"] = 168113,
["encounterID"] = 2417,
},
[420509] = {
["source"] = "Flamesworn Infernomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 210503,
},
[330403] = {
["npcID"] = 168153,
},
[391840] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taresh",
["npcID"] = 188711,
},
[395936] = {
["event"] = "SPELL_CAST_START",
["source"] = "Clearwater Bull",
["npcID"] = 192652,
},
[301734] = {
["npcID"] = 151832,
},
[120495] = {
["event"] = "SPELL_CAST_START",
["source"] = "Agitated Seedstealer",
["npcID"] = 61302,
},
[420512] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cultist Nethus",
["npcID"] = 205940,
},
[375459] = {
["source"] = "Thunderspine Rumbler",
["event"] = "SPELL_CAST_START",
["npcID"] = 192941,
},
[383651] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Lavamancer",
["npcID"] = 193944,
},
[395939] = {
["source"] = "Riverbeast Elder",
["event"] = "SPELL_CAST_START",
["npcID"] = 194144,
},
[387748] = {
["source"] = "Overseer Zambul",
["event"] = "SPELL_CAST_START",
["npcID"] = 191145,
},
[146781] = {
["encounterName"] = "Galakras",
["source"] = "Lady Jaina Proudmoore",
["encounterID"] = 1622,
["event"] = "SPELL_CAST_START",
["npcID"] = 72302,
},
[408228] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Grommash Hellscream",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203678,
},
[395941] = {
["source"] = "Riverbeast Elder",
["event"] = "SPELL_CAST_START",
["npcID"] = 194144,
},
[146782] = {
["encounterName"] = "Galakras",
["source"] = "Lady Jaina Proudmoore",
["encounterID"] = 1622,
["event"] = "SPELL_CAST_START",
["npcID"] = 72302,
},
[165213] = {
["event"] = "SPELL_CAST_START",
["source"] = "Everbloom Cultivator",
["npcID"] = 81985,
},
[202075] = {
["isChanneled"] = true,
["source"] = "Burning Geode",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 101437,
},
[424615] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elder Cassaphine",
["npcID"] = 206818,
},
[395946] = {
["source"] = "Trickclaw Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 197119,
},
[338606] = {
["npcID"] = 167731,
},
[326319] = {
["npcID"] = 164921,
},
[412330] = {
["source"] = "Malrogg",
["event"] = "SPELL_CAST_START",
["npcID"] = 202606,
},
[350894] = {
["encounterName"] = "Remnant of Ner'zhul",
["npcID"] = 175729,
["encounterID"] = 2432,
},
[228700] = {
["npcID"] = 114338,
},
[330417] = {
["npcID"] = 169696,
},
[146786] = {
["encounterName"] = "Galakras",
["source"] = "Archmage Aethas Sunreaver",
["encounterID"] = 1622,
["event"] = "SPELL_CAST_START",
["npcID"] = 73909,
},
[420525] = {
["encounterName"] = "Council of Dreams",
["source"] = "Urctos",
["npcID"] = 208363,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[391855] = {
["event"] = "SPELL_CAST_START",
["source"] = "Korthrox the Destroyer",
["npcID"] = 183422,
},
[391856] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tenmod",
["npcID"] = 194763,
},
[395952] = {
["source"] = "Bonecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 197125,
},
[136548] = {
["encounterName"] = "Lei Shen",
["source"] = "Ball Lightning",
["npcID"] = 69232,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1579,
},
[375475] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Juvenile Frost Proto-Dragon",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191222,
},
[330423] = {
["npcID"] = 168572,
},
[322232] = {
["encounterName"] = "Stradama Margrave",
["encounterID"] = 2386,
["npcID"] = 164267,
},
[346807] = {
["npcID"] = 177873,
},
[400052] = {
["source"] = "Scavenging Slicer",
["event"] = "SPELL_CAST_START",
["npcID"] = 204508,
},
[395957] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spellforged Horror",
["npcID"] = 194401,
},
["347775"] = {
["npcID"] = 176395,
},
[371383] = {
["source"] = "Hailbringer Theurgist",
["event"] = "SPELL_CAST_START",
["npcID"] = 189229,
},
[359096] = {
["npcID"] = 179460,
},
[334522] = {
["encounterName"] = "Hungering Destroyer",
["npcID"] = 164261,
["encounterID"] = 2383,
},
[169317] = {
["event"] = "SPELL_CAST_START",
["source"] = "Titarus",
["npcID"] = 83713,
},
[400055] = {
["source"] = "Scavenging Slicer",
["event"] = "SPELL_CAST_START",
["npcID"] = 203384,
},
[322236] = {
["encounterName"] = "Stradama Margrave",
["encounterID"] = 2386,
["npcID"] = 165430,
},
[346811] = {
["npcID"] = 177735,
},
[367290] = {
["encounterName"] = "The Jailer",
["npcID"] = 180990,
["encounterID"] = 2537,
},
[400057] = {
["source"] = "Volcanic Deepstrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 200808,
},
[391866] = {
["source"] = "Brackenhide Putrifier",
["event"] = "SPELL_CAST_START",
["npcID"] = 192057,
},
[346813] = {
["npcID"] = 152905,
},
[412346] = {
["source"] = "Irontide Corsair",
["event"] = "SPELL_CAST_START",
["npcID"] = 126928,
},
[375485] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Dragonspawn Flamebender",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191230,
},
["300087"] = {
["npcID"] = 150251,
},
[391871] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskpaw Tendontearer",
["npcID"] = 197820,
},
[395967] = {
["source"] = "Vicious Hyena",
["event"] = "SPELL_CAST_START",
["npcID"] = 197123,
},
[400063] = {
["event"] = "SPELL_CAST_START",
["source"] = "Underlight Queen",
["npcID"] = 203593,
},
[195944] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skrog Wavecrasher",
["npcID"] = 91796,
},
[350916] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 179269,
["encounterID"] = 2440,
},
[400066] = {
["source"] = "Underlight Moth",
["event"] = "SPELL_CAST_START",
["npcID"] = 200120,
},
[152940] = {
["encounterName"] = "Roltall",
["source"] = "Roltall",
["npcID"] = 75786,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1652,
},
[350919] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 176563,
["encounterID"] = 2440,
},
[285388] = {
["encounterName"] = "Tussle Tonks",
["npcID"] = 145185,
["encounterID"] = 2257,
},
[334538] = {
["npcID"] = 171422,
},
[31664] = {
["npcID"] = 27691,
},
[350922] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 179269,
["encounterID"] = 2440,
},
[424646] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flametouched Enforcer",
["npcID"] = 210150,
},
[16561] = {
["npcID"] = 81887,
},
[338636] = {
["npcID"] = 167731,
},
[412360] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spinmarrow",
["npcID"] = 203480,
},
[334542] = {
["npcID"] = 171422,
},
[138609] = {
["encounterName"] = "Dark Animus",
["source"] = "Massive Anima Golem",
["npcID"] = 69699,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1576,
},
[404171] = {
["source"] = "Vakan",
["event"] = "SPELL_CAST_START",
["npcID"] = 199855,
},
[148849] = {
["encounterName"] = "Galakras",
["source"] = "Archmage Aethas Sunreaver",
["encounterID"] = 1622,
["event"] = "SPELL_CAST_START",
["npcID"] = 73909,
},
[383693] = {
["source"] = "Nokhud Beastmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 192794,
},
[85692] = {
["npcID"] = 11859,
},
[412366] = {
["event"] = "SPELL_CAST_START",
["source"] = "Subterrax",
["npcID"] = 203662,
},
[412368] = {
["event"] = "SPELL_CAST_START",
["source"] = "Underlight Queen",
["npcID"] = 203593,
},
[322262] = {
["npcID"] = 166754,
},
[342741] = {
["encounterName"] = "Stone Legion Generals",
["npcID"] = 172858,
["encounterID"] = 2417,
},
[404178] = {
["source"] = "Veltrax",
["event"] = "SPELL_CAST_START",
["npcID"] = 200904,
},
[264923] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["npcID"] = 131863,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2115,
},
[412371] = {
["event"] = "SPELL_CAST_START",
["source"] = "Underlight Queen",
["npcID"] = 203593,
},
[200050] = {
["encounterName"] = "Shade of Xavius",
["source"] = "Shade of Xavius",
["npcID"] = 99192,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1839,
},
[391893] = {
["isChanneled"] = true,
["source"] = "Rokzul",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 194458,
},
[91838] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Tombstalker",
["npcID"] = 26125,
},
[391895] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stalag-MIGHT!",
["npcID"] = 197848,
},
[395991] = {
["source"] = "Raging Torrent",
["event"] = "SPELL_CAST_START",
["npcID"] = 197221,
},
[391896] = {
["source"] = "Ruby Lifetender",
["event"] = "SPELL_CAST_START",
["npcID"] = 196647,
},
[338653] = {
["npcID"] = 173044,
},
[391898] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistyvale Firestarter",
["npcID"] = 193969,
},
[334558] = {
["npcID"] = 171448,
},
[412378] = {
["source"] = "Infinite Timebender",
["event"] = "SPELL_CAST_START",
["npcID"] = 205337,
},
[342751] = {
["npcID"] = 171596,
},
[428762] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vyraz Bladesworn",
["npcID"] = 161398,
},
[404188] = {
["source"] = "Static Charge",
["event"] = "SPELL_CAST_START",
["npcID"] = 202847,
},
[342752] = {
["npcID"] = 173633,
},
[157049] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grom'tash the Destructor",
["npcID"] = 77889,
},
[322274] = {
["encounterName"] = "Nalthor the Rimebinder",
["encounterID"] = 2390,
["npcID"] = 164815,
},
[152954] = {
["encounterName"] = "Vigilant Kaathar",
["source"] = "Vigilant Kaathar",
["npcID"] = 75839,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1686,
},
[391903] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sendrax",
["npcID"] = 190171,
},
[428765] = {
["source"] = "Tindral Sageswift",
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[412383] = {
["event"] = "SPELL_CAST_START",
["source"] = "Colossian",
["npcID"] = 204093,
},
[318181] = {
["npcID"] = 158179,
},
[396001] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Songbird Queen",
["npcID"] = 59553,
},
[257397] = {
["source"] = "Irontide Bonesaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 129788,
},
[214392] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felfang Basilisk",
["npcID"] = 126197,
},
[391907] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stalag-MIGHT!",
["npcID"] = 197850,
},
[334567] = {
["npcID"] = 171448,
},
[322281] = {
["npcID"] = 156559,
},
[412388] = {
["event"] = "SPELL_CAST_START",
["source"] = "Underlight Queen",
["npcID"] = 203593,
},
[355048] = {
["npcID"] = 178139,
},
[355049] = {
["npcID"] = 176535,
},
[396007] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Songbird Queen",
["npcID"] = 59553,
},
[355050] = {
["npcID"] = 176535,
},
[391912] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stalag-MIGHT!",
["npcID"] = 197853,
},
[202108] = {
["source"] = "Blightshard Shaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 90998,
},
[391913] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gnawbone Splintershield",
["npcID"] = 197847,
},
[301807] = {
["encounterName"] = "The Queen's Court",
["npcID"] = 152853,
["encounterID"] = 2311,
},
[281329] = {
["encounterName"] = "Council o' Captains",
["source"] = "Captain Jolly",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 126845,
},
[249210] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Imp",
["npcID"] = 125545,
},
["369365"] = {
["source"] = "Earthen Warder",
["event"] = "SPELL_CAST_START",
["npcID"] = 184132,
},
[330479] = {
["npcID"] = 153382,
},
[257402] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["encounterID"] = 2096,
["event"] = "SPELL_CAST_START",
["npcID"] = 126983,
},
[355055] = {
["encounterName"] = "Kel'Thuzad",
["npcID"] = 176929,
["encounterID"] = 2422,
},
[355057] = {
["npcID"] = 178139,
},
[342770] = {
["npcID"] = 173604,
},
[346866] = {
["npcID"] = 174175,
},
[404207] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lieutenant Narlena",
["npcID"] = 202244,
},
[420591] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Roottender Wildgrowth",
["npcID"] = 209172,
},
[326389] = {
["encounterName"] = "Echelon",
["encounterID"] = 2380,
["npcID"] = 164185,
},
[404209] = {
["source"] = "Veltrax",
["event"] = "SPELL_CAST_START",
["npcID"] = 200904,
},
[396018] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Crybaby Hozen",
["npcID"] = 59552,
},
[152964] = {
["source"] = "Void Spawn",
["event"] = "SPELL_CAST_START",
["npcID"] = 75652,
},
[412402] = {
["source"] = "Flowfy",
["event"] = "SPELL_CAST_START",
["npcID"] = 203660,
},
[142725] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Xaril the Poisoned Mind",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71157,
},
[355062] = {
["npcID"] = 178623,
},
[326392] = {
["npcID"] = 157212,
},
[396020] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Golden Beetle",
["npcID"] = 59545,
},
[355063] = {
["npcID"] = 178623,
},
[257407] = {
["encounterName"] = "Rezan",
["source"] = "Rezan",
["npcID"] = 122963,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2086,
},
[144774] = {
["encounterName"] = "Sha of Pride",
["source"] = "Sha of Pride",
["encounterID"] = 1604,
["event"] = "SPELL_CAST_START",
["npcID"] = 71734,
},
[396023] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eranog",
["npcID"] = 184972,
},
[142727] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Xaril the Poisoned Mind",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71157,
},
[146823] = {
["encounterName"] = "Sha of Pride",
["source"] = "Sha of Pride",
["npcID"] = 71734,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1604,
},
[404216] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lieutenant Narlena",
["npcID"] = 202244,
},
[285440] = {
["encounterName"] = "Machinist's Garden",
["npcID"] = 144248,
["encounterID"] = 2259,
},
[375547] = {
["npcID"] = 191286,
},
[355069] = {
["npcID"] = 178625,
},
[326399] = {
["npcID"] = 155251,
},
[142729] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Xaril the Poisoned Mind",
["npcID"] = 71157,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1593,
},
[355070] = {
["npcID"] = 178625,
},
[404220] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lieutenant Narlena",
["npcID"] = 202244,
},
[140682] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mist Lurker",
["npcID"] = 70594,
},
[355072] = {
["npcID"] = 178628,
},
[412413] = {
["source"] = "Skornak",
["event"] = "SPELL_CAST_START",
["npcID"] = 203643,
},
[136587] = {
["encounterName"] = "Horridon",
["source"] = "Gurubashi Venom Priest",
["npcID"] = 69164,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1575,
},
[412414] = {
["event"] = "SPELL_CAST_START",
["source"] = "Professor Gastrinax",
["npcID"] = 203521,
},
[355074] = {
["npcID"] = 178628,
},
[330500] = {
["npcID"] = 155251,
},
[326405] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Doomwalker",
["npcID"] = 167749,
},
[140684] = {
["isChanneled"] = true,
["source"] = "Mist Lurker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 70594,
},
[120519] = {
["encounterName"] = "Sha of Fear",
["source"] = "Sha of Fear",
["encounterID"] = 1431,
["event"] = "SPELL_CAST_START",
["npcID"] = 60999,
},
[387843] = {
["source"] = "Spectral Invoker",
["event"] = "SPELL_CAST_START",
["npcID"] = 196202,
},
[391939] = {
["npcID"] = 189206,
},
[326409] = {
["npcID"] = 164557,
},
[238984] = {
["event"] = "SPELL_CAST_START",
["source"] = "Portal-Keeper V'thaal",
["npcID"] = 117647,
},
[249224] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felseeker Ritualist",
["npcID"] = 126333,
},
[420613] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hel'nurathian Felmaw",
["npcID"] = 210883,
},
[342794] = {
["npcID"] = 174336,
},
[206219] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104154,
},
[391944] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gnawbone Splintershield",
["npcID"] = 197847,
},
[396040] = {
["encounterName"] = "Eranog",
["source"] = "Flamescale Captain",
["npcID"] = 199233,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[387849] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Dathea, Ascended",
["encounterID"] = 2635,
["event"] = "SPELL_CAST_START",
["npcID"] = 189813,
},
[396041] = {
["source"] = "Cracked Concretion",
["event"] = "SPELL_CAST_START",
["npcID"] = 197074,
},
[234891] = {
["encounterName"] = "Maiden of Vigilance",
["source"] = "Maiden of Vigilance",
["encounterID"] = 2052,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 118289,
},
[38760] = {
["encounterName"] = "Pandemonius",
["source"] = "Pandemonius",
["encounterID"] = 1900,
["event"] = "SPELL_CAST_START",
["npcID"] = 18341,
},
[391948] = {
["event"] = "SPELL_CAST_START",
["source"] = "Steam Coalescence",
["npcID"] = 190110,
},
[396044] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Melidrussa Chillworn",
["encounterID"] = 2609,
["event"] = "SPELL_CAST_START",
["npcID"] = 188252,
},
[255371] = {
["encounterName"] = "Rezan",
["source"] = "Rezan",
["npcID"] = 122963,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2086,
},
[367375] = {
["npcID"] = 178778,
},
[371471] = {
["isChanneled"] = true,
["source"] = "Primal Juggernaut",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 187969,
},
[412430] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gastrite",
["npcID"] = 205801,
},
[355090] = {
["npcID"] = 178628,
},
[310037] = {
["npcID"] = 158956,
},
[400144] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vraken the Hunter",
["npcID"] = 200584,
},
[255373] = {
["encounterName"] = "Rezan",
["source"] = "Rezan",
["npcID"] = 122963,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2086,
},
[367379] = {
["npcID"] = 178778,
},
[367381] = {
["npcID"] = 178778,
},
[193938] = {
["source"] = "Unstable Ooze",
["event"] = "SPELL_CAST_START",
["npcID"] = 98426,
},
[310041] = {
["npcID"] = 170879,
},
[85710] = {
["source"] = "Stormwind Marine",
["event"] = "SPELL_CAST_START",
["npcID"] = 76436,
},
[375575] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Dragonspawn Flamebender",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191230,
},
[391959] = {
["source"] = "Ganmat the Wise",
["event"] = "SPELL_CAST_START",
["npcID"] = 192226,
},
[420630] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hel'nurathian Felguard",
["npcID"] = 210888,
},
[200084] = {
["source"] = "Ghostly Retainer",
["event"] = "SPELL_CAST_START",
["npcID"] = 98366,
},
[428823] = {
["encounterName"] = "Yalnu",
["source"] = "Yalnu",
["npcID"] = 83846,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1756,
},
[273185] = {
["npcID"] = 150251,
},
[375580] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Dathea, Ascended",
["encounterID"] = 2635,
["event"] = "SPELL_CAST_START",
["npcID"] = 189813,
},
[257426] = {
["source"] = "Irontide Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 129602,
},
[412444] = {
["event"] = "SPELL_CAST_START",
["source"] = "Brullo the Strong",
["npcID"] = 203621,
},
[334625] = {
["encounterName"] = "Devos, Paragon of Loyalty",
["npcID"] = 162061,
["encounterID"] = 2359,
},
[318243] = {
["npcID"] = 166357,
},
[371489] = {
["isChanneled"] = true,
["source"] = "Primal Terrasentry",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188067,
},
[293670] = {
["npcID"] = 144299,
},
[330532] = {
["npcID"] = 164510,
},
[134556] = {
["source"] = "Muckmaw Crocolisk",
["event"] = "SPELL_CAST_START",
["npcID"] = 67922,
},
[359203] = {
["npcID"] = 181857,
},
[412448] = {
["source"] = "Deepflayer Broodmatron",
["event"] = "SPELL_CAST_START",
["npcID"] = 200115,
},
[87761] = {
["event"] = "SPELL_CAST_START",
["source"] = "Executor of the Caliph",
["npcID"] = 45928,
},
[265002] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 131863,
},
[404258] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reisa the Drowned",
["npcID"] = 200600,
},
[404259] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pyrachniss",
["npcID"] = 200978,
},
[326441] = {
["npcID"] = 164557,
},
[396069] = {
["npcID"] = 191095,
},
[400165] = {
["source"] = "Infinite Twilight Magus",
["event"] = "SPELL_CAST_START",
["npcID"] = 201223,
},
[177564] = {
["npcID"] = 177586,
},
[375591] = {
["source"] = "Bubbling Sapling",
["event"] = "SPELL_CAST_START",
["npcID"] = 191313,
},
[396071] = {
["event"] = "SPELL_CAST_START",
["source"] = "Decayed Elder",
["npcID"] = 197142,
},
[412455] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enigma Ward",
["npcID"] = 210398,
},
[420647] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ashendir Hartwood",
["npcID"] = 211258,
},
[396073] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Nodding Tiger",
["npcID"] = 59544,
},
[144800] = {
["encounterName"] = "Sha of Pride",
["source"] = "Sha of Pride",
["npcID"] = 71734,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1604,
},
[424744] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Umbraclaw Forager",
["npcID"] = 210508,
},
[375596] = {
["isChanneled"] = true,
["source"] = "Arcane Tender",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 196115,
},
[396075] = {
["source"] = "Raging Torrent",
["event"] = "SPELL_CAST_START",
["npcID"] = 197221,
},
[355118] = {
["npcID"] = 178133,
},
[193951] = {
["source"] = "Barbed Spiderling",
["event"] = "SPELL_CAST_START",
["npcID"] = 97677,
},
[391982] = {
["source"] = "Magmatalon",
["event"] = "SPELL_CAST_START",
["npcID"] = 189538,
},
[396078] = {
["event"] = "SPELL_CAST_START",
["source"] = "Summoned Destroyer",
["npcID"] = 193288,
},
[130770] = {
["npcID"] = 62650,
},
[265016] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chosen Blood Matron",
["npcID"] = 131436,
},
[83669] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aquaos the Unleashed",
["npcID"] = 113378,
},
[355123] = {
["encounterName"] = "Remnant of Ner'zhul",
["npcID"] = 175729,
["encounterID"] = 2432,
},
[400177] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Zaqali Flamewalker",
["npcID"] = 199826,
},
[322358] = {
["encounterName"] = "Doctor Ickus",
["encounterID"] = 2384,
["npcID"] = 164967,
},
[326455] = {
["encounterName"] = "Sun King's Salvation",
["encounterID"] = 2402,
["npcID"] = 165805,
},
[265019] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chosen Blood Matron",
["npcID"] = 131436,
},
[113364] = {
["encounterName"] = "Flameweaver Koegler",
["source"] = "Flameweaver Koegler",
["encounterID"] = 1420,
["event"] = "SPELL_CAST_START",
["npcID"] = 59150,
},
[359222] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 176561,
["encounterID"] = 2440,
},
[396084] = {
["npcID"] = 190933,
},
[269116] = {
["npcID"] = 134599,
},
[305978] = {
["encounterName"] = "Wrathion",
["source"] = "Wrathion",
["npcID"] = 156818,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2329,
},
[330553] = {
["npcID"] = 178979,
},
[200099] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ghostly Protector",
["npcID"] = 98368,
},
[16568] = {
["isChanneled"] = true,
["source"] = "Horde Priest",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 68333,
},
["87779"] = {
["source"] = "Temple Adept",
["event"] = "SPELL_CAST_START",
["npcID"] = 45935,
},
[334653] = {
["npcID"] = 165076,
},
[355132] = {
["npcID"] = 178141,
},
[326463] = {
["npcID"] = 164036,
},
[326464] = {
["npcID"] = 164036,
},
[67289] = {
["source"] = "Kaz'tik the Manipulator",
["event"] = "SPELL_CAST_START",
["npcID"] = 64013,
},
[173480] = {
["npcID"] = 83389,
},
[322370] = {
["npcID"] = 157054,
},
[391998] = {
["npcID"] = 191403,
},
[330562] = {
["npcID"] = 164506,
},
[153002] = {
["encounterName"] = "Vigilant Kaathar",
["source"] = "Vigilant Kaathar",
["npcID"] = 75839,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1686,
},
[391999] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Scavenger",
["npcID"] = 185445,
},
[346947] = {
["encounterName"] = "Mailroom Mayhem",
["npcID"] = 175646,
["encounterID"] = 2424,
},
[420671] = {
["encounterName"] = "Council of Dreams",
["source"] = "Aerwynn",
["npcID"] = 208365,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[359235] = {
["npcID"] = 180906,
},
[330565] = {
["npcID"] = 164506,
},
[359236] = {
["encounterName"] = "Halondrus the Reclaimer",
["encounterID"] = 2529,
["npcID"] = 180906,
},
[200105] = {
["source"] = "Ghostly Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 98368,
},
[351047] = {
["npcID"] = 178392,
},
[424771] = {
["event"] = "SPELL_CAST_START",
["source"] = "Harbinger of Incineration",
["npcID"] = 210147,
},
[281420] = {
["source"] = "Bilge Rat Brinescale",
["event"] = "SPELL_CAST_START",
["npcID"] = 129600,
},
[224681] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scarlet Archer",
["npcID"] = 108840,
},
[387910] = {
["source"] = "Algeth'ar Echoknight",
["event"] = "SPELL_CAST_START",
["npcID"] = 196200,
},
[392006] = {
["source"] = "Sickly Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 186668,
},
[428868] = {
["encounterName"] = "Ozumat",
["source"] = "Ink of Ozumat",
["npcID"] = 213770,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1047,
},
[392007] = {
["source"] = "Shadepaw Thief",
["event"] = "SPELL_CAST_START",
["npcID"] = 192748,
},
[412486] = {
["event"] = "SPELL_CAST_START",
["source"] = "Warchanter Ronvath",
["npcID"] = 200128,
},
[224682] = {
["source"] = "Scarlet Houndsmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 211882,
},
[412488] = {
["source"] = "Crawling Goo",
["event"] = "SPELL_CAST_START",
["npcID"] = 205820,
},
[9053] = {
["npcID"] = 7026,
},
[346957] = {
["encounterName"] = "Hylbrande",
["npcID"] = 175667,
["encounterID"] = 2426,
},
["224374"] = {
["encounterName"] = "Talixae Flamewreath",
["encounterID"] = 1869,
["npcID"] = 112668,
},
[115418] = {
["npcID"] = 59801,
},
[392013] = {
["source"] = "Unbound Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 187036,
},
[412492] = {
["event"] = "SPELL_CAST_START",
["source"] = "Brullo the Strong",
["npcID"] = 203621,
},
[392014] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rokzul",
["npcID"] = 194458,
},
[123610] = {
["source"] = "Corrupted Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 63275,
},
[383823] = {
["source"] = "Nokhud Hornsounder",
["event"] = "SPELL_CAST_START",
["npcID"] = 192796,
},
[236973] = {
["event"] = "SPELL_CAST_START",
["source"] = "Du Shan",
["npcID"] = 119194,
},
[142771] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overseer Elaglo",
["npcID"] = 71030,
},
[342869] = {
["npcID"] = 168934,
},
[28089] = {
["encounterName"] = "Thaddius",
["source"] = "Thaddius",
["npcID"] = 15928,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1120,
},
[144821] = {
["encounterName"] = "Garrosh Hellscream",
["source"] = "Garrosh Hellscream",
["npcID"] = 71865,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1623,
},
[138678] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sul'lithuz Stonegazer",
["npcID"] = 70047,
},
[342873] = {
["npcID"] = 177589,
},
[330586] = {
["npcID"] = 169927,
},
[351066] = {
["encounterName"] = "Remnant of Ner'zhul",
["npcID"] = 175729,
["encounterID"] = 2432,
},
[115421] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Krik'thik Infiltrator",
["npcID"] = 59801,
},
[351067] = {
["encounterName"] = "Remnant of Ner'zhul",
["npcID"] = 175729,
["encounterID"] = 2432,
},
[346972] = {
["npcID"] = 169605,
},
[412505] = {
["source"] = "Tyr's Vanguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 205151,
},
[293729] = {
["npcID"] = 144295,
},
[428889] = {
["encounterName"] = "Ozumat",
["source"] = "Ink of Ozumat",
["encounterID"] = 1047,
["event"] = "SPELL_CAST_START",
["npcID"] = 213770,
},
[257458] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["encounterID"] = 2096,
["event"] = "SPELL_CAST_START",
["npcID"] = 126983,
},
[330593] = {
["npcID"] = 168724,
},
[371551] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormfang Dustcaller",
["npcID"] = 187551,
},
[351073] = {
["encounterName"] = "Remnant of Ner'zhul",
["npcID"] = 175729,
["encounterID"] = 2432,
},
[359265] = {
["npcID"] = 185415,
},
[375649] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Tender",
["npcID"] = 196115,
},
[351075] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 177154,
["encounterID"] = 2435,
},
[236982] = {
["source"] = "Du Shan",
["event"] = "SPELL_CAST_START",
["npcID"] = 119194,
},
[330597] = {
["npcID"] = 177418,
},
[198073] = {
["encounterName"] = "Smashspite the Hateful",
["source"] = "Smashspite the Hateful",
["encounterID"] = 1834,
["event"] = "SPELL_CAST_START",
["npcID"] = 98949,
},
[375652] = {
["source"] = "Arcane Tender",
["event"] = "SPELL_CAST_START",
["npcID"] = 196115,
},
[318312] = {
["npcID"] = 159679,
},
[375653] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Drakonid Stormbringer",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191232,
},
[297834] = {
["encounterName"] = "Gunker",
["npcID"] = 150222,
["encounterID"] = 2292,
},
[7279] = {
["npcID"] = 6518,
},
[297835] = {
["encounterName"] = "Gunker",
["npcID"] = 150222,
["encounterID"] = 2292,
},
[383846] = {
["event"] = "SPELL_CAST_START",
["source"] = "Springs Heater",
["npcID"] = 196168,
},
[196027] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Arcanist",
["npcID"] = 97171,
},
[346985] = {
["encounterName"] = "The Tarragrue",
["npcID"] = 175611,
["encounterID"] = 2423,
},
[408422] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[196028] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Arcanist",
["npcID"] = 97171,
},
[330604] = {
["npcID"] = 168724,
},
[87779] = {
["event"] = "SPELL_CAST_START",
["source"] = "Temple Adept",
["npcID"] = 45935,
},
[144832] = {
["encounterName"] = "Sha of Pride",
["source"] = "Sha of Pride",
["encounterID"] = 1604,
["event"] = "SPELL_CAST_START",
["npcID"] = 71734,
},
[198077] = {
["encounterName"] = "Odyn",
["source"] = "Odyn",
["encounterID"] = 1809,
["event"] = "SPELL_CAST_START",
["npcID"] = 95676,
},
[371565] = {
["source"] = "Ohn'ir Windcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 191244,
},
[338800] = {
["npcID"] = 173202,
},
[387950] = {
["source"] = "Caldera Stomper",
["event"] = "SPELL_CAST_START",
["npcID"] = 187919,
},
[198079] = {
["encounterName"] = "Smashspite the Hateful",
["source"] = "Smashspite the Hateful",
["npcID"] = 98949,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1834,
},
[338802] = {
["npcID"] = 173202,
},
[138691] = {
["encounterName"] = "Dark Animus",
["source"] = "Dark Animus",
["encounterID"] = 1576,
["event"] = "SPELL_CAST_START",
["npcID"] = 69427,
},
[330611] = {
["npcID"] = 165989,
},
[351090] = {
["npcID"] = 176574,
},
[338803] = {
["npcID"] = 173202,
},
[359282] = {
["npcID"] = 182430,
},
[334708] = {
["encounterName"] = "Huntsman Altimor",
["npcID"] = 171557,
["encounterID"] = 2418,
},
[310134] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Psychus",
["npcID"] = 158376,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2344,
},
[265081] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chosen Blood Matron",
["npcID"] = 131436,
},
[330614] = {
["npcID"] = 163086,
},
[387955] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ethereal Restorer",
["npcID"] = 196203,
},
[265084] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devout Blood Priest",
["npcID"] = 131492,
},
[428915] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Manifested Monarch",
["npcID"] = 214020,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2708,
},
[351096] = {
["encounterName"] = "So'leah",
["npcID"] = 177269,
["encounterID"] = 2442,
},
[375671] = {
["npcID"] = 190900,
},
[383864] = {
["npcID"] = 191403,
},
[387960] = {
["event"] = "SPELL_CAST_START",
["source"] = "Caldera Stomper",
["npcID"] = 187919,
},
[265088] = {
["encounterName"] = "Council o' Captains",
["source"] = "Rummy Mancomb",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 133219,
},
[322429] = {
["npcID"] = 162057,
},
[265089] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devout Blood Priest",
["npcID"] = 131492,
},
[383866] = {
["npcID"] = 194526,
},
[367484] = {
["source"] = "Claw Fighter",
["event"] = "SPELL_CAST_START",
["npcID"] = 185508,
},
[202181] = {
["source"] = "Rockback Gnasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 91006,
},
[424825] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sylvanesh the Ascended",
["npcID"] = 207107,
},
[265091] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devout Blood Priest",
["npcID"] = 131492,
},
[367485] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Claw Fighter",
["encounterID"] = 2570,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 185508,
},
[387965] = {
["source"] = "Time-Lost Bladewing",
["event"] = "SPELL_CAST_START",
["npcID"] = 187232,
},
[371584] = {
["npcID"] = 6517,
},
[396159] = {
["source"] = "Worldcarver Wurmling",
["event"] = "SPELL_CAST_START",
["npcID"] = 187366,
},
[383872] = {
["event"] = "SPELL_CAST_START",
["source"] = "Springs Heater",
["npcID"] = 196168,
},
[212423] = {
["npcID"] = 99541,
},
[428926] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Watcher",
["npcID"] = 40936,
},
[173514] = {
["npcID"] = 83389,
},
[351109] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 177787,
["encounterID"] = 2435,
},
[420737] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elder Cassaphine",
["npcID"] = 206818,
},
[330631] = {
["npcID"] = 180013,
},
[257478] = {
["source"] = "Irontide Mastiff",
["event"] = "SPELL_CAST_START",
["npcID"] = 128551,
},
[130791] = {
["source"] = "Garrosh'ar Grunt",
["event"] = "SPELL_CAST_START",
["npcID"] = 66398,
},
[387974] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Spectral Invoker",
["npcID"] = 196202,
},
[375687] = {
["source"] = "Decay Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 190426,
},
[363400] = {
["npcID"] = 178159,
},
[367496] = {
["npcID"] = 185537,
},
[355212] = {
["npcID"] = 178630,
},
[134609] = {
["source"] = "Wakened Mogu",
["event"] = "SPELL_CAST_START",
["npcID"] = 68102,
},
[355214] = {
["npcID"] = 178630,
},
[330640] = {
["npcID"] = 169823,
},
[367502] = {
["npcID"] = 181059,
},
[404364] = {
["encounterName"] = "Morchie",
["source"] = "Morchie",
["encounterID"] = 2671,
["event"] = "SPELL_CAST_START",
["npcID"] = 202789,
},
[367503] = {
["source"] = "Decay Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 186191,
},
[259531] = {
["encounterName"] = "Vol'kaal",
["source"] = "Reanimation Totem",
["npcID"] = 125977,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2085,
},
[359313] = {
["npcID"] = 181958,
},
[367505] = {
["npcID"] = 181059,
},
[392080] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maneet",
["npcID"] = 188704,
},
[351124] = {
["encounterName"] = "So'leah",
["npcID"] = 177269,
["encounterID"] = 2442,
},
[330646] = {
["npcID"] = 169823,
},
[387987] = {
["source"] = "Keen Skywatcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 190778,
},
[408466] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drogbar Crystal-collector",
["npcID"] = 204407,
},
[396180] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lava Burster",
["npcID"] = 186836,
},
[29885] = {
["source"] = "Arcane Anomaly",
["event"] = "SPELL_CAST_START",
["npcID"] = 16488,
},
[355224] = {
["npcID"] = 152875,
},
[355225] = {
["npcID"] = 178142,
},
[392087] = {
["event"] = "SPELL_CAST_START",
["source"] = "Charred Hornspike",
["npcID"] = 191479,
},
[400279] = {
["source"] = "Zaqali Ritualist",
["event"] = "SPELL_CAST_START",
["npcID"] = 199971,
},
[355226] = {
["npcID"] = 179136,
},
[342939] = {
["npcID"] = 169410,
},
[334748] = {
["npcID"] = 166302,
},
[34170] = {
["source"] = "Sunseeker Geomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 18420,
},
[355228] = {
["npcID"] = 178631,
},
[338846] = {
["npcID"] = 167525,
},
["250096"] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["encounterID"] = 2087,
["event"] = "SPELL_CAST_START",
["npcID"] = 122968,
},
[400283] = {
["source"] = "Zaqali Preserver",
["event"] = "SPELL_CAST_START",
["npcID"] = 199972,
},
[355230] = {
["npcID"] = 168104,
},
[338848] = {
["npcID"] = 167525,
},
[408476] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Erratic Remnant",
["npcID"] = 202824,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[396189] = {
["source"] = "Fetid Rotsinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 197129,
},
[241108] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tidescale Legionnaire",
["npcID"] = 117123,
},
[326562] = {
["npcID"] = 169987,
},
[167385] = {
["npcID"] = 175451,
},
[367521] = {
["source"] = "Bonebolt Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 185534,
},
[355234] = {
["npcID"] = 178142,
},
[400288] = {
["source"] = "Unstable Pain",
["event"] = "SPELL_CAST_START",
["npcID"] = 201290,
},
[371618] = {
["source"] = "Cindershard Igniter",
["event"] = "SPELL_CAST_START",
["npcID"] = 198382,
},
[392097] = {
["source"] = "Diluu",
["event"] = "SPELL_CAST_START",
["npcID"] = 195431,
},
[334757] = {
["encounterName"] = "Huntsman Altimor",
["npcID"] = 169457,
["encounterID"] = 2418,
},
[322470] = {
["npcID"] = 157054,
},
[146908] = {
["event"] = "SPELL_CAST_START",
["source"] = "Brute Reinforcements",
["npcID"] = 73155,
},
[347045] = {
["npcID"] = 176131,
},
[375716] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Primalist Mage",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191206,
},
[338855] = {
["npcID"] = 167527,
},
[408483] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elder Magma Serpent",
["npcID"] = 203846,
},
[115440] = {
["event"] = "SPELL_CAST_START",
["source"] = "Warden of Zhu",
["npcID"] = 59845,
},
[200154] = {
["source"] = "Understone Demolisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 102253,
},
[404388] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatching Egg",
["npcID"] = 202897,
},
[428963] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Burning Colossus",
["encounterID"] = 2677,
["event"] = "SPELL_CAST_START",
["npcID"] = 207796,
},
["377402"] = {
["source"] = "Infuser Sariya",
["event"] = "SPELL_CAST_START",
["npcID"] = 190405,
},
[375719] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalbound Water Spirit",
["npcID"] = 190739,
},
[338858] = {
["npcID"] = 167526,
},
[359337] = {
["npcID"] = 181967,
},
[388008] = {
["encounterName"] = "Telash Greywing",
["source"] = "Telash Greywing",
["encounterID"] = 2583,
["event"] = "SPELL_CAST_START",
["npcID"] = 186737,
},
[400296] = {
["source"] = "Zaqali Preserver",
["event"] = "SPELL_CAST_START",
["npcID"] = 199972,
},
[392105] = {
["event"] = "SPELL_CAST_START",
["source"] = "Haleh",
["npcID"] = 199370,
},
[334765] = {
["encounterName"] = "Stone Legion Generals",
["npcID"] = 168112,
["encounterID"] = 2417,
},
[392106] = {
["source"] = "Diluu",
["event"] = "SPELL_CAST_START",
["npcID"] = 195431,
},
[404394] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reisa the Drowned",
["npcID"] = 200600,
},
[224732] = {
["source"] = "Argent Rider",
["event"] = "SPELL_CAST_START",
["npcID"] = 109877,
},
[338863] = {
["npcID"] = 167526,
},
[400300] = {
["source"] = "Bonesifter Marwak",
["event"] = "SPELL_CAST_START",
["npcID"] = 200681,
},
[404396] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pyrachniss",
["npcID"] = 200978,
},
[375727] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["encounterID"] = 2559,
["event"] = "SPELL_CAST_START",
["npcID"] = 184125,
},
[396206] = {
["source"] = "Nokhud Apprentice",
["event"] = "SPELL_CAST_START",
["npcID"] = 200948,
},
[392111] = {
["source"] = "Shiverweb Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 185814,
},
[420782] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Zaqali Lavatongue",
["npcID"] = 208661,
},
[342963] = {
["npcID"] = 158259,
},
[396208] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotbow Stalker",
["npcID"] = 197126,
},
[404400] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pyrachniss",
["npcID"] = 200978,
},
[322486] = {
["npcID"] = 164929,
},
[330678] = {
["npcID"] = 168862,
},
[404403] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[338872] = {
["npcID"] = 167526,
},
[355256] = {
["npcID"] = 178631,
},
[322491] = {
["encounterName"] = "Stradama Margrave",
["npcID"] = 164267,
["encounterID"] = 2386,
},
[408502] = {
["source"] = "Grrrmrrsh Hrrnglscrrrm",
["event"] = "SPELL_CAST_START",
["npcID"] = 204412,
},
[79607] = {
["npcID"] = 3127,
},
[428983] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cycle Warden",
["npcID"] = 214075,
},
[404409] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reisa the Drowned",
["npcID"] = 200600,
},
[138729] = {
["encounterName"] = "Dark Animus",
["source"] = "Dark Animus",
["npcID"] = 69427,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1576,
},
[293827] = {
["npcID"] = 144294,
},
[408509] = {
["source"] = "Portalkeeper Cimbra",
["event"] = "SPELL_CAST_START",
["npcID"] = 202613,
},
[347073] = {
["npcID"] = 177187,
},
[404415] = {
["event"] = "SPELL_CAST_START",
["source"] = "Damned Warrior",
["npcID"] = 202922,
},
[367554] = {
["npcID"] = 183416,
},
[153067] = {
["encounterName"] = "Nhallish",
["source"] = "Nhallish",
["encounterID"] = 1688,
["event"] = "SPELL_CAST_START",
["npcID"] = 75829,
},
[318406] = {
["encounterName"] = "Gorechop",
["encounterID"] = 2365,
["npcID"] = 162317,
},
[392130] = {
["source"] = "Professor Maxdormu",
["event"] = "SPELL_CAST_START",
["npcID"] = 189668,
},
[351174] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rylai Crestfall",
["npcID"] = 88224,
},
[392132] = {
["source"] = "Muugurv",
["event"] = "SPELL_CAST_START",
["npcID"] = 194225,
},
[334792] = {
["encounterName"] = "Huntsman Altimor",
["npcID"] = 165066,
["encounterID"] = 2418,
},
[330697] = {
["npcID"] = 170690,
},
[338889] = {
["npcID"] = 157509,
},
[326602] = {
["npcID"] = 169977,
},
[412614] = {
["source"] = "Viridian King",
["event"] = "SPELL_CAST_START",
["npcID"] = 201029,
},
[420806] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Hel'nurath",
["npcID"] = 205933,
},
[265168] = {
["encounterName"] = "Council o' Captains",
["source"] = "Rummy Mancomb",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 133219,
},
[334797] = {
["encounterName"] = "Huntsman Altimor",
["npcID"] = 169457,
["encounterID"] = 2418,
},
[420808] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Hel'nurath",
["npcID"] = 205933,
},
[326607] = {
["npcID"] = 167612,
},
[330703] = {
["npcID"] = 174210,
},
[129785] = {
["source"] = "Mistblade Scale-Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 63179,
},
[359374] = {
["npcID"] = 181964,
},
[400333] = {
["source"] = "Cliffkeeper Bouldani",
["event"] = "SPELL_CAST_START",
["npcID"] = 202612,
},
[388046] = {
["source"] = "Stinkbreath",
["event"] = "SPELL_CAST_START",
["npcID"] = 187033,
},
[138739] = {
["source"] = "Farraki Sand Conjurer",
["event"] = "SPELL_CAST_START",
["npcID"] = 69899,
},
[347090] = {
["npcID"] = 178263,
},
[400335] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vraken the Hunter",
["npcID"] = 200584,
},
[347091] = {
["npcID"] = 164047,
},
[383953] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bakar Companion",
["npcID"] = 194255,
},
[338902] = {
["npcID"] = 157509,
},
[412626] = {
["event"] = "SPELL_CAST_START",
["source"] = "General Zskorro",
["npcID"] = 203592,
},
[28353] = {
["source"] = "Death Knight Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 16145,
},
[347095] = {
["npcID"] = 178263,
},
[138742] = {
["event"] = "SPELL_CAST_START",
["source"] = "Farraki Sand Conjurer",
["npcID"] = 69899,
},
[157173] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felguard",
["npcID"] = 79507,
},
[15585] = {
["npcID"] = 17730,
},
[326619] = {
["npcID"] = 166873,
},
[293854] = {
["npcID"] = 144294,
},
[330716] = {
["npcID"] = 167998,
},
[302046] = {
["source"] = "Rustfeather",
["event"] = "SPELL_CAST_START",
["npcID"] = 152182,
},
[375770] = {
["source"] = "Frozion",
["event"] = "SPELL_CAST_START",
["npcID"] = 193655,
},
[142840] = {
["event"] = "SPELL_CAST_START",
["source"] = "Echo of Y'Shaarj",
["npcID"] = 71123,
},
[343005] = {
["encounterName"] = "Shriekwing",
["npcID"] = 164406,
["encounterID"] = 2398,
},
[404442] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vraken the Hunter",
["npcID"] = 200584,
},
[175607] = {
["event"] = "SPELL_CAST_START",
["source"] = "Night-Twisted Shadowsworn",
["npcID"] = 82733,
},
[388060] = {
["source"] = "Stinkbreath",
["event"] = "SPELL_CAST_START",
["npcID"] = 187033,
},
[228852] = {
["encounterName"] = "Attumen the Huntsman",
["encounterID"] = 1960,
["npcID"] = 114262,
},
[142842] = {
["encounterName"] = "Malkorok",
["source"] = "Malkorok",
["encounterID"] = 1595,
["event"] = "SPELL_CAST_START",
["npcID"] = 71454,
},
[338914] = {
["npcID"] = 161427,
},
[392159] = {
["event"] = "SPELL_CAST_START",
["source"] = "Norbett",
["npcID"] = 190968,
},
[429021] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Watcher",
["npcID"] = 40936,
},
[259572] = {
["encounterName"] = "Vol'kaal",
["source"] = "Vol'kaal",
["npcID"] = 122965,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2085,
},
[355299] = {
["npcID"] = 178661,
},
[175610] = {
["event"] = "SPELL_CAST_START",
["source"] = "Night-Twisted Shadowsworn",
["npcID"] = 82733,
},
[277481] = {
["npcID"] = 154011,
},
[200185] = {
["encounterName"] = "Shade of Xavius",
["source"] = "Shade of Xavius",
["npcID"] = 99192,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1839,
},
[173563] = {
["encounterName"] = "Yalnu",
["source"] = "Feral Lasher",
["npcID"] = 86684,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1756,
},
[351206] = {
["npcID"] = 176575,
},
[253431] = {
["event"] = "SPELL_CAST_START",
["source"] = "Antoran Soulshaper",
["npcID"] = 127587,
},
[119552] = {
["source"] = "Subetai the Swift",
["event"] = "SPELL_CAST_START",
["npcID"] = 61427,
},
[338921] = {
["npcID"] = 163186,
},
[123648] = {
["source"] = "Harthak Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 61946,
},
[383975] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mikrin of the Raging Winds",
["npcID"] = 193173,
},
[355306] = {
["npcID"] = 179778,
},
[408551] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crystalline Walker",
["npcID"] = 201063,
},
[297966] = {
["npcID"] = 153382,
},
[416743] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hungering Ghoul",
["npcID"] = 206016,
},
[404456] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[118529] = {
["source"] = "Mogu'shan Secret-Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 61131,
},
[119553] = {
["source"] = "Subetai the Swift",
["event"] = "SPELL_CAST_START",
["npcID"] = 61427,
},
[52611] = {
["encounterName"] = "Skarvold & Dalronn",
["source"] = "Dalronn the Controller",
["encounterID"] = 2024,
["event"] = "SPELL_CAST_START",
["npcID"] = 24201,
},
[123649] = {
["source"] = "Kargesh Ribcrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 61947,
},
[185854] = {
["npcID"] = 92792,
},
[383981] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rising Tempest",
["npcID"] = 194575,
},
[119554] = {
["source"] = "Subetai the Swift",
["event"] = "SPELL_CAST_START",
["npcID"] = 61427,
},
[297972] = {
["encounterName"] = "Queen Azshara",
["npcID"] = 153059,
["encounterID"] = 2299,
},
[429037] = {
["encounterName"] = "Mindbender Ghur'sha",
["source"] = "Erunak Stonespeaker",
["npcID"] = 40825,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1046,
},
[420846] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["encounterID"] = 2708,
["event"] = "SPELL_CAST_START",
["npcID"] = 206172,
},
[416751] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vargul Mystic",
["npcID"] = 207805,
},
[185857] = {
["npcID"] = 39317,
},
[404465] = {
["event"] = "SPELL_CAST_START",
["source"] = "Galakhad",
["npcID"] = 200717,
},
[28099] = {
["source"] = "Tesla Coil",
["event"] = "SPELL_CAST_START",
["npcID"] = 16218,
},
[119556] = {
["event"] = "SPELL_CAST_START",
["source"] = "Weeping Horror",
["npcID"] = 57649,
},
[192003] = {
["encounterName"] = "Serpentrix",
["source"] = "Blazing Hydra Spawn",
["npcID"] = 97259,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[322554] = {
["encounterName"] = "Executor Tarvold",
["encounterID"] = 2361,
["npcID"] = 162103,
},
[412661] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invoq",
["npcID"] = 203627,
},
[269310] = {
["encounterName"] = "Unbound Abomination",
["source"] = "Titan Keeper Hezrel",
["npcID"] = 134419,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2123,
},
[420853] = {
["source"] = "Temporal Investi-gator",
["event"] = "SPELL_CAST_START",
["npcID"] = 201664,
},
[175621] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iron Flame Binder",
["npcID"] = 87515,
},
[338939] = {
["npcID"] = 167055,
},
[163334] = {
["encounterName"] = "Grimrail Enforcers",
["encounterID"] = 1748,
["npcID"] = 80808,
},
[404472] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 200912,
},
[192005] = {
["encounterName"] = "Serpentrix",
["source"] = "Arcane Hydra Spawn",
["npcID"] = 97260,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[420856] = {
["encounterName"] = "Council of Dreams",
["source"] = "Aerwynn",
["npcID"] = 208365,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[343038] = {
["npcID"] = 169041,
},
[343040] = {
["npcID"] = 165869,
},
[429051] = {
["encounterName"] = "Mindbender Ghur'sha",
["source"] = "Erunak Stonespeaker",
["npcID"] = 40825,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1046,
},
[343041] = {
["npcID"] = 165869,
},
[123654] = {
["encounterName"] = "Trial of the King",
["source"] = "Ming the Cunning",
["encounterID"] = 1442,
["event"] = "SPELL_CAST_START",
["npcID"] = 61444,
},
[330755] = {
["npcID"] = 169859,
},
["300171"] = {
["npcID"] = 150276,
},
[334852] = {
["encounterName"] = "Huntsman Altimor",
["npcID"] = 169458,
["encounterID"] = 2418,
},
[404480] = {
["source"] = "Sabellian",
["event"] = "SPELL_CAST_START",
["npcID"] = 201383,
},
[408576] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rionthus",
["npcID"] = 200918,
},
[392194] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["npcID"] = 190245,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[375812] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Enraged Cliff",
["npcID"] = 187082,
},
[138766] = {
["source"] = "Primal Devilsaur",
["event"] = "SPELL_CAST_START",
["npcID"] = 70008,
},
[277517] = {
["npcID"] = 177862,
},
[136719] = {
["encounterName"] = "Horridon",
["source"] = "Farraki Wastewalker",
["npcID"] = 69175,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1575,
},
[46983] = {
["source"] = "Greater Water Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 25040,
},
[412678] = {
["source"] = "Klakatak",
["event"] = "SPELL_CAST_START",
["npcID"] = 203618,
},
[338955] = {
["npcID"] = 159747,
},
[138768] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Direhorn",
["npcID"] = 70016,
},
[338957] = {
["npcID"] = 165998,
},
[347149] = {
["encounterName"] = "Timecap'n Hooktail",
["npcID"] = 175546,
["encounterID"] = 2419,
},
[200205] = {
["npcID"] = 101462,
},
[109322] = {
["source"] = "War Serpent",
["event"] = "SPELL_CAST_START",
["npcID"] = 57927,
},
[363533] = {
["encounterName"] = "Rygelon",
["encounterID"] = 2549,
["npcID"] = 182777,
},
[194062] = {
["source"] = "Gleamhoof Doe",
["event"] = "SPELL_CAST_START",
["npcID"] = 93314,
},
[277523] = {
["source"] = "Overlord Gugyoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 137177,
},
[347151] = {
["encounterName"] = "Timecap'n Hooktail",
["encounterID"] = 2419,
["npcID"] = 175546,
},
[134674] = {
["source"] = "Wakened Mogu",
["event"] = "SPELL_CAST_START",
["npcID"] = 68102,
},
[343056] = {
["npcID"] = 172025,
},
[384014] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Watcher Irideus",
["npcID"] = 189719,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2615,
},
[196111] = {
["encounterName"] = "Serpentrix",
["source"] = "Seaspray Crab",
["npcID"] = 91793,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[347153] = {
["npcID"] = 171849,
},
[338962] = {
["npcID"] = 166499,
},
[392207] = {
["source"] = "Gareed",
["event"] = "SPELL_CAST_START",
["npcID"] = 200722,
},
[194064] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Foul Mother",
["npcID"] = 98533,
},
[396304] = {
["source"] = "Vile Rothexer",
["event"] = "SPELL_CAST_START",
["npcID"] = 197135,
},
[404496] = {
["source"] = "Sabellian",
["event"] = "SPELL_CAST_START",
["npcID"] = 201383,
},
[343060] = {
["encounterName"] = "Stone Legion Generals",
["npcID"] = 168113,
["encounterID"] = 2417,
},
[259597] = {
["npcID"] = 158110,
},
[420881] = {
["source"] = "Zaqali Ashwarden",
["event"] = "SPELL_CAST_START",
["npcID"] = 208659,
},
[343062] = {
["npcID"] = 169042,
},
[192018] = {
["encounterName"] = "Hyrja",
["source"] = "Hyrja",
["event"] = "SPELL_CAST_START",
["npcID"] = 95833,
},
[310298] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sinister Soulcarver",
["npcID"] = 162717,
},
["397726"] = {
["source"] = "Shrieking Whelp",
["event"] = "SPELL_CAST_START",
["npcID"] = 187159,
},
[412693] = {
["source"] = "Magtembo",
["event"] = "SPELL_CAST_START",
["npcID"] = 200111,
},
[15587] = {
["source"] = "Shadowmoon Acolyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 16594,
},
[400407] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nidharr",
["npcID"] = 201310,
},
[347163] = {
["npcID"] = 170157,
},
[169494] = {
["source"] = "Gnarlroot",
["event"] = "SPELL_CAST_START",
["npcID"] = 81984,
},
[375834] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[396313] = {
["npcID"] = 189542,
},
[330782] = {
["npcID"] = 172395,
},
[396315] = {
["source"] = "Nokhud Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 185147,
},
[396316] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Huntmaster",
["npcID"] = 185353,
},
[200214] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reaves",
["npcID"] = 101462,
},
[235028] = {
["encounterName"] = "Maiden of Vigilance",
["source"] = "Maiden of Vigilance",
["encounterID"] = 2052,
["event"] = "SPELL_CAST_START",
["npcID"] = 118289,
},
[343072] = {
["npcID"] = 172025,
},
[412700] = {
["source"] = "Magtembo",
["event"] = "SPELL_CAST_START",
["npcID"] = 200111,
},
[400413] = {
["source"] = "Bonesifter Marwak",
["event"] = "SPELL_CAST_START",
["npcID"] = 200681,
},
[144922] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Animated Stone Mogu",
["npcID"] = 71380,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[408605] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Devastator",
["npcID"] = 198869,
},
[330786] = {
["npcID"] = 169861,
},
[384032] = {
["event"] = "SPELL_CAST_START",
["source"] = "Amethyzar the Glittering",
["npcID"] = 193132,
},
[144923] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Animated Stone Mogu",
["npcID"] = 71380,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[334884] = {
["encounterName"] = "Huntsman Altimor",
["npcID"] = 171577,
["encounterID"] = 2418,
},
[420895] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aurostor",
["npcID"] = 209574,
},
[359459] = {
["npcID"] = 182392,
},
["372730"] = {
["source"] = "Primal Juggernaut",
["event"] = "SPELL_CAST_START",
["npcID"] = 188244,
},
[200218] = {
["npcID"] = 101462,
},
[343080] = {
["npcID"] = 169042,
},
[396325] = {
["source"] = "Disease Slasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 197138,
},
[404517] = {
["source"] = "Vakan",
["event"] = "SPELL_CAST_START",
["npcID"] = 199855,
},
[424997] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Fiery Treant",
["npcID"] = 208459,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2731,
},
[396327] = {
["source"] = "Glacias",
["event"] = "SPELL_CAST_START",
["npcID"] = 199028,
},
[343083] = {
["npcID"] = 166156,
},
[396330] = {
["source"] = "Nokhud Sentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 185357,
},
[136737] = {
["source"] = "Shan'ze Gravekeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 69235,
},
[343086] = {
["encounterName"] = "Stone Legion Generals",
["npcID"] = 168112,
["encounterID"] = 2417,
},
[420907] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["encounterID"] = 2708,
["event"] = "SPELL_CAST_START",
["npcID"] = 206172,
},
[408620] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Obsidian Guard",
["npcID"] = 200836,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
["412063"] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Epoch Ripper",
["npcID"] = 205435,
},
[196127] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mak'rana Siltwalker",
["npcID"] = 91790,
},
[400430] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[404526] = {
["event"] = "SPELL_CAST_START",
["source"] = "Baine Bloodhoof",
["npcID"] = 203204,
},
[326707] = {
["encounterName"] = "Sire Denathrius",
["npcID"] = 167406,
["encounterID"] = 2407,
},
[334899] = {
["npcID"] = 174802,
},
[194080] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightmare Imp",
["npcID"] = 95599,
},
["241808"] = {
["npcID"] = 183424,
},
["200580"] = {
["npcID"] = 95779,
},
[118547] = {
["source"] = "Ik'thik Wing Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 56723,
},
[142884] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maragor",
["npcID"] = 71492,
},
[404529] = {
["event"] = "SPELL_CAST_START",
["source"] = "Baine Bloodhoof",
["npcID"] = 203204,
},
[136741] = {
["encounterName"] = "Horridon",
["source"] = "Horridon",
["npcID"] = 68476,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1575,
},
[126739] = {
["source"] = "Korvexxis",
["event"] = "SPELL_CAST_START",
["npcID"] = 62579,
},
[326712] = {
["npcID"] = 167956,
},
[132646] = {
["source"] = "Darkhatched Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 67256,
},
[429108] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Cycle Warden",
["encounterID"] = 2708,
["event"] = "SPELL_CAST_START",
["npcID"] = 209800,
},
[125311] = {
["source"] = "Ik-Ik the Nimble",
["event"] = "SPELL_CAST_START",
["npcID"] = 50836,
},
[125716] = {
["event"] = "SPELL_CAST_START",
["source"] = "Set'thik Tempest",
["npcID"] = 64358,
},
[318460] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Voidspawn Annihilator",
["npcID"] = 163612,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[317066] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Thought Harvester",
["npcID"] = 162933,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[400439] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wyrmslayer Angvardi",
["npcID"] = 201013,
},
["156718"] = {
["source"] = "Monstrous Corpse Spider",
["event"] = "SPELL_CAST_START",
["npcID"] = 76104,
},
[310184] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Psychus",
["npcID"] = 158376,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[318449] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "N'Zoth the Corruptor",
["npcID"] = 158041,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[318525] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shath'Yar Scribe",
["npcID"] = 163690,
},
[313400] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Corruptor Tentacle",
["npcID"] = 158375,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[359483] = {
["encounterName"] = "Dausegne, the Fallen Oracle",
["encounterID"] = 2540,
["npcID"] = 181224,
},
[358642] = {
["npcID"] = 179606,
},
[209628] = {
["encounterName"] = "Advisor Melandrus",
["source"] = "Advisor Melandrus",
["npcID"] = 104218,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1870,
},
[128368] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'thik Battlesinger",
["npcID"] = 62758,
},
[68982] = {
["encounterName"] = "Devourer of Souls",
["source"] = "Devourer of Souls",
["encounterID"] = 2007,
["event"] = "SPELL_CAST_START",
["npcID"] = 36502,
},
[396346] = {
["event"] = "SPELL_CAST_START",
["source"] = "Warmonger Kharad",
["npcID"] = 190932,
},
[271764] = {
["event"] = "SPELL_CAST_START",
["source"] = "Yetor",
["npcID"] = 192038,
},
[355389] = {
["encounterName"] = "Kel'Thuzad",
["npcID"] = 176703,
["encounterID"] = 2422,
},
[313652] = {
["encounterName"] = "The Hivemind",
["source"] = "Ka'zir",
["npcID"] = 157253,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2333,
},
[139991] = {
["encounterName"] = "Megaera",
["source"] = "Arcane Head",
["encounterID"] = 1578,
["event"] = "SPELL_CAST_START",
["npcID"] = 70248,
},
[400443] = {
["isChanneled"] = true,
["source"] = "Igniting Pup",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 201339,
},
[252614] = {
["source"] = "Flameweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 127233,
},
[127338] = {
["source"] = "Sha of Hatred",
["event"] = "SPELL_CAST_START",
["npcID"] = 62541,
},
[396348] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gutchewer Bear",
["npcID"] = 197134,
},
[125292] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bataari Flamecaller",
["npcID"] = 63526,
},
[388835] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gorjo the Crab Shackler",
["npcID"] = 193226,
},
[343104] = {
["npcID"] = 170208,
},
[396349] = {
["source"] = "Fleshripper Vulture",
["event"] = "SPELL_CAST_START",
["npcID"] = 197133,
},
[300102] = {
["npcID"] = 152009,
},
[228086] = {
["npcID"] = 114584,
},
[375871] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[396350] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fleshripper Vulture",
["npcID"] = 197133,
},
[409313] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[420925] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aurostor",
["npcID"] = 209574,
},
[390930] = {
["npcID"] = 185784,
},
[143427] = {
["encounterName"] = "General Nazgrim",
["source"] = "Kor'kron Ironblade",
["npcID"] = 71770,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1603,
},
[224806] = {
["event"] = "SPELL_CAST_START",
["source"] = "Undercity Guardian",
["npcID"] = 108570,
},
[200768] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Razorbeak",
["npcID"] = 95766,
},
[306228] = {
["encounterName"] = "Dark Inquisitor Xanesh",
["source"] = "Flayed Soul",
["npcID"] = 157005,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2328,
},
[300514] = {
["npcID"] = 150146,
},
[384065] = {
["event"] = "SPELL_CAST_START",
["source"] = "Amethyzar the Glittering",
["npcID"] = 193132,
},
[339012] = {
["npcID"] = 183512,
},
[392257] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thousandmile",
["npcID"] = 193676,
},
[429119] = {
["encounterName"] = "Council of Dreams",
["source"] = "Aerwynn",
["encounterID"] = 2728,
["event"] = "SPELL_CAST_START",
["npcID"] = 208365,
},
[318534] = {
["event"] = "SPELL_CAST_START",
["source"] = "Umbral Gatekeeper",
["npcID"] = 163708,
},
[339013] = {
["npcID"] = 183512,
},
[413483] = {
["event"] = "SPELL_CAST_START",
["source"] = "Apiazhus",
["npcID"] = 200981,
},
[330822] = {
["npcID"] = 169859,
},
[334918] = {
["npcID"] = 162047,
},
["198934"] = {
["source"] = "Valarjar Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 95834,
},
[374586] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["npcID"] = 189478,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2612,
},
[396355] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ritual Guardian",
["npcID"] = 186787,
},
[372449] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormfang Bonecaster",
["npcID"] = 187931,
},
[169028] = {
["source"] = "Imp Seer",
["event"] = "SPELL_CAST_START",
["npcID"] = 89212,
},
[114456] = {
["source"] = "Warlord Rok'nah",
["event"] = "SPELL_CAST_START",
["npcID"] = 65442,
},
[125315] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Bataari War Yeti",
["npcID"] = 64185,
},
[106851] = {
["source"] = "Stout Brew Alemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 59519,
},
[106563] = {
["encounterName"] = "Yan-Zhu the Uncasked",
["source"] = "Yan-Zhu the Uncasked",
["encounterID"] = 1414,
["event"] = "SPELL_CAST_START",
["npcID"] = 59479,
},
[118552] = {
["source"] = "Mogu'shan Secret-Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 61131,
},
[195254] = {
["encounterName"] = "Amalgam of Souls",
["source"] = "Amalgam of Souls",
["encounterID"] = 1832,
["event"] = "SPELL_CAST_START",
["npcID"] = 98542,
},
[311084] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maddened Conscript",
["npcID"] = 159305,
},
[386526] = {
["source"] = "Nullmagic Hornswog",
["event"] = "SPELL_CAST_START",
["npcID"] = 187246,
},
[209587] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Helmouth Soulhunter",
["npcID"] = 105750,
},
[176821] = {
["npcID"] = 83754,
},
[130115] = {
["source"] = "Apparition of Terror",
["event"] = "SPELL_CAST_START",
["npcID"] = 66100,
},
[420933] = {
["encounterName"] = "Volcoross",
["source"] = "Volcoross",
["npcID"] = 208478,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2737,
},
[199345] = {
["encounterName"] = "Dresaron",
["source"] = "Dresaron",
["encounterID"] = 1838,
["event"] = "SPELL_CAST_START",
["npcID"] = 99200,
},
[389273] = {
["source"] = "Wyrmeater",
["event"] = "SPELL_CAST_START",
["npcID"] = 186612,
},
[147456] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spirit of Jadefire",
["npcID"] = 72769,
},
[403574] = {
["source"] = "Fael'lin",
["event"] = "SPELL_CAST_START",
["npcID"] = 198916,
},
[425030] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Juggernaut",
["npcID"] = 210172,
},
[396360] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ritual Guardian",
["npcID"] = 186787,
},
[351307] = {
["npcID"] = 176572,
},
[136752] = {
["encounterName"] = "Twin Empyreans",
["source"] = "Lu'lin",
["npcID"] = 68905,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1560,
},
[409307] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Dreadsquall",
["npcID"] = 202262,
},
[119577] = {
["source"] = "Wildscale Herbalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 58216,
},
[46195] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Yazzai",
["npcID"] = 24561,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1895,
},
[313253] = {
["encounterName"] = "Wrathion",
["source"] = "Wrathion",
["npcID"] = 156818,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2329,
},
[13748] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Sorcerer",
["npcID"] = 10422,
},
[303267] = {
["npcID"] = 155616,
},
[334926] = {
["npcID"] = 168878,
},
[270481] = {
["npcID"] = 135002,
},
[333294] = {
["npcID"] = 169893,
},
[119347] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sik'thik Vanguard",
["npcID"] = 61434,
},
[68948] = {
["encounterName"] = "The Crown Chemical Co.",
["source"] = "Apothecary Baxter",
["encounterID"] = 2879,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 36565,
},
[340289] = {
["npcID"] = 173714,
},
[163376] = {
["encounterName"] = "Grimrail Enforcers",
["encounterID"] = 1748,
["npcID"] = 80808,
},
[334002] = {
["npcID"] = 173943,
},
[200238] = {
["encounterName"] = "Shade of Xavius",
["source"] = "Shade of Xavius",
["npcID"] = 99192,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1839,
},
[22887] = {
["source"] = "Honorbound Headcarver",
["event"] = "SPELL_CAST_START",
["npcID"] = 154750,
},
[425035] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Core Hound",
["npcID"] = 210288,
},
[405870] = {
["source"] = "Arcantrix",
["event"] = "SPELL_CAST_START",
["npcID"] = 200737,
},
[334929] = {
["encounterName"] = "Stone Legion Generals",
["npcID"] = 168112,
["encounterID"] = 2417,
},
[329170] = {
["encounterName"] = "Lord Chamberlain",
["encounterID"] = 2381,
["npcID"] = 165737,
},
[343121] = {
["npcID"] = 169043,
},
[396366] = {
["source"] = "Rimetalon Spellflinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 195756,
},
[384079] = {
["event"] = "SPELL_CAST_START",
["source"] = "Amethyzar the Glittering",
["npcID"] = 193132,
},
[193585] = {
["source"] = "Rockbound Trapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 102232,
},
[425037] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Core Hound",
["npcID"] = 210288,
},
[396367] = {
["event"] = "SPELL_CAST_START",
["source"] = "Decayed Elder",
["npcID"] = 197142,
},
[17174] = {
["npcID"] = 35098,
},
[227420] = {
["encounterName"] = "Opera Hall",
["npcID"] = 114266,
["encounterID"] = 1957,
},
[392272] = {
["source"] = "Rumbling Blackpaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 191665,
},
[124297] = {
["source"] = "Go-Kan",
["event"] = "SPELL_CAST_START",
["npcID"] = 50331,
},
[302166] = {
["npcID"] = 150190,
},
[345321] = {
["npcID"] = 162849,
},
[392273] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ergburk",
["npcID"] = 194409,
},
[341146] = {
["npcID"] = 174194,
},
[44196] = {
["encounterName"] = "Kael'thas Sunstrider",
["source"] = "Phoenix",
["encounterID"] = 1894,
["event"] = "SPELL_CAST_START",
["npcID"] = 24674,
},
[164615] = {
["encounterName"] = "Gug'rokk",
["source"] = "Bloodmaul Flamespeaker",
["npcID"] = 81767,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1654,
},
[163379] = {
["encounterName"] = "Grimrail Enforcers",
["encounterID"] = 1748,
["npcID"] = 80875,
},
[396370] = {
["source"] = "Rimetalon Spellflinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 195756,
},
[3396] = {
["source"] = "Battle Creeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 48268,
},
[68939] = {
["encounterName"] = "Devourer of Souls",
["source"] = "Devourer of Souls",
["encounterID"] = 2007,
["event"] = "SPELL_CAST_START",
["npcID"] = 36502,
},
[204337] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ravenous Felstalker",
["npcID"] = 118787,
},
[298073] = {
["npcID"] = 156241,
},
[192050] = {
["encounterName"] = "Serpentrix",
["source"] = "Serpentrix",
["npcID"] = 91808,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1813,
},
[339031] = {
["npcID"] = 167503,
},
[241799] = {
["npcID"] = 114783,
},
[329171] = {
["encounterName"] = "Lord Chamberlain",
["encounterID"] = 2381,
["npcID"] = 165737,
},
[176768] = {
["source"] = "Ashmaul Flamespeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 83790,
},
[420947] = {
["encounterName"] = "Council of Dreams",
["source"] = "Urctos",
["npcID"] = 208363,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[326745] = {
["npcID"] = 170016,
},
[363607] = {
["encounterName"] = "Dausegne, the Fallen Oracle",
["encounterID"] = 2540,
["npcID"] = 181244,
},
[224817] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gurgoth",
["npcID"] = 108719,
},
[169063] = {
["event"] = "SPELL_CAST_START",
["source"] = "Conniving Shadowblade",
["npcID"] = 86714,
},
[8364] = {
["source"] = "Skeletal Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 10390,
},
[118077] = {
["encounterName"] = "Protectors of the Endless",
["source"] = "Elder Regail",
["encounterID"] = 1409,
["event"] = "SPELL_CAST_START",
["npcID"] = 60585,
},
[128056] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mygoness",
["npcID"] = 62766,
},
[394423] = {
["source"] = "Rohzor Forgesmash",
["event"] = "SPELL_CAST_START",
["npcID"] = 187598,
},
[392279] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wild Proto-Dragon",
["npcID"] = 194089,
},
[369853] = {
["source"] = "Burly Rock-Thrower",
["event"] = "SPELL_CAST_START",
["npcID"] = 184019,
},
[302173] = {
["source"] = "Roadtrogg",
["event"] = "SPELL_CAST_START",
["npcID"] = 150389,
},
[355418] = {
["npcID"] = 178527,
},
[392280] = {
["source"] = "Kaurdyth",
["event"] = "SPELL_CAST_START",
["npcID"] = 197835,
},
["400641"] = {
["encounterName"] = "Tyr, the Infinite Keeper",
["source"] = "Tyr, the Infinite Keeper",
["encounterID"] = 2670,
["event"] = "SPELL_CAST_START",
["npcID"] = 198998,
},
[164448] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kimilyn",
["npcID"] = 88109,
},
[397011] = {
["source"] = "Qalashi Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 197147,
},
[392281] = {
["source"] = "Crystalus",
["event"] = "SPELL_CAST_START",
["npcID"] = 193645,
},
[373912] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Decatriarch Wratheye",
["encounterID"] = 2569,
["event"] = "SPELL_CAST_START",
["npcID"] = 186121,
},
[361052] = {
["npcID"] = 179006,
},
[275927] = {
["npcID"] = 182728,
},
[164446] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kimilyn",
["npcID"] = 88109,
},
[412761] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["encounterID"] = 2677,
["event"] = "SPELL_CAST_START",
["npcID"] = 204931,
},
[334942] = {
["encounterName"] = "Huntsman Altimor",
["npcID"] = 165067,
["encounterID"] = 2418,
},
[147652] = {
["npcID"] = 72805,
},
[392283] = {
["event"] = "SPELL_CAST_START",
["source"] = "Roosting Gnasher",
["npcID"] = 195963,
},
[256589] = {
["encounterName"] = "Council o' Captains",
["source"] = "Captain Raoul",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 126847,
},
[384092] = {
["event"] = "SPELL_CAST_START",
["source"] = "Timetender Athekk",
["npcID"] = 193042,
},
[319711] = {
["npcID"] = 166872,
},
[392284] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wild Proto-Dragon",
["npcID"] = 194091,
},
[264390] = {
["event"] = "SPELL_CAST_START",
["source"] = "Runic Disciple",
["npcID"] = 131685,
},
[304261] = {
["npcID"] = 155272,
},
[146002] = {
["source"] = "Kor'kron War Wolf",
["event"] = "SPELL_CAST_START",
["npcID"] = 72768,
},
[392285] = {
["event"] = "SPELL_CAST_START",
["source"] = "Proto Dragon",
["npcID"] = 195177,
},
[145999] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcweaver Reinforcements",
["npcID"] = 73153,
},
["397383"] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Magma Mystic",
["encounterID"] = 2682,
["event"] = "SPELL_CAST_START",
["npcID"] = 199703,
},
[362801] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2553,
["npcID"] = 183501,
},
[185113] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thistleleaf Menace",
["npcID"] = 91472,
},
[301088] = {
["npcID"] = 151657,
},
[384095] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ohuna Companion",
["npcID"] = 194254,
},
[202295] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadflame Corruptor",
["npcID"] = 118783,
},
[178298] = {
["npcID"] = 83763,
},
[389443] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Nullification Device",
["npcID"] = 196712,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2615,
},
[377140] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shy Croaker",
["npcID"] = 193539,
},
[48530] = {
["source"] = "7th Legion Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 27162,
},
[425054] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Magister",
["npcID"] = 208948,
},
[361568] = {
["encounterName"] = "Prototype Pantheon",
["encounterID"] = 2544,
["npcID"] = 181546,
},
[50066] = {
["encounterName"] = "Saboteur Kip'tilak",
["npcID"] = 27936,
["encounterID"] = 1397,
},
["374020"] = {
["source"] = "Containment Apparatus",
["event"] = "SPELL_CAST_START",
["npcID"] = 190342,
},
[204344] = {
["source"] = "Blacktalon Assassin",
["event"] = "SPELL_CAST_START",
["npcID"] = 189610,
},
[293986] = {
["npcID"] = 151476,
},
[224823] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blighted Ghoul",
["npcID"] = 109824,
},
[300129] = {
["npcID"] = 152009,
},
["228254"] = {
["npcID"] = 114626,
},
[423417] = {
["isChanneled"] = true,
["source"] = "Man'ari Sycophant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208856,
},
[371812] = {
["npcID"] = 6517,
},
[306280] = {
["npcID"] = 155172,
},
[169840] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infested Icecaller",
["npcID"] = 84989,
},
[118162] = {
["encounterName"] = "The Spirit Kings",
["source"] = "Subetai the Swift",
["encounterID"] = 1436,
["event"] = "SPELL_CAST_START",
["npcID"] = 60710,
},
[144563] = {
["encounterName"] = "Sha of Pride",
["source"] = "Sha of Pride",
["encounterID"] = 1604,
["event"] = "SPELL_CAST_START",
["npcID"] = 71734,
},
[313763] = {
["npcID"] = 156320,
},
[118558] = {
["source"] = "Unga Fish-Getter",
["event"] = "SPELL_CAST_START",
["npcID"] = 60299,
},
[396388] = {
["source"] = "Glacias",
["event"] = "SPELL_CAST_START",
["npcID"] = 199028,
},
[196144] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mak'rana Siltwalker",
["npcID"] = 91790,
},
[413806] = {
["source"] = "Cenrrrn Cirrgl Tideshifter",
["event"] = "SPELL_CAST_START",
["npcID"] = 204516,
},
[211079] = {
["source"] = "Nightborne Reclaimer",
["event"] = "SPELL_CAST_START",
["npcID"] = 105915,
},
[176685] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lava Fury",
["npcID"] = 88404,
},
[322614] = {
["encounterName"] = "Tred'ova",
["encounterID"] = 2393,
["npcID"] = 164517,
},
[373943] = {
["source"] = "Wilted Oak",
["event"] = "SPELL_CAST_START",
["npcID"] = 186229,
},
[408677] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Scaleguard",
["npcID"] = 198871,
},
[357735] = {
["encounterName"] = "Painsmith Raznal",
["encounterID"] = 2430,
["npcID"] = 179847,
},
[300087] = {
["npcID"] = 150251,
},
[285020] = {
["encounterName"] = "Tussle Tonks",
["npcID"] = 144244,
["encounterID"] = 2257,
},
[119575] = {
["source"] = "Wildscale Herbalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 58216,
},
[321038] = {
["npcID"] = 162039,
},
[12470] = {
["npcID"] = 32340,
},
[396392] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dueling Student",
["npcID"] = 199377,
},
[425062] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Steelshaper",
["npcID"] = 210173,
},
[16587] = {
["source"] = "Vile Tutor",
["event"] = "SPELL_CAST_START",
["npcID"] = 8548,
},
[148003] = {
["npcID"] = 72896,
},
[79883] = {
["source"] = "Heavy Mook",
["event"] = "SPELL_CAST_START",
["npcID"] = 67399,
},
[330784] = {
["npcID"] = 174197,
},
[138607] = {
["source"] = "Amani'shi Flame Chanter",
["event"] = "SPELL_CAST_START",
["npcID"] = 69909,
},
[199193] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Dantalionax",
["encounterID"] = 1835,
["event"] = "SPELL_CAST_START",
["npcID"] = 98970,
},
[135403] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunwalker Chagon",
["npcID"] = 67548,
},
[196157] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Shadowmoon Technician",
["npcID"] = 99645,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[146975] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'kron Iron Scorpion",
["npcID"] = 73194,
},
[117519] = {
["encounterName"] = "Protectors of the Endless",
["source"] = "Protector Kaolan",
["encounterID"] = 1409,
["event"] = "SPELL_CAST_START",
["npcID"] = 60583,
},
[136769] = {
["encounterName"] = "Horridon",
["source"] = "Horridon",
["npcID"] = 68476,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1575,
},
[138817] = {
["source"] = "Pterrorwing Skyscreamer",
["event"] = "SPELL_CAST_START",
["npcID"] = 70020,
},
[114449] = {
["source"] = "Captain Korthok",
["event"] = "SPELL_CAST_START",
["npcID"] = 65152,
},
[176664] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jeron Emberfall",
["npcID"] = 88178,
},
[355438] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 176563,
["encounterID"] = 2440,
},
[336910] = {
["npcID"] = 162872,
},
[46988] = {
["source"] = "Captain Balinda Stonehearth",
["event"] = "SPELL_CAST_START",
["npcID"] = 11949,
},
[400492] = {
["source"] = "Zaqali Shrineguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 202803,
},
[136770] = {
["encounterName"] = "Horridon",
["source"] = "Horridon",
["npcID"] = 68476,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1575,
},
[155201] = {
["encounterName"] = "Blast Furnace",
["source"] = "Furnace Engineer",
["npcID"] = 88820,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1690,
},
[119586] = {
["npcID"] = 60491,
},
[106526] = {
["encounterName"] = "Wise Mari",
["source"] = "Wise Mari",
["encounterID"] = 1418,
["event"] = "SPELL_CAST_START",
["npcID"] = 56448,
},
[427162] = {
["event"] = "SPELL_CAST_START",
["source"] = "Amalgamation of Dreams",
["npcID"] = 209915,
},
[375919] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ashen Groveripper",
["npcID"] = 187872,
},
[347249] = {
["encounterName"] = "So'azmi",
["npcID"] = 175806,
["encounterID"] = 2437,
},
[328069] = {
["npcID"] = 168240,
},
[371824] = {
["source"] = "Nokhud Sentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 185357,
},
[404473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Galakhad",
["npcID"] = 200717,
},
[396400] = {
["source"] = "Glacias",
["event"] = "SPELL_CAST_START",
["npcID"] = 199028,
},
[241213] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lunar Archer",
["npcID"] = 120721,
},
[194112] = {
["encounterName"] = "God-King Skovald",
["source"] = "God-King Skovald",
["encounterID"] = 1808,
["event"] = "SPELL_CAST_START",
["npcID"] = 95675,
},
[359538] = {
["npcID"] = 181961,
},
[330868] = {
["npcID"] = 160495,
},
[200256] = {
["source"] = "Arcane Minion",
["event"] = "SPELL_CAST_START",
["npcID"] = 101549,
},
[373084] = {
["source"] = "Irontorch Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 189466,
},
[421570] = {
["encounterName"] = "Council of Dreams",
["source"] = "Aerwynn",
["npcID"] = 208365,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[265337] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gorestained Piglet",
["npcID"] = 135048,
},
[338933] = {
["npcID"] = 172401,
},
[167439] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stonehide Riverbeast",
["npcID"] = 82310,
},
[385399] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["encounterID"] = 2584,
["event"] = "SPELL_CAST_START",
["npcID"] = 186738,
},
[328016] = {
["npcID"] = 168578,
},
[385363] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maneet",
["npcID"] = 188704,
},
[388211] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shale Giant",
["npcID"] = 188122,
},
[375924] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Olaf",
["event"] = "SPELL_CAST_START",
["npcID"] = 184580,
},
[295929] = {
["npcID"] = 154030,
},
[128803] = {
["source"] = "Shek'zeer Clutch-Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 64559,
},
[177731] = {
["encounterName"] = "Witherbark",
["source"] = "Enchanted Waters",
["npcID"] = 88862,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1746,
},
[343159] = {
["npcID"] = 173446,
},
[136716] = {
["source"] = "Echo of Kros",
["event"] = "SPELL_CAST_START",
["npcID"] = 69341,
},
[164357] = {
["encounterName"] = "Witherbark",
["source"] = "Witherbark",
["npcID"] = 81522,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1746,
},
[293861] = {
["npcID"] = 151613,
},
[123652] = {
["source"] = "Kargesh Ribcrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 61947,
},
[315742] = {
["npcID"] = 166012,
},
[388801] = {
["source"] = "Risen Warrior",
["event"] = "SPELL_CAST_START",
["npcID"] = 195855,
},
[96804] = {
["npcID"] = 52076,
},
[197117] = {
["encounterName"] = "Helya",
["source"] = "Piercing Tentacle",
["encounterID"] = 1824,
["event"] = "SPELL_CAST_START",
["npcID"] = 100188,
},
[429172] = {
["encounterName"] = "Mindbender Ghur'sha",
["source"] = "Mindbender Ghur'sha",
["npcID"] = 40788,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1046,
},
[351353] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 177891,
["encounterID"] = 2435,
},
[136708] = {
["encounterName"] = "Horridon",
["source"] = "Sul'lithuz Stonegazer",
["npcID"] = 69172,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1575,
},
[32903] = {
["source"] = "Jungle Skitterer",
["event"] = "SPELL_CAST_START",
["npcID"] = 58067,
},
[330875] = {
["npcID"] = 169893,
},
[16102] = {
["source"] = "Shadowmoon Summoner",
["event"] = "SPELL_CAST_START",
["npcID"] = 17395,
},
[355450] = {
["npcID"] = 177185,
},
[375929] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["encounterID"] = 2580,
["event"] = "SPELL_CAST_START",
["npcID"] = 186151,
},
[16588] = {
["source"] = "Krasari Runekeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 65598,
},
[294015] = {
["npcID"] = 151476,
},
[315076] = {
["npcID"] = 159685,
},
[359547] = {
["npcID"] = 182392,
},
[139777] = {
["source"] = "Stone Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 70324,
},
[429176] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gilgoblin Aquamage",
["npcID"] = 40943,
},
[404601] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jamoku",
["npcID"] = 199914,
},
[343165] = {
["npcID"] = 169041,
},
[265346] = {
["source"] = "Dreadwing Raven",
["event"] = "SPELL_CAST_START",
["npcID"] = 135049,
},
[200261] = {
["source"] = "Soul-Torn Champion",
["event"] = "SPELL_CAST_START",
["npcID"] = 98243,
},
[124854] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eshelon",
["npcID"] = 50772,
},
[357920] = {
["npcID"] = 179684,
},
[265347] = {
["source"] = "Dreadwing Raven",
["event"] = "SPELL_CAST_START",
["npcID"] = 135049,
},
[394746] = {
["source"] = "Liskron the Dazzling",
["event"] = "SPELL_CAST_START",
["npcID"] = 193273,
},
[144969] = {
["encounterName"] = "Garrosh Hellscream",
["source"] = "Garrosh Hellscream",
["encounterID"] = 1623,
["event"] = "SPELL_CAST_START",
["npcID"] = 71865,
},
[264608] = {
["encounterName"] = "Council o' Captains",
["source"] = "Rummy Mancomb",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 133219,
},
["405437"] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Shadowflame Amalgamation",
["encounterID"] = 2687,
["event"] = "SPELL_CAST_START",
["npcID"] = 201934,
},
[297937] = {
["encounterName"] = "Queen Azshara",
["npcID"] = 153060,
["encounterID"] = 2299,
},
[202310] = {
["encounterName"] = "Millificent Manastorm",
["source"] = "Millificent Manastorm",
["encounterID"] = 1847,
["event"] = "SPELL_CAST_START",
["npcID"] = 101976,
},
[392317] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zagdech",
["npcID"] = 194601,
},
[106877] = {
["encounterName"] = "Sha of Violence",
["source"] = "Sha of Violence",
["npcID"] = 56719,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1305,
},
[138437] = {
["source"] = "Skumblade Seadragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 69226,
},
[355456] = {
["npcID"] = 178958,
},
[392318] = {
["source"] = "Ohn'ir Initiate",
["event"] = "SPELL_CAST_START",
["npcID"] = 193985,
},
[429180] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cycle Warden",
["npcID"] = 210518,
},
[140526] = {
["source"] = "Fleshcrafter Hoku",
["event"] = "SPELL_CAST_START",
["npcID"] = 69435,
},
[196078] = {
["encounterName"] = "Amalgam of Souls",
["source"] = "Amalgam of Souls",
["encounterID"] = 1832,
["event"] = "SPELL_CAST_START",
["npcID"] = 98542,
},
[277451] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scavenging Opportunist",
["npcID"] = 202673,
},
[396415] = {
["event"] = "SPELL_CAST_START",
["source"] = "Galestrike Proto-Dragon",
["npcID"] = 187211,
},
[295311] = {
["npcID"] = 154033,
},
[51587] = {
["source"] = "Dragonflayer Spiritualist",
["event"] = "SPELL_CAST_START",
["npcID"] = 28410,
},
[375937] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["encounterID"] = 2580,
["event"] = "SPELL_CAST_START",
["npcID"] = 186151,
},
[330884] = {
["npcID"] = 168244,
},
[50245] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Weedykrabs",
["npcID"] = 165189,
},
[388225] = {
["source"] = "Frostfist",
["event"] = "SPELL_CAST_START",
["npcID"] = 192030,
},
[304065] = {
["npcID"] = 155899,
},
[173642] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormshield Field Marshal",
["npcID"] = 82974,
},
[200905] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Inquisitor Tormentorum",
["npcID"] = 96015,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1850,
},
[145653] = {
["encounterName"] = "Fallen Protectors",
["source"] = "Embodied Gloom",
["npcID"] = 71477,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1598,
},
[362951] = {
["npcID"] = 181587,
},
[423464] = {
["source"] = "Hooded Saboteur",
["event"] = "SPELL_CAST_START",
["npcID"] = 208836,
},
["413385"] = {
["source"] = "Minister of Air",
["event"] = "SPELL_CAST_START",
["npcID"] = 45930,
},
[120215] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Abomination of Anger",
["npcID"] = 61707,
},
[157165] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Zealot",
["npcID"] = 77132,
},
[298121] = {
["encounterName"] = "Queen Azshara",
["npcID"] = 153059,
["encounterID"] = 2299,
},
[384132] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["encounterID"] = 2585,
["event"] = "SPELL_CAST_START",
["npcID"] = 186739,
},
[273547] = {
["npcID"] = 142072,
},
[114472] = {
["source"] = "Warlord Rok'nah",
["event"] = "SPELL_CAST_START",
["npcID"] = 65442,
},
[298122] = {
["encounterName"] = "Abyssal Commander Sivara",
["npcID"] = 151881,
["encounterID"] = 2298,
},
[338868] = {
["npcID"] = 167526,
},
[338867] = {
["npcID"] = 167526,
},
[195046] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Oracle",
["npcID"] = 95861,
},
[418208] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Prophet",
["npcID"] = 206474,
},
[384134] = {
["source"] = "Nokhud Warspear",
["event"] = "SPELL_CAST_START",
["npcID"] = 192791,
},
[355464] = {
["npcID"] = 178165,
},
[326794] = {
["npcID"] = 167876,
},
[347273] = {
["npcID"] = 169041,
},
[271287] = {
["npcID"] = 141123,
},
[125736] = {
["source"] = "Apparition of Fear",
["event"] = "SPELL_CAST_START",
["npcID"] = 64368,
},
[412806] = {
["source"] = "Risen Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 205804,
},
[396423] = {
["event"] = "SPELL_CAST_START",
["source"] = "Galestrike Proto-Dragon",
["npcID"] = 187211,
},
[80009] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pheary Sparkrocket",
["npcID"] = 88781,
},
[146222] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Blade of the Hundred Steps",
["npcID"] = 72787,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[375945] = {
["source"] = "Fleecepelt Argali",
["event"] = "SPELL_CAST_START",
["npcID"] = 187975,
},
[187876] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidscribe Aathalos",
["npcID"] = 94802,
},
[334988] = {
["npcID"] = 171596,
},
[296523] = {
["npcID"] = 152708,
},
[295856] = {
["npcID"] = 152396,
},
[119593] = {
["encounterName"] = "Sha of Fear",
["source"] = "Sha of Fear",
["encounterID"] = 1431,
["event"] = "SPELL_CAST_START",
["npcID"] = 60999,
},
[169445] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twisted Abomination",
["npcID"] = 84767,
},
[306319] = {
["encounterName"] = "Dark Inquisitor Xanesh",
["source"] = "Dark Inquisitor Xanesh",
["npcID"] = 156575,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2328,
},
[353721] = {
["npcID"] = 179135,
},
[338857] = {
["npcID"] = 167527,
},
[387508] = {
["source"] = "Time-Lost Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 187244,
},
[388002] = {
["source"] = "Bertinuat",
["event"] = "SPELL_CAST_START",
["npcID"] = 196288,
},
[211757] = {
["source"] = "Eredar Chaosbringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 105617,
},
[385958] = {
["encounterName"] = "Vexamus",
["source"] = "Vexamus",
["encounterID"] = 2562,
["event"] = "SPELL_CAST_START",
["npcID"] = 194181,
},
[357284] = {
["npcID"] = 180432,
},
[367522] = {
["npcID"] = 181059,
},
[392332] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zumakh",
["npcID"] = 194624,
},
[310969] = {
["npcID"] = 159011,
},
[343155] = {
["npcID"] = 173446,
},
["369675"] = {
["source"] = "Stonevault Geomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 184022,
},
[375950] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Icecaller",
["npcID"] = 190377,
},
[227800] = {
["encounterName"] = "Maiden of Virtue",
["encounterID"] = 1954,
["npcID"] = 113971,
},
[338856] = {
["npcID"] = 167527,
},
[138040] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zandalari Warscout",
["npcID"] = 69768,
},
[320019] = {
["npcID"] = 165587,
},
[396430] = {
["source"] = "Arcane Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 190779,
},
[316859] = {
["npcID"] = 170042,
},
[355473] = {
["npcID"] = 179821,
},
[252711] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Antoran Soulshaper",
["npcID"] = 127587,
},
[334747] = {
["npcID"] = 166302,
},
[123121] = {
["encounterName"] = "Lei Shi",
["source"] = "Lei Shi",
["encounterID"] = 1506,
["event"] = "SPELL_CAST_START",
["npcID"] = 62983,
},
[392336] = {
["source"] = "Uncontrolled Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 181775,
},
[147027] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'kron Wild Gun",
["npcID"] = 73250,
},
[347283] = {
["encounterName"] = "The Tarragrue",
["npcID"] = 175611,
["encounterID"] = 2423,
},
[338852] = {
["npcID"] = 167527,
},
[341977] = {
["npcID"] = 170690,
},
[253517] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dazar'ai Confessor",
["npcID"] = 122973,
},
[325205] = {
["npcID"] = 166936,
},
[324513] = {
["source"] = "Experimental Misstep",
["event"] = "SPELL_CAST_START",
["npcID"] = 199859,
},
[133939] = {
["encounterName"] = "Tortos",
["source"] = "Tortos",
["npcID"] = 67977,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1565,
},
[135649] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wolf-Rider Gaja",
["npcID"] = 67413,
},
[123691] = {
["source"] = "Kang Bramblestaff",
["event"] = "SPELL_CAST_START",
["npcID"] = 58814,
},
[76590] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Watcher",
["npcID"] = 40936,
},
[404626] = {
["source"] = "Han'thul",
["event"] = "SPELL_CAST_START",
["npcID"] = 198914,
},
[55704] = {
["source"] = "Earthen Warder",
["event"] = "SPELL_CAST_START",
["npcID"] = 29981,
},
[265371] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enthralled Guard",
["npcID"] = 131585,
},
[33919] = {
["encounterName"] = "Tavarok",
["source"] = "Tavarok",
["encounterID"] = 1901,
["event"] = "SPELL_CAST_START",
["npcID"] = 18343,
},
[316993] = {
["npcID"] = 167443,
},
[125069] = {
["source"] = "Amber-Ridden Mushan",
["event"] = "SPELL_CAST_START",
["npcID"] = 63568,
},
[265372] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bewitched Captain",
["npcID"] = 131587,
},
[420746] = {
["source"] = "Kaldorei Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 207117,
},
[355479] = {
["npcID"] = 179821,
},
[392341] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tevgai",
["npcID"] = 195132,
},
[255567] = {
["event"] = "SPELL_CAST_START",
["source"] = "T'lonja",
["npcID"] = 128455,
},
[142934] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Mogu Shadow Ritualist",
["npcID"] = 71393,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[375251] = {
["encounterName"] = "Magmatusk",
["source"] = "Magmatusk",
["npcID"] = 181861,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2610,
},
[149975] = {
["encounterName"] = "Magmolatus",
["source"] = "Calamity",
["npcID"] = 74571,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1655,
},
[351117] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 177889,
["encounterID"] = 2435,
},
[406399] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Arcanist",
["npcID"] = 201736,
},
[421013] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["npcID"] = 209333,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2820,
},
[227789] = {
["encounterName"] = "Maiden of Virtue",
["encounterID"] = 1954,
["npcID"] = 113971,
},
[406405] = {
["event"] = "SPELL_CAST_START",
["source"] = "Calibrating Scent Matrix",
["npcID"] = 203606,
},
[40317] = {
["npcID"] = 17729,
},
[416264] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["encounterID"] = 2673,
["event"] = "SPELL_CAST_START",
["npcID"] = 199000,
},
[162622] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alune Windmane",
["npcID"] = 80488,
},
[412823] = {
["event"] = "SPELL_CAST_START",
["source"] = "Neltharion",
["npcID"] = 198968,
},
[372397] = {
["source"] = "Shadepaw Skulker",
["event"] = "SPELL_CAST_START",
["npcID"] = 190188,
},
[124654] = {
["event"] = "SPELL_CAST_START",
["source"] = "Water Spirit",
["npcID"] = 63519,
},
[209495] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guardian Construct",
["npcID"] = 104270,
},
[265377] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fanatical Headhunter",
["npcID"] = 133663,
},
[397904] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sha-Touched Guardian",
["npcID"] = 200131,
},
[197433] = {
["source"] = "Lightforged Cleric",
["event"] = "SPELL_CAST_START",
["npcID"] = 124778,
},
[212564] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Tormenting Orb",
["npcID"] = 107114,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1850,
},
[396317] = {
["source"] = "Loamas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199030,
},
[322433] = {
["npcID"] = 162057,
},
[273570] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ashtail Bandicoon",
["npcID"] = 142454,
},
["338406"] = {
["npcID"] = 173051,
},
[377421] = {
["source"] = "Nimblewing Striker",
["event"] = "SPELL_CAST_START",
["npcID"] = 192938,
},
[144985] = {
["encounterName"] = "Garrosh Hellscream",
["source"] = "Garrosh Hellscream",
["encounterID"] = 1623,
["event"] = "SPELL_CAST_START",
["npcID"] = 71865,
},
["192288"] = {
["encounterName"] = "Hyrja",
["event"] = "SPELL_CAST_START",
["source"] = "Olmyr the Enlightened",
["npcID"] = 97202,
},
[146899] = {
["encounterName"] = "Galakras",
["source"] = "Dragonmaw Bonecrusher",
["encounterID"] = 1622,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 72945,
},
[131534] = {
["source"] = "Rothek",
["event"] = "SPELL_CAST_START",
["npcID"] = 62581,
},
[301947] = {
["encounterName"] = "The Queen's Court",
["npcID"] = 152852,
["encounterID"] = 2311,
},
[404636] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lieutenant Narlena",
["npcID"] = 202244,
},
[392349] = {
["event"] = "SPELL_CAST_START",
["source"] = "Khuumog",
["npcID"] = 194761,
},
[428374] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Lady Naz'jar",
["npcID"] = 40586,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[128232] = {
["source"] = "Scarlet Evangelist",
["event"] = "SPELL_CAST_START",
["npcID"] = 58685,
},
[421020] = {
["encounterName"] = "Council of Dreams",
["source"] = "Urctos",
["npcID"] = 208363,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[301667] = {
["npcID"] = 150292,
},
[320571] = {
["npcID"] = 163128,
},
[400542] = {
["source"] = "Kalecgos",
["event"] = "SPELL_CAST_START",
["npcID"] = 193460,
},
[322723] = {
["npcID"] = 165591,
},
[227779] = {
["encounterName"] = "Shade of Medivh",
["encounterID"] = 1965,
["npcID"] = 114350,
},
[396447] = {
["event"] = "SPELL_CAST_START",
["source"] = "Apex Proto-Dragon",
["npcID"] = 192717,
},
[159322] = {
["source"] = "Frostwolf Shaman",
["event"] = "SPELL_CAST_START",
["npcID"] = 74622,
},
[404639] = {
["source"] = "Han'thul",
["event"] = "SPELL_CAST_START",
["npcID"] = 198914,
},
[298669] = {
["encounterName"] = "Trixie & Naeno",
["npcID"] = 150712,
["encounterID"] = 2312,
},
[171570] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iron Dockworker",
["npcID"] = 84841,
},
[384161] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Irontorch",
["npcID"] = 189464,
},
[330711] = {
["encounterName"] = "Shriekwing",
["npcID"] = 164406,
["encounterID"] = 2398,
},
[359587] = {
["npcID"] = 179004,
},
[189944] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mystic Velruun",
["npcID"] = 95602,
},
[335013] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2405,
["npcID"] = 166644,
},
[371875] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Trainee",
["npcID"] = 189266,
},
[191941] = {
["encounterName"] = "Tirathon Saltheril",
["source"] = "Tirathon Saltheril",
["npcID"] = 95885,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1815,
},
[392870] = {
["source"] = "Uurhilt",
["event"] = "SPELL_CAST_START",
["npcID"] = 194760,
},
[114480] = {
["source"] = "Sky-Captain \"Dashing\" Dazrip",
["event"] = "SPELL_CAST_START",
["npcID"] = 65609,
},
[136797] = {
["encounterName"] = "Horridon",
["source"] = "Zandalari Dinomancer",
["npcID"] = 69221,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1575,
},
[253526] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dazar'ai Confessor",
["npcID"] = 122973,
},
[330919] = {
["npcID"] = 169912,
},
[368295] = {
["npcID"] = 183953,
},
[233048] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felblade Devastator",
["npcID"] = 118776,
},
[326824] = {
["encounterName"] = "Sire Denathrius",
["npcID"] = 167999,
["encounterID"] = 2407,
},
[363686] = {
["npcID"] = 179043,
},
[167516] = {
["npcID"] = 86809,
},
["200248"] = {
["npcID"] = 98280,
},
["241784"] = {
["npcID"] = 114629,
},
[335528] = {
["npcID"] = 159755,
},
[344941] = {
["npcID"] = 162845,
},
[177756] = {
["encounterName"] = "Blast Furnace",
["source"] = "Bellows Operator",
["npcID"] = 76811,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1690,
},
[414280] = {
["source"] = "Infinite Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 205709,
},
[396454] = {
["event"] = "SPELL_CAST_START",
["source"] = "Insatiable Hornswog",
["npcID"] = 185715,
},
[328558] = {
["npcID"] = 159027,
},
[421029] = {
["encounterName"] = "Council of Dreams",
["source"] = "Pip",
["npcID"] = 208367,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[326827] = {
["npcID"] = 162040,
},
[422964] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aurostor",
["npcID"] = 209574,
},
[335019] = {
["npcID"] = 156434,
},
[172860] = {
["npcID"] = 83025,
},
[114874] = {
["npcID"] = 59613,
},
[178518] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Dark Prophet",
["npcID"] = 88609,
},
[319406] = {
["npcID"] = 159233,
},
[271329] = {
["source"] = "Pathfinder Tacha",
["event"] = "SPELL_CAST_START",
["npcID"] = 200263,
},
[326829] = {
["npcID"] = 167876,
},
[255577] = {
["encounterName"] = "Priestess Alun'za",
["source"] = "Priestess Alun'za",
["npcID"] = 122967,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2084,
},
[415309] = {
["source"] = "Great Glorious Alliance Paladin",
["event"] = "SPELL_CAST_START",
["npcID"] = 207579,
},
[298160] = {
["npcID"] = 153451,
},
[294064] = {
["npcID"] = 151658,
},
[330926] = {
["npcID"] = 172395,
},
[38618] = {
["npcID"] = 182155,
},
[308077] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bootus",
["npcID"] = 157956,
},
[187998] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowfel Warden",
["npcID"] = 93968,
},
[420817] = {
["source"] = "Kaldorei Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 207117,
},
[118963] = {
["source"] = "Glintrok Skulker",
["event"] = "SPELL_CAST_START",
["npcID"] = 61240,
},
[322736] = {
["encounterName"] = "Hakkar, the Soulflayer",
["npcID"] = 164558,
["encounterID"] = 2395,
},
[359102] = {
["npcID"] = 176533,
},
[115506] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scarlet Flamethrower",
["npcID"] = 59705,
},
[168380] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rescued Vanguard Priest",
["npcID"] = 84202,
},
[404652] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jamoku",
["npcID"] = 199914,
},
[397907] = {
["event"] = "SPELL_CAST_START",
["source"] = "Baalgar the Watchful",
["npcID"] = 104274,
},
[255579] = {
["encounterName"] = "Priestess Alun'za",
["source"] = "Priestess Alun'za",
["npcID"] = 122967,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2084,
},
[339619] = {
["npcID"] = 166679,
},
[371887] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Violetwing Stagbeetle",
["npcID"] = 188067,
},
[392366] = {
["source"] = "Awakened Juggernaut",
["event"] = "SPELL_CAST_START",
["npcID"] = 197793,
},
[391118] = {
["source"] = "Scalebane Lieutenant",
["event"] = "SPELL_CAST_START",
["npcID"] = 191739,
},
[404654] = {
["source"] = "Grugoth the Hullcrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 200721,
},
[339122] = {
["npcID"] = 167525,
},
[133548] = {
["isChanneled"] = true,
["source"] = "Darkhatched Sorcerer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 67748,
},
[56405] = {
["encounterName"] = "Gothik the Harvester",
["source"] = "Gothik the Harvester",
["encounterID"] = 1109,
["event"] = "SPELL_CAST_START",
["npcID"] = 16060,
},
[142947] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Modified Anima Golem",
["npcID"] = 71395,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[209404] = {
["source"] = "Duskwatch Arcanist",
["event"] = "SPELL_CAST_START",
["npcID"] = 104247,
},
[326836] = {
["npcID"] = 162039,
},
[355294] = {
["encounterName"] = "The Nine",
["npcID"] = 175726,
["encounterID"] = 2429,
},
[146757] = {
["encounterName"] = "Galakras",
["source"] = "Dragonmaw Tidal Shaman",
["encounterID"] = 1622,
["event"] = "SPELL_CAST_START",
["npcID"] = 72958,
},
[257629] = {
["source"] = "Unfinished Stone Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 201586,
},
[326837] = {
["npcID"] = 162040,
},
[368287] = {
["source"] = "Bonebolt Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 185534,
},
[142948] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Hisek the Swarmkeeper",
["encounterID"] = 1593,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 71153,
},
[228164] = {
["npcID"] = 114584,
},
[201141] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Wrathguard Bladelord",
["npcID"] = 98810,
},
[264734] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["npcID"] = 131863,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2115,
},
[335030] = {
["npcID"] = 156779,
},
[322743] = {
["npcID"] = 177540,
},
[375988] = {
["source"] = "Nimblewing Slyvern",
["event"] = "SPELL_CAST_START",
["npcID"] = 191051,
},
[194942] = {
["encounterName"] = "Glazer",
["source"] = "Glazer",
["npcID"] = 95887,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1817,
},
[330573] = {
["npcID"] = 155251,
},
[325036] = {
["npcID"] = 167951,
},
[196194] = {
["event"] = "SPELL_CAST_START",
["source"] = "Steeljaw Grizzly",
["npcID"] = 96677,
},
[82742] = {
["source"] = "Zandalari Venomblade",
["event"] = "SPELL_CAST_START",
["npcID"] = 70328,
},
[367798] = {
["npcID"] = 181249,
},
[322745] = {
["npcID"] = 170205,
},
[343224] = {
["npcID"] = 175819,
},
[373729] = {
["npcID"] = 190128,
},
[357029] = {
["npcID"] = 180335,
},
[412479] = {
["event"] = "SPELL_CAST_START",
["source"] = "Warchanter Ronvath",
["npcID"] = 200128,
},
[367428] = {
["npcID"] = 184962,
},
[324417] = {
["npcID"] = 162133,
},
[200291] = {
["source"] = "Risen Scout",
["event"] = "SPELL_CAST_START",
["npcID"] = 98691,
},
[334664] = {
["npcID"] = 171341,
},
[275175] = {
["npcID"] = 138794,
},
[265407] = {
["event"] = "SPELL_CAST_START",
["source"] = "Banquet Steward",
["npcID"] = 131586,
},
[67280] = {
["source"] = "Overlord Agmar",
["event"] = "SPELL_CAST_START",
["npcID"] = 34922,
},
[169346] = {
["event"] = "SPELL_CAST_START",
["source"] = "Titarus",
["npcID"] = 83713,
},
[391849] = {
["npcID"] = 191406,
},
[330940] = {
["npcID"] = 168244,
},
[375605] = {
["source"] = "Unbound Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 187036,
},
[147818] = {
["npcID"] = 72876,
},
[271174] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pallid Gorger",
["npcID"] = 137830,
},
[334534] = {
["npcID"] = 171805,
},
[400569] = {
["event"] = "SPELL_CAST_START",
["source"] = "Haleh",
["npcID"] = 199370,
},
[369921] = {
["source"] = "Blazing Firesquall",
["event"] = "SPELL_CAST_START",
["npcID"] = 195448,
},
["372735"] = {
["source"] = "Flashfrost Earthshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 187969,
},
[198245] = {
["encounterName"] = "Smashspite the Hateful",
["source"] = "Smashspite the Hateful",
["npcID"] = 98949,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1834,
},
[302272] = {
["encounterName"] = "HK-8 Aerial Oppression Unit",
["npcID"] = 150190,
["encounterID"] = 2291,
},
[388283] = {
["encounterName"] = "Granyth",
["source"] = "Granyth",
["encounterID"] = 2637,
["event"] = "SPELL_CAST_START",
["npcID"] = 186616,
},
[326847] = {
["npcID"] = 167876,
},
[396475] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mellg the Ancient",
["npcID"] = 196381,
},
[405143] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Lady Shaz'ra",
["npcID"] = 200885,
},
[243299] = {
["source"] = "Shadow Council Warlock",
["event"] = "SPELL_CAST_START",
["npcID"] = 117776,
},
[326848] = {
["npcID"] = 164110,
},
[396476] = {
["event"] = "SPELL_CAST_START",
["source"] = "Piskato",
["npcID"] = 195973,
},
[302274] = {
["encounterName"] = "HK-8 Aerial Oppression Unit",
["npcID"] = 150295,
["encounterID"] = 2291,
},
[136725] = {
["encounterName"] = "Horridon",
["source"] = "Farraki Wastewalker",
["npcID"] = 69175,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1575,
},
[392381] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fledgling Thunder Lizard",
["npcID"] = 198815,
},
[382573] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earthen Guardian",
["npcID"] = 184131,
},
[367807] = {
["source"] = "Worldbreaker Escapee",
["event"] = "SPELL_CAST_START",
["npcID"] = 185626,
},
[243300] = {
["source"] = "Shadow Council Warlock",
["event"] = "SPELL_CAST_START",
["npcID"] = 117776,
},
[161150] = {
["npcID"] = 80936,
},
[375599] = {
["isChanneled"] = true,
["source"] = "Galestrike Primalist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 191315,
},
[384663] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forgewrought Monstrosity",
["npcID"] = 194816,
},
[425149] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Juggernaut",
["npcID"] = 210172,
},
[326851] = {
["encounterName"] = "Sire Denathrius",
["npcID"] = 167406,
["encounterID"] = 2407,
},
[326450] = {
["npcID"] = 164562,
},
[341084] = {
["npcID"] = 168961,
},
[388288] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Elemental",
["npcID"] = 190780,
},
[408767] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ritualmaster Skarna",
["npcID"] = 202274,
},
[396019] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Golden Beetle",
["npcID"] = 59545,
},
[233062] = {
["encounterName"] = "Goroth",
["source"] = "Goroth",
["npcID"] = 115844,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2032,
},
[345078] = {
["npcID"] = 170026,
},
["427672"] = {
["encounterName"] = "Commander Ulthok",
["source"] = "Commander Ulthok",
["encounterID"] = 1044,
["event"] = "SPELL_CAST_START",
["npcID"] = 40765,
},
[138668] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drakkari Frost Warden",
["npcID"] = 69910,
},
[302279] = {
["encounterName"] = "HK-8 Aerial Oppression Unit",
["npcID"] = 150295,
["encounterID"] = 2291,
},
[388290] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Dathea, Ascended",
["encounterID"] = 2635,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 189813,
},
[303924] = {
["npcID"] = 155911,
},
[320293] = {
["encounterName"] = "An Affront of Challengers",
["encounterID"] = 2391,
["npcID"] = 164461,
},
[143746] = {
["encounterName"] = "Fallen Protectors",
["source"] = "Embodied Despair",
["npcID"] = 71474,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1598,
},
[355525] = {
["encounterName"] = "Painsmith Raznal",
["encounterID"] = 2430,
["npcID"] = 176523,
},
[348974] = {
["encounterName"] = "The Eye of the Jailer",
["npcID"] = 175725,
["encounterID"] = 2433,
},
[264931] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["npcID"] = 131863,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2115,
},
[87471] = {
["source"] = "Brineshell Snapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 63981,
},
[210537] = {
["npcID"] = 182426,
},
[322550] = {
["encounterName"] = "Tred'ova",
["encounterID"] = 2393,
["npcID"] = 164517,
},
[203163] = {
["source"] = "Felspite Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 102788,
},
[351057] = {
["encounterName"] = "So'leah",
["npcID"] = 177269,
["encounterID"] = 2442,
},
[421059] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aurostor",
["npcID"] = 209574,
},
[364180] = {
["npcID"] = 183596,
},
[412868] = {
["source"] = "Karokta",
["event"] = "SPELL_CAST_START",
["npcID"] = 203625,
},
[207261] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Patrol Captain Gerdo",
["npcID"] = 104215,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[138772] = {
["event"] = "SPELL_CAST_START",
["source"] = "Horned Battlebeast",
["npcID"] = 69142,
},
[112853] = {
["source"] = "Lorekeeper Vaeldrin",
["event"] = "SPELL_CAST_START",
["npcID"] = 58894,
},
[225732] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lady Velandras Ravencrest",
["npcID"] = 98538,
},
[134767] = {
["source"] = "Muerta",
["event"] = "SPELL_CAST_START",
["npcID"] = 68322,
},
[207278] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Patrol Captain Gerdo",
["npcID"] = 104215,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[253544] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dazar'ai Confessor",
["npcID"] = 122973,
},
[224874] = {
["source"] = "Lady Liadrin",
["event"] = "SPELL_CAST_START",
["npcID"] = 110770,
},
[257640] = {
["source"] = "Unfinished Stone Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 201586,
},
[388296] = {
["source"] = "Crust Lurker",
["event"] = "SPELL_CAST_START",
["npcID"] = 192626,
},
[322557] = {
["npcID"] = 164920,
},
[331412] = {
["npcID"] = 168453,
},
[134768] = {
["source"] = "Muerta",
["event"] = "SPELL_CAST_START",
["npcID"] = 68322,
},
[136816] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zandalari Fetish-Binder",
["npcID"] = 69155,
},
[357143] = {
["npcID"] = 178646,
},
[373526] = {
["source"] = "Prismatic Monarch",
["event"] = "SPELL_CAST_START",
["npcID"] = 192380,
},
[392395] = {
["source"] = "Thunderhead",
["event"] = "SPELL_CAST_START",
["npcID"] = 197698,
},
[404681] = {
["event"] = "SPELL_CAST_START",
["source"] = "Storming Protector",
["npcID"] = 202990,
},
[392394] = {
["source"] = "Flamegullet",
["event"] = "SPELL_CAST_START",
["npcID"] = 197697,
},
[330958] = {
["npcID"] = 161396,
},
[134769] = {
["source"] = "Ubunti the Shade",
["event"] = "SPELL_CAST_START",
["npcID"] = 68320,
},
[322767] = {
["npcID"] = 164921,
},
[359629] = {
["npcID"] = 181359,
},
[357144] = {
["encounterName"] = "Fatescribe Roh-Kalo",
["encounterID"] = 2431,
["npcID"] = 180323,
},
[336666] = {
["npcID"] = 166012,
},
[377619] = {
["npcID"] = 46859,
},
[196206] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Shadowmoon Warlock",
["npcID"] = 99704,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[396492] = {
["event"] = "SPELL_CAST_START",
["source"] = "Slobberclaw",
["npcID"] = 195972,
},
[68821] = {
["event"] = "SPELL_CAST_START",
["source"] = "Apothecary Hummel",
["npcID"] = 36296,
},
[340724] = {
["npcID"] = 170643,
},
[389898] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Elemental",
["npcID"] = 196992,
},
[201567] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seacursed Slaver",
["npcID"] = 97043,
},
[392398] = {
["source"] = "Primal Thundercloud",
["event"] = "SPELL_CAST_START",
["npcID"] = 197509,
},
[388302] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Dathea, Ascended",
["encounterID"] = 2635,
["event"] = "SPELL_CAST_START",
["npcID"] = 189813,
},
["202181"] = {
["source"] = "Rockback Gnasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 91006,
},
[375630] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Drakonid Stormbringer",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191232,
},
[134771] = {
["source"] = "Ubunti the Shade",
["event"] = "SPELL_CAST_START",
["npcID"] = 68320,
},
[387826] = {
["source"] = "Ukhel Beastcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 195878,
},
[142745] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flame Hound",
["npcID"] = 70702,
},
[87762] = {
["event"] = "SPELL_CAST_START",
["source"] = "Minister of Air",
["npcID"] = 45930,
},
[335059] = {
["npcID"] = 171696,
},
[320512] = {
["npcID"] = 163892,
},
[196208] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Shadowmoon Warlock",
["npcID"] = 99704,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[351226] = {
["npcID"] = 178071,
},
[310026] = {
["npcID"] = 166159,
},
[388305] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glacial Giantess",
["npcID"] = 193075,
},
[16100] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nathanos Blightcaller",
["npcID"] = 50609,
},
[265433] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodsworn Defiler",
["npcID"] = 133912,
},
["397801"] = {
["encounterName"] = "Wise Mari",
["source"] = "Wise Mari",
["encounterID"] = 1418,
["event"] = "SPELL_CAST_START",
["npcID"] = 56448,
},
[355540] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[389848] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Taranthiza",
["npcID"] = 196970,
},
[123707] = {
["encounterName"] = "Grand Empress Shek'zeer",
["source"] = "Grand Empress Shek'zeer",
["encounterID"] = 1501,
["event"] = "SPELL_CAST_START",
["npcID"] = 62837,
},
[125865] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zar'thik Augurer",
["npcID"] = 64454,
},
[194956] = {
["encounterName"] = "Amalgam of Souls",
["source"] = "Amalgam of Souls",
["encounterID"] = 1832,
["event"] = "SPELL_CAST_START",
["npcID"] = 98542,
},
[361211] = {
["npcID"] = 182161,
},
[367500] = {
["source"] = "Bracken Warscourge",
["event"] = "SPELL_CAST_START",
["npcID"] = 185529,
},
[151558] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodmaul Ogre Mage",
["npcID"] = 75272,
},
[355542] = {
["npcID"] = 177917,
},
[199050] = {
["source"] = "Valarjar Shieldmaiden",
["event"] = "SPELL_CAST_START",
["npcID"] = 95832,
},
[330968] = {
["npcID"] = 174842,
},
[4962] = {
["source"] = "Crypt Beast",
["event"] = "SPELL_CAST_START",
["npcID"] = 10413,
},
[360075] = {
["npcID"] = 182210,
},
[294107] = {
["npcID"] = 151773,
},
[412884] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ysera",
["npcID"] = 198970,
},
[355979] = {
["npcID"] = 177911,
},
[388310] = {
["event"] = "SPELL_CAST_START",
["source"] = "Malfunctioning Protector",
["npcID"] = 198343,
},
[392406] = {
["source"] = "Storm Warrior",
["event"] = "SPELL_CAST_START",
["npcID"] = 197982,
},
[330970] = {
["npcID"] = 168723,
},
[330574] = {
["npcID"] = 161395,
},
[142760] = {
["source"] = "Kor'kron Dire Soldier",
["event"] = "SPELL_CAST_START",
["npcID"] = 70665,
},
[406282] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Naturalist",
["npcID"] = 201746,
},
[396503] = {
["source"] = "Loamas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199030,
},
[224882] = {
["source"] = "Lady Liadrin",
["event"] = "SPELL_CAST_START",
["npcID"] = 110770,
},
[322780] = {
["npcID"] = 156560,
},
[106646] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flying Snow",
["npcID"] = 56473,
},
[214643] = {
["event"] = "SPELL_CAST_START",
["source"] = "Steelscale",
["npcID"] = 107917,
},
[199090] = {
["source"] = "Angerhoof Bull",
["event"] = "SPELL_CAST_START",
["npcID"] = 96611,
},
[353312] = {
["encounterName"] = "Hylbrande",
["npcID"] = 175663,
["encounterID"] = 2426,
},
[391915] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grounded Primalist",
["npcID"] = 187204,
},
[412888] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ysera",
["npcID"] = 198970,
},
[388743] = {
["source"] = "Risen Bakar",
["event"] = "SPELL_CAST_START",
["npcID"] = 188510,
},
[157001] = {
["event"] = "SPELL_CAST_START",
["source"] = "Durag the Dominator",
["npcID"] = 77890,
},
[163447] = {
["encounterName"] = "Skylord Tovra",
["source"] = "Skylord Tovra",
["encounterID"] = 1736,
["event"] = "SPELL_CAST_START",
["npcID"] = 80005,
},
[412889] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zakajz",
["npcID"] = 198953,
},
[337552] = {
["npcID"] = 162853,
},
[176516] = {
["event"] = "SPELL_CAST_START",
["source"] = "Panthran Witchdoctor",
["npcID"] = 83690,
},
[392411] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tsokorg",
["npcID"] = 195417,
},
[44503] = {
["npcID"] = 24690,
},
[198024] = {
["encounterName"] = "Rokmora",
["source"] = "Rokmora",
["encounterID"] = 1790,
["event"] = "SPELL_CAST_START",
["npcID"] = 91003,
},
[388316] = {
["source"] = "Oppressive Artificer",
["event"] = "SPELL_CAST_START",
["npcID"] = 184444,
},
[365298] = {
["npcID"] = 185181,
},
["186269"] = {
["npcID"] = 90998,
},
[119524] = {
["source"] = "Mogu Archer",
["event"] = "SPELL_CAST_START",
["npcID"] = 61345,
},
[412669] = {
["source"] = "Klakatak",
["event"] = "SPELL_CAST_START",
["npcID"] = 203618,
},
[294115] = {
["npcID"] = 151684,
},
[265445] = {
["npcID"] = 160629,
},
[153994] = {
["encounterName"] = "Soulbinder Nyami",
["source"] = "Soulbinder Nyami",
["encounterID"] = 1685,
["event"] = "SPELL_CAST_START",
["npcID"] = 76177,
},
[142726] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Xaril the Poisoned Mind",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71157,
},
[392414] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tsokorg",
["npcID"] = 195417,
},
[298212] = {
["encounterName"] = "Gunker",
["npcID"] = 150222,
["encounterID"] = 2292,
},
[384223] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["encounterID"] = 2585,
["event"] = "SPELL_CAST_START",
["npcID"] = 186739,
},
[125758] = {
["source"] = "Apparition of Fear",
["event"] = "SPELL_CAST_START",
["npcID"] = 64368,
},
[408798] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Volcanic Totem",
["npcID"] = 204548,
},
[171394] = {
["npcID"] = 80379,
},
[224886] = {
["event"] = "SPELL_CAST_START",
["source"] = "Prince Galen Trollbane",
["npcID"] = 108044,
},
[360340] = {
["npcID"] = 179043,
},
["396018"] = {
["source"] = "The Crybaby Hozen",
["event"] = "SPELL_CAST_START",
["npcID"] = 59552,
},
[412895] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forgemaster Algrin",
["npcID"] = 203709,
},
[351459] = {
["npcID"] = 176572,
},
[353952] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[427657] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nuoberon",
["npcID"] = 209113,
},
[128708] = {
["source"] = "Bubbling Brew Alemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 59521,
},
[146815] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Unstable Spark",
["npcID"] = 73104,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[295822] = {
["encounterName"] = "Orgozoa",
["npcID"] = 152312,
["encounterID"] = 2303,
},
[120001] = {
["encounterName"] = "Vizier Jin'bak",
["source"] = "Vizier Jin'bak",
["npcID"] = 61567,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1465,
},
[157053] = {
["event"] = "SPELL_CAST_START",
["source"] = "Durag the Dominator",
["npcID"] = 77890,
},
[422614] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[136585] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zandalari Beastlord",
["npcID"] = 69144,
},
[35943] = {
["source"] = "Shadowmoon Acolyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 16594,
},
[11962] = {
["npcID"] = 10078,
},
[224888] = {
["event"] = "SPELL_CAST_START",
["source"] = "Prince Galen Trollbane",
["npcID"] = 108044,
},
[372600] = {
["source"] = "Sentinel Talondras",
["event"] = "SPELL_CAST_START",
["npcID"] = 184124,
},
[357229] = {
["npcID"] = 180348,
},
[406227] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rionthus",
["npcID"] = 200918,
},
[338959] = {
["npcID"] = 162741,
},
["260666"] = {
["source"] = "Gilded Priestess",
["event"] = "SPELL_CAST_START",
["npcID"] = 132126,
},
[138196] = {
["source"] = "Lightning Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 69834,
},
[412900] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zakajz",
["npcID"] = 198953,
},
[416996] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["npcID"] = 200926,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2709,
},
[345755] = {
["npcID"] = 165663,
},
[408805] = {
["source"] = "Incorporeal Being",
["event"] = "SPELL_CAST_START",
["npcID"] = 204560,
},
[46181] = {
["encounterName"] = "Priestess Delrissa",
["encounterID"] = 1895,
["npcID"] = 24553,
},
[332683] = {
["encounterName"] = "Stone Legion Generals",
["npcID"] = 169835,
["encounterID"] = 2417,
},
[340683] = {
["npcID"] = 172079,
},
[405117] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lady Shaz'ra",
["npcID"] = 200885,
},
[206459] = {
["encounterName"] = "Cordana Felsong",
["source"] = "Avatar of Shadow",
["npcID"] = 104293,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1818,
},
[257656] = {
["source"] = "Unfinished Stone Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 201586,
},
[143872] = {
["encounterName"] = "General Nazgrim",
["source"] = "General Nazgrim",
["encounterID"] = 1603,
["event"] = "SPELL_CAST_START",
["npcID"] = 71515,
},
[408614] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Devastator",
["npcID"] = 198869,
},
[396520] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rumbling Proto-Dragon",
["npcID"] = 187212,
},
[416999] = {
["source"] = "Paladin of the Silver Hand",
["event"] = "SPELL_CAST_START",
["npcID"] = 208193,
},
[343276] = {
["npcID"] = 173178,
},
[392425] = {
["source"] = "Molkeej",
["event"] = "SPELL_CAST_START",
["npcID"] = 195430,
},
[298014] = {
["encounterName"] = "Queen Azshara",
["npcID"] = 153059,
["encounterID"] = 2299,
},
[367851] = {
["encounterName"] = "The Jailer",
["encounterID"] = 2537,
["npcID"] = 180990,
},
[404713] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 200912,
},
[369677] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Olaf",
["event"] = "SPELL_CAST_START",
["npcID"] = 184580,
},
[412905] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Forgemaster Algrin",
["npcID"] = 203709,
},
[347775] = {
["npcID"] = 176395,
},
[202365] = {
["source"] = "Runecarver Slave",
["event"] = "SPELL_CAST_START",
["npcID"] = 114712,
},
[253562] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dazar'ai Augur",
["npcID"] = 122972,
},
[55715] = {
["source"] = "Earthen Elite",
["event"] = "SPELL_CAST_START",
["npcID"] = 29980,
},
[210261] = {
["source"] = "Duskwatch Sentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 104251,
},
[388332] = {
["source"] = "Kalecgos",
["event"] = "SPELL_CAST_START",
["npcID"] = 196439,
},
[408811] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Siegemaster",
["npcID"] = 198874,
},
[406231] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lingering Wrath",
["npcID"] = 201758,
},
[157051] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grom'tash the Destructor",
["npcID"] = 77889,
},
[340678] = {
["npcID"] = 172079,
},
[169331] = {
["event"] = "SPELL_CAST_START",
["source"] = "Titarus",
["npcID"] = 83713,
},
[279264] = {
["npcID"] = 176434,
},
[163390] = {
["encounterName"] = "Grimrail Enforcers",
["encounterID"] = 1748,
["npcID"] = 80808,
},
[322802] = {
["npcID"] = 161971,
},
[147997] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazebound Chanter",
["npcID"] = 72897,
},
[154327] = {
["isChanneled"] = true,
["source"] = "Void Spawn",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 76446,
},
[405113] = {
["source"] = "Shukoro Rapidstamer",
["event"] = "SPELL_CAST_START",
["npcID"] = 198917,
},
[388335] = {
["source"] = "Sundered Runebinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 186354,
},
[166380] = {
["npcID"] = 82597,
},
[34661] = {
["encounterName"] = "Thorngrin the Tender",
["source"] = "Thorngrin the Tender",
["encounterID"] = 1928,
["event"] = "SPELL_CAST_START",
["npcID"] = 17978,
},
[275382] = {
["npcID"] = 140787,
},
[305011] = {
["source"] = "Tidemistress Ethendriss",
["event"] = "SPELL_CAST_START",
["npcID"] = 153934,
},
[376049] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["encounterID"] = 2559,
["event"] = "SPELL_CAST_START",
["npcID"] = 184125,
},
[350907] = {
["npcID"] = 177791,
},
[134788] = {
["source"] = "Kar Warmaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 68321,
},
[355571] = {
["encounterName"] = "Painsmith Raznal",
["encounterID"] = 2430,
["npcID"] = 176523,
},
[11642] = {
["source"] = "Alliance Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 67902,
},
[365126] = {
["encounterName"] = "Prototype Pantheon",
["encounterID"] = 2544,
["npcID"] = 181548,
},
[159085] = {
["npcID"] = 85775,
},
[228991] = {
["encounterName"] = "Shade of Medivh",
["encounterID"] = 1965,
["npcID"] = 114675,
},
[359668] = {
["npcID"] = 181484,
},
[343158] = {
["npcID"] = 160770,
},
[374451] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burning Chain Caster",
["npcID"] = 195919,
},
[371956] = {
["source"] = "Primal Terrasentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 188011,
},
[392435] = {
["event"] = "SPELL_CAST_START",
["source"] = "Molkeej",
["npcID"] = 195430,
},
[255614] = {
["npcID"] = 179936,
},
[347291] = {
["encounterName"] = "Kel'Thuzad",
["npcID"] = 175559,
["encounterID"] = 2422,
},
[388340] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kalecgos",
["npcID"] = 196439,
},
[343287] = {
["npcID"] = 173633,
},
["201399"] = {
["npcID"] = 100527,
},
[417011] = {
["source"] = "Paladin of the Silver Hand",
["event"] = "SPELL_CAST_START",
["npcID"] = 208193,
},
[68799] = {
["event"] = "SPELL_CAST_START",
["source"] = "Apothecary Frye",
["npcID"] = 36272,
},
[111801] = {
["npcID"] = 58822,
},
[340655] = {
["npcID"] = 172077,
},
[295985] = {
["npcID"] = 159755,
},
[325171] = {
["npcID"] = 177978,
},
[201176] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wyrmtongue Scavenger",
["npcID"] = 98792,
},
[132743] = {
["source"] = "Darkhatched Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 67256,
},
[355577] = {
["npcID"] = 178171,
},
["357284"] = {
["npcID"] = 180432,
},
[328365] = {
["npcID"] = 167493,
},
[338851] = {
["npcID"] = 167525,
},
[400631] = {
["source"] = "Rampant Tide",
["event"] = "SPELL_CAST_START",
["npcID"] = 201463,
},
[320171] = {
["encounterName"] = "Amarth, The Harvester",
["encounterID"] = 2388,
["npcID"] = 163157,
},
[144882] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zhu-Gon the Sour",
["npcID"] = 71919,
},
[415403] = {
["encounterName"] = "Smolderon",
["source"] = "Smolderon",
["npcID"] = 200927,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2824,
},
[17140] = {
["source"] = "Scarlet Evangelist",
["event"] = "SPELL_CAST_START",
["npcID"] = 58685,
},
[218755] = {
["isChanneled"] = true,
["source"] = "Festerhide Grizzly",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 95779,
},
[326909] = {
["npcID"] = 169042,
},
["373939"] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Rotburst Totem",
["encounterID"] = 2569,
["event"] = "SPELL_CAST_START",
["npcID"] = 190381,
},
[126227] = {
["source"] = "Adjunct Ek'vem",
["event"] = "SPELL_CAST_START",
["npcID"] = 62073,
},
[431488] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Idriana",
["npcID"] = 214211,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[392442] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kholdeg",
["npcID"] = 194608,
},
[325312] = {
["npcID"] = 167952,
},
[78521] = {
["source"] = "Dragonmaw Grunt",
["event"] = "SPELL_CAST_START",
["npcID"] = 41072,
},
[147811] = {
["encounterName"] = "Garrosh Hellscream",
["source"] = "Thrall",
["npcID"] = 73483,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1623,
},
[339573] = {
["encounterName"] = "Mordretha",
["encounterID"] = 2404,
["npcID"] = 165946,
},
[412922] = {
["source"] = "Spurlok, Timesworn Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 205158,
},
[417018] = {
["source"] = "Alliance Conjuror",
["event"] = "SPELL_CAST_START",
["npcID"] = 206351,
},
[371965] = {
["npcID"] = 185828,
},
[41056] = {
["source"] = "Daggin Windbeard",
["event"] = "SPELL_CAST_START",
["npcID"] = 68581,
},
[298242] = {
["encounterName"] = "Orgozoa",
["npcID"] = 152128,
["encounterID"] = 2303,
},
[427694] = {
["source"] = "Reefbreaker Moruud",
["event"] = "SPELL_CAST_START",
["npcID"] = 209898,
},
[404732] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Eternal Blaze",
["npcID"] = 201773,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[122547] = {
["encounterName"] = "Amber-Shaper Un'sok",
["source"] = "Amber-Shaper Un'sok",
["npcID"] = 62511,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1499,
},
["166335"] = {
["npcID"] = 82579,
},
[387729] = {
["source"] = "Temporal Infused Rock Snail",
["event"] = "SPELL_CAST_START",
["npcID"] = 203238,
},
[355584] = {
["npcID"] = 178171,
},
[376063] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Smoldering Hellion",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 191510,
},
[143709] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Ka'roz the Locust",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71154,
},
[146606] = {
["source"] = "Kovok",
["event"] = "SPELL_CAST_START",
["npcID"] = 72927,
},
[377488] = {
["source"] = "Rune Seal Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 187155,
},
[406918] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Lavamancer",
["npcID"] = 202256,
},
["375439"] = {
["encounterName"] = "Magmatusk",
["source"] = "Magmatusk",
["encounterID"] = 2610,
["event"] = "SPELL_CAST_START",
["npcID"] = 181861,
},
[328740] = {
["npcID"] = 168992,
},
[113479] = {
["source"] = "Master Archer",
["event"] = "SPELL_CAST_START",
["npcID"] = 59175,
},
[355381] = {
["npcID"] = 181112,
},
[384623] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Blacksmith",
["npcID"] = 189471,
},
[404736] = {
["event"] = "SPELL_CAST_START",
["source"] = "Baine Bloodhoof",
["npcID"] = 203204,
},
[136844] = {
["source"] = "Drakkari God-Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 69200,
},
[392449] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earth Elemental",
["npcID"] = 190173,
},
[412928] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forgemaster Algrin",
["npcID"] = 203709,
},
[400641] = {
["encounterName"] = "Tyr, the Infinite Keeper",
["source"] = "Tyr, the Infinite Keeper",
["encounterID"] = 2670,
["event"] = "SPELL_CAST_START",
["npcID"] = 198998,
},
[404737] = {
["source"] = "Han'thul",
["event"] = "SPELL_CAST_START",
["npcID"] = 198914,
},
[320135] = {
["npcID"] = 167470,
},
[363780] = {
["npcID"] = 184043,
},
[400642] = {
["encounterName"] = "Tyr, the Infinite Keeper",
["source"] = "Tyr, the Infinite Keeper",
["encounterID"] = 2670,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 198998,
},
[15577] = {
["isChanneled"] = true,
["source"] = "Captain Korthok",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 65152,
},
[392451] = {
["source"] = "Flame Channeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 197985,
},
[145037] = {
["encounterName"] = "Garrosh Hellscream",
["source"] = "Garrosh Hellscream",
["encounterID"] = 1623,
["event"] = "SPELL_CAST_START",
["npcID"] = 71865,
},
[241287] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowsworn Invader",
["npcID"] = 121021,
},
[404739] = {
["source"] = "First Mate Ovdah",
["event"] = "SPELL_CAST_START",
["npcID"] = 201182,
},
["406227"] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Rionthus",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 200918,
},
[388001] = {
["source"] = "Bertinuat",
["event"] = "SPELL_CAST_START",
["npcID"] = 196288,
},
["406358"] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 200912,
},
[118958] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Gurthan Iron Maw",
["npcID"] = 61242,
},
[197974] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Soul-torn Vanguard",
["npcID"] = 100485,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1833,
},
[193235] = {
["encounterName"] = "Hymdall",
["source"] = "Hymdall",
["encounterID"] = 1805,
["event"] = "SPELL_CAST_START",
["npcID"] = 94960,
},
[169613] = {
["encounterName"] = "Yalnu",
["source"] = "Yalnu",
["npcID"] = 83846,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1756,
},
[388716] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[359688] = {
["npcID"] = 181967,
},
[384620] = {
["encounterName"] = "The Raging Tempest",
["source"] = "The Raging Tempest",
["encounterID"] = 2636,
["event"] = "SPELL_CAST_START",
["npcID"] = 186615,
},
[335114] = {
["encounterName"] = "Huntsman Altimor",
["npcID"] = 165066,
["encounterID"] = 2418,
},
[371976] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["encounterID"] = 2592,
["event"] = "SPELL_CAST_START",
["npcID"] = 187967,
},
[392455] = {
["source"] = "Uurhilt",
["event"] = "SPELL_CAST_START",
["npcID"] = 194760,
},
[265487] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodsworn Defiler",
["npcID"] = 133912,
},
[417030] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Alliance Conjuror",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 206351,
},
[132752] = {
["source"] = "Darkhatched Shaman",
["event"] = "SPELL_CAST_START",
["npcID"] = 67255,
},
[376073] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["npcID"] = 190245,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[396552] = {
["source"] = "Magmas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199027,
},
[395908] = {
["source"] = "Primal Icebulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 192767,
},
[404744] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
["225573"] = {
["npcID"] = 98370,
},
[347404] = {
["npcID"] = 177291,
},
[400649] = {
["encounterName"] = "Tyr, the Infinite Keeper",
["source"] = "Tyr, the Infinite Keeper",
["encounterID"] = 2670,
["event"] = "SPELL_CAST_START",
["npcID"] = 198998,
},
[121673] = {
["source"] = "Salyin Skirmisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 62350,
},
[356981] = {
["npcID"] = 177529,
},
[34697] = {
["encounterName"] = "Laj",
["source"] = "Laj",
["encounterID"] = 1927,
["event"] = "SPELL_CAST_START",
["npcID"] = 17980,
},
[131414] = {
["source"] = "Twinspire Demolitionist",
["event"] = "SPELL_CAST_START",
["npcID"] = 66273,
},
[320120] = {
["encounterName"] = "An Affront of Challengers",
["encounterID"] = 2391,
["npcID"] = 164463,
},
[188046] = {
["npcID"] = 198489,
},
[328322] = {
["encounterName"] = "Echelon",
["encounterID"] = 2380,
["npcID"] = 164363,
},
[335119] = {
["encounterName"] = "Huntsman Altimor",
["npcID"] = 165066,
["encounterID"] = 2418,
},
[82608] = {
["npcID"] = 3255,
},
["405042"] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Thadrion",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 200913,
},
[134003] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'kron Priest",
["npcID"] = 68142,
},
[117665] = {
["encounterName"] = "Sha of Doubt",
["source"] = "Sha of Doubt",
["encounterID"] = 1439,
["event"] = "SPELL_CAST_START",
["npcID"] = 56439,
},
[136850] = {
["encounterName"] = "Lei Shen",
["source"] = "Lei Shen",
["npcID"] = 68397,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1579,
},
["406783"] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Shadowflame Amalgamation",
["encounterID"] = 2687,
["event"] = "SPELL_CAST_START",
["npcID"] = 201934,
},
[380174] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[428695] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[102573] = {
["encounterName"] = "Gu Cloudstrike",
["source"] = "Azure Serpent",
["npcID"] = 56754,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1303,
},
[384252] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Elemental",
["npcID"] = 190780,
},
[331026] = {
["npcID"] = 160185,
},
[114864] = {
["source"] = "Bored Student",
["event"] = "SPELL_CAST_START",
["npcID"] = 59614,
},
[371984] = {
["source"] = "Flashfrost Chillweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 188067,
},
[294165] = {
["npcID"] = 178190,
},
[396559] = {
["source"] = "Raszageth",
["event"] = "SPELL_CAST_START",
["npcID"] = 199031,
},
[125373] = {
["source"] = "Gar'lok",
["event"] = "SPELL_CAST_START",
["npcID"] = 50739,
},
[20680] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lady Jaina Proudmoore",
["npcID"] = 68609,
},
[225917] = {
["source"] = "Rook Spiderling",
["event"] = "SPELL_CAST_START",
["npcID"] = 98677,
},
[75683] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Lady Naz'jar",
["npcID"] = 40586,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[3131] = {
["npcID"] = 40940,
},
[135509] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Cleric Laresa",
["npcID"] = 67551,
},
[343316] = {
["npcID"] = 173446,
},
[157331] = {
["npcID"] = 77942,
},
[327274] = {
["npcID"] = 167524,
},
[404753] = {
["event"] = "SPELL_CAST_START",
["source"] = "Baine Bloodhoof",
["npcID"] = 203204,
},
[399033] = {
["event"] = "SPELL_CAST_START",
["source"] = "Weyrn Spellslinger",
["npcID"] = 204076,
},
[167239] = {
["npcID"] = 83028,
},
[417041] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Keeper Orendi",
["npcID"] = 205874,
},
[404754] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Null Glimmer",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 202971,
},
[328756] = {
["encounterName"] = "Ingra Maloch",
["encounterID"] = 2397,
["npcID"] = 164567,
},
[363797] = {
["npcID"] = 184043,
},
[253583] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Dazar'ai Augur",
["npcID"] = 122972,
},
[339223] = {
["npcID"] = 158259,
},
[196242] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadlord Mendacius",
["npcID"] = 99649,
},
[14443] = {
["npcID"] = 35070,
},
[294171] = {
["npcID"] = 150959,
},
[404756] = {
["source"] = "Sundered Flame Flamespinner",
["event"] = "SPELL_CAST_START",
["npcID"] = 203619,
},
[343320] = {
["npcID"] = 173444,
},
[388374] = {
["event"] = "SPELL_CAST_START",
["source"] = "Captured Raven",
["npcID"] = 191508,
},
[335129] = {
["encounterName"] = "Huntsman Altimor",
["npcID"] = 165066,
["encounterID"] = 2418,
},
[404757] = {
["source"] = "Sundered Flame Manaweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 205230,
},
[359704] = {
["npcID"] = 181626,
},
[324205] = {
["encounterName"] = "Ventunax",
["npcID"] = 162058,
["encounterID"] = 2356,
},
[138569] = {
["encounterName"] = "Dark Animus",
["source"] = "Massive Anima Golem",
["npcID"] = 69699,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1576,
},
[136855] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drakkari God-Hulk",
["npcID"] = 69200,
},
[343322] = {
["npcID"] = 168337,
},
[320825] = {
["encounterName"] = "The Manastorms",
["npcID"] = 164568,
["encounterID"] = 2394,
},
[381537] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vicious Ice Borer",
["npcID"] = 186392,
},
[263257] = {
["encounterName"] = "Adderis and Aspix",
["npcID"] = 133944,
["encounterID"] = 2124,
},
[161222] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elder Ridge Prowler",
["npcID"] = 79909,
},
[201902] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taintheart Deadeye",
["npcID"] = 100539,
},
[390256] = {
["source"] = "Kaighan Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 190680,
},
[388377] = {
["event"] = "SPELL_CAST_START",
["source"] = "Captured Raven",
["npcID"] = 191508,
},
[188053] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fel Hellweaver",
["npcID"] = 94806,
},
[393820] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sturdy Gladehorn",
["npcID"] = 196655,
},
[161090] = {
["encounterName"] = "Rocketspark and Borka",
["encounterID"] = 1715,
["npcID"] = 77816,
},
[388706] = {
["source"] = "Stormbound Essence",
["event"] = "SPELL_CAST_START",
["npcID"] = 187819,
},
[392474] = {
["isChanneled"] = true,
["source"] = "Quarry Infuser",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 197799,
},
[358085] = {
["npcID"] = 179859,
},
[325725] = {
["encounterName"] = "Mueh'zala",
["npcID"] = 166608,
["encounterID"] = 2396,
},
[355613] = {
["npcID"] = 178958,
},
[144070] = {
["encounterName"] = "Kor'kron Dark Shaman",
["source"] = "Earthbreaker Haromm",
["encounterID"] = 1606,
["event"] = "SPELL_CAST_START",
["npcID"] = 71859,
},
[387670] = {
["source"] = "Time-Lost Chieftain",
["event"] = "SPELL_CAST_START",
["npcID"] = 187266,
},
[393813] = {
["source"] = "Shiverweb Queen",
["event"] = "SPELL_CAST_START",
["npcID"] = 186064,
},
[392239] = {
["source"] = "Sunhide Stomphoof",
["event"] = "SPELL_CAST_START",
["npcID"] = 187960,
},
[156294] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iron Raider",
["npcID"] = 81197,
},
[142201] = {
["event"] = "SPELL_CAST_START",
["source"] = "Echo of Y'Shaarj",
["npcID"] = 71123,
},
[173384] = {
["npcID"] = 83392,
},
[361044] = {
["encounterName"] = "Prototype Pantheon",
["encounterID"] = 2544,
["npcID"] = 182305,
},
[150290] = {
["encounterName"] = "Magmolatus",
["source"] = "Calamity",
["npcID"] = 74571,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1655,
},
["193633"] = {
["npcID"] = 98275,
},
[412262] = {
["source"] = "Time-Lost Rocketeer",
["event"] = "SPELL_CAST_START",
["npcID"] = 205727,
},
[49241] = {
["npcID"] = 27542,
},
[61353] = {
["npcID"] = 96779,
},
[132763] = {
["source"] = "Ban Bearheart",
["event"] = "SPELL_CAST_START",
["npcID"] = 62806,
},
[124984] = {
["event"] = "SPELL_CAST_START",
["source"] = "Adjunct Suruz",
["npcID"] = 62075,
},
[388383] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iskaara Defender",
["npcID"] = 186431,
},
[415437] = {
["source"] = "Timestream Leech",
["event"] = "SPELL_CAST_START",
["npcID"] = 206066,
},
[265511] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spirit Drain Totem",
["npcID"] = 135169,
},
[366297] = {
["npcID"] = 184911,
},
[259732] = {
["encounterName"] = "Sporecaller Zancha",
["source"] = "Sporecaller Zancha",
["npcID"] = 131383,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2112,
},
[139594] = {
["source"] = "Arcweaver Jor'guva",
["event"] = "SPELL_CAST_START",
["npcID"] = 69665,
},
[331044] = {
["npcID"] = 170860,
},
[352223] = {
["npcID"] = 176578,
},
[16429] = {
["source"] = "Thuzadin Shadowcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 10398,
},
[142650] = {
["event"] = "SPELL_CAST_START",
["source"] = "Proto-Drake Whelp",
["npcID"] = 71401,
},
[331045] = {
["npcID"] = 170860,
},
[335141] = {
["npcID"] = 165824,
},
[371273] = {
["encounterName"] = "Sire Denathrius",
["encounterID"] = 2407,
["npcID"] = 188302,
},
[366287] = {
["npcID"] = 185032,
},
[200345] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Risen Archer",
["npcID"] = 98275,
},
[384291] = {
["source"] = "Ayanga",
["event"] = "SPELL_CAST_START",
["npcID"] = 192961,
},
[204082] = {
["source"] = "Wrathguard Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 99581,
},
[115139] = {
["encounterName"] = "Thalnos the Soulrender",
["source"] = "Thalnos the Soulrender",
["encounterID"] = 1423,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 59789,
},
[322756] = {
["npcID"] = 165137,
},
[335143] = {
["npcID"] = 165222,
},
[145053] = {
["npcID"] = 72279,
},
[392484] = {
["source"] = "Moskhoi",
["event"] = "SPELL_CAST_START",
["npcID"] = 195093,
},
[205689] = {
["npcID"] = 155618,
},
[394662] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sky Vixen Shokhari",
["npcID"] = 190761,
},
[404772] = {
["source"] = "Grugoth the Hullcrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 200721,
},
[364426] = {
["npcID"] = 180088,
},
[327262] = {
["npcID"] = 167524,
},
[372315] = {
["encounterName"] = "The Primal Council",
["source"] = "Kadros Icewrath",
["encounterID"] = 2590,
["event"] = "SPELL_CAST_START",
["npcID"] = 187771,
},
[117187] = {
["encounterName"] = "Protectors of the Endless",
["source"] = "Elder Regail",
["encounterID"] = 1409,
["event"] = "SPELL_CAST_START",
["npcID"] = 60585,
},
[392486] = {
["source"] = "Tempest Channeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 198047,
},
[336958] = {
["npcID"] = 162853,
},
[141620] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bonechiller Barafu",
["npcID"] = 70468,
},
[257315] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Irontide Grenadier",
["encounterID"] = 2096,
["event"] = "SPELL_CAST_START",
["npcID"] = 129758,
},
[395833] = {
["source"] = "Mara'nar the Thunderous",
["event"] = "SPELL_CAST_START",
["npcID"] = 196913,
},
[384296] = {
["source"] = "Ayanga",
["event"] = "SPELL_CAST_START",
["npcID"] = 192961,
},
[143007] = {
["encounterName"] = "Fallen Protectors",
["source"] = "Rook Stonetoe",
["encounterID"] = 1598,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 71475,
},
[388392] = {
["source"] = "Unruly Textbook",
["event"] = "SPELL_CAST_START",
["npcID"] = 196044,
},
[324666] = {
["npcID"] = 166551,
},
["263961"] = {
["source"] = "Heartsbane Soulcharmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 131812,
},
[355930] = {
["npcID"] = 177816,
},
[153247] = {
["encounterName"] = "Roltall",
["source"] = "Roltall",
["npcID"] = 75786,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1652,
},
[299588] = {
["npcID"] = 150251,
},
[426596] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coven Diviner",
["npcID"] = 131819,
},
[409174] = {
["event"] = "SPELL_CAST_START",
["source"] = "Incarnation of Entropy",
["npcID"] = 203811,
},
[343325] = {
["npcID"] = 173445,
},
["406678"] = {
["encounterName"] = "The Vigilant Steward, Zskarn",
["source"] = "Zskarn",
["encounterID"] = 2689,
["event"] = "SPELL_CAST_START",
["npcID"] = 202375,
},
[290097] = {
["npcID"] = 144570,
},
[384299] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pleasant Alpha",
["npcID"] = 193130,
},
[404778] = {
["event"] = "SPELL_CAST_START",
["source"] = "Baine Bloodhoof",
["npcID"] = 203204,
},
[318768] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Psychophage",
["npcID"] = 163947,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[265523] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodsworn Defiler",
["npcID"] = 133912,
},
[192158] = {
["encounterName"] = "Hyrja",
["source"] = "Olmyr the Enlightened",
["encounterID"] = 1806,
["event"] = "SPELL_CAST_START",
["npcID"] = 97202,
},
[404779] = {
["source"] = "Contamination Investigator",
["event"] = "SPELL_CAST_START",
["npcID"] = 204582,
},
[393803] = {
["source"] = "Trakhan",
["event"] = "SPELL_CAST_START",
["npcID"] = 193783,
},
[394487] = {
["event"] = "SPELL_CAST_START",
["source"] = "Death's Shadow",
["npcID"] = 190985,
},
[46568] = {
["source"] = "Ahunite Frostwind",
["event"] = "SPELL_CAST_START",
["npcID"] = 25757,
},
[136866] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cera",
["npcID"] = 69396,
},
[102227] = {
["npcID"] = 54642,
},
[141612] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fiery Anger",
["npcID"] = 70824,
},
[290395] = {
["npcID"] = 150750,
},
[384597] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Warden",
["npcID"] = 193293,
},
[375870] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[377389] = {
["source"] = "Alpha Eagle",
["event"] = "SPELL_CAST_START",
["npcID"] = 192333,
},
[318771] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Psychophage",
["npcID"] = 163947,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[321249] = {
["npcID"] = 162051,
},
[395817] = {
["isChanneled"] = true,
["source"] = "Primalist Frostsculptor",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 198424,
},
[159017] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zipteq",
["npcID"] = 78734,
},
[204667] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[361027] = {
["npcID"] = 183961,
},
["204667"] = {
["encounterName"] = "Oakheart",
["encounterID"] = 1837,
["npcID"] = 103344,
},
[318773] = {
["npcID"] = 166347,
},
[50092] = {
["source"] = "7th Legion Rifleman",
["event"] = "SPELL_CAST_START",
["npcID"] = 27791,
},
[352833] = {
["encounterName"] = "Guardian of the First Ones",
["npcID"] = 175731,
["encounterID"] = 2436,
},
[69066] = {
["isChanneled"] = true,
["source"] = "Soulguard Adept",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 36620,
},
[400977] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Firecaller",
["npcID"] = 200454,
},
[285228] = {
["npcID"] = 150734,
},
[388402] = {
["event"] = "SPELL_CAST_START",
["source"] = "Predatory Thresher",
["npcID"] = 198779,
},
[145489] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Zu Yin",
["npcID"] = 73724,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[54333] = {
["source"] = "Lightning Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 16385,
},
[222880] = {
["npcID"] = 111889,
},
[355637] = {
["npcID"] = 179840,
},
[359733] = {
["npcID"] = 178099,
},
[157348] = {
["npcID"] = 77942,
},
[111772] = {
["npcID"] = 58757,
},
[290106] = {
["npcID"] = 150728,
},
[359734] = {
["npcID"] = 185755,
},
[304193] = {
["npcID"] = 155917,
},
[343112] = {
["npcID"] = 166156,
},
[356081] = {
["npcID"] = 177390,
},
[300777] = {
["npcID"] = 150165,
},
[271443] = {
["npcID"] = 142072,
},
[113017] = {
["encounterName"] = "Lorewalker Stonestep",
["source"] = "Zao Sunseeker",
["encounterID"] = 1417,
["event"] = "SPELL_CAST_START",
["npcID"] = 58826,
},
[355640] = {
["npcID"] = 179840,
},
[111762] = {
["npcID"] = 58823,
},
[129701] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ahgunoss",
["npcID"] = 62765,
},
[167589] = {
["encounterName"] = "Nitrogg Thundertower",
["encounterID"] = 1732,
["npcID"] = 79548,
},
[355641] = {
["npcID"] = 179841,
},
[396599] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fulgurb",
["npcID"] = 193170,
},
[255648] = {
["encounterName"] = "Argus the Unmaker",
["source"] = "Golganneth",
["encounterID"] = 2092,
["event"] = "SPELL_CAST_START",
["npcID"] = 126268,
},
[265352] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blight Toad",
["npcID"] = 135052,
},
[355642] = {
["npcID"] = 179841,
},
[285232] = {
["npcID"] = 144580,
},
[396600] = {
["source"] = "Gorger",
["event"] = "SPELL_CAST_START",
["npcID"] = 192759,
},
[147347] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Zhu-Gon the Sour",
["npcID"] = 71919,
},
[372474] = {
["source"] = "Shikaar Ranger",
["event"] = "SPELL_CAST_START",
["npcID"] = 180393,
},
[196883] = {
["source"] = "Lord Etheldrin Ravencrest",
["event"] = "SPELL_CAST_START",
["npcID"] = 98521,
},
[331069] = {
["npcID"] = 166358,
},
[302399] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ogron Destructor",
["npcID"] = 83687,
},
[388410] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Dathea, Ascended",
["encounterID"] = 2635,
["event"] = "SPELL_CAST_START",
["npcID"] = 189813,
},
[339717] = {
["npcID"] = 159496,
},
[214692] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gerenth the Vile",
["npcID"] = 107435,
},
[225562] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodtainted Burster",
["npcID"] = 100532,
},
[372028] = {
["npcID"] = 185828,
},
[369157] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Tarasek",
["npcID"] = 188372,
},
[419157] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jaedenar Warrior",
["npcID"] = 205907,
},
[384316] = {
["encounterName"] = "The Raging Tempest",
["source"] = "The Raging Tempest",
["encounterID"] = 2636,
["event"] = "SPELL_CAST_START",
["npcID"] = 186615,
},
[355646] = {
["npcID"] = 178191,
},
["376171"] = {
["source"] = "Primalist Icecaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 190377,
},
[265540] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fetid Maggot",
["npcID"] = 130909,
},
[15228] = {
["npcID"] = 17771,
},
[404796] = {
["event"] = "SPELL_CAST_START",
["source"] = "Baine Bloodhoof",
["npcID"] = 203204,
},
[359743] = {
["npcID"] = 181945,
},
[396605] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fulgurb",
["npcID"] = 193170,
},
[153485] = {
["source"] = "Carrion Worm",
["event"] = "SPELL_CAST_START",
["npcID"] = 76057,
},
[147354] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ironfur Herdling",
["npcID"] = 72842,
},
[148762] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Commander Ik'tal",
["npcID"] = 73948,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[319224] = {
["npcID"] = 157962,
},
[411433] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205384,
},
[202634] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Grimhorn the Enslaver",
["npcID"] = 102566,
},
[138923] = {
["encounterName"] = "Ji-Kun",
["source"] = "Ji-Kun",
["encounterID"] = 1573,
["event"] = "SPELL_CAST_START",
["npcID"] = 69712,
},
[178060] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taylor Dewland",
["npcID"] = 80500,
},
[3110] = {
["encounterName"] = "Painsmith Raznal",
["encounterID"] = 2430,
["npcID"] = 58959,
},
[127947] = {
["event"] = "SPELL_CAST_START",
["source"] = "Azzix K'tai",
["npcID"] = 62843,
},
[221446] = {
["event"] = "SPELL_CAST_START",
["source"] = "Inquisitor Chillbane",
["npcID"] = 117089,
},
[397801] = {
["encounterName"] = "Wise Mari",
["source"] = "Wise Mari",
["npcID"] = 56448,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1418,
},
[295420] = {
["npcID"] = 144580,
},
[317943] = {
["npcID"] = 163457,
},
[359747] = {
["npcID"] = 181453,
},
[157355] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Ritualist",
["npcID"] = 88605,
},
["169445"] = {
["source"] = "Twisted Abomination",
["event"] = "SPELL_CAST_START",
["npcID"] = 84767,
},
[425045] = {
["event"] = "SPELL_CAST_START",
["source"] = "Splinterlimb",
["npcID"] = 209365,
},
[343132] = {
["npcID"] = 169042,
},
[420337] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hel'nurathian Defender",
["npcID"] = 205937,
},
[81363] = {
["source"] = "Xiong the Brawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 57325,
},
[76634] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tainted Sentry",
["npcID"] = 40925,
},
[250258] = {
["encounterName"] = "Vol'kaal",
["source"] = "Vol'kaal",
["npcID"] = 122965,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2085,
},
[196870] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Stormweaver",
["npcID"] = 91783,
},
[380487] = {
["encounterName"] = "Terros",
["source"] = "Terros",
["encounterID"] = 2639,
["event"] = "SPELL_CAST_START",
["npcID"] = 190496,
},
[374544] = {
["source"] = "Fetid Rotsinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 186226,
},
[372486] = {
["event"] = "SPELL_CAST_START",
["source"] = "Waste Water Elemental",
["npcID"] = 187497,
},
[179092] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Enchantress",
["npcID"] = 88089,
},
[298571] = {
["encounterName"] = "Trixie & Naeno",
["npcID"] = 153756,
["encounterID"] = 2312,
},
[413458] = {
["event"] = "SPELL_CAST_START",
["source"] = "Osthilde",
["npcID"] = 200867,
},
[136098] = {
["source"] = "Bloodhilt Lightsworn",
["event"] = "SPELL_CAST_START",
["npcID"] = 68640,
},
[396613] = {
["source"] = "Sunscale Behemoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 193133,
},
[263959] = {
["event"] = "SPELL_CAST_START",
["source"] = "Heartsbane Soulcharmer",
["npcID"] = 131812,
},
[115157] = {
["encounterName"] = "Thalnos the Soulrender",
["source"] = "Frenzied Spirit",
["encounterID"] = 1423,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 59893,
},
[408901] = {
["event"] = "SPELL_CAST_START",
["source"] = "Animated Contaminant",
["npcID"] = 202270,
},
[396614] = {
["source"] = "Cavernous Tyrant",
["event"] = "SPELL_CAST_START",
["npcID"] = 199197,
},
[327240] = {
["npcID"] = 165911,
},
[135426] = {
["source"] = "Kor'kron Scout",
["event"] = "SPELL_CAST_START",
["npcID"] = 68368,
},
[392519] = {
["isChanneled"] = true,
["source"] = "Quarry Infuser",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 197799,
},
[396615] = {
["source"] = "Sunscale Behemoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 193133,
},
[322892] = {
["npcID"] = 156560,
},
[404807] = {
["source"] = "Contamination Investigator",
["event"] = "SPELL_CAST_START",
["npcID"] = 204582,
},
[333612] = {
["npcID"] = 175077,
},
[412999] = {
["source"] = "Winglord Dezran",
["event"] = "SPELL_CAST_START",
["npcID"] = 201677,
},
[300395] = {
["encounterName"] = "The Queen's Court",
["npcID"] = 152852,
["encounterID"] = 2311,
},
["265741"] = {
["source"] = "Matron Bryndle",
["event"] = "SPELL_CAST_START",
["npcID"] = 135329,
},
["377950"] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Tricktotem",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186125,
},
[394591] = {
["source"] = "Tombcaller Ganzaya",
["event"] = "SPELL_CAST_START",
["npcID"] = 188509,
},
[354900] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 176532,
["encounterID"] = 2435,
},
[46150] = {
["npcID"] = 24696,
},
[122713] = {
["encounterName"] = "Imperial Vizier Zor'lok",
["source"] = "Imperial Vizier Zor'lok",
["npcID"] = 62980,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1507,
},
[183548] = {
["source"] = "Stoneclaw Grubmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 102404,
},
[400714] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nidharr",
["npcID"] = 201310,
},
[136881] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zandalari Water-Binder",
["npcID"] = 69455,
},
[347716] = {
["npcID"] = 176394,
},
[146688] = {
["source"] = "Dragonmaw Cannoneer",
["event"] = "SPELL_CAST_START",
["npcID"] = 72365,
},
[140541] = {
["source"] = "Arcanital Ra'kul",
["event"] = "SPELL_CAST_START",
["npcID"] = 69300,
},
[372045] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Caustic Spiderling",
["encounterID"] = 2592,
["event"] = "SPELL_CAST_START",
["npcID"] = 189233,
},
[319956] = {
["npcID"] = 167055,
},
["405812"] = {
["encounterName"] = "The Vigilant Steward, Zskarn",
["source"] = "Zskarn",
["encounterID"] = 2689,
["event"] = "SPELL_CAST_START",
["npcID"] = 202375,
},
[198904] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotheart Dryad",
["npcID"] = 99358,
},
[122497] = {
["encounterName"] = "Imperial Vizier Zor'lok",
["source"] = "Imperial Vizier Zor'lok",
["npcID"] = 63554,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1507,
},
[304951] = {
["encounterName"] = "Radiance of Azshara",
["npcID"] = 152512,
["encounterID"] = 2305,
},
[46406] = {
["source"] = "Ahunite Coldwave",
["event"] = "SPELL_CAST_START",
["npcID"] = 25756,
},
[397096] = {
["source"] = "Malsegan",
["event"] = "SPELL_CAST_START",
["npcID"] = 193212,
},
[372047] = {
["source"] = "Defier Draghar",
["event"] = "SPELL_CAST_START",
["npcID"] = 187897,
},
[120789] = {
["encounterName"] = "Commander Vo'jak",
["source"] = "Commander Vo'jak",
["npcID"] = 61634,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1502,
},
[413005] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flame Additive",
["npcID"] = 205672,
},
[423257] = {
["event"] = "SPELL_CAST_START",
["source"] = "Druid of the Moon",
["npcID"] = 210686,
},
[239277] = {
["event"] = "SPELL_CAST_START",
["source"] = "Champion Aquaclease",
["npcID"] = 120088,
},
[335187] = {
["npcID"] = 163960,
},
[314708] = {
["source"] = "HK-3 Aerial Dissuasion Unit",
["event"] = "SPELL_CAST_START",
["npcID"] = 159261,
},
[384336] = {
["source"] = "Nokhud Plainstomper",
["event"] = "SPELL_CAST_START",
["npcID"] = 191847,
},
[147702] = {
["npcID"] = 72895,
},
[339521] = {
["npcID"] = 173484,
},
[390952] = {
["source"] = "Grand Flame",
["event"] = "SPELL_CAST_START",
["npcID"] = 188009,
},
[325418] = {
["npcID"] = 167113,
},
[404818] = {
["source"] = "Shukoro Rapidstamer",
["event"] = "SPELL_CAST_START",
["npcID"] = 198917,
},
[326997] = {
["npcID"] = 167607,
},
[413008] = {
["source"] = "Highmountain Seer",
["event"] = "SPELL_CAST_START",
["npcID"] = 201268,
},
[120667] = {
["source"] = "Shado-Pan Marksman",
["event"] = "SPELL_CAST_START",
["npcID"] = 61968,
},
[322903] = {
["encounterName"] = "General Kaal",
["encounterID"] = 2363,
["npcID"] = 162099,
},
[392530] = {
["source"] = "Quarry Infuser",
["event"] = "SPELL_CAST_START",
["npcID"] = 197799,
},
[107356] = {
["encounterName"] = "Taran Zhu",
["source"] = "Corrupted Taran Zhu",
["npcID"] = 56884,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1306,
},
[91997] = {
["source"] = "Zandalari Spiritbinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 69225,
},
[153268] = {
["source"] = "Shadowmoon Exhumer",
["event"] = "SPELL_CAST_START",
["npcID"] = 77700,
},
[324046] = {
["encounterName"] = "Oryphrion",
["npcID"] = 162060,
["encounterID"] = 2358,
},
[146680] = {
["isChanneled"] = true,
["source"] = "Shanna Sparkfizz",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 72986,
},
[304245] = {
["npcID"] = 155271,
},
[312674] = {
["npcID"] = 161388,
},
[80515] = {
["isChanneled"] = true,
["source"] = "Skumblade Fleshripper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 69210,
},
[397100] = {
["source"] = "Magmas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199027,
},
[80003] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thunder Cleft Brave",
["npcID"] = 59853,
},
[413012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow Additive",
["npcID"] = 205671,
},
[417337] = {
["source"] = "Sky-Commander Gadrius Orcbane",
["event"] = "SPELL_CAST_START",
["npcID"] = 207593,
},
[206514] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104154,
},
[264024] = {
["event"] = "SPELL_CAST_START",
["source"] = "Heartsbane Soulcharmer",
["npcID"] = 131812,
},
[404821] = {
["source"] = "Water Echo",
["event"] = "SPELL_CAST_START",
["npcID"] = 203051,
},
[359768] = {
["npcID"] = 181360,
},
[413013] = {
["encounterName"] = "Chronikar",
["source"] = "Chronikar",
["npcID"] = 198995,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2666,
},
[358205] = {
["npcID"] = 178862,
},
[372056] = {
["encounterName"] = "The Primal Council",
["source"] = "Opalfang",
["encounterID"] = 2590,
["event"] = "SPELL_CAST_START",
["npcID"] = 187772,
},
[362294] = {
["npcID"] = 181968,
},
[386866] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gorging Stagbeetle",
["npcID"] = 195709,
},
[384344] = {
["event"] = "SPELL_CAST_START",
["source"] = "Humid Drizzle",
["npcID"] = 194068,
},
["257397"] = {
["source"] = "Irontide Bonesaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 129788,
},
[359770] = {
["encounterName"] = "Skolex, the Insatiable Ravener",
["encounterID"] = 2542,
["npcID"] = 181395,
},
[265568] = {
["event"] = "SPELL_CAST_START",
["source"] = "Befouled Spirit",
["npcID"] = 133685,
},
[314942] = {
["npcID"] = 166869,
},
[322909] = {
["npcID"] = 161971,
},
[372561] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Hunter",
["npcID"] = 189227,
},
[51779] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gearmage Astalon",
["npcID"] = 68753,
},
[196838] = {
["encounterName"] = "Fenryr",
["source"] = "Fenryr",
["encounterID"] = 1807,
["event"] = "SPELL_CAST_START",
["npcID"] = 99868,
},
[339006] = {
["npcID"] = 173238,
},
[317880] = {
["npcID"] = 158992,
},
[137142] = {
["source"] = "Itoka",
["event"] = "SPELL_CAST_START",
["npcID"] = 69461,
},
[388923] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Overgrown Ancient",
["encounterID"] = 2563,
["event"] = "SPELL_CAST_START",
["npcID"] = 196482,
},
[195253] = {
["event"] = "SPELL_CAST_START",
["source"] = "Restless Tides",
["npcID"] = 97173,
},
[392539] = {
["source"] = "Awakened Terrasentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 197801,
},
[173751] = {
["npcID"] = 155216,
},
[335680] = {
["npcID"] = 170634,
},
[44276] = {
["npcID"] = 24556,
},
[334967] = {
["npcID"] = 171343,
},
[202420] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eredar Chaosbringer",
["npcID"] = 126165,
},
[367966] = {
["npcID"] = 184901,
},
[135404] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunwalker Chagon",
["npcID"] = 67548,
},
[395947] = {
["source"] = "Decay Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 197124,
},
[396637] = {
["source"] = "Elusive Ferocious Titanfang",
["event"] = "SPELL_CAST_START",
["npcID"] = 195472,
},
[120670] = {
["source"] = "Zandalari Fire-Dancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 60402,
},
[416879] = {
["event"] = "SPELL_CAST_START",
["source"] = "Adamanthia",
["npcID"] = 198921,
},
[404830] = {
["source"] = "Shukoro Rapidstamer",
["event"] = "SPELL_CAST_START",
["npcID"] = 198917,
},
[392757] = {
["source"] = "Stormbound Proto-Drake",
["event"] = "SPELL_CAST_START",
["npcID"] = 195094,
},
[384351] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Watcher Irideus",
["npcID"] = 189719,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2615,
},
[169657] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twisted Abomination",
["npcID"] = 84767,
},
[331108] = {
["npcID"] = 166335,
},
[347490] = {
["encounterName"] = "The Tarragrue",
["npcID"] = 175611,
["encounterID"] = 2423,
},
[413023] = {
["source"] = "Lerai, Timesworn Maiden",
["event"] = "SPELL_CAST_START",
["npcID"] = 205152,
},
[273767] = {
["npcID"] = 177539,
},
[408927] = {
["event"] = "SPELL_CAST_START",
["source"] = "Animated Contaminant",
["npcID"] = 202270,
},
[396640] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Ancient Branch",
["encounterID"] = 2563,
["event"] = "SPELL_CAST_START",
["npcID"] = 196548,
},
[384353] = {
["encounterName"] = "Gutshot",
["source"] = "Gutshot",
["encounterID"] = 2567,
["event"] = "SPELL_CAST_START",
["npcID"] = 186116,
},
[273768] = {
["npcID"] = 154499,
},
[140521] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Spirit-Bound Sentry",
["npcID"] = 69335,
},
[396641] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alpha Mountain Stonefang",
["npcID"] = 197376,
},
[382795] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Qalashi Lavamancer",
["npcID"] = 193944,
},
[144611] = {
["event"] = "SPELL_CAST_START",
["source"] = "Niuzao",
["npcID"] = 71954,
},
[179898] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkmoon Tonk",
["npcID"] = 90304,
},
[372566] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Hunter",
["npcID"] = 189227,
},
[415047] = {
["encounterName"] = "The Headless Horseman",
["source"] = "Headless Horseman",
["encounterID"] = 2725,
["event"] = "SPELL_CAST_START",
["npcID"] = 207438,
},
[273770] = {
["npcID"] = 154499,
},
[172982] = {
["npcID"] = 83026,
},
[39347] = {
["source"] = "Sunseeker Gene-Splicer",
["event"] = "SPELL_CAST_START",
["npcID"] = 19507,
},
[228273] = {
["npcID"] = 114637,
},
[391006] = {
["source"] = "Blisterhide",
["event"] = "SPELL_CAST_START",
["npcID"] = 197353,
},
[327016] = {
["npcID"] = 159156,
},
[120672] = {
["encounterName"] = "Sha of Fear",
["source"] = "Sha of Fear",
["encounterID"] = 1431,
["event"] = "SPELL_CAST_START",
["npcID"] = 60999,
},
[318825] = {
["npcID"] = 170731,
},
[136894] = {
["encounterName"] = "Council of Elders",
["source"] = "Sul the Sandcrawler",
["npcID"] = 69078,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1570,
},
[229151] = {
["encounterName"] = "Viz'aduum the Watcher",
["encounterID"] = 2017,
["npcID"] = 114790,
},
[396645] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alpha Mountain Stonefang",
["npcID"] = 197376,
},
[224953] = {
["npcID"] = 163662,
},
[389532] = {
["event"] = "SPELL_CAST_START",
["source"] = "Laden Lasher",
["npcID"] = 193541,
},
[179900] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkmoon Tonk",
["npcID"] = 90304,
},
[396646] = {
["source"] = "Loamas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199030,
},
[144610] = {
["event"] = "SPELL_CAST_START",
["source"] = "Niuzao",
["npcID"] = 71954,
},
[228277] = {
["npcID"] = 114634,
},
[138467] = {
["encounterName"] = "Durumu the Forgotten",
["source"] = "Appraising Eye",
["encounterID"] = 1572,
["event"] = "SPELL_CAST_START",
["npcID"] = 67858,
},
[392304] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zagdech",
["npcID"] = 194601,
},
[192188] = {
["source"] = "Stoneskin Gatekeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 97320,
},
[335412] = {
["npcID"] = 178660,
},
[376169] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Thaumaturge Fural",
["npcID"] = 189905,
},
["329975"] = {
["npcID"] = 168004,
},
[376170] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Decatriarch Wratheye",
["encounterID"] = 2569,
["event"] = "SPELL_CAST_START",
["npcID"] = 186121,
},
[186045] = {
["event"] = "SPELL_CAST_START",
["source"] = "Delusional Zealot",
["npcID"] = 93955,
},
[155327] = {
["encounterName"] = "Soulbinder Nyami",
["source"] = "Soulbinder Nyami",
["npcID"] = 76177,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1685,
},
["372696"] = {
["source"] = "Primal Juggernaut",
["event"] = "SPELL_CAST_START",
["npcID"] = 188244,
},
[352660] = {
["encounterName"] = "Guardian of the First Ones",
["npcID"] = 175731,
["encounterID"] = 2436,
},
[54334] = {
["source"] = "Living Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 16021,
},
[376171] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Icecaller",
["npcID"] = 190377,
},
[18651] = {
["npcID"] = 29439,
},
[112992] = {
["encounterName"] = "Hoptallus",
["source"] = "Hoptallus",
["encounterID"] = 1413,
["event"] = "SPELL_CAST_START",
["npcID"] = 56717,
},
[395097] = {
["source"] = "Emberdusk",
["event"] = "SPELL_CAST_START",
["npcID"] = 203664,
},
[79850] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunreaver Frosthand",
["npcID"] = 68758,
},
[200637] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["encounterID"] = 1793,
["event"] = "SPELL_CAST_START",
["npcID"] = 91007,
},
[400747] = {
["event"] = "SPELL_CAST_START",
["source"] = "Damaged Titan Matrix",
["npcID"] = 201441,
},
[122852] = {
["encounterName"] = "Imperial Vizier Zor'lok",
["source"] = "Imperial Vizier Zor'lok",
["npcID"] = 62980,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1507,
},
[360300] = {
["encounterName"] = "Lords of Dread",
["encounterID"] = 2543,
["npcID"] = 181398,
},
[374622] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Thundering Ravager",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 190690,
},
[384365] = {
["source"] = "Nokhud Plainstomper",
["event"] = "SPELL_CAST_START",
["npcID"] = 191847,
},
[394362] = {
["source"] = "Rasnar the War Ender",
["event"] = "SPELL_CAST_START",
["npcID"] = 193232,
},
[204574] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[37113] = {
["npcID"] = 17771,
},
[384366] = {
["source"] = "Hunting Redbeak",
["event"] = "SPELL_CAST_START",
["npcID"] = 198824,
},
["387411"] = {
["source"] = "Soulharvester Mandakh",
["event"] = "SPELL_CAST_START",
["npcID"] = 195930,
},
[196287] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormwake Hydra",
["npcID"] = 91792,
},
[111594] = {
["npcID"] = 58757,
},
[404846] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[322931] = {
["npcID"] = 158752,
},
[385434] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Teera",
["encounterID"] = 2581,
["event"] = "SPELL_CAST_START",
["npcID"] = 186339,
},
[147689] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ordon Oathguard",
["npcID"] = 72892,
},
[38557] = {
["npcID"] = 67869,
},
[278961] = {
["event"] = "SPELL_CAST_START",
["source"] = "Diseased Lasher",
["npcID"] = 133870,
},
[120429] = {
["source"] = "Agitated Seedstealer",
["event"] = "SPELL_CAST_START",
["npcID"] = 61302,
},
[149187] = {
["source"] = "Dragonmaw Tidal Shaman",
["event"] = "SPELL_CAST_START",
["npcID"] = 72367,
},
[400752] = {
["event"] = "SPELL_CAST_START",
["source"] = "Travard",
["npcID"] = 198947,
},
[372082] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["encounterID"] = 2592,
["event"] = "SPELL_CAST_START",
["npcID"] = 187967,
},
[392561] = {
["isChanneled"] = true,
["source"] = "Quarry Stonebreaker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 197831,
},
[173762] = {
["npcID"] = 155216,
},
[129325] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodthirsty Prowler",
["npcID"] = 62945,
},
[22272] = {
["encounterName"] = "Pandemonius",
["source"] = "Ethereal Sorcerer",
["encounterID"] = 1900,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 18313,
},
[36604] = {
["event"] = "SPELL_CAST_START",
["source"] = "Verdant Emerald Lasher",
["npcID"] = 208750,
},
[195528] = {
["event"] = "SPELL_CAST_START",
["source"] = "Animated Storm",
["npcID"] = 95920,
},
[79856] = {
["source"] = "Alyn Black",
["event"] = "SPELL_CAST_START",
["npcID"] = 61834,
},
[390463] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["npcID"] = 189492,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2607,
},
[408946] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Preserver",
["npcID"] = 198870,
},
[359979] = {
["encounterName"] = "Skolex, the Insatiable Ravener",
["encounterID"] = 2542,
["npcID"] = 181395,
},
[379256] = {
["encounterName"] = "Azureblade",
["source"] = "Draconic Image",
["encounterID"] = 2585,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 192955,
},
[322936] = {
["encounterName"] = "Halkias, the Sin-Stained Goliath",
["encounterID"] = 2401,
["npcID"] = 165408,
},
[196290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormwake Hydra",
["npcID"] = 91792,
},
[394558] = {
["source"] = "Unstable Flame",
["event"] = "SPELL_CAST_START",
["npcID"] = 198577,
},
["400777"] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["encounterID"] = 2680,
["event"] = "SPELL_CAST_START",
["npcID"] = 201320,
},
[200901] = {
["encounterName"] = "Hyrja",
["source"] = "Solsten",
["encounterID"] = 1806,
["event"] = "SPELL_CAST_START",
["npcID"] = 97219,
},
[392565] = {
["isChanneled"] = true,
["source"] = "Quarry Stonebreaker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 197831,
},
[413044] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grotesque Horror",
["npcID"] = 138187,
},
[200913] = {
["source"] = "Wyrmtongue Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 98792,
},
[372087] = {
["source"] = "Defier Draghar",
["event"] = "SPELL_CAST_START",
["npcID"] = 187897,
},
[403836] = {
["source"] = "Shade of Onyxia",
["event"] = "SPELL_CAST_START",
["npcID"] = 199008,
},
[143962] = {
["encounterName"] = "Fallen Protectors",
["source"] = "Embodied Sorrow",
["npcID"] = 71481,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1598,
},
[107357] = {
["encounterName"] = "Taran Zhu",
["source"] = "Taran Zhu",
["npcID"] = 56884,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1306,
},
["396812"] = {
["source"] = "Spellbound Scepter",
["event"] = "SPELL_CAST_START",
["npcID"] = 196576,
},
[31707] = {
["npcID"] = 78116,
},
[15982] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodhilt Wolf-Sister",
["npcID"] = 67874,
},
[241345] = {
["source"] = "Defensive Countermeasure",
["event"] = "SPELL_CAST_START",
["npcID"] = 120449,
},
[263318] = {
["encounterName"] = "Adderis and Aspix",
["npcID"] = 133944,
["encounterID"] = 2124,
},
[143330] = {
["encounterName"] = "Fallen Protectors",
["source"] = "He Softfoot",
["encounterID"] = 1598,
["event"] = "SPELL_CAST_START",
["npcID"] = 71479,
},
[392569] = {
["source"] = "Flamegullet",
["event"] = "SPELL_CAST_START",
["npcID"] = 197697,
},
[396665] = {
["source"] = "Magmas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199027,
},
[136904] = {
["encounterName"] = "Council of Elders",
["source"] = "Frost King Malakk",
["npcID"] = 69131,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1570,
},
[376186] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overseer Lahar",
["npcID"] = 189235,
},
[331133] = {
["npcID"] = 166335,
},
[140245] = {
["source"] = "Ancient Stone Conqueror",
["event"] = "SPELL_CAST_START",
["npcID"] = 69238,
},
[388474] = {
["source"] = "Temporal Investi-gator",
["event"] = "SPELL_CAST_START",
["npcID"] = 201664,
},
[265368] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bewitched Captain",
["npcID"] = 131587,
},
["265091"] = {
["source"] = "Devout Blood Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 131492,
},
[88170] = {
["event"] = "SPELL_CAST_START",
["source"] = "Turbulent Squall",
["npcID"] = 45924,
},
[322943] = {
["encounterName"] = "Halkias, the Sin-Stained Goliath",
["encounterID"] = 2401,
["npcID"] = 165408,
},
[372262] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Bonesplitter",
["npcID"] = 189467,
},
[409975] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Commander",
["npcID"] = 202109,
},
[302465] = {
["encounterName"] = "Radiance of Azshara",
["npcID"] = 152364,
["encounterID"] = 2305,
},
[372093] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Fire Elemental",
["npcID"] = 191110,
},
[396836] = {
["source"] = "Colossal Glacier",
["event"] = "SPELL_CAST_START",
["npcID"] = 194798,
},
[214989] = {
["source"] = "Spirit of Vengeance",
["event"] = "SPELL_CAST_START",
["npcID"] = 100364,
},
[200658] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadsoul Ruiner",
["npcID"] = 95771,
},
[84469] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felhand Demon-Speaker",
["npcID"] = 67764,
},
[196563] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Warlord Parjesh",
["npcID"] = 91784,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1810,
},
[255952] = {
["encounterName"] = "Skycap'n Kragg",
["source"] = "Skycap'n Kragg",
["encounterID"] = 2093,
["event"] = "SPELL_CAST_START",
["npcID"] = 126832,
},
[335233] = {
["npcID"] = 179859,
},
[296850] = {
["encounterName"] = "The Queen's Court",
["npcID"] = 152852,
["encounterID"] = 2311,
},
[392574] = {
["source"] = "Tempest Channeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 198047,
},
[341902] = {
["npcID"] = 174197,
},
[265770] = {
["source"] = "Unhinged Craven",
["event"] = "SPELL_CAST_START",
["npcID"] = 135054,
},
[79721] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thunder Cleft Brave",
["npcID"] = 59853,
},
[126822] = {
["source"] = "Stone Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 70334,
},
[408959] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["npcID"] = 199659,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[257732] = {
["source"] = "Irontide Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 129602,
},
[114535] = {
["npcID"] = 59576,
},
[196296] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormwake Hydra",
["npcID"] = 91792,
},
[165578] = {
["encounterName"] = "Bonemaw",
["source"] = "Bonemaw",
["encounterID"] = 1679,
["event"] = "SPELL_CAST_START",
["npcID"] = 75452,
},
[384385] = {
["event"] = "SPELL_CAST_START",
["source"] = "Prowling Frigidpelt",
["npcID"] = 193062,
},
[147653] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tsavo'ka",
["npcID"] = 72808,
},
[147120] = {
["encounterName"] = "Garrosh Hellscream",
["source"] = "Garrosh Hellscream",
["npcID"] = 71865,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1623,
},
[405391] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rionthus",
["npcID"] = 200918,
},
[168929] = {
["encounterName"] = "Skulloc, Son of Gruul",
["encounterID"] = 1754,
["npcID"] = 83612,
},
[322711] = {
["encounterName"] = "Halkias, the Sin-Stained Goliath",
["encounterID"] = 2401,
["npcID"] = 165408,
},
[256979] = {
["encounterName"] = "Council o' Captains",
["source"] = "Captain Eudora",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 126848,
},
[396674] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ripsaw the Stalker",
["npcID"] = 193153,
},
[351621] = {
["npcID"] = 176573,
},
[120929] = {
["event"] = "SPELL_CAST_START",
["source"] = "Abomination of Anger",
["npcID"] = 61707,
},
[392579] = {
["source"] = "Quarry Stonebreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 197831,
},
[396675] = {
["source"] = "Nergazurai",
["event"] = "SPELL_CAST_START",
["npcID"] = 195895,
},
[391055] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[111715] = {
["npcID"] = 58823,
},
[61184] = {
["npcID"] = 58070,
},
[413059] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow Canister",
["npcID"] = 206019,
},
[345239] = {
["npcID"] = 165124,
},
["225100"] = {
["npcID"] = 104270,
},
[213975] = {
["source"] = "Spellwyrm",
["event"] = "SPELL_CAST_START",
["npcID"] = 105884,
},
[413060] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fire Canister",
["npcID"] = 206022,
},
[398483] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nimbulatus, Storm's Wrath",
["npcID"] = 199667,
},
[167095] = {
["npcID"] = 83390,
},
[401316] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[417694] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eye Stalk",
["npcID"] = 208519,
},
[391081] = {
["source"] = "Tserasor the Preserver",
["event"] = "SPELL_CAST_START",
["npcID"] = 190598,
},
[405020] = {
["source"] = "Enraged Watcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 200407,
},
[376200] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forgewrought Monstrosity",
["npcID"] = 194816,
},
[257736] = {
["source"] = "Irontide Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 126919,
},
[128872] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qi'tar the Deathcaller",
["npcID"] = 62863,
},
[243401] = {
["npcID"] = 121911,
},
[396828] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fuming Ice Burrower",
["npcID"] = 197177,
},
[353588] = {
["npcID"] = 179133,
},
[268202] = {
["encounterName"] = "Gorak Tul",
["source"] = "Deathtouched Slaver",
["npcID"] = 135552,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2117,
},
[176309] = {
["source"] = "Twisted Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 88279,
},
[204492] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jandvik Bonepiercer",
["npcID"] = 100948,
},
[385359] = {
["encounterName"] = "Gutshot",
["source"] = "Gutshot",
["encounterID"] = 2567,
["event"] = "SPELL_CAST_START",
["npcID"] = 186116,
},
[400777] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[372107] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Kokia Blazehoof",
["encounterID"] = 2606,
["event"] = "SPELL_CAST_START",
["npcID"] = 189232,
},
[408969] = {
["source"] = "Monstrous Mud",
["event"] = "SPELL_CAST_START",
["npcID"] = 192519,
},
[356680] = {
["npcID"] = 177133,
},
[136985] = {
["source"] = "Fleshcrafter Hoku",
["event"] = "SPELL_CAST_START",
["npcID"] = 69435,
},
[136913] = {
["encounterName"] = "Lei Shen",
["source"] = "Lei Shen",
["npcID"] = 68397,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1579,
},
[408970] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Preserver",
["npcID"] = 198870,
},
[374735] = {
["source"] = "Flamecaller Aymi",
["event"] = "SPELL_CAST_START",
["npcID"] = 190368,
},
[56065] = {
["source"] = "Naxxramas Acolyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 15981,
},
["388392"] = {
["source"] = "Unruly Textbook",
["event"] = "SPELL_CAST_START",
["npcID"] = 196044,
},
[294290] = {
["npcID"] = 144293,
},
[331152] = {
["npcID"] = 167164,
},
[318865] = {
["npcID"] = 170731,
},
["299588"] = {
["npcID"] = 150251,
},
[113143] = {
["encounterName"] = "Darkmaster Gandling",
["source"] = "Darkmaster Gandling",
["encounterID"] = 1430,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 59080,
},
[396825] = {
["source"] = "Rimebound Controller",
["event"] = "SPELL_CAST_START",
["npcID"] = 195836,
},
[257739] = {
["source"] = "Blacktooth Scrapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 129529,
},
[421260] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aurostor",
["npcID"] = 209574,
},
["169841"] = {
["source"] = "Addled Arcanomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 84990,
},
[384538] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tapionnuq",
["npcID"] = 194731,
},
[222995] = {
["source"] = "Highlord Darion Mograine",
["event"] = "SPELL_CAST_START",
["npcID"] = 110739,
},
[260072] = {
["npcID"] = 131834,
},
[376208] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["encounterID"] = 2559,
["event"] = "SPELL_CAST_START",
["npcID"] = 184125,
},
[401318] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[335251] = {
["npcID"] = 166169,
},
["404732"] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Eternal Blaze",
["encounterID"] = 2687,
["event"] = "SPELL_CAST_START",
["npcID"] = 201773,
},
[408975] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Edgelord",
["npcID"] = 198873,
},
[56064] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naxxramas Acolyte",
["npcID"] = 15981,
},
[217260] = {
["npcID"] = 88087,
},
[322965] = {
["npcID"] = 161971,
},
[197805] = {
["encounterName"] = "Helya",
["source"] = "Helya",
["npcID"] = 96759,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1824,
},
[396689] = {
["event"] = "SPELL_CAST_START",
["source"] = "Worldcarver A'tir",
["npcID"] = 186859,
},
[359829] = {
["encounterName"] = "Skolex, the Insatiable Ravener",
["encounterID"] = 2542,
["npcID"] = 181395,
},
[355732] = {
["npcID"] = 179446,
},
[392594] = {
["event"] = "SPELL_CAST_START",
["source"] = "Meatgrinder Sotok",
["npcID"] = 186777,
},
[396690] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dismay Fly",
["npcID"] = 193367,
},
[396823] = {
["source"] = "Fuming Ice Burrower",
["event"] = "SPELL_CAST_START",
["npcID"] = 197177,
},
[136917] = {
["encounterName"] = "Council of Elders",
["source"] = "Frost King Malakk",
["npcID"] = 69131,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1570,
},
[188114] = {
["encounterName"] = "Rokmora",
["source"] = "Rokmora",
["encounterID"] = 1790,
["event"] = "SPELL_CAST_START",
["npcID"] = 91003,
},
[30851] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Summoner",
["npcID"] = 17395,
},
[387388] = {
["source"] = "Worldbreaker Cultist",
["event"] = "SPELL_CAST_START",
["npcID"] = 185595,
},
[322968] = {
["npcID"] = 165111,
},
[398632] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Crackshot",
["npcID"] = 200852,
},
[229544] = {
["npcID"] = 115401,
},
[425492] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["encounterID"] = 2677,
["event"] = "SPELL_CAST_START",
["npcID"] = 204931,
},
[354256] = {
["npcID"] = 179434,
},
[138966] = {
["source"] = "Shadowed Voodoo Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 70060,
},
[350517] = {
["encounterName"] = "Timecap'n Hooktail",
["npcID"] = 175546,
["encounterID"] = 2419,
},
[298940] = {
["encounterName"] = "Trixie & Naeno",
["npcID"] = 153755,
["encounterID"] = 2312,
},
[339353] = {
["npcID"] = 158259,
},
[294195] = {
["npcID"] = 151649,
},
[417738] = {
["event"] = "SPELL_CAST_START",
["source"] = "Peeved",
["npcID"] = 205428,
},
[139438] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Ancestor",
["npcID"] = 69237,
},
[355737] = {
["npcID"] = 179446,
},
[125016] = {
["source"] = "Dog",
["event"] = "SPELL_CAST_START",
["npcID"] = 63955,
},
[44547] = {
["npcID"] = 24697,
},
[313279] = {
["source"] = "Squidtail Screamer",
["event"] = "SPELL_CAST_START",
["npcID"] = 154451,
},
[395214] = {
["event"] = "SPELL_CAST_START",
["source"] = "Worldcarver A'tir",
["npcID"] = 186859,
},
[56067] = {
["source"] = "Naxxramas Acolyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 15981,
},
["192563"] = {
["source"] = "Valarjar Purifier",
["event"] = "SPELL_CAST_START",
["npcID"] = 97197,
},
[200404] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["encounterID"] = 1793,
["event"] = "SPELL_CAST_START",
["npcID"] = 91007,
},
[228528] = {
["npcID"] = 114783,
},
["370764"] = {
["source"] = "Crystal Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 196116,
},
[347548] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[384531] = {
["encounterName"] = "Gutshot",
["source"] = "Rotfang Hyena",
["encounterID"] = 2567,
["event"] = "SPELL_CAST_START",
["npcID"] = 194745,
},
[143973] = {
["encounterName"] = "Kor'kron Dark Shaman",
["source"] = "Wavebinder Kardris",
["npcID"] = 71858,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1606,
},
[348117] = {
["encounterName"] = "The Eye of the Jailer",
["npcID"] = 175725,
["encounterID"] = 2433,
},
[410776] = {
["source"] = "Infinite Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 204658,
},
[106807] = {
["encounterName"] = "Ook-Ook",
["source"] = "Ook-Ook",
["encounterID"] = 1412,
["event"] = "SPELL_CAST_START",
["npcID"] = 56637,
},
[244891] = {
["source"] = "Ironbound Scrapthrower",
["event"] = "SPELL_CAST_START",
["npcID"] = 148173,
},
[134321] = {
["encounterName"] = "Ji-Kun",
["source"] = "Hatchling",
["encounterID"] = 1573,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 68192,
},
[276441] = {
["source"] = "Irontide Skyrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 141485,
},
[351646] = {
["encounterName"] = "So'leah",
["npcID"] = 177269,
["encounterID"] = 2442,
},
[69128] = {
["isChanneled"] = true,
["source"] = "Soulguard Animator",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 36516,
},
[200289] = {
["encounterName"] = "Shade of Xavius",
["source"] = "Shade of Xavius",
["npcID"] = 99192,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1839,
},
[82800] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fel Queen's Guard",
["npcID"] = 207152,
},
[164854] = {
["npcID"] = 80858,
},
[322977] = {
["encounterName"] = "Halkias, the Sin-Stained Goliath",
["npcID"] = 165408,
["encounterID"] = 2401,
},
[372701] = {
["encounterName"] = "Sentinel Talondras",
["source"] = "Sentinel Talondras",
["encounterID"] = 2557,
["event"] = "SPELL_CAST_START",
["npcID"] = 184124,
},
[151545] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodmaul Warder",
["npcID"] = 75210,
},
[319447] = {
["npcID"] = 157016,
},
[322978] = {
["npcID"] = 159174,
},
[360412] = {
["encounterName"] = "Vigilant Guardian",
["encounterID"] = 2512,
["npcID"] = 180773,
},
[384993] = {
["source"] = "Horned Filcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 194698,
},
[351649] = {
["npcID"] = 176576,
},
[341163] = {
["encounterName"] = "Painsmith Raznal",
["encounterID"] = 2430,
["npcID"] = 171396,
},
[427999] = {
["encounterName"] = "Smolderon",
["source"] = "Smolderon",
["encounterID"] = 2824,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 200927,
},
[284968] = {
["npcID"] = 144572,
},
[384416] = {
["encounterName"] = "Gutshot",
["source"] = "Gutshot",
["encounterID"] = 2567,
["event"] = "SPELL_CAST_START",
["npcID"] = 186116,
},
[372129] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["encounterID"] = 2592,
["event"] = "SPELL_CAST_START",
["npcID"] = 187967,
},
[368034] = {
["npcID"] = 183722,
},
[25054] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Priest",
["npcID"] = 10423,
},
[335268] = {
["npcID"] = 170064,
},
[404896] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Eternal Blaze",
["npcID"] = 201773,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[427169] = {
["source"] = "Amalgamation of Dreams",
["event"] = "SPELL_CAST_START",
["npcID"] = 209915,
},
[140288] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zur'chaka the Bonecrafter",
["npcID"] = 69666,
},
[417184] = {
["source"] = "Eviscerator Kintara",
["event"] = "SPELL_CAST_START",
["npcID"] = 207596,
},
[400802] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kalecgos",
["npcID"] = 187676,
},
[122735] = {
["encounterName"] = "Garalon",
["source"] = "Garalon",
["npcID"] = 62164,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1463,
},
[132829] = {
["event"] = "SPELL_CAST_START",
["source"] = "Southsea Lookout",
["npcID"] = 73718,
},
["397914"] = {
["source"] = "Depraved Mistweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 200137,
},
[199674] = {
["source"] = "King Bjorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 97081,
},
[342317] = {
["npcID"] = 181005,
},
[424217] = {
["source"] = "Sparring Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 216676,
},
[368037] = {
["npcID"] = 185677,
},
[272364] = {
["source"] = "Congealed Oil",
["event"] = "SPELL_CAST_START",
["npcID"] = 150698,
},
[384524] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Watcher Irideus",
["npcID"] = 189719,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2615,
},
[418082] = {
["source"] = "Felhound",
["event"] = "SPELL_CAST_START",
["npcID"] = 206090,
},
[319465] = {
["npcID"] = 164184,
},
[227477] = {
["encounterName"] = "Opera Hall",
["encounterID"] = 1957,
["npcID"] = 114284,
},
[425379] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamespreader",
["npcID"] = 210294,
},
[396709] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gutchewer Bear",
["npcID"] = 197134,
},
[44475] = {
["npcID"] = 24683,
},
[404901] = {
["source"] = "Clessington Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 201487,
},
[357550] = {
["npcID"] = 176940,
},
[241809] = {
["npcID"] = 183424,
},
[45578] = {
["event"] = "SPELL_CAST_START",
["source"] = "Warsong Marksman",
["npcID"] = 25244,
},
[355753] = {
["npcID"] = 179894,
},
[425381] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Firelands Flameguard",
["npcID"] = 210290,
},
[79884] = {
["source"] = "Farseer Kylanda",
["event"] = "SPELL_CAST_START",
["npcID"] = 82901,
},
[201733] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Dantalionax",
["encounterID"] = 1835,
["event"] = "SPELL_CAST_START",
["npcID"] = 98970,
},
[145119] = {
["event"] = "SPELL_CAST_START",
["source"] = "Storeroom Guard",
["npcID"] = 73152,
},
[163550] = {
["encounterName"] = "Nitrogg Thundertower",
["encounterID"] = 1732,
["npcID"] = 79545,
},
[368042] = {
["npcID"] = 178508,
},
[318893] = {
["npcID"] = 170731,
},
[404904] = {
["source"] = "Confused Commoner",
["event"] = "SPELL_CAST_START",
["npcID"] = 199999,
},
[168082] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Life Warden Gola",
["npcID"] = 83892,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1757,
},
[15620] = {
["npcID"] = 27749,
},
[408749] = {
["source"] = "Grrrmrrsh Hrrnglscrrrm",
["event"] = "SPELL_CAST_START",
["npcID"] = 204412,
},
[18399] = {
["source"] = "Vectus",
["event"] = "SPELL_CAST_START",
["npcID"] = 10432,
},
[229083] = {
["encounterName"] = "Viz'aduum the Watcher",
["encounterID"] = 2017,
["npcID"] = 114790,
},
[418046] = {
["encounterName"] = "Time-Lost Battlefield",
["source"] = "Grommash Hellscream",
["encounterID"] = 2672,
["event"] = "SPELL_CAST_START",
["npcID"] = 203678,
},
[270334] = {
["event"] = "SPELL_CAST_START",
["source"] = "Portal Breacher",
["npcID"] = 209821,
},
[396807] = {
["source"] = "Gorger",
["event"] = "SPELL_CAST_START",
["npcID"] = 192759,
},
[343470] = {
["npcID"] = 165919,
},
[296956] = {
["npcID"] = 152995,
},
[125241] = {
["event"] = "SPELL_CAST_START",
["source"] = "Norlaxx",
["npcID"] = 50344,
},
[404907] = {
["source"] = "Clessington Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 198920,
},
[404748] = {
["source"] = "Navigator Bi-Yun",
["event"] = "SPELL_CAST_START",
["npcID"] = 201184,
},
[331274] = {
["npcID"] = 167923,
},
[385277] = {
["event"] = "SPELL_CAST_START",
["source"] = "Worldcarver A'tir",
["npcID"] = 186859,
},
[294324] = {
["npcID"] = 144293,
},
[425388] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamewaker Infernoguard",
["npcID"] = 210295,
},
[396717] = {
["source"] = "Cyclas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199029,
},
[368047] = {
["npcID"] = 178508,
},
[421292] = {
["encounterName"] = "Council of Dreams",
["source"] = "Aerwynn",
["npcID"] = 208365,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[359856] = {
["encounterName"] = "The Jailer",
["encounterID"] = 2537,
["npcID"] = 180990,
},
[74613] = {
["npcID"] = 48269,
},
[265741] = {
["event"] = "SPELL_CAST_START",
["source"] = "Matron Bryndle",
["npcID"] = 135329,
},
[392369] = {
["source"] = "Earth Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 190173,
},
[347414] = {
["encounterName"] = "So'azmi",
["npcID"] = 175806,
["encounterID"] = 2437,
},
[151697] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodmaul Overseer",
["npcID"] = 75426,
},
[257756] = {
["source"] = "Bilge Rat Buccaneer",
["event"] = "SPELL_CAST_START",
["npcID"] = 129527,
},
[65033] = {
["encounterName"] = "Eranog",
["source"] = "Vanquished Constrictor Tentacle",
["encounterID"] = 2587,
["event"] = "SPELL_CAST_START",
["npcID"] = 34266,
},
[136339] = {
["source"] = "Nalak",
["event"] = "SPELL_CAST_START",
["npcID"] = 69099,
},
[328980] = {
["npcID"] = 160393,
},
[360451] = {
["encounterName"] = "Skolex, the Insatiable Ravener",
["encounterID"] = 2542,
["npcID"] = 181395,
},
[388529] = {
["source"] = "Seabreaker Skrog",
["event"] = "SPELL_CAST_START",
["npcID"] = 192931,
},
[241798] = {
["npcID"] = 114783,
},
["255041"] = {
["source"] = "Feasting Skyscreamer",
["event"] = "SPELL_CAST_START",
["npcID"] = 128434,
},
[406708] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sindragosa",
["npcID"] = 201094,
},
[372147] = {
["source"] = "Balara",
["event"] = "SPELL_CAST_START",
["npcID"] = 193457,
},
[409009] = {
["source"] = "Summitshaper Lorac",
["event"] = "SPELL_CAST_START",
["npcID"] = 201522,
},
[413105] = {
["encounterName"] = "Chronikar",
["source"] = "Chronikar",
["npcID"] = 198995,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2666,
},
[216800] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thistleleaf Menace",
["npcID"] = 91472,
},
[322999] = {
["encounterName"] = "Devos, Paragon of Loyalty",
["npcID"] = 162061,
["encounterID"] = 2359,
},
[350475] = {
["encounterName"] = "The Nine",
["npcID"] = 175726,
["encounterID"] = 2429,
},
[272402] = {
["source"] = "Cutwater Knife Juggler",
["event"] = "SPELL_CAST_START",
["npcID"] = 129599,
},
[68950] = {
["encounterName"] = "Bronjahm",
["source"] = "Bronjahm",
["encounterID"] = 2006,
["event"] = "SPELL_CAST_START",
["npcID"] = 36497,
},
[388532] = {
["source"] = "O'nank Shorescour",
["event"] = "SPELL_CAST_START",
["npcID"] = 193118,
},
[114548] = {
["encounterName"] = "Yan-Zhu the Uncasked",
["source"] = "Yan-Zhu the Uncasked",
["encounterID"] = 1414,
["event"] = "SPELL_CAST_START",
["npcID"] = 59479,
},
[362507] = {
["npcID"] = 182690,
},
[200418] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["encounterID"] = 1793,
["event"] = "SPELL_CAST_START",
["npcID"] = 91007,
},
[404916] = {
["encounterName"] = "Morchie",
["source"] = "Morchie",
["encounterID"] = 2671,
["event"] = "SPELL_CAST_START",
["npcID"] = 198999,
},
[143502] = {
["encounterName"] = "General Nazgrim",
["source"] = "General Nazgrim",
["npcID"] = 71515,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1603,
},
[145551] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'kron Shadowmage",
["npcID"] = 72150,
},
[34759] = {
["encounterName"] = "High Botanist Freywinn",
["source"] = "High Botanist Freywinn",
["encounterID"] = 1926,
["event"] = "SPELL_CAST_START",
["npcID"] = 17975,
},
[372151] = {
["encounterName"] = "Gutshot",
["source"] = "Gutchewer Bear",
["encounterID"] = 2567,
["event"] = "SPELL_CAST_START",
["npcID"] = 186284,
},
[122740] = {
["encounterName"] = "Imperial Vizier Zor'lok",
["source"] = "Imperial Vizier Zor'lok",
["npcID"] = 62980,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1507,
},
[15472] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Warlock",
["npcID"] = 17371,
},
[118663] = {
["source"] = "Snagtooth Hooligan",
["event"] = "SPELL_CAST_START",
["npcID"] = 56462,
},
[388535] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gnawbone Chainchewer",
["npcID"] = 196521,
},
[425397] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Fiery Treant",
["npcID"] = 208459,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2731,
},
[143503] = {
["encounterName"] = "General Nazgrim",
["source"] = "General Nazgrim",
["encounterID"] = 1603,
["event"] = "SPELL_CAST_START",
["npcID"] = 71515,
},
[227985] = {
["encounterName"] = "Opera Hall",
["npcID"] = 114328,
["encounterID"] = 1957,
},
[404919] = {
["source"] = "Shukoro Rapidstamer",
["event"] = "SPELL_CAST_START",
["npcID"] = 198917,
},
[20692] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lady Jaina Proudmoore",
["npcID"] = 68609,
},
[124944] = {
["event"] = "SPELL_CAST_START",
["source"] = "Adjunct Ikkess",
["npcID"] = 62074,
},
[65035] = {
["encounterName"] = "The Primal Council",
["source"] = "Vanquished Corruptor Tentacle",
["encounterID"] = 2590,
["event"] = "SPELL_CAST_START",
["npcID"] = 34265,
},
[388537] = {
["encounterName"] = "Vexamus",
["source"] = "Vexamus",
["encounterID"] = 2562,
["event"] = "SPELL_CAST_START",
["npcID"] = 194181,
},
[409016] = {
["source"] = "Summitshaper Lorac",
["event"] = "SPELL_CAST_START",
["npcID"] = 201522,
},
[241680] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistress Sassz'ine",
["npcID"] = 121184,
},
[409612] = {
["event"] = "SPELL_CAST_START",
["source"] = "Whisper in the Dark",
["npcID"] = 203806,
},
[319733] = {
["encounterName"] = "Echelon",
["encounterID"] = 2380,
["npcID"] = 164185,
},
[9734] = {
["source"] = "Scarlet High Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 211936,
},
[200732] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["encounterID"] = 1793,
["event"] = "SPELL_CAST_START",
["npcID"] = 91007,
},
[392635] = {
["source"] = "Kaurdyth",
["event"] = "SPELL_CAST_START",
["npcID"] = 197835,
},
[339391] = {
["npcID"] = 158259,
},
[409018] = {
["source"] = "Failed Prototype",
["event"] = "SPELL_CAST_START",
["npcID"] = 203927,
},
[363965] = {
["npcID"] = 183747,
},
[351678] = {
["npcID"] = 178271,
},
[388540] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seabreaker Brute",
["npcID"] = 192928,
},
[374022] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[55467] = {
["source"] = "Unholy Staff",
["event"] = "SPELL_CAST_START",
["npcID"] = 16215,
},
[123974] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chagan Firehoof",
["npcID"] = 63318,
},
[339392] = {
["npcID"] = 158259,
},
[323825] = {
["encounterName"] = "Mordretha",
["encounterID"] = 2404,
["npcID"] = 165994,
},
[255591] = {
["encounterName"] = "Priestess Alun'za",
["source"] = "Priestess Alun'za",
["npcID"] = 122967,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2084,
},
[351680] = {
["encounterName"] = "Fatescribe Roh-Kalo",
["encounterID"] = 2431,
["npcID"] = 175730,
},
[188449] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fel Scorcher",
["npcID"] = 93913,
},
[117830] = {
["event"] = "SPELL_CAST_START",
["source"] = "Xiao",
["npcID"] = 59839,
},
[148518] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Zu Yin",
["npcID"] = 73724,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[394430] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primordial Wrath",
["npcID"] = 190579,
},
[290872] = {
["source"] = "Automated Flame Turret",
["event"] = "SPELL_CAST_START",
["npcID"] = 149879,
},
[334053] = {
["encounterName"] = "Oryphrion",
["npcID"] = 162060,
["encounterID"] = 2358,
},
[310784] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eye of the Depths",
["npcID"] = 159510,
},
[376257] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Tarasek Earthreaver",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191225,
},
[388544] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Overgrown Ancient",
["encounterID"] = 2563,
["event"] = "SPELL_CAST_START",
["npcID"] = 196482,
},
[392640] = {
["source"] = "Thunderhead",
["event"] = "SPELL_CAST_START",
["npcID"] = 197698,
},
[241784] = {
["npcID"] = 114629,
},
[417215] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blood Horde Reaver",
["npcID"] = 207585,
},
[113690] = {
["encounterName"] = "Flameweaver Koegler",
["source"] = "Flameweaver Koegler",
["encounterID"] = 1420,
["event"] = "SPELL_CAST_START",
["npcID"] = 59150,
},
[322818] = {
["encounterName"] = "Devos, Paragon of Loyalty",
["npcID"] = 162061,
["encounterID"] = 2359,
},
[384194] = {
["source"] = "Primalist Cinderweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 190207,
},
[417272] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Lich King",
["npcID"] = 205305,
},
[418000] = {
["source"] = "Fel-Corrupted Kaldorei",
["event"] = "SPELL_CAST_START",
["npcID"] = 206146,
},
[224374] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Infernal Imp",
["npcID"] = 112668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1869,
},
[123767] = {
["npcID"] = 68241,
},
[272609] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Corruptor",
["npcID"] = 138281,
},
[16868] = {
["encounterName"] = "Baroness Anastari",
["source"] = "Baroness Anastari",
["encounterID"] = 479,
["event"] = "SPELL_CAST_START",
["npcID"] = 10436,
},
[330953] = {
["npcID"] = 161531,
},
[396739] = {
["source"] = "The Jolly Giant",
["event"] = "SPELL_CAST_START",
["npcID"] = 195204,
},
[51219] = {
["npcID"] = 46859,
},
[355782] = {
["npcID"] = 179842,
},
[297017] = {
["npcID"] = 152995,
},
[413123] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forgemaster Kraglin",
["npcID"] = 201625,
},
[338002] = {
["npcID"] = 170079,
},
[404932] = {
["source"] = "Mad-Eye Carrey",
["event"] = "SPELL_CAST_START",
["npcID"] = 201181,
},
[146556] = {
["source"] = "Kor'thik Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 72954,
},
[146479] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Goro'dan",
["npcID"] = 72964,
},
[335305] = {
["npcID"] = 171799,
},
[421316] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[396742] = {
["event"] = "SPELL_CAST_START",
["source"] = "Slobberclaw",
["npcID"] = 195972,
},
[198379] = {
["encounterName"] = "Archdruid Glaidalis",
["source"] = "Archdruid Glaidalis",
["npcID"] = 96512,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1836,
},
[366701] = {
["npcID"] = 185268,
},
[294349] = {
["npcID"] = 144301,
},
[171757] = {
["npcID"] = 85902,
},
[373960] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Decatriarch Wratheye",
["encounterID"] = 2569,
["event"] = "SPELL_CAST_START",
["npcID"] = 186121,
},
[320716] = {
["npcID"] = 170901,
},
[83012] = {
["source"] = "Skumblade Filthmonger",
["event"] = "SPELL_CAST_START",
["npcID"] = 69228,
},
[143424] = {
["encounterName"] = "Fallen Protectors",
["source"] = "Sun Tenderheart",
["npcID"] = 71480,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1598,
},
[319560] = {
["npcID"] = 158054,
},
[335308] = {
["npcID"] = 171799,
},
[355787] = {
["encounterName"] = "Painsmith Raznal",
["encounterID"] = 2430,
["npcID"] = 176523,
},
[169732] = {
["source"] = "Ashmaul Stoneshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 84877,
},
[345293] = {
["npcID"] = 170527,
},
[327885] = {
["encounterName"] = "Lord Chamberlain",
["encounterID"] = 2381,
["npcID"] = 164218,
},
[144504] = {
["encounterName"] = "Fallen Protectors",
["source"] = "Embodied Desperation",
["npcID"] = 71482,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1598,
},
[355830] = {
["npcID"] = 179893,
},
[394479] = {
["source"] = "Primordial Hail",
["event"] = "SPELL_CAST_START",
["npcID"] = 189039,
},
[400842] = {
["source"] = "Zaqali Blazestalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 199828,
},
[404679] = {
["source"] = "Mad-Eye Carrey",
["event"] = "SPELL_CAST_START",
["npcID"] = 201181,
},
[319685] = {
["encounterName"] = "Kryxis the Voracious",
["encounterID"] = 2360,
["npcID"] = 162100,
},
[194611] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow Hunter",
["npcID"] = 98926,
},
[413131] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["encounterID"] = 2096,
["event"] = "SPELL_CAST_START",
["npcID"] = 126983,
},
[339407] = {
["npcID"] = 173280,
},
[147185] = {
["source"] = "Aqueous Defender",
["event"] = "SPELL_CAST_START",
["npcID"] = 73191,
},
["384014"] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Watcher Irideus",
["encounterID"] = 2615,
["event"] = "SPELL_CAST_START",
["npcID"] = 189719,
},
[417227] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blood Horde Reaver",
["npcID"] = 207585,
},
[265722] = {
["source"] = "Dust Crawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 148680,
},
[141380] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frostmane Bonechiller",
["npcID"] = 70465,
},
[146501] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sra'thik Amber-Master",
["npcID"] = 72929,
},
[364628] = {
["npcID"] = 183596,
},
[189547] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Soul Cleaver",
["npcID"] = 95640,
},
[327122] = {
["encounterName"] = "Sire Denathrius",
["npcID"] = 168158,
["encounterID"] = 2407,
},
[413133] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forgemaster Kraglin",
["npcID"] = 201625,
},
[158830] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elder Darkweaver Kath",
["npcID"] = 85771,
},
[421325] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[376272] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Tarasek Earthreaver",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191225,
},
[396751] = {
["source"] = "Luumak the Insatiable",
["event"] = "SPELL_CAST_START",
["npcID"] = 195971,
},
[169730] = {
["source"] = "Ashmaul Stoneshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 84877,
},
[173116] = {
["npcID"] = 80700,
},
[411747] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twisted Elementium",
["npcID"] = 205628,
},
[413135] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forgemaster Kraglin",
["npcID"] = 201625,
},
[303300] = {
["source"] = "Primalist Infuser",
["event"] = "SPELL_CAST_START",
["npcID"] = 186112,
},
[329916] = {
["npcID"] = 171173,
},
[413136] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["encounterID"] = 2096,
["event"] = "SPELL_CAST_START",
["npcID"] = 126983,
},
["371984"] = {
["source"] = "Flashfrost Chillweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 188067,
},
[193597] = {
["encounterName"] = "Lady Hatecoil",
["source"] = "Lady Hatecoil",
["npcID"] = 91789,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1811,
},
[404945] = {
["event"] = "SPELL_CAST_START",
["source"] = "Winglord Iyazael",
["npcID"] = 199401,
},
[409041] = {
["source"] = "Failed Prototype",
["event"] = "SPELL_CAST_START",
["npcID"] = 203927,
},
[164973] = {
["event"] = "SPELL_CAST_START",
["source"] = "Everbloom Naturalist",
["npcID"] = 81819,
},
[87618] = {
["encounterName"] = "Asaad",
["source"] = "Asaad",
["npcID"] = 43875,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1042,
},
[340073] = {
["npcID"] = 162741,
},
[392659] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Alpha",
["npcID"] = 194224,
},
[331223] = {
["npcID"] = 162763,
},
[368085] = {
["npcID"] = 183722,
},
[339415] = {
["encounterName"] = "Xav the Unfallen",
["encounterID"] = 2366,
["npcID"] = 162329,
},
[392660] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Hornswog",
["npcID"] = 187111,
},
[147202] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Dragonmaw Bonecrusher",
["npcID"] = 72354,
},
[122754] = {
["encounterName"] = "Garalon",
["source"] = "Garalon",
["npcID"] = 62164,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1463,
},
[117628] = {
["encounterName"] = "The Spirit Kings",
["source"] = "Zian of the Endless Shadow",
["encounterID"] = 1436,
["event"] = "SPELL_CAST_START",
["npcID"] = 60701,
},
[34083] = {
["npcID"] = 47024,
},
[385141] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Galesinger",
["npcID"] = 190373,
},
[383084] = {
["event"] = "SPELL_CAST_START",
["source"] = "Water Primalist",
["npcID"] = 190066,
},
[347609] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[327130] = {
["npcID"] = 165872,
},
[314843] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "N'Zoth the Corruptor",
["npcID"] = 158041,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[384471] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lava Tarantula",
["npcID"] = 191672,
},
[323057] = {
["encounterName"] = "Ingra Maloch",
["encounterID"] = 2397,
["npcID"] = 164567,
},
[227965] = {
["npcID"] = 114544,
},
[347610] = {
["encounterName"] = "So'azmi",
["npcID"] = 175806,
["encounterID"] = 2437,
},
[396780] = {
["source"] = "Rimebound Subjugator",
["event"] = "SPELL_CAST_START",
["npcID"] = 195837,
},
[404951] = {
["source"] = "Mad-Eye Carrey",
["event"] = "SPELL_CAST_START",
["npcID"] = 201181,
},
[80957] = {
["source"] = "Thunderhead Hippogryph",
["event"] = "SPELL_CAST_START",
["npcID"] = 6375,
},
[124982] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Adjunct Suruz",
["npcID"] = 62075,
},
[384473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Icegnaw Mantacorn",
["npcID"] = 187826,
},
["427668"] = {
["encounterName"] = "Commander Ulthok",
["source"] = "Commander Ulthok",
["encounterID"] = 1044,
["event"] = "SPELL_CAST_START",
["npcID"] = 40765,
},
[392665] = {
["source"] = "Time-Lost Thunderhide",
["event"] = "SPELL_CAST_START",
["npcID"] = 187258,
},
[88959] = {
["event"] = "SPELL_CAST_START",
["source"] = "Temple Adept",
["npcID"] = 45935,
},
[104318] = {
["npcID"] = 55659,
},
[437719] = {
["source"] = "Primalist Galesinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 190373,
},
[386259] = {
["source"] = "Basrikron",
["event"] = "SPELL_CAST_START",
["npcID"] = 193535,
},
[413145] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["encounterID"] = 2096,
["event"] = "SPELL_CAST_START",
["npcID"] = 126983,
},
[417241] = {
["source"] = "Gill'dan",
["event"] = "SPELL_CAST_START",
["npcID"] = 204808,
},
[136953] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zandalari Water-Binder",
["npcID"] = 69455,
},
["252781"] = {
["source"] = "Zanchuli Witch-Doctor",
["event"] = "SPELL_CAST_START",
["npcID"] = 122969,
},
[384476] = {
["source"] = "Nokhud Longbow",
["event"] = "SPELL_CAST_START",
["npcID"] = 192789,
},
[400859] = {
["source"] = "Skornak",
["event"] = "SPELL_CAST_START",
["npcID"] = 203643,
},
[355806] = {
["npcID"] = 179891,
},
[389245] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blacktalon Assassin",
["npcID"] = 190153,
},
[413147] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["encounterID"] = 2096,
["event"] = "SPELL_CAST_START",
["npcID"] = 126983,
},
[116606] = {
["isChanneled"] = true,
["source"] = "Zandalari Skullcharger",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 60375,
},
[136954] = {
["encounterName"] = "Dark Animus",
["source"] = "Dark Animus",
["npcID"] = 69427,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1576,
},
[78907] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaldorei Starcaller",
["npcID"] = 183994,
},
[363999] = {
["npcID"] = 183747,
},
[159481] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iron Gunnery Sergeant",
["npcID"] = 81318,
},
[421340] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Anvil",
["npcID"] = 206478,
},
[148582] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Xiang-Lin",
["npcID"] = 73725,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[146534] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aggron",
["npcID"] = 72981,
},
[144468] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chi-Ji",
["npcID"] = 71952,
},
[339426] = {
["npcID"] = 166521,
},
[425437] = {
["event"] = "SPELL_CAST_START",
["source"] = "Surging Lasher",
["npcID"] = 210111,
},
[141413] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ice Spike",
["npcID"] = 70988,
},
[388585] = {
["event"] = "SPELL_CAST_START",
["source"] = "Snappy",
["npcID"] = 193228,
},
["392576"] = {
["source"] = "Tempest Channeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 198047,
},
[392672] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Vanguard",
["npcID"] = 196927,
},
[413151] = {
["encounterName"] = "Grand Vizier Ertan",
["source"] = "Grand Vizier Ertan",
["npcID"] = 43878,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1043,
},
[318949] = {
["npcID"] = 163894,
},
[421343] = {
["encounterName"] = "Smolderon",
["source"] = "Smolderon",
["npcID"] = 200927,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2824,
},
[385181] = {
["encounterName"] = "Gulping Goliath",
["source"] = "Gulping Goliath",
["npcID"] = 189722,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2616,
},
[331237] = {
["npcID"] = 162763,
},
[319628] = {
["npcID"] = 157761,
},
[358548] = {
["npcID"] = 180664,
},
[144473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chi-Ji",
["npcID"] = 71952,
},
[6917] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerub'ar Corpse Harvester",
["npcID"] = 25445,
},
[111670] = {
["encounterName"] = "High Inquisitor Whitemane",
["source"] = "Scarlet Zealot",
["npcID"] = 58590,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1425,
},
[111667] = {
["source"] = "Scarlet Evoker",
["event"] = "SPELL_CAST_START",
["npcID"] = 58756,
},
[376292] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["encounterID"] = 2559,
["event"] = "SPELL_CAST_START",
["npcID"] = 184125,
},
[348313] = {
["encounterName"] = "The Tarragrue",
["npcID"] = 175611,
["encounterID"] = 2423,
},
[268440] = {
["source"] = "Irontide Crackshot",
["event"] = "SPELL_CAST_START",
["npcID"] = 126918,
},
[323048] = {
["npcID"] = 160345,
},
["372561"] = {
["source"] = "Qalashi Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 189227,
},
[347623] = {
["encounterName"] = "So'azmi",
["npcID"] = 175806,
["encounterID"] = 2437,
},
[106546] = {
["source"] = "Bloated Brew Alemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 59518,
},
[57374] = {
["encounterName"] = "The Four Horsemen",
["source"] = "Lady Blaumeux",
["npcID"] = 16065,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1121,
},
[404695] = {
["source"] = "First Mate Ovdah",
["event"] = "SPELL_CAST_START",
["npcID"] = 201182,
},
[20822] = {
["npcID"] = 32257,
},
[148572] = {
["source"] = "Thresher Turret",
["event"] = "SPELL_CAST_START",
["npcID"] = 73742,
},
[161533] = {
["npcID"] = 80699,
},
["397878"] = {
["source"] = "Corrupt Living Water",
["event"] = "SPELL_CAST_START",
["npcID"] = 59873,
},
[396774] = {
["npcID"] = 191105,
},
[124800] = {
["npcID"] = 61502,
},
[176214] = {
["npcID"] = 84483,
},
[393361] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightrot",
["npcID"] = 188707,
},
[396775] = {
["event"] = "SPELL_CAST_START",
["source"] = "Klozicc the Ascended",
["npcID"] = 187209,
},
[257784] = {
["source"] = "Bilge Rat Brinescale",
["event"] = "SPELL_CAST_START",
["npcID"] = 129600,
},
[372201] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Irontorch",
["npcID"] = 189464,
},
[310765] = {
["npcID"] = 159677,
},
[144471] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chi-Ji",
["npcID"] = 71952,
},
[355811] = {
["npcID"] = 177291,
},
[372202] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Qalashi Irontorch",
["npcID"] = 189464,
},
[310766] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eye of the Depths",
["npcID"] = 159510,
},
[392671] = {
["source"] = "Vicious Ice Borer",
["event"] = "SPELL_CAST_START",
["npcID"] = 186392,
},
[385145] = {
["source"] = "Time-Lost Raptor",
["event"] = "SPELL_CAST_START",
["npcID"] = 187256,
},
[352379] = {
["encounterName"] = "Kel'Thuzad",
["npcID"] = 176929,
["encounterID"] = 2422,
},
[392682] = {
["source"] = "Jadzigeth",
["event"] = "SPELL_CAST_START",
["npcID"] = 188447,
},
[417243] = {
["source"] = "Great Glorious Alliance Lieutenant",
["event"] = "SPELL_CAST_START",
["npcID"] = 207581,
},
[146511] = {
["source"] = "Sra'thik Amber-Master",
["event"] = "SPELL_CAST_START",
["npcID"] = 72929,
},
[125825] = {
["source"] = "Sra'thik Drone",
["event"] = "SPELL_CAST_START",
["npcID"] = 63677,
},
[122409] = {
["encounterName"] = "Wind Lord Mel'jarak",
["source"] = "Kor'thik Elite Blademaster",
["npcID"] = 62402,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1498,
},
[384474] = {
["event"] = "SPELL_CAST_START",
["source"] = "Icegnaw Mantacorn",
["npcID"] = 187826,
},
[384492] = {
["source"] = "Nokhud Beastmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 192794,
},
[129921] = {
["isChanneled"] = true,
["source"] = "Maw of Despair",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 59315,
},
[329903] = {
["npcID"] = 157099,
},
[331248] = {
["npcID"] = 171142,
},
[384493] = {
["source"] = "Shikaar Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 184657,
},
[84868] = {
["source"] = "Black Bear",
["event"] = "SPELL_CAST_START",
["npcID"] = 1186,
},
[392685] = {
["isChanneled"] = true,
["source"] = "Quarry Infuser",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 198081,
},
[376279] = {
["encounterName"] = "Terros",
["source"] = "Terros",
["encounterID"] = 2639,
["event"] = "SPELL_CAST_START",
["npcID"] = 190496,
},
[400877] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spinmarrow",
["npcID"] = 203480,
},
[323058] = {
["npcID"] = 165609,
},
[392686] = {
["source"] = "Boolk",
["event"] = "SPELL_CAST_START",
["npcID"] = 191450,
},
[403567] = {
["source"] = "Warden Entrix",
["event"] = "SPELL_CAST_START",
["npcID"] = 200960,
},
[294362] = {
["npcID"] = 151127,
},
[323059] = {
["encounterName"] = "Ingra Maloch",
["encounterID"] = 2397,
["npcID"] = 164804,
},
[328940] = {
["npcID"] = 170923,
},
["382670"] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Teera",
["encounterID"] = 2581,
["event"] = "SPELL_CAST_START",
["npcID"] = 186339,
},
[410848] = {
["event"] = "SPELL_CAST_START",
["source"] = "Neltharion",
["npcID"] = 201668,
},
[237671] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fel Fire Ejector 1-Piece",
["npcID"] = 119648,
},
[141379] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frostmane Bonechiller",
["npcID"] = 70465,
},
[115587] = {
["event"] = "SPELL_CAST_START",
["source"] = "Miss Fanny",
["npcID"] = 60069,
},
[184065] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gorebound Corruptor",
["npcID"] = 94604,
},
[339444] = {
["npcID"] = 173276,
},
[425455] = {
["event"] = "SPELL_CAST_START",
["source"] = "Surging Lasher",
["npcID"] = 210111,
},
[265721] = {
["source"] = "Terrorachna",
["event"] = "SPELL_CAST_START",
["npcID"] = 200349,
},
[37668] = {
["source"] = "Ethereal Spellbinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 18312,
},
[143423] = {
["encounterName"] = "Fallen Protectors",
["source"] = "Sun Tenderheart",
["npcID"] = 71480,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1598,
},
[407640] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Essence of Shadow",
["npcID"] = 201774,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[396786] = {
["source"] = "Rimebound Controller",
["event"] = "SPELL_CAST_START",
["npcID"] = 191654,
},
[167683] = {
["npcID"] = 83687,
},
[201839] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taintheart Summoner",
["npcID"] = 99366,
},
[364616] = {
["npcID"] = 183596,
},
[208944] = {
["encounterName"] = "Grand Magistrix Elisande",
["source"] = "Elisande",
["encounterID"] = 1872,
["event"] = "SPELL_CAST_START",
["npcID"] = 106643,
},
[400883] = {
["source"] = "Zaqali Blazestalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 199828,
},
[323064] = {
["encounterName"] = "Hakkar, the Soulflayer",
["npcID"] = 164558,
["encounterID"] = 2395,
},
[337996] = {
["npcID"] = 170048,
},
[145461] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Mogu Shadow Ritualist",
["npcID"] = 71393,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[188470] = {
["event"] = "SPELL_CAST_START",
["source"] = "Surging Podling",
["npcID"] = 210210,
},
[404980] = {
["source"] = "Mad-Eye Carrey",
["event"] = "SPELL_CAST_START",
["npcID"] = 201181,
},
[30091] = {
["encounterName"] = "Gothik the Harvester",
["source"] = "Necro Knight",
["encounterID"] = 1109,
["event"] = "SPELL_CAST_START",
["npcID"] = 16165,
},
[119684] = {
["encounterName"] = "Xin the Weaponmaster",
["source"] = "Xin the Weaponmaster",
["encounterID"] = 1441,
["event"] = "SPELL_CAST_START",
["npcID"] = 61398,
},
[327887] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2405,
["npcID"] = 166644,
},
[412914] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fragment of Shadow",
["npcID"] = 205968,
},
[32011] = {
["npcID"] = 45618,
},
[156718] = {
["source"] = "Monstrous Corpse Spider",
["event"] = "SPELL_CAST_START",
["npcID"] = 76104,
},
[318971] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Voidspawn Annihilator",
["npcID"] = 163612,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[404982] = {
["source"] = "Mad-Eye Carrey",
["event"] = "SPELL_CAST_START",
["npcID"] = 201181,
},
[310780] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eye of the Depths",
["npcID"] = 159510,
},
[282110] = {
["source"] = "Kaldorei Archer",
["event"] = "SPELL_CAST_START",
["npcID"] = 210645,
},
[137344] = {
["encounterName"] = "Council of Elders",
["source"] = "High Priestess Mar'li",
["encounterID"] = 1570,
["event"] = "SPELL_CAST_START",
["npcID"] = 69132,
},
[59685] = {
["source"] = "Dragonflayer Strategist",
["event"] = "SPELL_CAST_START",
["npcID"] = 23956,
},
[176756] = {
["source"] = "Council Soulspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 89204,
},
[256644] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kel'vax Warrior",
["npcID"] = 126112,
},
[134920] = {
["encounterName"] = "Tortos",
["source"] = "Tortos",
["npcID"] = 67977,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1565,
},
["259187"] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["encounterID"] = 2087,
["event"] = "SPELL_CAST_START",
["npcID"] = 122968,
},
[157742] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Reaver",
["npcID"] = 89186,
},
[427252] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["npcID"] = 208445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2731,
},
[400889] = {
["source"] = "Rampant Tide",
["event"] = "SPELL_CAST_START",
["npcID"] = 201463,
},
[358466] = {
["npcID"] = 178898,
},
[196357] = {
["encounterName"] = "Ivanyr",
["source"] = "Ivanyr",
["encounterID"] = 1827,
["event"] = "SPELL_CAST_START",
["npcID"] = 98203,
},
[198405] = {
["event"] = "SPELL_CAST_START",
["source"] = "Helarjar Champion",
["npcID"] = 97097,
},
[297018] = {
["npcID"] = 152995,
},
[235267] = {
["encounterName"] = "Maiden of Vigilance",
["source"] = "Maiden of Vigilance",
["encounterID"] = 2052,
["event"] = "SPELL_CAST_START",
["npcID"] = 118289,
},
[294401] = {
["npcID"] = 151815,
},
[12492] = {
["npcID"] = 11600,
},
[171044] = {
["npcID"] = 88512,
},
["397888"] = {
["source"] = "Fallen Waterspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 200126,
},
[395594] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zurgaz Corebreaker",
["npcID"] = 193680,
},
[394494] = {
["source"] = "Magmaton",
["event"] = "SPELL_CAST_START",
["npcID"] = 186827,
},
[167688] = {
["encounterName"] = "Nitrogg Thundertower",
["encounterID"] = 1732,
["npcID"] = 82721,
},
[372222] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["encounterID"] = 2585,
["event"] = "SPELL_CAST_START",
["npcID"] = 186739,
},
[392701] = {
["source"] = "Stormshroud Defender",
["event"] = "SPELL_CAST_START",
["npcID"] = 192536,
},
[388284] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Commander",
["npcID"] = 190776,
},
[147650] = {
["npcID"] = 72807,
},
[372223] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Bonetender",
["npcID"] = 189265,
},
[417210] = {
["source"] = "Great Glorious Alliance Lieutenant",
["event"] = "SPELL_CAST_START",
["npcID"] = 207581,
},
[396798] = {
["source"] = "Ohn'ir Windcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 199498,
},
[101907] = {
["source"] = "Strange Snowman",
["event"] = "SPELL_CAST_START",
["npcID"] = 54523,
},
[401642] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[310788] = {
["encounterName"] = "Il'gynoth, Corruption Reborn",
["source"] = "Organ of Corruption",
["npcID"] = 158343,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2345,
},
[387083] = {
["source"] = "Time-Lost Briarback",
["event"] = "SPELL_CAST_START",
["npcID"] = 187264,
},
[319506] = {
["npcID"] = 164232,
},
[372225] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Bonesplitter",
["npcID"] = 189467,
},
[385258] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coastal Eel",
["npcID"] = 198782,
},
[130062] = {
["source"] = "Adjunct Zet'uk",
["event"] = "SPELL_CAST_START",
["npcID"] = 65478,
},
[400896] = {
["source"] = "Rampant Tide",
["event"] = "SPELL_CAST_START",
["npcID"] = 201463,
},
[372226] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Bonetender",
["npcID"] = 189265,
},
[188169] = {
["encounterName"] = "Rokmora",
["source"] = "Rokmora",
["encounterID"] = 1790,
["event"] = "SPELL_CAST_START",
["npcID"] = 91003,
},
[343556] = {
["encounterName"] = "Stichflesh",
["npcID"] = 162689,
},
[161509] = {
["npcID"] = 80699,
},
["257426"] = {
["source"] = "Irontide Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 129602,
},
[36807] = {
["npcID"] = 17771,
},
[396802] = {
["source"] = "Ohn'ir Windcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 199498,
},
[136216] = {
["encounterName"] = "Primordius",
["source"] = "Primordius",
["npcID"] = 69017,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1574,
},
[235271] = {
["encounterName"] = "Maiden of Vigilance",
["source"] = "Maiden of Vigilance",
["encounterID"] = 2052,
["event"] = "SPELL_CAST_START",
["npcID"] = 118289,
},
[425392] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamewaker Infernoguard",
["npcID"] = 210295,
},
[225414] = {
["npcID"] = 108925,
},
[176267] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rylai Crestfall",
["npcID"] = 88224,
},
[260551] = {
["encounterName"] = "Soulbound Goliath",
["source"] = "Soulbound Goliath",
["npcID"] = 131667,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2114,
},
[176268] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rylai Crestfall",
["npcID"] = 88224,
},
[314889] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Exposed Synapse",
["npcID"] = 159578,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[354297] = {
["npcID"] = 177817,
},
["411002"] = {
["source"] = "Cloud Prince",
["event"] = "SPELL_CAST_START",
["npcID"] = 45917,
},
[183962] = {
["encounterName"] = "Archimonde",
["source"] = "Exarch Yrel",
["npcID"] = 92769,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1799,
},
[396805] = {
["source"] = "Gorger",
["event"] = "SPELL_CAST_START",
["npcID"] = 192759,
},
[119688] = {
["source"] = "Et'kil",
["event"] = "SPELL_CAST_START",
["npcID"] = 61540,
},
[129711] = {
["encounterName"] = "Elegon",
["source"] = "Celestial Protector",
["encounterID"] = 1500,
["event"] = "SPELL_CAST_START",
["npcID"] = 60793,
},
[409093] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[364040] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2553,
["npcID"] = 184140,
},
[148676] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Kil'ruk the Wind-Reaver",
["npcID"] = 71161,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1593,
},
[373939] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Rotburst Totem",
["encounterID"] = 2569,
["event"] = "SPELL_CAST_START",
["npcID"] = 190381,
},
[126856] = {
["isChanneled"] = true,
["source"] = "Serevex",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 62580,
},
[331275] = {
["npcID"] = 167533,
},
[411910] = {
["event"] = "SPELL_CAST_START",
["source"] = "Young Storm Dragon",
["npcID"] = 45919,
},
[339226] = {
["npcID"] = 158259,
},
[310703] = {
["event"] = "SPELL_CAST_START",
["source"] = "Abused Soul",
["npcID"] = 159459,
},
[359852] = {
["npcID"] = 181981,
},
[272382] = {
["npcID"] = 178155,
},
[136976] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defiant Devilsaur",
["npcID"] = 67477,
},
[348428] = {
["encounterName"] = "Kel'Thuzad",
["npcID"] = 176605,
["encounterID"] = 2422,
},
[409581] = {
["event"] = "SPELL_CAST_START",
["source"] = "Whisper in the Dark",
["npcID"] = 203806,
},
[400905] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kalecgos",
["npcID"] = 198942,
},
[372235] = {
["source"] = "Blood Horde Shaman",
["event"] = "SPELL_CAST_START",
["npcID"] = 207583,
},
[122761] = {
["encounterName"] = "Imperial Vizier Zor'lok",
["source"] = "Imperial Vizier Zor'lok",
["npcID"] = 62980,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1507,
},
[176133] = {
["encounterName"] = "Blast Furnace",
["source"] = "Slag Elemental",
["npcID"] = 76829,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1690,
},
[114183] = {
["source"] = "Scarlet Scholar",
["event"] = "SPELL_CAST_START",
["npcID"] = 59372,
},
[135843] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadweaver Avartu",
["npcID"] = 68504,
},
[373932] = {
["encounterName"] = "Azureblade",
["source"] = "Draconic Image",
["encounterID"] = 2585,
["event"] = "SPELL_CAST_START",
["npcID"] = 190187,
},
[389086] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hunting Bakar",
["npcID"] = 193741,
},
[269843] = {
["encounterName"] = "Unbound Abomination",
["source"] = "Unbound Abomination",
["npcID"] = 133007,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2123,
},
[80780] = {
["source"] = "Shrieking Banshee",
["event"] = "SPELL_CAST_START",
["npcID"] = 10463,
},
[375056] = {
["encounterName"] = "Chargath, Bane of Scales",
["source"] = "Chargath, Bane of Scales",
["npcID"] = 189340,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2613,
},
[396812] = {
["source"] = "Spellbound Scepter",
["event"] = "SPELL_CAST_START",
["npcID"] = 196576,
},
[400908] = {
["source"] = "Suffocating Menace",
["event"] = "SPELL_CAST_START",
["npcID"] = 201644,
},
[169744] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ashmaul Pyromancer",
["npcID"] = 84878,
},
[417185] = {
["source"] = "Eviscerator Kintara",
["event"] = "SPELL_CAST_START",
["npcID"] = 207596,
},
[382233] = {
["source"] = "Batak",
["event"] = "SPELL_CAST_START",
["npcID"] = 193462,
},
[79881] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Vanquisher",
["npcID"] = 38913,
},
[384978] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["encounterID"] = 2584,
["event"] = "SPELL_CAST_START",
["npcID"] = 186738,
},
[322980] = {
["npcID"] = 163987,
},
[396814] = {
["source"] = "Rimebound Controller",
["event"] = "SPELL_CAST_START",
["npcID"] = 195836,
},
[156669] = {
["encounterName"] = "The Iron Maidens",
["source"] = "Admiral Gar'an",
["npcID"] = 77557,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1695,
},
[388623] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Overgrown Ancient",
["encounterID"] = 2563,
["event"] = "SPELL_CAST_START",
["npcID"] = 196482,
},
[389401] = {
["source"] = "Alora Mistbreeze",
["event"] = "SPELL_CAST_START",
["npcID"] = 189243,
},
[274731] = {
["source"] = "Wave Surger",
["event"] = "SPELL_CAST_START",
["npcID"] = 152673,
},
[351762] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 176533,
["encounterID"] = 2435,
},
[80781] = {
["source"] = "Rockwing Screecher",
["event"] = "SPELL_CAST_START",
["npcID"] = 10409,
},
[114571] = {
["encounterName"] = "Lorewalker Stonestep",
["source"] = "Strife",
["npcID"] = 59051,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1417,
},
[147448] = {
["event"] = "SPELL_CAST_START",
["source"] = "Foreboding Flame",
["npcID"] = 73162,
},
[292139] = {
["npcID"] = 150754,
},
[146422] = {
["source"] = "Noodle Stand",
["event"] = "SPELL_CAST_START",
["npcID"] = 72952,
},
[417751] = {
["source"] = "Klaxxi Blade Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 207922,
},
[347668] = {
["encounterName"] = "The Tarragrue",
["npcID"] = 175611,
["encounterID"] = 2423,
},
[411952] = {
["source"] = "Infinite Timebender",
["event"] = "SPELL_CAST_START",
["npcID"] = 205337,
},
[358695] = {
["npcID"] = 180426,
},
[384292] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Thunder Caller",
["encounterID"] = 2635,
["event"] = "SPELL_CAST_START",
["npcID"] = 194647,
},
[354240] = {
["npcID"] = 179433,
},
[167699] = {
["npcID"] = 83803,
},
[360382] = {
["isChanneled"] = true,
["source"] = "Violetwing Stagbeetle",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 181782,
},
[395217] = {
["source"] = "Riverwalker Tamopo",
["event"] = "SPELL_CAST_START",
["npcID"] = 193240,
},
[396819] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fuming Ice Burrower",
["npcID"] = 197177,
},
[327648] = {
["npcID"] = 168418,
},
[214001] = {
["source"] = "Risen Lancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 102095,
},
[392724] = {
["source"] = "Jadzigeth",
["event"] = "SPELL_CAST_START",
["npcID"] = 188447,
},
[331288] = {
["npcID"] = 167532,
},
[384533] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tapionnuq",
["npcID"] = 194731,
},
[241636] = {
["encounterName"] = "Maiden of Vigilance",
["source"] = "Maiden of Vigilance",
["encounterID"] = 2052,
["event"] = "SPELL_CAST_START",
["npcID"] = 118289,
},
[278044] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wrathful Orchid",
["npcID"] = 186321,
},
[119692] = {
["encounterName"] = "Sha of Fear",
["source"] = "Sha of Fear",
["encounterID"] = 1431,
["event"] = "SPELL_CAST_START",
["npcID"] = 60999,
},
[327995] = {
["npcID"] = 168574,
},
[372247] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskpaw Hidestitcher",
["npcID"] = 187941,
},
[359960] = {
["encounterName"] = "Lords of Dread",
["encounterID"] = 2543,
["npcID"] = 181398,
},
[227493] = {
["encounterName"] = "Attumen the Huntsman",
["encounterID"] = 1960,
["npcID"] = 114262,
},
[188587] = {
["source"] = "Understone Demolisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 102253,
},
[328860] = {
["npcID"] = 162528,
},
[31717] = {
["encounterName"] = "The Black Stalker",
["encounterID"] = 1948,
["npcID"] = 17882,
},
[265759] = {
["event"] = "SPELL_CAST_START",
["source"] = "Matron Bryndle",
["npcID"] = 135329,
},
[49922] = {
["npcID"] = 35072,
},
[421398] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[137203] = {
["encounterName"] = "Council of Elders",
["source"] = "High Priestess Mar'li",
["npcID"] = 69132,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1570,
},
[265760] = {
["event"] = "SPELL_CAST_START",
["source"] = "Matron Bryndle",
["npcID"] = 135329,
},
[417303] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Lich King",
["npcID"] = 205305,
},
[405016] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Essence of Shadow",
["npcID"] = 201774,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[34762] = {
["encounterName"] = "High Botanist Freywinn",
["source"] = "High Botanist Freywinn",
["encounterID"] = 1926,
["event"] = "SPELL_CAST_START",
["npcID"] = 17975,
},
[119693] = {
["encounterName"] = "Sha of Fear",
["source"] = "Sha of Fear",
["encounterID"] = 1431,
["event"] = "SPELL_CAST_START",
["npcID"] = 60999,
},
[368155] = {
["npcID"] = 185505,
},
[414010] = {
["source"] = "Goblin Shredder",
["event"] = "SPELL_CAST_START",
["npcID"] = 200964,
},
["413607"] = {
["source"] = "Infinite Twilight Magus",
["event"] = "SPELL_CAST_START",
["npcID"] = 201223,
},
[396684] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dismay Fly",
["npcID"] = 193367,
},
[277907] = {
["npcID"] = 175671,
},
[388635] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Volatile Spark",
["npcID"] = 194999,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2607,
},
["411001"] = {
["source"] = "Lurking Tempest",
["event"] = "SPELL_CAST_START",
["npcID"] = 45704,
},
[239379] = {
["encounterName"] = "Sisters of the Moon",
["source"] = "Huntress Kasparian",
["npcID"] = 118523,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2050,
},
[164841] = {
["encounterName"] = "Teron'gor",
["source"] = "Teron'gor",
["npcID"] = 77734,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1714,
},
[421402] = {
["source"] = "Primalist Pyremancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 209963,
},
["391634"] = {
["source"] = "Glacial Proto-Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 190403,
},
[347679] = {
["encounterName"] = "The Tarragrue",
["npcID"] = 175611,
["encounterID"] = 2423,
},
["196587"] = {
["encounterName"] = "Amalgam of Souls",
["encounterID"] = 1832,
["npcID"] = 98542,
},
[136986] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zandalari Spear-Shaper",
["npcID"] = 69388,
},
[392733] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greenbelt Turtle",
["npcID"] = 192775,
},
[157465] = {
["encounterName"] = "Vigilant Kaathar",
["source"] = "Vigilant Kaathar",
["npcID"] = 75839,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1686,
},
[413590] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Dazhak",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 201788,
},
[400688] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wyrmslayer Angvardi",
["npcID"] = 201013,
},
[392734] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Lookout",
["npcID"] = 196926,
},
[364449] = {
["npcID"] = 179939,
},
[46026] = {
["encounterName"] = "Priestess Delrissa",
["encounterID"] = 1895,
["npcID"] = 24553,
},
[405022] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[405437] = {
["source"] = "Shadowflame Amalgamation",
["event"] = "SPELL_CAST_START",
["npcID"] = 201934,
},
[200663] = {
["source"] = "Anguished Soul",
["event"] = "SPELL_CAST_START",
["npcID"] = 95433,
},
[417310] = {
["event"] = "SPELL_CAST_START",
["source"] = "Val'kyr Shadowguard",
["npcID"] = 208380,
},
[270246] = {
["npcID"] = 168104,
},
[368529] = {
["encounterName"] = "Halondrus the Reclaimer",
["encounterID"] = 2529,
["npcID"] = 180906,
},
[265376] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fanatical Headhunter",
["npcID"] = 133663,
},
[387411] = {
["source"] = "Soulharvester Galtmaa",
["event"] = "SPELL_CAST_START",
["npcID"] = 195927,
},
[22273] = {
["encounterName"] = "Pandemonius",
["source"] = "Ethereal Sorcerer",
["encounterID"] = 1900,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 18313,
},
[296257] = {
["encounterName"] = "Za'qul",
["npcID"] = 150859,
["encounterID"] = 2293,
},
[9232] = {
["encounterName"] = "High Inquisitor Whitemane",
["source"] = "High Inquisitor Whitemane",
["npcID"] = 3977,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1425,
},
[368163] = {
["npcID"] = 178229,
},
[392576] = {
["source"] = "Tempest Channeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 198047,
},
[392738] = {
["source"] = "Kargpaw the Fetid",
["event"] = "SPELL_CAST_START",
["npcID"] = 186660,
},
[123791] = {
["encounterName"] = "Imperial Vizier Zor'lok",
["source"] = "Imperial Vizier Zor'lok",
["npcID"] = 62980,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1507,
},
[364068] = {
["encounterName"] = "Anduin Wrynn",
["encounterID"] = 2546,
["npcID"] = 183666,
},
[388643] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["npcID"] = 189492,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2607,
},
[376356] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scout Watu",
["npcID"] = 190025,
},
[140248] = {
["source"] = "Ancient Stone Conqueror",
["event"] = "SPELL_CAST_START",
["npcID"] = 69238,
},
[175899] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gorian Runemaster",
["npcID"] = 81272,
},
[180178] = {
["event"] = "SPELL_CAST_START",
["source"] = "Salivating Bloodthirster",
["npcID"] = 92038,
},
[407420] = {
["source"] = "Primalist Runestone",
["event"] = "SPELL_CAST_START",
["npcID"] = 204001,
},
[265772] = {
["source"] = "Unhinged Craven",
["event"] = "SPELL_CAST_START",
["npcID"] = 135054,
},
[368166] = {
["npcID"] = 183814,
},
[136990] = {
["encounterName"] = "Council of Elders",
["source"] = "Frost King Malakk",
["npcID"] = 69131,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1570,
},
[359975] = {
["encounterName"] = "Skolex, the Insatiable Ravener",
["encounterID"] = 2542,
["npcID"] = 181395,
},
[331305] = {
["npcID"] = 161599,
},
[320657] = {
["npcID"] = 175605,
},
[339325] = {
["npcID"] = 173298,
},
[377206] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Dathea, Ascended",
["encounterID"] = 2635,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 189813,
},
[79857] = {
["source"] = "Moni Widdlesprock",
["event"] = "SPELL_CAST_START",
["npcID"] = 61836,
},
[319380] = {
["npcID"] = 159233,
},
[126955] = {
["source"] = "Mogu'shan Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 64061,
},
[272272] = {
["npcID"] = 161692,
},
[364073] = {
["npcID"] = 184735,
},
[159518] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkshard Gnasher",
["npcID"] = 78978,
},
[389488] = {
["npcID"] = 191378,
},
["406918"] = {
["source"] = "Djaradin Lavamancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 202256,
},
[198428] = {
["encounterName"] = "Ularogg Cragshaper",
["source"] = "Ularogg Cragshaper",
["encounterID"] = 1791,
["event"] = "SPELL_CAST_START",
["npcID"] = 91004,
},
[351787] = {
["encounterName"] = "Soulrender Dormazain",
["npcID"] = 177594,
["encounterID"] = 2434,
},
[194242] = {
["source"] = "Witchwood Hag",
["event"] = "SPELL_CAST_START",
["npcID"] = 95310,
},
[253721] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shieldbearer of Zul",
["npcID"] = 127879,
},
[142298] = {
["event"] = "SPELL_CAST_START",
["source"] = "Embercore",
["npcID"] = 70663,
},
[319022] = {
["npcID"] = 158259,
},
[306735] = {
["encounterName"] = "Wrathion",
["source"] = "Wrathion",
["npcID"] = 156818,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2329,
},
[372027] = {
["encounterName"] = "The Primal Council",
["source"] = "Embar Firepath",
["encounterID"] = 2590,
["event"] = "SPELL_CAST_START",
["npcID"] = 187767,
},
[128999] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thundermaw",
["npcID"] = 58456,
},
[133817] = {
["event"] = "SPELL_CAST_START",
["source"] = "Squad Leader Bosh",
["npcID"] = 68143,
},
[345224] = {
["npcID"] = 170039,
},
[79858] = {
["source"] = "Ecilam",
["event"] = "SPELL_CAST_START",
["npcID"] = 155283,
},
[264050] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thistle Acolyte",
["npcID"] = 135474,
},
[116711] = {
["encounterName"] = "Feng the Accursed",
["source"] = "Feng the Accursed",
["encounterID"] = 1390,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 60009,
},
[330118] = {
["npcID"] = 170414,
},
[135112] = {
["isChanneled"] = true,
["source"] = "Goblin Cannon",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 67694,
},
[200642] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadsoul Ruiner",
["npcID"] = 95771,
},
[374623] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Frozen Destroyer",
["npcID"] = 190686,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2605,
},
[355887] = {
["npcID"] = 177293,
},
[310834] = {
["event"] = "SPELL_CAST_START",
["source"] = "Demented Knife-Twister",
["npcID"] = 159417,
},
[297382] = {
["encounterName"] = "King Gobbamak",
["encounterID"] = 2290,
["npcID"] = 153172,
},
[400941] = {
["source"] = "Scattered Bones",
["event"] = "SPELL_CAST_START",
["npcID"] = 201660,
},
[355888] = {
["npcID"] = 177807,
},
[425516] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elder Scaleguard",
["npcID"] = 208285,
},
[298548] = {
["encounterName"] = "Orgozoa",
["npcID"] = 152128,
["encounterID"] = 2303,
},
["76813"] = {
["source"] = "Naz'jar Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 41096,
},
[59638] = {
["encounterName"] = "Painsmith Raznal",
["encounterID"] = 2430,
["npcID"] = 31216,
},
[144328] = {
["encounterName"] = "Kor'kron Dark Shaman",
["source"] = "Earthbreaker Haromm",
["npcID"] = 71859,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1606,
},
[244665] = {
["source"] = "Ember of Azzinoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 122712,
},
[192288] = {
["encounterName"] = "Hyrja",
["source"] = "Olmyr the Enlightened",
["encounterID"] = 1806,
["event"] = "SPELL_CAST_START",
["npcID"] = 97202,
},
[228567] = {
["npcID"] = 114794,
},
[12160] = {
["npcID"] = 81887,
},
[331316] = {
["npcID"] = 167538,
},
[384561] = {
["source"] = "Tapionnuq",
["event"] = "SPELL_CAST_START",
["npcID"] = 194731,
},
[384868] = {
["source"] = "Nokhud Longbow",
["event"] = "SPELL_CAST_START",
["npcID"] = 192789,
},
[310838] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eye of the Depths",
["npcID"] = 159510,
},
[429615] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["encounterID"] = 2708,
["event"] = "SPELL_CAST_START",
["npcID"] = 206172,
},
[134370] = {
["encounterName"] = "Ji-Kun",
["source"] = "Ji-Kun",
["encounterID"] = 1573,
["event"] = "SPELL_CAST_START",
["npcID"] = 69712,
},
[137152] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hidden Fog",
["npcID"] = 69375,
},
[310839] = {
["event"] = "SPELL_CAST_START",
["source"] = "Occult Shadowmender",
["npcID"] = 159425,
},
[314935] = {
["npcID"] = 160409,
},
[363879] = {
["npcID"] = 183747,
},
[405042] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Thadrion",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 200913,
},
[196543] = {
["encounterName"] = "Fenryr",
["source"] = "Fenryr",
["encounterID"] = 1807,
["event"] = "SPELL_CAST_START",
["npcID"] = 95674,
},
[319906] = {
["npcID"] = 167022,
},
[388949] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 196679,
},
[405043] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Nightflame",
["npcID"] = 200931,
},
[340385] = {
["npcID"] = 168147,
},
[413024] = {
["source"] = "Valow, Timesworn Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 201222,
},
[200630] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mindshattered Screecher",
["npcID"] = 95769,
},
[327515] = {
["source"] = "Fen Hornet",
["event"] = "SPELL_CAST_START",
["npcID"] = 168361,
},
[310842] = {
["event"] = "SPELL_CAST_START",
["source"] = "Occult Shadowmender",
["npcID"] = 159425,
},
[273766] = {
["npcID"] = 177539,
},
[334971] = {
["encounterName"] = "Huntsman Altimor",
["npcID"] = 165067,
["encounterID"] = 2418,
},
[372279] = {
["encounterName"] = "The Primal Council",
["source"] = "Dathea Stormlash",
["encounterID"] = 2590,
["event"] = "SPELL_CAST_START",
["npcID"] = 187768,
},
[390472] = {
["npcID"] = 189933,
},
[396854] = {
["source"] = "Brutal Motivator",
["event"] = "SPELL_CAST_START",
["npcID"] = 184453,
},
[46029] = {
["npcID"] = 24684,
},
[366412] = {
["npcID"] = 183746,
},
[327227] = {
["encounterName"] = "Sire Denathrius",
["npcID"] = 167406,
["encounterID"] = 2407,
},
[304253] = {
["npcID"] = 155272,
},
[396629] = {
["event"] = "SPELL_CAST_START",
["source"] = "Territorial Coastling",
["npcID"] = 193163,
},
[302912] = {
["source"] = "Zanj'ir Trapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 153962,
},
[323393] = {
["encounterName"] = "Lord Chamberlain",
["npcID"] = 164218,
["encounterID"] = 2381,
},
[396856] = {
["npcID"] = 191401,
},
[113629] = {
["npcID"] = 59193,
},
[34254] = {
["source"] = "Sunseeker Botanist",
["event"] = "SPELL_CAST_START",
["npcID"] = 18422,
},
[21668] = {
["npcID"] = 13443,
},
[223011] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Undercity Guardian",
["npcID"] = 108570,
},
[355675] = {
["npcID"] = 176705,
},
[355900] = {
["npcID"] = 177807,
},
[369073] = {
["event"] = "SPELL_CAST_START",
["source"] = "Auburntusk Bull",
["npcID"] = 195984,
},
[30937] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Channeler",
["npcID"] = 17653,
},
[400954] = {
["event"] = "SPELL_CAST_START",
["source"] = "Volgoth The Flamebringer",
["npcID"] = 209129,
},
[425300] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Zaqali Flamemancer",
["npcID"] = 210170,
},
[203685] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Mogu'shan Secret-Keeper",
["npcID"] = 99676,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[396859] = {
["npcID"] = 191105,
},
[417338] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Lich King",
["npcID"] = 205305,
},
[142252] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forgotten King",
["npcID"] = 67081,
},
[212773] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Reinforcement",
["npcID"] = 107073,
},
[374569] = {
["source"] = "Monstrous Decay",
["event"] = "SPELL_CAST_START",
["npcID"] = 186227,
},
[377962] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frostfoot Yeti",
["npcID"] = 192914,
},
[323137] = {
["encounterName"] = "Ingra Maloch",
["encounterID"] = 2397,
["npcID"] = 164804,
},
[327233] = {
["npcID"] = 168393,
},
[396861] = {
["source"] = "Arcane Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 190779,
},
[351808] = {
["npcID"] = 176577,
},
[323138] = {
["encounterName"] = "Ingra Maloch",
["encounterID"] = 2397,
["npcID"] = 164567,
},
[202658] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Malignant Defiler",
["npcID"] = 102584,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[127834] = {
["encounterName"] = "Imperial Vizier Zor'lok",
["source"] = "Imperial Vizier Zor'lok",
["npcID"] = 62980,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1507,
},
[394450] = {
["event"] = "SPELL_CAST_START",
["source"] = "Huntmaster Krakle",
["npcID"] = 191972,
},
[134059] = {
["source"] = "Bilgewater Blastgineer",
["event"] = "SPELL_CAST_START",
["npcID"] = 67884,
},
[148730] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spectral Brewmaster",
["npcID"] = 73018,
},
[353635] = {
["encounterName"] = "So'leah",
["npcID"] = 177269,
["encounterID"] = 2442,
},
[106853] = {
["encounterName"] = "Master Snowdrift",
["source"] = "Master Snowdrift",
["npcID"] = 56541,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1304,
},
[272180] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grotesque Horror",
["npcID"] = 138187,
},
[186269] = {
["source"] = "Blightshard Shaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 90998,
},
[356817] = {
["npcID"] = 178877,
},
[384577] = {
["encounterName"] = "Gutshot",
["source"] = "Rotfang Hyena",
["encounterID"] = 2567,
["event"] = "SPELL_CAST_START",
["npcID"] = 194745,
},
[68506] = {
["source"] = "Overlord Agmar",
["event"] = "SPELL_CAST_START",
["npcID"] = 34922,
},
[319275] = {
["npcID"] = 159601,
},
[331333] = {
["npcID"] = 168659,
},
[118914] = {
["npcID"] = 61252,
},
[154527] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Soulbinder",
["npcID"] = 77812,
},
[17274] = {
["event"] = "SPELL_CAST_START",
["source"] = "Injured Warsong Mage",
["npcID"] = 27107,
},
["395859"] = {
["source"] = "Haunting Sha",
["event"] = "SPELL_CAST_START",
["npcID"] = 59555,
},
[288548] = {
["npcID"] = 148797,
},
["381834"] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Rira Hackclaw",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186122,
},
[69591] = {
["source"] = "Bilgewater Soldier",
["event"] = "SPELL_CAST_START",
["npcID"] = 36925,
},
[170905] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kronus",
["npcID"] = 82201,
},
[388424] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primal Tsunami",
["npcID"] = 189729,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2618,
},
[339527] = {
["npcID"] = 173469,
},
[360006] = {
["encounterName"] = "Lords of Dread",
["encounterID"] = 2543,
["npcID"] = 181398,
},
[179101] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Enchantress",
["npcID"] = 88089,
},
[216873] = {
["source"] = "Cordana Felsong",
["event"] = "SPELL_CAST_START",
["npcID"] = 109017,
},
[149416] = {
["npcID"] = 183257,
},
[392773] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rymek",
["npcID"] = 188846,
},
[29928] = {
["npcID"] = 114625,
},
[147011] = {
["encounterName"] = "Garrosh Hellscream",
["source"] = "Garrosh Hellscream",
["npcID"] = 71865,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1623,
},
[339529] = {
["npcID"] = 173448,
},
[362288] = {
["npcID"] = 181968,
},
[347721] = {
["npcID"] = 176396,
},
[134959] = {
["event"] = "SPELL_CAST_START",
["source"] = "Commander Scargash",
["npcID"] = 68474,
},
[372296] = {
["source"] = "Irontorch Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 189466,
},
[128134] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ilikkax",
["npcID"] = 62833,
},
[239401] = {
["encounterName"] = "Demonic Inquisition",
["source"] = "Belac",
["encounterID"] = 2048,
["event"] = "SPELL_CAST_START",
["npcID"] = 116691,
},
[339713] = {
["npcID"] = 162586,
},
[120455] = {
["encounterName"] = "Sha of Fear",
["source"] = "Sha of Fear",
["encounterID"] = 1431,
["event"] = "SPELL_CAST_START",
["npcID"] = 60999,
},
[181155] = {
["encounterName"] = "Hellfire Assault",
["source"] = "Gorebound Felcaster",
["npcID"] = 90409,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1778,
},
[403943] = {
["source"] = "Veltrax",
["event"] = "SPELL_CAST_START",
["npcID"] = 200904,
},
[329706] = {
["npcID"] = 171171,
},
[323149] = {
["encounterName"] = "Ingra Maloch",
["encounterID"] = 2397,
["npcID"] = 164567,
},
["408576"] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Rionthus",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 200918,
},
[397809] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glakis, Winter's Wrath",
["npcID"] = 199502,
},
[178072] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chani Malflame",
["npcID"] = 85129,
},
[323150] = {
["encounterName"] = "Lord Chamberlain",
["encounterID"] = 2381,
["npcID"] = 165737,
},
[327246] = {
["npcID"] = 167524,
},
[317959] = {
["npcID"] = 163458,
},
[143638] = {
["encounterName"] = "General Nazgrim",
["source"] = "General Nazgrim",
["encounterID"] = 1603,
["event"] = "SPELL_CAST_START",
["npcID"] = 71515,
},
[115147] = {
["encounterName"] = "Thalnos the Soulrender",
["source"] = "Thalnos the Soulrender",
["encounterID"] = 1423,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 59789,
},
[377335] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kob'rok",
["npcID"] = 203462,
},
[347726] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[400971] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sulfuric Rager",
["npcID"] = 202622,
},
[37965] = {
["npcID"] = 17871,
},
[390916] = {
["event"] = "SPELL_CAST_START",
["source"] = "Melkhop",
["npcID"] = 193311,
},
[338847] = {
["npcID"] = 167525,
},
[29580] = {
["npcID"] = 114625,
},
[200580] = {
["event"] = "SPELL_CAST_START",
["source"] = "Festerhide Grizzly",
["npcID"] = 95779,
},
[365649] = {
["npcID"] = 184734,
},
[396877] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Air Elemental",
["npcID"] = 196155,
},
["373942"] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Decatriarch Wratheye",
["encounterID"] = 2569,
["event"] = "SPELL_CAST_START",
["npcID"] = 186121,
},
[284402] = {
["npcID"] = 144566,
},
[376399] = {
["npcID"] = 4127,
},
[366142] = {
["npcID"] = 184651,
},
[400974] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rampant Shadowflame",
["npcID"] = 203698,
},
[307639] = {
["encounterName"] = "Vexiona",
["source"] = "Vexiona",
["npcID"] = 157354,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2336,
},
[145286] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Set'thik Wind Wielder",
["npcID"] = 71405,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[396879] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Air Elemental",
["npcID"] = 196155,
},
[413431] = {
["source"] = "Void Lord Aurvizk",
["event"] = "SPELL_CAST_START",
["npcID"] = 200865,
},
[328781] = {
["npcID"] = 159916,
},
[333145] = {
["encounterName"] = "Sun King's Salvation",
["encounterID"] = 2402,
["npcID"] = 167566,
},
[364114] = {
["encounterName"] = "Rygelon",
["encounterID"] = 2549,
["npcID"] = 182777,
},
[167240] = {
["npcID"] = 83028,
},
[153395] = {
["source"] = "Carrion Worm",
["event"] = "SPELL_CAST_START",
["npcID"] = 76057,
},
[222076] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Zealot",
["npcID"] = 111506,
},
[368446] = {
["npcID"] = 180978,
},
[335445] = {
["npcID"] = 180032,
},
[388690] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gorjo the Crab Shackler",
["npcID"] = 193226,
},
[212784] = {
["event"] = "SPELL_CAST_START",
["source"] = "Watchful Inquisitor",
["npcID"] = 105715,
},
[396882] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Air Elemental",
["npcID"] = 196155,
},
[300414] = {
["npcID"] = 150143,
},
[145702] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Sri'thik Bombardier",
["npcID"] = 71385,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
["408805"] = {
["source"] = "Incorporeal Being",
["event"] = "SPELL_CAST_START",
["npcID"] = 204560,
},
[115652] = {
["source"] = "Bloated Brew Alemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 59518,
},
[137099] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zandalari Water-Binder",
["npcID"] = 69455,
},
[202019] = {
["encounterName"] = "Lord Kur'talos Ravencrest",
["source"] = "Dantalionax",
["encounterID"] = 1835,
["event"] = "SPELL_CAST_START",
["npcID"] = 98970,
},
[212258] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["encounterID"] = 1866,
["event"] = "SPELL_CAST_START",
["npcID"] = 104154,
},
[326952] = {
["npcID"] = 168058,
},
[302682] = {
["encounterName"] = "Trixie & Naeno",
["npcID"] = 150712,
["encounterID"] = 2312,
},
[372310] = {
["source"] = "Jadzigeth",
["event"] = "SPELL_CAST_START",
["npcID"] = 188447,
},
[294491] = {
["source"] = "Timeling",
["event"] = "SPELL_CAST_START",
["npcID"] = 186479,
},
[328248] = {
["encounterName"] = "Sun King's Salvation",
["encounterID"] = 2402,
["npcID"] = 165763,
},
[192307] = {
["encounterName"] = "Hyrja",
["source"] = "Hyrja",
["encounterID"] = 1806,
["event"] = "SPELL_CAST_START",
["npcID"] = 95833,
},
[372311] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Trainee",
["npcID"] = 189266,
},
[212786] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[343302] = {
["npcID"] = 173446,
},
[114849] = {
["isChanneled"] = true,
["source"] = "Sha of Despair",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 59651,
},
[355929] = {
["npcID"] = 177803,
},
[294493] = {
["source"] = "Timeless Causality",
["event"] = "SPELL_CAST_START",
["npcID"] = 186464,
},
[386410] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["npcID"] = 189492,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2607,
},
[300764] = {
["npcID"] = 150165,
},
[388696] = {
["event"] = "SPELL_CAST_START",
["source"] = "Luumak the Insatiable",
["npcID"] = 195971,
},
[337227] = {
["npcID"] = 169102,
},
[357729] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 178072,
["encounterID"] = 2435,
},
[351835] = {
["npcID"] = 179942,
},
[131972] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sik'thik Battle-Mender",
["npcID"] = 67093,
},
[407245] = {
["source"] = "Shrinekeeper Qanosh",
["event"] = "SPELL_CAST_START",
["npcID"] = 199839,
},
[402775] = {
["source"] = "Zaqali Shrineguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 202803,
},
[319070] = {
["npcID"] = 163891,
},
[323166] = {
["encounterName"] = "Hakkar, the Soulflayer",
["npcID"] = 164558,
["encounterID"] = 2395,
},
[409177] = {
["event"] = "SPELL_CAST_START",
["source"] = "Entropic Hatred",
["npcID"] = 203809,
},
[347741] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["encounterID"] = 2435,
},
[133813] = {
["source"] = "Serpent Ward",
["event"] = "SPELL_CAST_START",
["npcID"] = 67906,
},
[185039] = {
["encounterName"] = "Hellfire Assault",
["source"] = "Hellfire Cannon",
["npcID"] = 90018,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1778,
},
[15664] = {
["npcID"] = 9776,
},
[345315] = {
["npcID"] = 162849,
},
[106434] = {
["encounterName"] = "Master Snowdrift",
["source"] = "Master Snowdrift",
["npcID"] = 56541,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1304,
},
[355934] = {
["npcID"] = 177817,
},
[147769] = {
["event"] = "SPELL_CAST_START",
["source"] = "Damp Shambler",
["npcID"] = 72771,
},
[137528] = {
["encounterName"] = "Ji-Kun",
["source"] = "Ji-Kun",
["encounterID"] = 1573,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 69712,
},
[427384] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gilgoblin Hunter",
["npcID"] = 40935,
},
[267997] = {
["npcID"] = 135816,
},
[34791] = {
["source"] = "Tempest-Forge Peacekeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 18405,
},
[434269] = {
["event"] = "SPELL_CAST_START",
["source"] = "Daetan Swiftplume",
["npcID"] = 213665,
},
[421024] = {
["encounterName"] = "Council of Dreams",
["source"] = "Pip",
["npcID"] = 208367,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[387684] = {
["source"] = "Earthen Spire",
["event"] = "SPELL_CAST_START",
["npcID"] = 195348,
},
[35234] = {
["source"] = "Marsh Dredger",
["event"] = "SPELL_CAST_START",
["npcID"] = 18137,
},
[294180] = {
["npcID"] = 151773,
},
[415556] = {
["source"] = "Dr. Boom",
["event"] = "SPELL_CAST_START",
["npcID"] = 215146,
},
[316527] = {
["npcID"] = 158992,
},
[126878] = {
["source"] = "Taoshi",
["event"] = "SPELL_CAST_START",
["npcID"] = 62593,
},
[362184] = {
["encounterName"] = "Rygelon",
["encounterID"] = 2549,
["npcID"] = 182777,
},
[241983] = {
["encounterName"] = "Kil'jaeden",
["source"] = "Kil'jaeden",
["encounterID"] = 2051,
["event"] = "SPELL_CAST_START",
["npcID"] = 117269,
},
[388804] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["npcID"] = 186738,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2584,
},
[117485] = {
["encounterName"] = "Will of the Emperor",
["source"] = "Emperor's Courage",
["npcID"] = 60398,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1407,
},
[427333] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rydra Scalegorger",
["npcID"] = 209048,
},
[204114] = {
["npcID"] = 119187,
},
[130414] = {
["npcID"] = 82260,
},
[393810] = {
["source"] = "Shiverweb Queen",
["event"] = "SPELL_CAST_START",
["npcID"] = 186064,
},
[385812] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Volatile Infuser",
["encounterID"] = 2635,
["event"] = "SPELL_CAST_START",
["npcID"] = 192934,
},
[400993] = {
["event"] = "SPELL_CAST_START",
["source"] = "Planesborn Annihilator",
["npcID"] = 209753,
},
[339557] = {
["npcID"] = 173464,
},
["374533"] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["encounterID"] = 2612,
["event"] = "SPELL_CAST_START",
["npcID"] = 189478,
},
[341702] = {
["npcID"] = 162657,
},
[12747] = {
["source"] = "Tar Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 6519,
},
[421473] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["encounterID"] = 2708,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206172,
},
["412922"] = {
["source"] = "Spurlok, Timesworn Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 205158,
},
[78754] = {
["npcID"] = 39261,
},
[131653] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vor'thik Fear-Shaper",
["npcID"] = 62814,
},
[177473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grand Marshal Tremblade",
["npcID"] = 82876,
},
[153234] = {
["encounterName"] = "Azzakel, Vanguard of the Legion",
["source"] = "Azzakel",
["npcID"] = 75927,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1678,
},
[330793] = {
["npcID"] = 169859,
},
[168661] = {
["npcID"] = 81087,
},
[290411] = {
["npcID"] = 150750,
},
[377447] = {
["source"] = "Obsidian Wingguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 192220,
},
[356971] = {
["npcID"] = 180087,
},
[339222] = {
["npcID"] = 158259,
},
[12248] = {
["npcID"] = 17771,
},
[122784] = {
["encounterName"] = "Amber-Shaper Un'sok",
["source"] = "Amber-Shaper Un'sok",
["encounterID"] = 1499,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 62511,
},
[322759] = {
["encounterName"] = "Hakkar, the Soulflayer",
["npcID"] = 164558,
["encounterID"] = 2395,
},
[46035] = {
["npcID"] = 24685,
},
[355945] = {
["npcID"] = 179940,
},
[425573] = {
["event"] = "SPELL_CAST_START",
["source"] = "Keeper of the Dream",
["npcID"] = 210423,
},
[134004] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'kron Priest",
["npcID"] = 68142,
},
[400999] = {
["source"] = "Bonesifter Marwak",
["event"] = "SPELL_CAST_START",
["npcID"] = 200681,
},
[124072] = {
["event"] = "SPELL_CAST_START",
["source"] = "Set'thik Gustwing",
["npcID"] = 63592,
},
[195108] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Stormweaver",
["npcID"] = 91783,
},
[366267] = {
["npcID"] = 185008,
},
[403571] = {
["source"] = "Fael'lin",
["event"] = "SPELL_CAST_START",
["npcID"] = 198916,
},
[355947] = {
["npcID"] = 179802,
},
[376426] = {
["source"] = "Summoned Ripple",
["event"] = "SPELL_CAST_START",
["npcID"] = 192463,
},
[332431] = {
["npcID"] = 177788,
},
[230094] = {
["npcID"] = 115765,
},
[145216] = {
["source"] = "Amalgam of Corruption",
["event"] = "SPELL_CAST_START",
["npcID"] = 72276,
},
[27891] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sludge Belcher",
["npcID"] = 16029,
},
[149312] = {
["event"] = "SPELL_CAST_START",
["source"] = "War Master Kragg",
["npcID"] = 73775,
},
[140629] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eternal Guardian",
["npcID"] = 70586,
},
[93091] = {
["npcID"] = 951,
},
[365825] = {
["npcID"] = 181884,
},
[396907] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Yu'lon",
["encounterID"] = 1416,
["event"] = "SPELL_CAST_START",
["npcID"] = 56762,
},
[417386] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valhalas Vargul",
["npcID"] = 207804,
},
[355950] = {
["npcID"] = 178029,
},
[327280] = {
["npcID"] = 167524,
},
[142883] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maragor",
["npcID"] = 71492,
},
[260666] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gilded Priestess",
["npcID"] = 132126,
},
[273038] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Adolescent Crawg",
["npcID"] = 138812,
},
[343664] = {
["npcID"] = 162452,
},
[116990] = {
["isChanneled"] = true,
["source"] = "Stone Quilen",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 60576,
},
[192138] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Hatecoil Crestrider",
["npcID"] = 97269,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1810,
},
[121762] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sik'thik Builder",
["npcID"] = 62633,
},
["183088"] = {
["npcID"] = 113998,
},
["413044"] = {
["source"] = "Grotesque Horror",
["event"] = "SPELL_CAST_START",
["npcID"] = 138187,
},
[46036] = {
["npcID"] = 24685,
},
[408495] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elder Magma Serpent",
["npcID"] = 203846,
},
[294517] = {
["npcID"] = 151816,
},
[331379] = {
["npcID"] = 167965,
},
[377483] = {
["source"] = "Seeker Teryx",
["event"] = "SPELL_CAST_START",
["npcID"] = 193188,
},
["259531"] = {
["encounterName"] = "Vol'kaal",
["source"] = "Reanimation Totem",
["encounterID"] = 2085,
["event"] = "SPELL_CAST_START",
["npcID"] = 125977,
},
[275110] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodbeak the Ravenous",
["npcID"] = 201535,
},
[338864] = {
["npcID"] = 167526,
},
[336947] = {
["npcID"] = 162853,
},
[290423] = {
["npcID"] = 150750,
},
[358316] = {
["npcID"] = 180681,
},
[8995] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Rifleman",
["npcID"] = 42155,
},
[343105] = {
["npcID"] = 170208,
},
[323190] = {
["npcID"] = 163121,
},
[258908] = {
["npcID"] = 134602,
},
[136748] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shan'ze Soulripper",
["npcID"] = 69903,
},
[157170] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Soulbinder",
["npcID"] = 77812,
},
[396314] = {
["source"] = "Filth Caller",
["event"] = "SPELL_CAST_START",
["npcID"] = 197122,
},
[338853] = {
["npcID"] = 167527,
},
[394917] = {
["encounterName"] = "Eranog",
["source"] = "Flamescale Captain",
["npcID"] = 199233,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[136751] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greater Cave Bat",
["npcID"] = 69351,
},
["200154"] = {
["npcID"] = 102253,
},
[375457] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Juvenile Frost Proto-Dragon",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191222,
},
[337587] = {
["npcID"] = 162880,
},
[384629] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pleasant Alpha",
["npcID"] = 193130,
},
[318409] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shath'Yar Scribe",
["npcID"] = 163690,
},
[362151] = {
["npcID"] = 182745,
},
[198959] = {
["source"] = "Valarjar Runecarver",
["event"] = "SPELL_CAST_START",
["npcID"] = 96664,
},
[417396] = {
["source"] = "Sky-Commander Gadrius Orcbane",
["event"] = "SPELL_CAST_START",
["npcID"] = 207593,
},
[291946] = {
["encounterName"] = "K.U.-J.0.",
["npcID"] = 144246,
["encounterID"] = 2258,
},
[357281] = {
["npcID"] = 180432,
},
[346800] = {
["encounterName"] = "The Council of Blood",
["encounterID"] = 2412,
["npcID"] = 166970,
},
[407199] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[351119] = {
["encounterName"] = "So'leah",
["npcID"] = 177716,
["encounterID"] = 2442,
},
[204611] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[363186] = {
["npcID"] = 183844,
},
[200551] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["encounterID"] = 1793,
["event"] = "SPELL_CAST_START",
["npcID"] = 91007,
},
[31601] = {
["source"] = "Crypt Crawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 10412,
},
[294526] = {
["npcID"] = 151817,
},
[406302] = {
["event"] = "SPELL_CAST_START",
["source"] = "Memory of a Caster",
["npcID"] = 200824,
},
[384633] = {
["encounterName"] = "Gutshot",
["source"] = "Gutshot",
["encounterID"] = 2567,
["event"] = "SPELL_CAST_START",
["npcID"] = 186116,
},
[355963] = {
["npcID"] = 152594,
},
[355349] = {
["npcID"] = 177646,
},
[323236] = {
["encounterName"] = "Lord Chamberlain",
["encounterID"] = 2381,
["npcID"] = 164218,
},
[335485] = {
["npcID"] = 180303,
},
[388730] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gorjo the Crab Shackler",
["npcID"] = 193226,
},
[374430] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Tectonic Crusher",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 190588,
},
[157043] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Ritualist",
["npcID"] = 77130,
},
[117948] = {
["encounterName"] = "The Spirit Kings",
["source"] = "Qiang the Merciless",
["encounterID"] = 1436,
["event"] = "SPELL_CAST_START",
["npcID"] = 60709,
},
[427670] = {
["encounterName"] = "Commander Ulthok",
["source"] = "Commander Ulthok",
["npcID"] = 40765,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1044,
},
[118049] = {
["encounterName"] = "The Spirit Kings",
["source"] = "Subetai the Swift",
["encounterID"] = 1436,
["event"] = "SPELL_CAST_START",
["npcID"] = 60710,
},
[79554] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kor'kron Provisioner",
["npcID"] = 72411,
},
[144839] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Hisek the Swarmkeeper",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71153,
},
[200248] = {
["source"] = "Risen Arcanist",
["event"] = "SPELL_CAST_START",
["npcID"] = 98280,
},
[327296] = {
["npcID"] = 156561,
},
[20716] = {
["source"] = "Bronze Shrine Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 26277,
},
[152962] = {
["encounterName"] = "Nhallish",
["source"] = "Nhallish",
["encounterID"] = 1688,
["event"] = "SPELL_CAST_START",
["npcID"] = 75829,
},
[290435] = {
["npcID"] = 150750,
},
[395987] = {
["source"] = "Jumping Spiderling",
["event"] = "SPELL_CAST_START",
["npcID"] = 199182,
},
[396925] = {
["source"] = "Qalashi Lavamancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 197149,
},
["374563"] = {
["source"] = "Dazzling Dragonfly",
["event"] = "SPELL_CAST_START",
["npcID"] = 190362,
},
[145226] = {
["encounterName"] = "Norushen",
["source"] = "Amalgam of Corruption",
["npcID"] = 72276,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1624,
},
[360064] = {
["npcID"] = 181945,
},
["164192"] = {
["npcID"] = 81236,
},
[401022] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[421501] = {
["encounterName"] = "Council of Dreams",
["source"] = "Pip",
["npcID"] = 208367,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[294533] = {
["npcID"] = 151817,
},
[29492] = {
["npcID"] = 114625,
},
[417406] = {
["source"] = "Ankura Bloodhewer",
["event"] = "SPELL_CAST_START",
["npcID"] = 207589,
},
[290438] = {
["npcID"] = 144534,
},
[392832] = {
["source"] = "Degmakh",
["event"] = "SPELL_CAST_START",
["npcID"] = 194251,
},
[38759] = {
["encounterName"] = "Pandemonius",
["source"] = "Pandemonius",
["encounterID"] = 1900,
["event"] = "SPELL_CAST_START",
["npcID"] = 18341,
},
[171385] = {
["npcID"] = 80382,
},
[180670] = {
["npcID"] = 90215,
},
[409216] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Manaweaver",
["npcID"] = 198872,
},
[261488] = {
["source"] = "7th Legion Lancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 154930,
},
[336763] = {
["npcID"] = 169780,
},
[357196] = {
["npcID"] = 180336,
},
[409217] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Manaweaver",
["npcID"] = 198872,
},
[331398] = {
["npcID"] = 170147,
},
[367481] = {
["source"] = "Cruel Bonecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 186206,
},
[138201] = {
["source"] = "Thunder Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 69821,
},
[389953] = {
["source"] = "Liskanoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 193533,
},
[255814] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reanimated Honor Guard",
["npcID"] = 127757,
},
[335495] = {
["npcID"] = 180032,
},
[320230] = {
["encounterName"] = "Dealer Xy'exa",
["npcID"] = 164450,
["encounterID"] = 2400,
},
[198263] = {
["encounterName"] = "Odyn",
["source"] = "Odyn",
["encounterID"] = 1809,
["event"] = "SPELL_CAST_START",
["npcID"] = 95676,
},
[401342] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crimson Oldblood",
["npcID"] = 201054,
},
[69051] = {
["encounterName"] = "Devourer of Souls",
["source"] = "Devourer of Souls",
["encounterID"] = 2007,
["event"] = "SPELL_CAST_START",
["npcID"] = 36502,
},
[388741] = {
["source"] = "Ukhel Gravestirrer",
["event"] = "SPELL_CAST_START",
["npcID"] = 189928,
},
[394891] = {
["source"] = "Braekkas",
["event"] = "SPELL_CAST_START",
["npcID"] = 196855,
},
[147881] = {
["npcID"] = 73175,
},
[116] = {
["npcID"] = 188027,
},
[145230] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Mogu Shadow Ritualist",
["npcID"] = 71393,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1594,
},
[34934] = {
["source"] = "Ethereal Wraith",
["event"] = "SPELL_CAST_START",
["npcID"] = 18394,
},
[331402] = {
["npcID"] = 180028,
},
[275200] = {
["npcID"] = 138794,
},
[218954] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fog-Frenzied Gladestalker",
["npcID"] = 172071,
},
[347094] = {
["encounterName"] = "Hylbrande",
["npcID"] = 175663,
["encounterID"] = 2426,
},
[31942] = {
["encounterName"] = "Priestess Delrissa",
["encounterID"] = 1895,
["npcID"] = 24555,
},
[384648] = {
["source"] = "Gnarls",
["event"] = "SPELL_CAST_START",
["npcID"] = 197354,
},
[361209] = {
["npcID"] = 182466,
},
[134762] = {
["source"] = "Muerta",
["event"] = "SPELL_CAST_START",
["npcID"] = 68322,
},
[20794] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Flamecaller",
["npcID"] = 38926,
},
[422717] = {
["event"] = "SPELL_CAST_START",
["source"] = "Phebis of the Burning Sea",
["npcID"] = 210306,
},
[388745] = {
["source"] = "Icy Blue Crab",
["event"] = "SPELL_CAST_START",
["npcID"] = 197862,
},
[392841] = {
["source"] = "Degmakh",
["event"] = "SPELL_CAST_START",
["npcID"] = 194251,
},
[330969] = {
["npcID"] = 168723,
},
[111024] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spirit of Redemption",
["npcID"] = 58592,
},
[326574] = {
["encounterName"] = "Stichflesh",
["encounterID"] = 2389,
["npcID"] = 162689,
},
[360076] = {
["npcID"] = 181839,
},
["384633"] = {
["encounterName"] = "Gutshot",
["source"] = "Gutshot",
["encounterID"] = 2567,
["event"] = "SPELL_CAST_START",
["npcID"] = 186116,
},
[106933] = {
["encounterName"] = "Striker Ga'dok",
["source"] = "Striker Ga'dok",
["npcID"] = 56589,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1405,
},
[388747] = {
["event"] = "SPELL_CAST_START",
["source"] = "Boggy Bullfrog",
["npcID"] = 193699,
},
[9591] = {
["source"] = "Gorged Gyreworm",
["event"] = "SPELL_CAST_START",
["npcID"] = 44259,
},
[340869] = {
["npcID"] = 164477,
},
[225100] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guardian Construct",
["npcID"] = 104270,
},
[227776] = {
["encounterName"] = "Opera Hall",
["encounterID"] = 1957,
["npcID"] = 114251,
},
[122064] = {
["encounterName"] = "Wind Lord Mel'jarak",
["source"] = "Sra'thik Amber-Trapper",
["npcID"] = 62405,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1498,
},
[265876] = {
["event"] = "SPELL_CAST_START",
["source"] = "Matron Alma",
["npcID"] = 135365,
},
[27831] = {
["encounterName"] = "Gothik the Harvester",
["source"] = "Unrelenting Rider",
["npcID"] = 16126,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1109,
},
[143765] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Kaz'tik the Manipulator",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71156,
},
[215433] = {
["source"] = "Valarjar Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 95834,
},
[144214] = {
["encounterName"] = "Kor'kron Dark Shaman",
["source"] = "Wavebinder Kardris",
["npcID"] = 71858,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1606,
},
[335505] = {
["npcID"] = 179108,
},
[44504] = {
["npcID"] = 24690,
},
[163665] = {
["encounterName"] = "Grimrail Enforcers",
["encounterID"] = 1748,
["npcID"] = 80805,
},
[138652] = {
["event"] = "SPELL_CAST_START",
["source"] = "Amani'shi Flame Chanter",
["npcID"] = 69909,
},
[300687] = {
["npcID"] = 150168,
},
[209741] = {
["encounterName"] = "Advisor Melandrus",
["source"] = "Image of Advisor Melandrus",
["npcID"] = 105754,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1870,
},
[199146] = {
["source"] = "Gildedfur Stag",
["event"] = "SPELL_CAST_START",
["npcID"] = 96609,
},
[193941] = {
["source"] = "Embershard Scorpion",
["event"] = "SPELL_CAST_START",
["npcID"] = 98406,
},
[15453] = {
["event"] = "SPELL_CAST_START",
["source"] = "Necro Knight",
["npcID"] = 16165,
},
[372369] = {
["source"] = "Shadepaw Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 186490,
},
[409231] = {
["event"] = "SPELL_CAST_START",
["source"] = "Colossal Draconic Golem",
["npcID"] = 203826,
},
[265880] = {
["event"] = "SPELL_CAST_START",
["source"] = "Matron Alma",
["npcID"] = 135365,
},
[121601] = {
["source"] = "Harthak Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 61946,
},
[391958] = {
["source"] = "Relentless Gust",
["event"] = "SPELL_CAST_START",
["npcID"] = 194159,
},
[39133] = {
["encounterName"] = "Warp Splinter",
["source"] = "Warp Splinter",
["encounterID"] = 1929,
["event"] = "SPELL_CAST_START",
["npcID"] = 17977,
},
[265881] = {
["event"] = "SPELL_CAST_START",
["source"] = "Matron Alma",
["npcID"] = 135365,
},
[50025] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wintergrasp Catapult",
["npcID"] = 27881,
},
[405137] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lady Shaz'ra",
["npcID"] = 200885,
},
[324387] = {
["npcID"] = 165197,
},
[331414] = {
["npcID"] = 157754,
},
[319127] = {
["npcID"] = 168407,
},
[137045] = {
["encounterName"] = "Lei Shen",
["source"] = "Lei Shen",
["npcID"] = 68397,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1579,
},
[140115] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zandalari Prophet",
["npcID"] = 70557,
},
[418591] = {
["encounterName"] = "Council of Dreams",
["source"] = "Pip",
["npcID"] = 208367,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[257870] = {
["source"] = "Irontide Buccaneer",
["event"] = "SPELL_CAST_START",
["npcID"] = 130011,
},
[129963] = {
["source"] = "Rothek",
["event"] = "SPELL_CAST_START",
["npcID"] = 62581,
},
[117975] = {
["encounterName"] = "Protectors of the Endless",
["source"] = "Protector Kaolan",
["encounterID"] = 1409,
["event"] = "SPELL_CAST_START",
["npcID"] = 60583,
},
[44164] = {
["encounterName"] = "Priestess Delrissa",
["encounterID"] = 1895,
["npcID"] = 24656,
},
[135591] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sarannha Skyglaive",
["npcID"] = 68503,
},
[119487] = {
["npcID"] = 60491,
},
[90329] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ramkahen Marksman",
["npcID"] = 48514,
},
[298651] = {
["encounterName"] = "Trixie & Naeno",
["npcID"] = 153756,
["encounterID"] = 2312,
},
[79581] = {
["npcID"] = 3098,
},
[341623] = {
["encounterName"] = "Lady Inerva Darkvein",
["npcID"] = 165521,
["encounterID"] = 2406,
},
[392854] = {
["source"] = "Primal Scythid Queen",
["event"] = "SPELL_CAST_START",
["npcID"] = 184853,
},
[331418] = {
["npcID"] = 170160,
},
[15607] = {
["source"] = "Rok'nah Skirmisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 65494,
},
[92380] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Chimaera",
["encounterID"] = 2684,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[406406] = {
["source"] = "Calibrating Scent Matrix",
["event"] = "SPELL_CAST_START",
["npcID"] = 203606,
},
[255824] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dazar'ai Juggernaut",
["npcID"] = 122971,
},
[396432] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Proto-Dragon",
["npcID"] = 189798,
},
[388760] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primal Tsunami",
["encounterID"] = 2618,
["event"] = "SPELL_CAST_START",
["npcID"] = 189729,
},
[278175] = {
["npcID"] = 155226,
},
["198079"] = {
["encounterName"] = "Smashspite the Hateful",
["source"] = "Smashspite the Hateful",
["encounterID"] = 1834,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 98949,
},
[417431] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["encounterID"] = 2677,
["event"] = "SPELL_CAST_START",
["npcID"] = 204931,
},
[323229] = {
["npcID"] = 170856,
},
[278176] = {
["npcID"] = 155226,
},
[366190] = {
["npcID"] = 183495,
},
[115509] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shado-Pan Warden",
["npcID"] = 59751,
},
[242494] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Soul",
["npcID"] = 121498,
},
[163671] = {
["npcID"] = 88782,
},
[183633] = {
["source"] = "Rockbound Pelter",
["event"] = "SPELL_CAST_START",
["npcID"] = 91008,
},
[340807] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2405,
["npcID"] = 166644,
},
[141750] = {
["event"] = "SPELL_CAST_START",
["source"] = "Huntmaster S'thoc",
["npcID"] = 71259,
},
[389949] = {
["source"] = "Nokhud Reaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 187201,
},
[359233] = {
["encounterName"] = "Halondrus the Reclaimer",
["encounterID"] = 2529,
["npcID"] = 181047,
},
[184416] = {
["npcID"] = 169277,
},
[398806] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nimbulatus, Storm's Wrath",
["npcID"] = 199667,
},
[147289] = {
["npcID"] = 72841,
},
[329340] = {
["npcID"] = 165410,
},
[129030] = {
["source"] = "Gorge Stalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 58432,
},
[332610] = {
["npcID"] = 156333,
},
[230201] = {
["encounterName"] = "Mistress Sassz'ine",
["source"] = "Mistress Sassz'ine",
["npcID"] = 115767,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2037,
},
[123931] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jol'Grum",
["npcID"] = 63312,
},
[319138] = {
["npcID"] = 168890,
},
[339617] = {
["npcID"] = 166679,
},
[147290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imperial Python",
["npcID"] = 73163,
},
[373947] = {
["source"] = "Skaara",
["event"] = "SPELL_CAST_START",
["npcID"] = 192949,
},
[46042] = {
["npcID"] = 24686,
},
[356001] = {
["npcID"] = 177808,
},
[278182] = {
["npcID"] = 155226,
},
[138490] = {
["source"] = "Skumblade Saur-Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 69229,
},
[357217] = {
["npcID"] = 180415,
},
[227158] = {
["npcID"] = 113034,
},
[327332] = {
["npcID"] = 163459,
},
[324657] = {
["npcID"] = 166551,
},
[381525] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Kyrakka",
["encounterID"] = 2623,
["event"] = "SPELL_CAST_START",
["npcID"] = 190484,
},
[22127] = {
["npcID"] = 13442,
},
[177599] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rylai Crestfall",
["npcID"] = 88224,
},
[336859] = {
["npcID"] = 162873,
},
[132644] = {
["source"] = "Darkhatched Flesh-hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 67259,
},
[326830] = {
["npcID"] = 164037,
},
[376483] = {
["source"] = "Charred Cinderling",
["event"] = "SPELL_CAST_START",
["npcID"] = 187404,
},
[346980] = {
["encounterName"] = "Hylbrande",
["npcID"] = 176551,
["encounterID"] = 2426,
},
[320132] = {
["encounterName"] = "The Manastorms",
["npcID"] = 164556,
["encounterID"] = 2394,
},
[125871] = {
["isChanneled"] = true,
["source"] = "Zar'thik Augurer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 64454,
},
[198963] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["encounterID"] = 1792,
["event"] = "SPELL_CAST_START",
["npcID"] = 91005,
},
[347814] = {
["npcID"] = 176396,
},
[349797] = {
["encounterName"] = "The Grand Menagerie",
["npcID"] = 176556,
["encounterID"] = 2441,
},
[377384] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aqua Rager",
["npcID"] = 190407,
},
[300650] = {
["npcID"] = 150169,
},
[391842] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormfang Shaman",
["npcID"] = 187552,
},
[368294] = {
["npcID"] = 185752,
},
[388773] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["npcID"] = 186738,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2584,
},
[255421] = {
["encounterName"] = "Rezan",
["source"] = "Rezan",
["npcID"] = 122963,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2086,
},
[412835] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nozdormu",
["npcID"] = 198971,
},
[351912] = {
["npcID"] = 178366,
},
[17843] = {
["npcID"] = 32343,
},
[163677] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bound Soul",
["npcID"] = 116217,
},
[185152] = {
["npcID"] = 157820,
},
[46043] = {
["npcID"] = 24686,
},
[398385] = {
["event"] = "SPELL_CAST_START",
["source"] = "Raging Blazehound",
["npcID"] = 207429,
},
[343722] = {
["npcID"] = 162965,
},
[157534] = {
["npcID"] = 88087,
},
[423491] = {
["event"] = "SPELL_CAST_START",
["source"] = "Raelas Firewind",
["npcID"] = 209152,
},
[356010] = {
["npcID"] = 178041,
},
[351091] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 177787,
["encounterID"] = 2435,
},
[330816] = {
["npcID"] = 169861,
},
[59603] = {
["source"] = "Proto-Drake Rider",
["event"] = "SPELL_CAST_START",
["npcID"] = 24849,
},
[372394] = {
["encounterName"] = "The Primal Council",
["source"] = "Dathea Stormlash",
["encounterID"] = 2590,
["event"] = "SPELL_CAST_START",
["npcID"] = 187768,
},
[357238] = {
["npcID"] = 180429,
},
[357239] = {
["npcID"] = 180407,
},
["169839"] = {
["source"] = "Putrid Pyromancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 84957,
},
[339629] = {
["npcID"] = 173145,
},
[114848] = {
["encounterName"] = "High Inquisitor Whitemane",
["source"] = "High Inquisitor Whitemane",
["npcID"] = 3977,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1425,
},
[397886] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corrupt Droplet",
["npcID"] = 62358,
},
[124849] = {
["encounterName"] = "Grand Empress Shek'zeer",
["source"] = "Grand Empress Shek'zeer",
["encounterID"] = 1501,
["event"] = "SPELL_CAST_START",
["npcID"] = 62837,
},
[352834] = {
["npcID"] = 176959,
},
[275568] = {
["npcID"] = 168442,
},
[206685] = {
["npcID"] = 104493,
},
[172850] = {
["npcID"] = 96323,
},
[356014] = {
["npcID"] = 177356,
},
[378428] = {
["source"] = "Primal Avalanche",
["event"] = "SPELL_CAST_START",
["npcID"] = 187082,
},
[138036] = {
["source"] = "Zandalari Warscout",
["event"] = "SPELL_CAST_START",
["npcID"] = 69768,
},
[342931] = {
["npcID"] = 169410,
},
[143941] = {
["encounterName"] = "Paragons of the Klaxxi",
["source"] = "Kil'ruk the Wind-Reaver",
["encounterID"] = 1593,
["event"] = "SPELL_CAST_START",
["npcID"] = 71161,
},
[357949] = {
["npcID"] = 178883,
},
[298675] = {
["source"] = "Smasher X900",
["event"] = "SPELL_CAST_START",
["npcID"] = 149394,
},
[384686] = {
["encounterName"] = "The Raging Tempest",
["source"] = "The Raging Tempest",
["encounterID"] = 2636,
["event"] = "SPELL_CAST_START",
["npcID"] = 186615,
},
[204243] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nightmare Dweller",
["npcID"] = 101991,
},
[409261] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 198933,
},
[397899] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sha-Touched Guardian",
["npcID"] = 200131,
},
[46044] = {
["npcID"] = 24815,
},
[165122] = {
["encounterName"] = "Grimrail Enforcers",
["encounterID"] = 1748,
["npcID"] = 80816,
},
[424836] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sylvanesh the Ascended",
["npcID"] = 207107,
},
[396975] = {
["npcID"] = 191401,
},
[355477] = {
["npcID"] = 179821,
},
[138044] = {
["source"] = "Zandalari Warscout",
["event"] = "SPELL_CAST_START",
["npcID"] = 69768,
},
[357952] = {
["npcID"] = 178883,
},
[198496] = {
["encounterName"] = "Ularogg Cragshaper",
["source"] = "Ularogg Cragshaper",
["encounterID"] = 1791,
["event"] = "SPELL_CAST_START",
["npcID"] = 91004,
},
[417455] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["encounterID"] = 2677,
["event"] = "SPELL_CAST_START",
["npcID"] = 204931,
},
[356019] = {
["npcID"] = 177537,
},
[360115] = {
["encounterName"] = "Halondrus the Reclaimer",
["encounterID"] = 2529,
["npcID"] = 180906,
},
[77216] = {
["npcID"] = 41182,
},
[325183] = {
["npcID"] = 157883,
},
[194401] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defiled Grovewalker",
["npcID"] = 113646,
},
[137457] = {
["source"] = "Oondasta",
["event"] = "SPELL_CAST_START",
["npcID"] = 69161,
},
[20802] = {
["source"] = "Brackenhide Putrifier",
["event"] = "SPELL_CAST_START",
["npcID"] = 186363,
},
[388000] = {
["source"] = "Bertinuat",
["event"] = "SPELL_CAST_START",
["npcID"] = 196288,
},
[378420] = {
["source"] = "Provoked Geode",
["event"] = "SPELL_CAST_START",
["npcID"] = 189040,
},
[228637] = {
["npcID"] = 114802,
},
["211464"] = {
["npcID"] = 104278,
},
[320614] = {
["encounterName"] = "Blightbone",
["encounterID"] = 2387,
["npcID"] = 164702,
},
[421554] = {
["source"] = "Elisande",
["event"] = "SPELL_CAST_START",
["npcID"] = 208668,
},
[392884] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tevgai",
["npcID"] = 195132,
},
[338490] = {
["npcID"] = 162875,
},
[129145] = {
["source"] = "Emerald Lory",
["event"] = "SPELL_CAST_START",
["npcID"] = 60200,
},
[387501] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Commander",
["npcID"] = 190776,
},
[303545] = {
["npcID"] = 155275,
},
["373943"] = {
["source"] = "Wilted Oak",
["event"] = "SPELL_CAST_START",
["npcID"] = 186229,
},
[359334] = {
["npcID"] = 182364,
},
["383651"] = {
["source"] = "Qalashi Lavamancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 193944,
},
[106421] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shado-Pan Guardian",
["npcID"] = 59741,
},
[111752] = {
["npcID"] = 58823,
},
[356775] = {
["npcID"] = 177791,
},
[353836] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 176565,
["encounterID"] = 2440,
},
[295324] = {
["npcID"] = 154033,
},
[310392] = {
["npcID"] = 159190,
},
[361387] = {
["npcID"] = 182466,
},
[211995] = {
["source"] = "Wyrmtongue Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 105629,
},
[409271] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Magma Mystic",
["npcID"] = 199703,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[375943] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["encounterID"] = 2580,
["event"] = "SPELL_CAST_START",
["npcID"] = 186151,
},
[351931] = {
["npcID"] = 176598,
},
[167120] = {
["npcID"] = 81279,
},
[15586] = {
["npcID"] = 13098,
},
[153679] = {
["encounterName"] = "Slave Watcher Crushto",
["source"] = "Slave Watcher Crushto",
["npcID"] = 74787,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1653,
},
["228025"] = {
["encounterName"] = "Opera Hall",
["encounterID"] = 1957,
["npcID"] = 114329,
},
[13736] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Drek'Thar",
["npcID"] = 11946,
},
[391553] = {
["event"] = "SPELL_CAST_START",
["source"] = "Andantenormu",
["npcID"] = 199609,
},
[330676] = {
["npcID"] = 172388,
},
[357512] = {
["npcID"] = 180495,
},
[125877] = {
["source"] = "Set'thik Windblade",
["event"] = "SPELL_CAST_START",
["npcID"] = 64453,
},
[385974] = {
["encounterName"] = "Vexamus",
["source"] = "Professor Maxdormu",
["encounterID"] = 2562,
["event"] = "SPELL_CAST_START",
["npcID"] = 189668,
},
[336277] = {
["npcID"] = 172265,
},
["397386"] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Magma Mystic",
["encounterID"] = 2682,
["event"] = "SPELL_CAST_START",
["npcID"] = 199703,
},
[388796] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Overgrown Ancient",
["npcID"] = 196482,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2563,
},
[147669] = {
["source"] = "Dragonmaw Elite Grunt",
["event"] = "SPELL_CAST_START",
["npcID"] = 72350,
},
[66489] = {
["npcID"] = 34907,
},
[189227] = {
["source"] = "Crawliac Cinderwitch",
["event"] = "SPELL_CAST_START",
["npcID"] = 95174,
},
[356031] = {
["npcID"] = 177816,
},
[204646] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
["197797"] = {
["encounterName"] = "Ilysanna Ravencrest",
["encounterID"] = 1833,
["npcID"] = 100486,
},
[143210] = {
["encounterName"] = "Fallen Protectors",
["source"] = "He Softfoot",
["npcID"] = 71479,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1598,
},
["264694"] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 131863,
},
[163689] = {
["encounterName"] = "Grimrail Enforcers",
["encounterID"] = 1748,
["npcID"] = 80816,
},
[111398] = {
["isChanneled"] = true,
["source"] = "Scarlet Evangelist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 58685,
},
[46046] = {
["npcID"] = 24687,
},
[112896] = {
["source"] = "Frostmane Flesh-Eater",
["event"] = "SPELL_CAST_START",
["npcID"] = 70746,
},
[164592] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodmaul Geomancer",
["npcID"] = 75198,
},
[396991] = {
["source"] = "Drakonid Breaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 187240,
},
[241509] = {
["encounterName"] = "Mistress Sassz'ine",
["source"] = "Razorjaw Waverunner",
["npcID"] = 115902,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2037,
},
[227823] = {
["encounterName"] = "Maiden of Virtue",
["encounterID"] = 1954,
["npcID"] = 113971,
},
[129135] = {
["source"] = "Crimson Lory",
["event"] = "SPELL_CAST_START",
["npcID"] = 60198,
},
[352589] = {
["encounterName"] = "Guardian of the First Ones",
["npcID"] = 176583,
["encounterID"] = 2436,
},
[351939] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 177891,
["encounterID"] = 2435,
},
[356035] = {
["npcID"] = 179608,
},
[69562] = {
["source"] = "Soulguard Adept",
["event"] = "SPELL_CAST_START",
["npcID"] = 36620,
},
[190313] = {
["encounterName"] = "Archimonde",
["source"] = "Archimonde",
["npcID"] = 91331,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1799,
},
[120759] = {
["encounterName"] = "Commander Vo'jak",
["source"] = "Commander Vo'jak",
["npcID"] = 61634,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1502,
},
[149941] = {
["encounterName"] = "Magmolatus",
["source"] = "Ruination",
["npcID"] = 74570,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1655,
},
[147674] = {
["npcID"] = 72892,
},
[315079] = {
["npcID"] = 161388,
},
[295916] = {
["encounterName"] = "Radiance of Azshara",
["npcID"] = 152364,
["encounterID"] = 2305,
},
[118538] = {
["source"] = "Ik'thik Warrior",
["event"] = "SPELL_CAST_START",
["npcID"] = 56722,
},
[126903] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frostmane Berserker",
["npcID"] = 70471,
},
[46987] = {
["source"] = "Captain Balinda Stonehearth",
["event"] = "SPELL_CAST_START",
["npcID"] = 11949,
},
[295939] = {
["encounterName"] = "HK-8 Aerial Oppression Unit",
["npcID"] = 150190,
["encounterID"] = 2291,
},
[129975] = {
["source"] = "Incarnation of Despair",
["event"] = "SPELL_CAST_START",
["npcID"] = 65872,
},
[147309] = {
["event"] = "SPELL_CAST_START",
["source"] = "Windfeather Nestkeeper",
["npcID"] = 72761,
},
[165740] = {
["npcID"] = 82007,
},
[10277] = {
["npcID"] = 4458,
},
[221356] = {
["source"] = "Twilight Stardancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 111164,
},
[371005] = {
["source"] = "Crystal Thrasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 187139,
},
[315082] = {
["npcID"] = 158259,
},
[120760] = {
["encounterName"] = "Commander Vo'jak",
["source"] = "Commander Vo'jak",
["npcID"] = 61634,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1502,
},
[326021] = {
["npcID"] = 172312,
},
[306289] = {
["encounterName"] = "Wrathion",
["source"] = "Wrathion",
["npcID"] = 156818,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2329,
},
[270479] = {
["npcID"] = 136593,
},
[368930] = {
["npcID"] = 185838,
},
[129575] = {
["source"] = "Korjan Slavemaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 65638,
},
[200216] = {
["npcID"] = 101462,
},
[160285] = {
["npcID"] = 80690,
},
[9739] = {
["npcID"] = 81887,
},
[245857] = {
["event"] = "SPELL_CAST_START",
["source"] = "Antoran Felguard",
["npcID"] = 129050,
},
[366091] = {
["npcID"] = 181011,
},
[319775] = {
["npcID"] = 166872,
},
[193682] = {
["encounterName"] = "Lady Hatecoil",
["source"] = "Lady Hatecoil",
["npcID"] = 91789,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1811,
},
[229562] = {
["npcID"] = 115406,
},
[69564] = {
["source"] = "Soulguard Adept",
["event"] = "SPELL_CAST_START",
["npcID"] = 36620,
},
[300171] = {
["npcID"] = 150276,
},
[98705] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magister Brasael",
["npcID"] = 68751,
},
["256405"] = {
["encounterName"] = "Ring of Booty",
["source"] = "Trothak",
["encounterID"] = 2095,
["event"] = "SPELL_CAST_START",
["npcID"] = 126969,
},
[389376] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grizzlerock",
["npcID"] = 193652,
},
[413385] = {
["event"] = "SPELL_CAST_START",
["source"] = "Minister of Air",
["npcID"] = 45930,
},
[417481] = {
["source"] = "Timeline Marauder",
["event"] = "SPELL_CAST_START",
["npcID"] = 199748,
},
[169839] = {
["event"] = "SPELL_CAST_START",
["source"] = "Putrid Pyromancer",
["npcID"] = 84957,
},
[147649] = {
["npcID"] = 72807,
},
[307453] = {
["encounterName"] = "Vexiona",
["source"] = "Vexiona",
["npcID"] = 157354,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2336,
},
[354904] = {
["encounterName"] = "Sylvanas Windrunner",
["npcID"] = 176532,
["encounterID"] = 2435,
},
[123260] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anduin Wrynn",
["npcID"] = 68795,
},
[339010] = {
["npcID"] = 173238,
},
[413387] = {
["event"] = "SPELL_CAST_START",
["source"] = "Executor of the Caliph",
["npcID"] = 45928,
},
[132236] = {
["encounterName"] = "Imperial Vizier Zor'lok",
["source"] = "Imperial Vizier Zor'lok",
["npcID"] = 62980,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1507,
},
["207980"] = {
["npcID"] = 104274,
},
[355429] = {
["npcID"] = 178165,
},
[405812] = {
["encounterName"] = "The Vigilant Steward, Zskarn",
["source"] = "Zskarn",
["npcID"] = 202375,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2689,
},
[257899] = {
["source"] = "Irontide Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 130012,
},
[209676] = {
["encounterName"] = "Advisor Melandrus",
["source"] = "Advisor Melandrus",
["npcID"] = 104218,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1870,
},
[258169] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sandana the Tempest",
["npcID"] = 193176,
},
[364240] = {
["encounterName"] = "Prototype Pantheon",
["encounterID"] = 2544,
["npcID"] = 181549,
},
[252689] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nether Acolyte",
["npcID"] = 127587,
},
[169841] = {
["event"] = "SPELL_CAST_START",
["source"] = "Addled Arcanomancer",
["npcID"] = 84990,
},
[360145] = {
["encounterName"] = "Lords of Dread",
["encounterID"] = 2543,
["npcID"] = 181399,
},
[364241] = {
["encounterName"] = "Prototype Pantheon",
["encounterID"] = 2544,
["npcID"] = 181546,
},
[128954] = {
["event"] = "SPELL_CAST_START",
["source"] = "General Sho Lien",
["npcID"] = 60769,
},
[252687] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowblade Stalker",
["npcID"] = 122970,
},
[145996] = {
["encounterName"] = "Spoils of Pandaria",
["source"] = "Commander Ik'tal",
["npcID"] = 73948,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1594,
},
[342320] = {
["encounterName"] = "Lady Inerva Darkvein",
["npcID"] = 165521,
["encounterID"] = 2406,
},
[390644] = {
["npcID"] = 189954,
},
[388817] = {
["encounterName"] = "Granyth",
["source"] = "Granyth",
["encounterID"] = 2637,
["event"] = "SPELL_CAST_START",
["npcID"] = 186616,
},
[34785] = {
["source"] = "Tempest-Forge Peacekeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 18405,
},
[423107] = {
["source"] = "Hymdall",
["event"] = "SPELL_CAST_START",
["npcID"] = 206644,
},
[209485] = {
["source"] = "Arcane Manifestation",
["event"] = "SPELL_CAST_START",
["npcID"] = 105704,
},
[341131] = {
["npcID"] = 174194,
},
[106428] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shado-Pan Novice",
["npcID"] = 56395,
},
[397010] = {
["source"] = "Qalashi Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 197147,
},
[135029] = {
["npcID"] = 78116,
},
[137077] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Zandalari Spear-Shaper",
["npcID"] = 69388,
},
[126907] = {
["isChanneled"] = true,
["source"] = "Kor'thik Fleshrender",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 64902,
},
[331479] = {
["npcID"] = 167923,
},
[96189] = {
["source"] = "Shattered Sun Marksman",
["event"] = "SPELL_CAST_START",
["npcID"] = 24938,
},
[328880] = {
["encounterName"] = "Artificer Xy'mox",
["encounterID"] = 2405,
["npcID"] = 166644,
},
[224364] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ojin'ba",
["npcID"] = 108236,
},
[204905] = {
["encounterName"] = "Inquisitor Tormentorum",
["source"] = "Mogu'shan Secret-Keeper",
["npcID"] = 99676,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1850,
},
[131178] = {
["npcID"] = 66768,
},
[197735] = {
["event"] = "SPELL_CAST_START",
["source"] = "Filthy Assistant",
["npcID"] = 127584,
},
[201858] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taintheart Deadeye",
["npcID"] = 100539,
},
[331481] = {
["source"] = "Infectious Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 167948,
},
[401109] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crimson Oldblood",
["npcID"] = 201054,
},
[388822] = {
["encounterName"] = "Echo of Doragosa",
["source"] = "Echo of Doragosa",
["encounterID"] = 2565,
["event"] = "SPELL_CAST_START",
["npcID"] = 190609,
},
[116295] = {
["encounterName"] = "Feng the Accursed",
["source"] = "Feng the Accursed",
["encounterID"] = 1390,
["event"] = "SPELL_CAST_START",
["npcID"] = 60009,
},
[397014] = {
["source"] = "Qalashi Emissary",
["event"] = "SPELL_CAST_START",
["npcID"] = 197146,
},
[124860] = {
["source"] = "Sahn Tidehunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 50780,
},
[137079] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Zandalari Spear-Shaper",
["npcID"] = 69388,
},
[126908] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shao-Tien Fist",
["npcID"] = 58927,
},
[393302] = {
["source"] = "Smoldering Colossus",
["event"] = "SPELL_CAST_START",
["npcID"] = 188673,
},
[257904] = {
["source"] = "Ludwig Von Tortollan",
["event"] = "SPELL_CAST_START",
["npcID"] = 129699,
},
[372441] = {
["source"] = "Hyenamaster Durgun",
["event"] = "SPELL_CAST_START",
["npcID"] = 186515,
},
[203401] = {
["event"] = "SPELL_CAST_START",
["source"] = "Savage Dreadstalker",
["npcID"] = 116204,
},
[147546] = {
["npcID"] = 72970,
},
[15241] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Conjuror",
["npcID"] = 10419,
},
["374586"] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["encounterID"] = 2612,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 189478,
},
[316855] = {
["npcID"] = 165267,
},
[122413] = {
["encounterName"] = "Amber-Shaper Un'sok",
["source"] = "Amber Monstrosity",
["encounterID"] = 1499,
["event"] = "SPELL_CAST_START",
["npcID"] = 62711,
},
[389258] = {
["event"] = "SPELL_CAST_START",
["source"] = "Piskato",
["npcID"] = 195973,
},
[324427] = {
["encounterName"] = "Oryphrion",
["npcID"] = 162060,
["encounterID"] = 2358,
},
[138427] = {
["source"] = "Gurubashi Berserker",
["event"] = "SPELL_CAST_START",
["npcID"] = 69916,
},
[165751] = {
["event"] = "SPELL_CAST_START",
["source"] = "Etubrute",
["npcID"] = 82187,
},
[417497] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rude Crude",
["npcID"] = 206617,
},
[120149] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mirror Image",
["npcID"] = 194853,
},
[195320] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drogbar Manathirster",
["npcID"] = 95866,
},
[140375] = {
["event"] = "SPELL_CAST_START",
["source"] = "Loa Speaker",
["npcID"] = 69302,
},
[143225] = {
["encounterName"] = "Fallen Protectors",
["source"] = "He Softfoot",
["encounterID"] = 1598,
["event"] = "SPELL_CAST_START",
["npcID"] = 71479,
},
[306111] = {
["encounterName"] = "Wrathion",
["source"] = "Wrathion",
["npcID"] = 156818,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2329,
},
[392924] = {
["source"] = "High Channeler Ryvati",
["event"] = "SPELL_CAST_START",
["npcID"] = 197535,
},
[57825] = {
["source"] = "Water Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 70979,
},
[417499] = {
["source"] = "Malfunctioning Robotic Cauldron",
["event"] = "SPELL_CAST_START",
["npcID"] = 207111,
},
[417641] = {
["source"] = "Felbolg",
["event"] = "SPELL_CAST_START",
["npcID"] = 206189,
},
[327393] = {
["npcID"] = 163618,
},
[260852] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["npcID"] = 131824,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2113,
},
[314149] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Ritualist",
["npcID"] = 161286,
},
[381659] = {
["source"] = "Cascade",
["event"] = "SPELL_CAST_START",
["npcID"] = 186962,
},
[392926] = {
["source"] = "Flickering Ember",
["event"] = "SPELL_CAST_START",
["npcID"] = 197906,
},
[119843] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crypt Guardian",
["npcID"] = 61766,
},
[351969] = {
["encounterName"] = "Fatescribe Roh-Kalo",
["encounterID"] = 2431,
["npcID"] = 175730,
},
[169849] = {
["source"] = "Sargerei Destructor",
["event"] = "SPELL_CAST_START",
["npcID"] = 89203,
},
[392927] = {
["event"] = "SPELL_CAST_START",
["source"] = "Yaankhi",
["npcID"] = 195101,
},
[15495] = {
["npcID"] = 12047,
},
[257908] = {
["source"] = "Irontide Officer",
["event"] = "SPELL_CAST_START",
["npcID"] = 127106,
},
[145275] = {
["encounterName"] = "Garrosh Hellscream",
["source"] = "Embodied Doubt",
["encounterID"] = 1623,
["event"] = "SPELL_CAST_START",
["npcID"] = 72236,
},
[360162] = {
["encounterName"] = "Vigilant Guardian",
["encounterID"] = 2512,
["npcID"] = 180773,
},
[397383] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Magma Mystic",
["npcID"] = 199703,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[122398] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mutated Construct",
["npcID"] = 62701,
},
[323748] = {
["npcID"] = 158642,
},
[124289] = {
["source"] = "Go-Kan",
["event"] = "SPELL_CAST_START",
["npcID"] = 50331,
},
[173112] = {
["npcID"] = 83697,
},
[227463] = {
["encounterName"] = "Moroes",
["npcID"] = 114320,
["encounterID"] = 1961,
},
[310324] = {
["encounterName"] = "Vexiona",
["source"] = "Vexiona",
["npcID"] = 157354,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2336,
},
[311015] = {
["event"] = "SPELL_CAST_START",
["source"] = "Monstrous Behemoth",
["npcID"] = 159303,
},
[128034] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dread Scarab",
["npcID"] = 63587,
},
[357516] = {
["npcID"] = 177137,
},
[372452] = {
["source"] = "Primal Drift",
["event"] = "SPELL_CAST_START",
["npcID"] = 186421,
},
[27634] = {
["encounterName"] = "Priestess Delrissa",
["encounterID"] = 1895,
["npcID"] = 24555,
},
[394701] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Great Shellkhan",
["npcID"] = 191305,
},
[173148] = {
["npcID"] = 81279,
},
[386509] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ezrigeth",
["npcID"] = 187666,
},
[209033] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Guard",
["npcID"] = 104246,
},
[307968] = {
["encounterName"] = "The Hivemind",
["source"] = "Tek'ris",
["npcID"] = 157254,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2333,
},
[306953] = {
["encounterName"] = "Shad'har the Insatiable",
["source"] = "Shad'har the Insatiable",
["npcID"] = 157231,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2335,
},
[421603] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[204666] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[310042] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Basher Tentacle",
["npcID"] = 158367,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[351976] = {
["npcID"] = 176598,
},
[356072] = {
["npcID"] = 177394,
},
[311019] = {
["event"] = "SPELL_CAST_START",
["source"] = "Monstrous Behemoth",
["npcID"] = 159303,
},
[265966] = {
["npcID"] = 134991,
},
[39207] = {
["event"] = "SPELL_CAST_START",
["source"] = "Servant of Neptulon",
["npcID"] = 134343,
},
[372456] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[317102] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "N'Zoth the Corruptor",
["npcID"] = 158041,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
},
}
PlaterLanguage = {
["language"] = "enUS",
["version"] = 1,
}
PlaterLogs = {
["_general_logs"] = {
"2024-07-24 09:45:07 | INIT | Plater-v583-Retail | Framework v551 | 11.0.0 | enUS | Ggs",
"2024-07-24 09:44:15 | INIT | Plater-v583-Retail | Framework v551 | 11.0.0 | enUS | Mw",
"2024-07-24 09:43:02 | INIT | Plater-v583-Retail | Framework v551 | 11.0.0 | enUS | Ggs",
"2024-07-24 08:08:51 | INIT | Plater-v583-Retail | Framework v551 | 11.0.0 | enUS | Mysticallx",
"2024-07-24 08:00:00 | INIT | Plater-v583-Retail | Framework v551 | 11.0.0 | enUS | Mysticallx",
"2024-07-24 07:58:41 | INIT | Plater-v583-Retail | Framework v551 | 11.0.0 | enUS | Ggs",
"2024-07-24 07:57:21 | INIT | Plater-v583-Retail | Framework v551 | 11.0.0 | enUS | Ggs",
"2024-07-24 07:46:44 | INIT | Plater-v583-Retail | Framework v551 | 11.0.0 | enUS | Mysticallx",
"2024-07-24 07:29:18 | INIT | Plater-v583-Retail | Framework v551 | 11.0.0 | enUS | Mw",
"2024-07-24 07:25:14 | INIT | Plater-v583-Retail | Framework v551 | 11.0.0 | enUS | Réðçräñé",
"2024-07-23 09:57:32 | INIT | Plater-v583-Retail | Framework v551 | 10.2.7 | enUS | Mysticallx",
"2024-07-23 09:56:57 | INIT | Plater-v583-Retail | Framework v551 | 10.2.7 | enUS | Ggs",
"2024-07-23 07:57:42 | INIT | Plater-v583-Retail | Framework v551 | 10.2.7 | enUS | Mysticallx",
"2024-07-23 07:56:57 | INIT | Plater-v583-Retail | Framework v551 | 10.2.7 | enUS | Thunderbad",
"2024-07-23 07:55:32 | INIT | Plater-v583-Retail | Framework v551 | 10.2.7 | enUS | Ggs",
"2024-07-22 21:07:40 | INIT | Plater-v583-Retail | Framework v551 | 10.2.7 | enUS | Mw",
"2024-07-22 20:58:46 | INIT | Plater-v583-Retail | Framework v551 | 10.2.7 | enUS | Ggs",
"2024-07-22 20:51:18 | INIT | Plater-v583-Retail | Framework v551 | 10.2.7 | enUS | Mw",
"2024-07-22 20:50:32 | INIT | Plater-v583-Retail | Framework v551 | 10.2.7 | enUS | Mysticallx",
},
["_error_logs"] = {
},
}
PlaterBackup = {
}
